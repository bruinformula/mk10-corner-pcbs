
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004320  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ec  080044ec  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080044ec  080044ec  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044ec  080044ec  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ec  080044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044f0  080044f0  000054f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  08004500  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08004500  000061a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f380  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f8  00000000  00000000  000153bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000175b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000caa  00000000  00000000  00018610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214a9  00000000  00000000  000192ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011499  00000000  00000000  0003a763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3926  00000000  00000000  0004bbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  0011f568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00123ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004494 	.word	0x08004494

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004494 	.word	0x08004494

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fc12 	bl	80009fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f8b5 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 fa1b 	bl	8000614 <MX_GPIO_Init>
  MX_DMA_Init();
 80001de:	f000 f9fb 	bl	80005d8 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e2:	f000 f901 	bl	80003e8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e6:	f000 f9a3 	bl	8000530 <MX_TIM1_Init>
  MX_SPI1_Init();
 80001ea:	f000 f963 	bl	80004b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001ee:	4847      	ldr	r0, [pc, #284]	@ (800030c <main+0x140>)
 80001f0:	f000 ffa6 	bl	8001140 <HAL_ADC_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2110      	movs	r1, #16
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fc:	f002 f904 	bl	8002408 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000200:	200a      	movs	r0, #10
 8000202:	f000 fc6f 	bl	8000ae4 <HAL_Delay>

  // Possible config codes: 0x8F80, 0xAF80, 0x8E80, 0x8F90
  spi_config = 0x8F80;
 8000206:	4b42      	ldr	r3, [pc, #264]	@ (8000310 <main+0x144>)
 8000208:	f648 7280 	movw	r2, #36736	@ 0x8f80
 800020c:	801a      	strh	r2, [r3, #0]
  spi_configs[0] = (spi_config >> 8) & 0xFF;  // Extract upper 8 bits
 800020e:	4b40      	ldr	r3, [pc, #256]	@ (8000310 <main+0x144>)
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b29b      	uxth	r3, r3
 8000216:	b2da      	uxtb	r2, r3
 8000218:	4b3e      	ldr	r3, [pc, #248]	@ (8000314 <main+0x148>)
 800021a:	701a      	strb	r2, [r3, #0]
  spi_configs[1] = spi_config & 0xFF;         // Extract lower 8 bits
 800021c:	4b3c      	ldr	r3, [pc, #240]	@ (8000310 <main+0x144>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b3c      	ldr	r3, [pc, #240]	@ (8000314 <main+0x148>)
 8000224:	705a      	strb	r2, [r3, #1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  start = HAL_GetTick();
 8000226:	f000 fc51 	bl	8000acc <HAL_GetTick>
 800022a:	4603      	mov	r3, r0
 800022c:	4a3a      	ldr	r2, [pc, #232]	@ (8000318 <main+0x14c>)
 800022e:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  // linear potentiometer
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000230:	2164      	movs	r1, #100	@ 0x64
 8000232:	4836      	ldr	r0, [pc, #216]	@ (800030c <main+0x140>)
 8000234:	f000 ffe7 	bl	8001206 <HAL_ADC_PollForConversion>
	  lin_pot_val = HAL_ADC_GetValue(&hadc1);
 8000238:	4834      	ldr	r0, [pc, #208]	@ (800030c <main+0x140>)
 800023a:	f001 f873 	bl	8001324 <HAL_ADC_GetValue>
 800023e:	4603      	mov	r3, r0
 8000240:	4a36      	ldr	r2, [pc, #216]	@ (800031c <main+0x150>)
 8000242:	6013      	str	r3, [r2, #0]

	  hall_effect_status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000244:	2110      	movs	r1, #16
 8000246:	4836      	ldr	r0, [pc, #216]	@ (8000320 <main+0x154>)
 8000248:	f002 f8c6 	bl	80023d8 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b34      	ldr	r3, [pc, #208]	@ (8000324 <main+0x158>)
 8000252:	701a      	strb	r2, [r3, #0]

	  if (hall_effect_status == GPIO_PIN_SET) {
 8000254:	4b33      	ldr	r3, [pc, #204]	@ (8000324 <main+0x158>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d104      	bne.n	8000266 <main+0x9a>
		  hall_count++;
 800025c:	4b32      	ldr	r3, [pc, #200]	@ (8000328 <main+0x15c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a31      	ldr	r2, [pc, #196]	@ (8000328 <main+0x15c>)
 8000264:	6013      	str	r3, [r2, #0]
	  }

	  elapsed_ms = HAL_GetTick() - start;
 8000266:	f000 fc31 	bl	8000acc <HAL_GetTick>
 800026a:	4602      	mov	r2, r0
 800026c:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <main+0x14c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1ad3      	subs	r3, r2, r3
 8000272:	4a2e      	ldr	r2, [pc, #184]	@ (800032c <main+0x160>)
 8000274:	6013      	str	r3, [r2, #0]
	  if (elapsed_ms >= 500) {
 8000276:	4b2d      	ldr	r3, [pc, #180]	@ (800032c <main+0x160>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800027e:	d31c      	bcc.n	80002ba <main+0xee>
		  wheel_speed = ((float) (hall_count)) / (elapsed_ms / 1000.0f);
 8000280:	4b29      	ldr	r3, [pc, #164]	@ (8000328 <main+0x15c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	ee07 3a90 	vmov	s15, r3
 8000288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800028c:	4b27      	ldr	r3, [pc, #156]	@ (800032c <main+0x160>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	ee07 3a90 	vmov	s15, r3
 8000294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000298:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 8000330 <main+0x164>
 800029c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80002a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002a4:	4b23      	ldr	r3, [pc, #140]	@ (8000334 <main+0x168>)
 80002a6:	edc3 7a00 	vstr	s15, [r3]
		  start = HAL_GetTick();
 80002aa:	f000 fc0f 	bl	8000acc <HAL_GetTick>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a19      	ldr	r2, [pc, #100]	@ (8000318 <main+0x14c>)
 80002b2:	6013      	str	r3, [r2, #0]
		  hall_count = 0;
 80002b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000328 <main+0x15c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]

	  }

	  // strain gauge
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2110      	movs	r1, #16
 80002be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c2:	f002 f8a1 	bl	8002408 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f000 fc0c 	bl	8000ae4 <HAL_Delay>
	  // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);


	  // HAL_SPI_Receive(&hspi1, testval, 2, HAL_MAX_DELAY);

	  HAL_SPI_TransmitReceive(&hspi1, spi_configs, strain_gauge1, 2, HAL_MAX_DELAY);
 80002cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2302      	movs	r3, #2
 80002d4:	4a18      	ldr	r2, [pc, #96]	@ (8000338 <main+0x16c>)
 80002d6:	490f      	ldr	r1, [pc, #60]	@ (8000314 <main+0x148>)
 80002d8:	4818      	ldr	r0, [pc, #96]	@ (800033c <main+0x170>)
 80002da:	f003 fa9c 	bl	8003816 <HAL_SPI_TransmitReceive>

	  st_value = ((strain_gauge1[0] << 8) | strain_gauge1[1]);
 80002de:	4b16      	ldr	r3, [pc, #88]	@ (8000338 <main+0x16c>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	021b      	lsls	r3, r3, #8
 80002e4:	b21a      	sxth	r2, r3
 80002e6:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <main+0x16c>)
 80002e8:	785b      	ldrb	r3, [r3, #1]
 80002ea:	b21b      	sxth	r3, r3
 80002ec:	4313      	orrs	r3, r2
 80002ee:	b21b      	sxth	r3, r3
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <main+0x174>)
 80002f4:	801a      	strh	r2, [r3, #0]
      // HAL_SPI_Receive(&hspi1, (uint8_t*)&strain_gauge, 4, 10);
	  // state = HAL_SPI_GetState(&hspi1);

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2110      	movs	r1, #16
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fe:	f002 f883 	bl	8002408 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000302:	200a      	movs	r0, #10
 8000304:	f000 fbee 	bl	8000ae4 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000308:	e792      	b.n	8000230 <main+0x64>
 800030a:	bf00      	nop
 800030c:	20000028 	.word	0x20000028
 8000310:	20000188 	.word	0x20000188
 8000314:	20000190 	.word	0x20000190
 8000318:	20000198 	.word	0x20000198
 800031c:	20000184 	.word	0x20000184
 8000320:	48000400 	.word	0x48000400
 8000324:	20000192 	.word	0x20000192
 8000328:	20000194 	.word	0x20000194
 800032c:	2000019c 	.word	0x2000019c
 8000330:	447a0000 	.word	0x447a0000
 8000334:	200001a0 	.word	0x200001a0
 8000338:	2000018c 	.word	0x2000018c
 800033c:	200000d4 	.word	0x200000d4
 8000340:	2000018e 	.word	0x2000018e

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b096      	sub	sp, #88	@ 0x58
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	2244      	movs	r2, #68	@ 0x44
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 f872 	bl	800443c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000366:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800036a:	f002 f873 	bl	8002454 <HAL_PWREx_ControlVoltageScaling>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000374:	f000 f99a 	bl	80006ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000378:	2310      	movs	r3, #16
 800037a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800037c:	2301      	movs	r3, #1
 800037e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000384:	2360      	movs	r3, #96	@ 0x60
 8000386:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000388:	2302      	movs	r3, #2
 800038a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800038c:	2301      	movs	r3, #1
 800038e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000390:	2301      	movs	r3, #1
 8000392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000394:	2310      	movs	r3, #16
 8000396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000398:	2307      	movs	r3, #7
 800039a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800039c:	2302      	movs	r3, #2
 800039e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 f8a9 	bl	8002500 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003b4:	f000 f97a 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2303      	movs	r3, #3
 80003be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003cc:	463b      	mov	r3, r7
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fca9 	bl	8002d28 <HAL_RCC_ClockConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003dc:	f000 f966 	bl	80006ac <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3758      	adds	r7, #88	@ 0x58
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fe:	4b2a      	ldr	r3, [pc, #168]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000400:	4a2a      	ldr	r2, [pc, #168]	@ (80004ac <MX_ADC1_Init+0xc4>)
 8000402:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000404:	4b28      	ldr	r3, [pc, #160]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000406:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800040a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040c:	4b26      	ldr	r3, [pc, #152]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000412:	4b25      	ldr	r3, [pc, #148]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000414:	2200      	movs	r2, #0
 8000416:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000418:	4b23      	ldr	r3, [pc, #140]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041e:	4b22      	ldr	r3, [pc, #136]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000420:	2204      	movs	r2, #4
 8000422:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000424:	4b20      	ldr	r3, [pc, #128]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000426:	2200      	movs	r2, #0
 8000428:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800042a:	4b1f      	ldr	r3, [pc, #124]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 800042c:	2201      	movs	r2, #1
 800042e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000430:	4b1d      	ldr	r3, [pc, #116]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000432:	2201      	movs	r2, #1
 8000434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000436:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000440:	2200      	movs	r2, #0
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000444:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000446:	2200      	movs	r2, #0
 8000448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000452:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000454:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000458:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000462:	4811      	ldr	r0, [pc, #68]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000464:	f000 fd2a 	bl	8000ebc <HAL_ADC_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800046e:	f000 f91d 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_ADC1_Init+0xc8>)
 8000474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000476:	2306      	movs	r3, #6
 8000478:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800047a:	2302      	movs	r3, #2
 800047c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800047e:	237f      	movs	r3, #127	@ 0x7f
 8000480:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000482:	2304      	movs	r3, #4
 8000484:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048a:	463b      	mov	r3, r7
 800048c:	4619      	mov	r1, r3
 800048e:	4806      	ldr	r0, [pc, #24]	@ (80004a8 <MX_ADC1_Init+0xc0>)
 8000490:	f000 ff56 	bl	8001340 <HAL_ADC_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800049a:	f000 f907 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000028 	.word	0x20000028
 80004ac:	50040000 	.word	0x50040000
 80004b0:	14f00020 	.word	0x14f00020

080004b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <MX_SPI1_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004c6:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80004cc:	4b16      	ldr	r3, [pc, #88]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004ce:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80004d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004da:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <MX_SPI1_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000500:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <MX_SPI1_Init+0x74>)
 8000502:	2207      	movs	r2, #7
 8000504:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000506:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <MX_SPI1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <MX_SPI1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <MX_SPI1_Init+0x74>)
 8000514:	f003 f8dc 	bl	80036d0 <HAL_SPI_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 f8c5 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000d4 	.word	0x200000d4
 800052c:	40013000 	.word	0x40013000

08000530 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800054e:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 8000550:	4a20      	ldr	r2, [pc, #128]	@ (80005d4 <MX_TIM1_Init+0xa4>)
 8000552:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 8000556:	2204      	movs	r2, #4
 8000558:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 8000562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000566:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 8000570:	2200      	movs	r2, #0
 8000572:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000574:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 8000576:	2200      	movs	r2, #0
 8000578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800057a:	4815      	ldr	r0, [pc, #84]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 800057c:	f003 fcce 	bl	8003f1c <HAL_TIM_Base_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000586:	f000 f891 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800058a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	480e      	ldr	r0, [pc, #56]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 8000598:	f003 fd17 	bl	8003fca <HAL_TIM_ConfigClockSource>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005a2:	f000 f883 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80005ae:	2380      	movs	r3, #128	@ 0x80
 80005b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <MX_TIM1_Init+0xa0>)
 80005b8:	f003 feda 	bl	8004370 <HAL_TIMEx_MasterConfigSynchronization>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005c2:	f000 f873 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000138 	.word	0x20000138
 80005d4:	40012c00 	.word	0x40012c00

080005d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_DMA_Init+0x38>)
 80005e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <MX_DMA_Init+0x38>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_DMA_Init+0x38>)
 80005ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	200b      	movs	r0, #11
 80005fc:	f001 fbe3 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000600:	200b      	movs	r0, #11
 8000602:	f001 fbfc 	bl	8001dfe <HAL_NVIC_EnableIRQ>

}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_GPIO_Init+0x90>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a1d      	ldr	r2, [pc, #116]	@ (80006a4 <MX_GPIO_Init+0x90>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_GPIO_Init+0x90>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <MX_GPIO_Init+0x90>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a17      	ldr	r2, [pc, #92]	@ (80006a4 <MX_GPIO_Init+0x90>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_GPIO_Init+0x90>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2110      	movs	r1, #16
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f001 fed1 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000666:	2310      	movs	r3, #16
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2302      	movs	r3, #2
 8000674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f001 fd40 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000684:	2310      	movs	r3, #16
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <MX_GPIO_Init+0x94>)
 8000698:	f001 fd34 	bl	8002104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000400 	.word	0x48000400

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_MspInit+0x44>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_MspInit+0x44>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09e      	sub	sp, #120	@ 0x78
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2254      	movs	r2, #84	@ 0x54
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fe8b 	bl	800443c <memset>
  if(hadc->Instance==ADC1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a3b      	ldr	r2, [pc, #236]	@ (8000818 <HAL_ADC_MspInit+0x118>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d16e      	bne.n	800080e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000730:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000734:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000736:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800073a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800073c:	2301      	movs	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000748:	2307      	movs	r3, #7
 800074a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fcce 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800076a:	f7ff ff9f 	bl	80006ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800076e:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <HAL_ADC_MspInit+0x11c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a2a      	ldr	r2, [pc, #168]	@ (800081c <HAL_ADC_MspInit+0x11c>)
 8000774:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <HAL_ADC_MspInit+0x11c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b25      	ldr	r3, [pc, #148]	@ (800081c <HAL_ADC_MspInit+0x11c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a24      	ldr	r2, [pc, #144]	@ (800081c <HAL_ADC_MspInit+0x11c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b22      	ldr	r3, [pc, #136]	@ (800081c <HAL_ADC_MspInit+0x11c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800079e:	2301      	movs	r3, #1
 80007a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007a2:	230b      	movs	r3, #11
 80007a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f001 fca6 	bl	8002104 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000824 <HAL_ADC_MspInit+0x124>)
 80007bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007f2:	480b      	ldr	r0, [pc, #44]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 80007f4:	f001 fb1e 	bl	8001e34 <HAL_DMA_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80007fe:	f7ff ff55 	bl	80006ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a06      	ldr	r2, [pc, #24]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 8000806:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000808:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <HAL_ADC_MspInit+0x120>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800080e:	bf00      	nop
 8000810:	3778      	adds	r7, #120	@ 0x78
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	50040000 	.word	0x50040000
 800081c:	40021000 	.word	0x40021000
 8000820:	2000008c 	.word	0x2000008c
 8000824:	40020008 	.word	0x40020008

08000828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <HAL_SPI_MspInit+0xa0>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d139      	bne.n	80008be <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <HAL_SPI_MspInit+0xa4>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	4a1f      	ldr	r2, [pc, #124]	@ (80008cc <HAL_SPI_MspInit+0xa4>)
 8000850:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000854:	6613      	str	r3, [r2, #96]	@ 0x60
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <HAL_SPI_MspInit+0xa4>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <HAL_SPI_MspInit+0xa4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a19      	ldr	r2, [pc, #100]	@ (80008cc <HAL_SPI_MspInit+0xa4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_SPI_MspInit+0xa4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800087a:	23a0      	movs	r3, #160	@ 0xa0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088a:	2305      	movs	r3, #5
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f001 fc34 	bl	8002104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089c:	2340      	movs	r3, #64	@ 0x40
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ac:	2305      	movs	r3, #5
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f001 fc23 	bl	8002104 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	@ 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40013000 	.word	0x40013000
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_TIM_Base_MspInit+0x38>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d10b      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_TIM_Base_MspInit+0x3c>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a09      	ldr	r2, [pc, #36]	@ (800090c <HAL_TIM_Base_MspInit+0x3c>)
 80008e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <HAL_TIM_Base_MspInit+0x3c>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40012c00 	.word	0x40012c00
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <UsageFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f000 f89d 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <DMA1_Channel1_IRQHandler+0x10>)
 8000976:	f001 fb15 	bl	8001fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000008c 	.word	0x2000008c

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ac:	f7ff ffea 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f003 fd39 	bl	800444c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009da:	f7ff fbf7 	bl	80001cc <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009e0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ec:	080044f4 	.word	0x080044f4
  ldr r2, =_sbss
 80009f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f4:	200001a8 	.word	0x200001a8

080009f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_IRQHandler>

080009fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f001 f9d3 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f80e 	bl	8000a2c <HAL_InitTick>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	e001      	b.n	8000a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a1c:	f7ff fe4c 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_InitTick+0x6c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d023      	beq.n	8000a88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a40:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <HAL_InitTick+0x70>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_InitTick+0x6c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f9df 	bl	8001e1a <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10f      	bne.n	8000a82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d809      	bhi.n	8000a7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a70:	f001 f9a9 	bl	8001dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a74:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_InitTick+0x74>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	e007      	b.n	8000a8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e004      	b.n	8000a8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	e001      	b.n	8000a8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	200001a4 	.word	0x200001a4

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200001a4 	.word	0x200001a4

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff ffee 	bl	8000acc <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffde 	bl	8000acc <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008

08000b2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	431a      	orrs	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	609a      	str	r2, [r3, #8]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3360      	adds	r3, #96	@ 0x60
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <LL_ADC_SetOffset+0x44>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	03fff000 	.word	0x03fff000

08000bdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3360      	adds	r3, #96	@ 0x60
 8000bea:	461a      	mov	r2, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3360      	adds	r3, #96	@ 0x60
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c32:	bf00      	nop
 8000c34:	371c      	adds	r7, #28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3330      	adds	r3, #48	@ 0x30
 8000c74:	461a      	mov	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	f003 030c 	and.w	r3, r3, #12
 8000c80:	4413      	add	r3, r2
 8000c82:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	f003 031f 	and.w	r3, r3, #31
 8000c8e:	211f      	movs	r1, #31
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	0e9b      	lsrs	r3, r3, #26
 8000c9c:	f003 011f 	and.w	r1, r3, #31
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	431a      	orrs	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cb0:	bf00      	nop
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3314      	adds	r3, #20
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	0e5b      	lsrs	r3, r3, #25
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	0d1b      	lsrs	r3, r3, #20
 8000ce4:	f003 031f 	and.w	r3, r3, #31
 8000ce8:	2107      	movs	r1, #7
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	0d1b      	lsrs	r3, r3, #20
 8000cf6:	f003 031f 	and.w	r3, r3, #31
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	431a      	orrs	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d06:	bf00      	nop
 8000d08:	371c      	adds	r7, #28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	401a      	ands	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0318 	and.w	r3, r3, #24
 8000d36:	4908      	ldr	r1, [pc, #32]	@ (8000d58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d38:	40d9      	lsrs	r1, r3
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	400b      	ands	r3, r1
 8000d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d42:	431a      	orrs	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	0007ffff 	.word	0x0007ffff

08000d5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000d6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6093      	str	r3, [r2, #8]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d94:	d101      	bne.n	8000d9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000db8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000dbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000de4:	d101      	bne.n	8000dea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <LL_ADC_IsEnabled+0x18>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <LL_ADC_IsEnabled+0x1a>
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e5a:	f043 0204 	orr.w	r2, r3, #4
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	d101      	bne.n	8000e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d101      	bne.n	8000eac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e126      	b.n	8001124 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fc0b 	bl	8000700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff3f 	bl	8000d80 <LL_ADC_IsDeepPowerDownEnabled>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff25 	bl	8000d5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff5a 	bl	8000dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d115      	bne.n	8000f4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff3e 	bl	8000da8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f2c:	4b7f      	ldr	r3, [pc, #508]	@ (800112c <HAL_ADC_Init+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	099b      	lsrs	r3, r3, #6
 8000f32:	4a7f      	ldr	r2, [pc, #508]	@ (8001130 <HAL_ADC_Init+0x274>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	099b      	lsrs	r3, r3, #6
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f40:	e002      	b.n	8000f48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff3c 	bl	8000dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10d      	bne.n	8000f7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f62:	f043 0210 	orr.w	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff75 	bl	8000e6e <LL_ADC_REG_IsConversionOngoing>
 8000f84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f040 80bf 	bne.w	8001112 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 80bb 	bne.w	8001112 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000fa4:	f043 0202 	orr.w	r2, r3, #2
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff35 	bl	8000e20 <LL_ADC_IsEnabled>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10b      	bne.n	8000fd4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fbc:	485d      	ldr	r0, [pc, #372]	@ (8001134 <HAL_ADC_Init+0x278>)
 8000fbe:	f7ff ff2f 	bl	8000e20 <LL_ADC_IsEnabled>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d105      	bne.n	8000fd4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	485a      	ldr	r0, [pc, #360]	@ (8001138 <HAL_ADC_Init+0x27c>)
 8000fd0:	f7ff fdac 	bl	8000b2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7e5b      	ldrb	r3, [r3, #25]
 8000fd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000fe4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000fea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d106      	bne.n	8001010 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001006:	3b01      	subs	r3, #1
 8001008:	045b      	lsls	r3, r3, #17
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d009      	beq.n	800102c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001024:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	4b42      	ldr	r3, [pc, #264]	@ (800113c <HAL_ADC_Init+0x280>)
 8001034:	4013      	ands	r3, r2
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	69b9      	ldr	r1, [r7, #24]
 800103c:	430b      	orrs	r3, r1
 800103e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff25 	bl	8000e94 <LL_ADC_INJ_IsConversionOngoing>
 800104a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d13d      	bne.n	80010ce <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d13a      	bne.n	80010ce <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800105c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001064:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001074:	f023 0302 	bic.w	r3, r3, #2
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	69b9      	ldr	r1, [r7, #24]
 800107e:	430b      	orrs	r3, r1
 8001080:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001088:	2b01      	cmp	r3, #1
 800108a:	d118      	bne.n	80010be <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001096:	f023 0304 	bic.w	r3, r3, #4
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80010a2:	4311      	orrs	r1, r2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80010a8:	4311      	orrs	r1, r2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80010ae:	430a      	orrs	r2, r1
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	e007      	b.n	80010ce <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10c      	bne.n	80010f0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010dc:	f023 010f 	bic.w	r1, r3, #15
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80010ee:	e007      	b.n	8001100 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 020f 	bic.w	r2, r2, #15
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001104:	f023 0303 	bic.w	r3, r3, #3
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001110:	e007      	b.n	8001122 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	f043 0210 	orr.w	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001122:	7ffb      	ldrb	r3, [r7, #31]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	053e2d63 	.word	0x053e2d63
 8001134:	50040000 	.word	0x50040000
 8001138:	50040300 	.word	0x50040300
 800113c:	fff0c007 	.word	0xfff0c007

08001140 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe8e 	bl	8000e6e <LL_ADC_REG_IsConversionOngoing>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d14f      	bne.n	80011f8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_Start+0x26>
 8001162:	2302      	movs	r3, #2
 8001164:	e04b      	b.n	80011fe <HAL_ADC_Start+0xbe>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fcc8 	bl	8001b04 <ADC_Enable>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d137      	bne.n	80011ee <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001182:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800119a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800119e:	d106      	bne.n	80011ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	f023 0206 	bic.w	r2, r3, #6
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	221c      	movs	r2, #28
 80011ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe2d 	bl	8000e46 <LL_ADC_REG_StartConversion>
 80011ec:	e006      	b.n	80011fc <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80011f6:	e001      	b.n	80011fc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011f8:	2302      	movs	r3, #2
 80011fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	2b08      	cmp	r3, #8
 8001216:	d102      	bne.n	800121e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001218:	2308      	movs	r3, #8
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e010      	b.n	8001240 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001230:	f043 0220 	orr.w	r2, r3, #32
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e06f      	b.n	800131c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800123c:	2304      	movs	r3, #4
 800123e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001240:	f7ff fc44 	bl	8000acc <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001246:	e021      	b.n	800128c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800124e:	d01d      	beq.n	800128c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001250:	f7ff fc3c 	bl	8000acc <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d302      	bcc.n	8001266 <HAL_ADC_PollForConversion+0x60>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d112      	bne.n	800128c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10b      	bne.n	800128c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001278:	f043 0204 	orr.w	r2, r3, #4
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e047      	b.n	800131c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0d6      	beq.n	8001248 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fcc7 	bl	8000c3e <LL_ADC_REG_IsTriggerSourceSWStart>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d01c      	beq.n	80012f0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7e5b      	ldrb	r3, [r3, #25]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d111      	bne.n	80012f0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d105      	bne.n	80012f0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d104      	bne.n	8001308 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2208      	movs	r2, #8
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e008      	b.n	800131a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0b6      	sub	sp, #216	@ 0xd8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x22>
 800135e:	2302      	movs	r3, #2
 8001360:	e3bb      	b.n	8001ada <HAL_ADC_ConfigChannel+0x79a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd7d 	bl	8000e6e <LL_ADC_REG_IsConversionOngoing>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 83a0 	bne.w	8001abc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d824      	bhi.n	80013d6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	3b02      	subs	r3, #2
 8001392:	2b03      	cmp	r3, #3
 8001394:	d81b      	bhi.n	80013ce <HAL_ADC_ConfigChannel+0x8e>
 8001396:	a201      	add	r2, pc, #4	@ (adr r2, 800139c <HAL_ADC_ConfigChannel+0x5c>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	080013ad 	.word	0x080013ad
 80013a0:	080013b5 	.word	0x080013b5
 80013a4:	080013bd 	.word	0x080013bd
 80013a8:	080013c5 	.word	0x080013c5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80013ac:	230c      	movs	r3, #12
 80013ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013b2:	e010      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80013b4:	2312      	movs	r3, #18
 80013b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013ba:	e00c      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80013bc:	2318      	movs	r3, #24
 80013be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013c2:	e008      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80013c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013cc:	e003      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80013ce:	2306      	movs	r3, #6
 80013d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80013d4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80013e4:	f7ff fc3e 	bl	8000c64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd3e 	bl	8000e6e <LL_ADC_REG_IsConversionOngoing>
 80013f2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fd4a 	bl	8000e94 <LL_ADC_INJ_IsConversionOngoing>
 8001400:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001408:	2b00      	cmp	r3, #0
 800140a:	f040 81a4 	bne.w	8001756 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800140e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 819f 	bne.w	8001756 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	461a      	mov	r2, r3
 8001426:	f7ff fc49 	bl	8000cbc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d00a      	beq.n	8001462 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6919      	ldr	r1, [r3, #16]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800145c:	f7ff fb9a 	bl	8000b94 <LL_ADC_SetOffset>
 8001460:	e179      	b.n	8001756 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fbb7 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10a      	bne.n	800148e <HAL_ADC_ConfigChannel+0x14e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fbac 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	0e9b      	lsrs	r3, r3, #26
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	e01e      	b.n	80014cc <HAL_ADC_ConfigChannel+0x18c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fba1 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80014bc:	2320      	movs	r3, #32
 80014be:	e004      	b.n	80014ca <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80014c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x1a4>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0e9b      	lsrs	r3, r3, #26
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	e018      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1d6>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80014f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001500:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001508:	2320      	movs	r3, #32
 800150a:	e004      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800150c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001516:	429a      	cmp	r2, r3
 8001518:	d106      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fb70 	bl	8000c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fb54 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10a      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x214>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb49 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	0e9b      	lsrs	r3, r3, #26
 800154e:	f003 021f 	and.w	r2, r3, #31
 8001552:	e01e      	b.n	8001592 <HAL_ADC_ConfigChannel+0x252>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fb3e 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001572:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800157a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001582:	2320      	movs	r3, #32
 8001584:	e004      	b.n	8001590 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159a:	2b00      	cmp	r3, #0
 800159c:	d105      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x26a>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0e9b      	lsrs	r3, r3, #26
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	e018      	b.n	80015dc <HAL_ADC_ConfigChannel+0x29c>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80015be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80015c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80015ce:	2320      	movs	r3, #32
 80015d0:	e004      	b.n	80015dc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80015d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015dc:	429a      	cmp	r2, r3
 80015de:	d106      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fb0d 	bl	8000c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2102      	movs	r1, #2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff faf1 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <HAL_ADC_ConfigChannel+0x2da>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2102      	movs	r1, #2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fae6 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	0e9b      	lsrs	r3, r3, #26
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	e01e      	b.n	8001658 <HAL_ADC_ConfigChannel+0x318>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fadb 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001638:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800163c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001648:	2320      	movs	r3, #32
 800164a:	e004      	b.n	8001656 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800164c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001650:	fab3 f383 	clz	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x330>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0e9b      	lsrs	r3, r3, #26
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	e014      	b.n	800169a <HAL_ADC_ConfigChannel+0x35a>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800167e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800168c:	2320      	movs	r3, #32
 800168e:	e004      	b.n	800169a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001690:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800169a:	429a      	cmp	r2, r3
 800169c:	d106      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	2102      	movs	r1, #2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff faae 	bl	8000c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2103      	movs	r1, #3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fa92 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10a      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x398>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2103      	movs	r1, #3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fa87 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	0e9b      	lsrs	r3, r3, #26
 80016d2:	f003 021f 	and.w	r2, r3, #31
 80016d6:	e017      	b.n	8001708 <HAL_ADC_ConfigChannel+0x3c8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2103      	movs	r1, #3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fa7c 	bl	8000bdc <LL_ADC_GetOffsetChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80016f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016f2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80016f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80016fa:	2320      	movs	r3, #32
 80016fc:	e003      	b.n	8001706 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80016fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x3e0>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0e9b      	lsrs	r3, r3, #26
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	e011      	b.n	8001744 <HAL_ADC_ConfigChannel+0x404>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800172e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001730:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001738:	2320      	movs	r3, #32
 800173a:	e003      	b.n	8001744 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800173c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001744:	429a      	cmp	r2, r3
 8001746:	d106      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	2103      	movs	r1, #3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fa59 	bl	8000c08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fb60 	bl	8000e20 <LL_ADC_IsEnabled>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 8140 	bne.w	80019e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	461a      	mov	r2, r3
 8001776:	f7ff facd 	bl	8000d14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4a8f      	ldr	r2, [pc, #572]	@ (80019bc <HAL_ADC_ConfigChannel+0x67c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	f040 8131 	bne.w	80019e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10b      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x46e>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	0e9b      	lsrs	r3, r3, #26
 800179c:	3301      	adds	r3, #1
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	2b09      	cmp	r3, #9
 80017a4:	bf94      	ite	ls
 80017a6:	2301      	movls	r3, #1
 80017a8:	2300      	movhi	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	e019      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x4a2>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80017bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80017c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80017c6:	2320      	movs	r3, #32
 80017c8:	e003      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80017ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	2b09      	cmp	r3, #9
 80017da:	bf94      	ite	ls
 80017dc:	2301      	movls	r3, #1
 80017de:	2300      	movhi	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d079      	beq.n	80018da <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x4c2>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0e9b      	lsrs	r3, r3, #26
 80017f8:	3301      	adds	r3, #1
 80017fa:	069b      	lsls	r3, r3, #26
 80017fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001800:	e015      	b.n	800182e <HAL_ADC_ConfigChannel+0x4ee>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001812:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800181a:	2320      	movs	r3, #32
 800181c:	e003      	b.n	8001826 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800181e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3301      	adds	r3, #1
 8001828:	069b      	lsls	r3, r3, #26
 800182a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_ADC_ConfigChannel+0x50e>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0e9b      	lsrs	r3, r3, #26
 8001840:	3301      	adds	r3, #1
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	e017      	b.n	800187e <HAL_ADC_ConfigChannel+0x53e>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800185c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800185e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001866:	2320      	movs	r3, #32
 8001868:	e003      	b.n	8001872 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800186a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	ea42 0103 	orr.w	r1, r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10a      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x564>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0e9b      	lsrs	r3, r3, #26
 8001894:	3301      	adds	r3, #1
 8001896:	f003 021f 	and.w	r2, r3, #31
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	051b      	lsls	r3, r3, #20
 80018a2:	e018      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x596>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ac:	fa93 f3a3 	rbit	r3, r3
 80018b0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80018b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80018b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80018bc:	2320      	movs	r3, #32
 80018be:	e003      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80018c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	f003 021f 	and.w	r2, r3, #31
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d6:	430b      	orrs	r3, r1
 80018d8:	e081      	b.n	80019de <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d107      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x5b6>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	3301      	adds	r3, #1
 80018ee:	069b      	lsls	r3, r3, #26
 80018f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018f4:	e015      	b.n	8001922 <HAL_ADC_ConfigChannel+0x5e2>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800190e:	2320      	movs	r3, #32
 8001910:	e003      	b.n	800191a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	069b      	lsls	r3, r3, #26
 800191e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x602>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0e9b      	lsrs	r3, r3, #26
 8001934:	3301      	adds	r3, #1
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	2101      	movs	r1, #1
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	e017      	b.n	8001972 <HAL_ADC_ConfigChannel+0x632>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	61bb      	str	r3, [r7, #24]
  return result;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800195a:	2320      	movs	r3, #32
 800195c:	e003      	b.n	8001966 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	3301      	adds	r3, #1
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	ea42 0103 	orr.w	r1, r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10d      	bne.n	800199e <HAL_ADC_ConfigChannel+0x65e>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	3301      	adds	r3, #1
 800198a:	f003 021f 	and.w	r2, r3, #31
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	3b1e      	subs	r3, #30
 8001996:	051b      	lsls	r3, r3, #20
 8001998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800199c:	e01e      	b.n	80019dc <HAL_ADC_ConfigChannel+0x69c>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	60fb      	str	r3, [r7, #12]
  return result;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d104      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e006      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x688>
 80019ba:	bf00      	nop
 80019bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	f003 021f 	and.w	r2, r3, #31
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	3b1e      	subs	r3, #30
 80019d6:	051b      	lsls	r3, r3, #20
 80019d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f96a 	bl	8000cbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x7a4>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d06c      	beq.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019f4:	483c      	ldr	r0, [pc, #240]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 80019f6:	f7ff f8bf 	bl	8000b78 <LL_ADC_GetCommonPathInternalCh>
 80019fa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a3a      	ldr	r2, [pc, #232]	@ (8001aec <HAL_ADC_ConfigChannel+0x7ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d127      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d121      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a35      	ldr	r2, [pc, #212]	@ (8001af0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d157      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a26:	4619      	mov	r1, r3
 8001a28:	482f      	ldr	r0, [pc, #188]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a2a:	f7ff f892 	bl	8000b52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <HAL_ADC_ConfigChannel+0x7b4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	099b      	lsrs	r3, r3, #6
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001a48:	e002      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f9      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a56:	e03a      	b.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <HAL_ADC_ConfigChannel+0x7bc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d113      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10d      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d12a      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a80:	4619      	mov	r1, r3
 8001a82:	4819      	ldr	r0, [pc, #100]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001a84:	f7ff f865 	bl	8000b52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a88:	e021      	b.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d11c      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d116      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d111      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001aae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ab6:	f7ff f84c 	bl	8000b52 <LL_ADC_SetCommonPathInternalCh>
 8001aba:	e008      	b.n	8001ace <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac0:	f043 0220 	orr.w	r2, r3, #32
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ad6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	37d8      	adds	r7, #216	@ 0xd8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	80080000 	.word	0x80080000
 8001ae8:	50040300 	.word	0x50040300
 8001aec:	c7520000 	.word	0xc7520000
 8001af0:	50040000 	.word	0x50040000
 8001af4:	20000000 	.word	0x20000000
 8001af8:	053e2d63 	.word	0x053e2d63
 8001afc:	cb840000 	.word	0xcb840000
 8001b00:	80000001 	.word	0x80000001

08001b04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f983 	bl	8000e20 <LL_ADC_IsEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d169      	bne.n	8001bf4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	4b36      	ldr	r3, [pc, #216]	@ (8001c00 <ADC_Enable+0xfc>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e055      	b.n	8001bf6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f952 	bl	8000df8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001b54:	482b      	ldr	r0, [pc, #172]	@ (8001c04 <ADC_Enable+0x100>)
 8001b56:	f7ff f80f 	bl	8000b78 <LL_ADC_GetCommonPathInternalCh>
 8001b5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b64:	4b28      	ldr	r3, [pc, #160]	@ (8001c08 <ADC_Enable+0x104>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	4a28      	ldr	r2, [pc, #160]	@ (8001c0c <ADC_Enable+0x108>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b7e:	e002      	b.n	8001b86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f9      	bne.n	8001b80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe ff9e 	bl	8000acc <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b92:	e028      	b.n	8001be6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f941 	bl	8000e20 <LL_ADC_IsEnabled>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f925 	bl	8000df8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bae:	f7fe ff8d 	bl	8000acc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d914      	bls.n	8001be6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d00d      	beq.n	8001be6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bce:	f043 0210 	orr.w	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	f043 0201 	orr.w	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e007      	b.n	8001bf6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d1cf      	bne.n	8001b94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	8000003f 	.word	0x8000003f
 8001c04:	50040300 	.word	0x50040300
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	053e2d63 	.word	0x053e2d63

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	@ (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	@ (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e098      	b.n	8001f78 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <HAL_DMA_Init+0x150>)
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d80f      	bhi.n	8001e72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b4b      	ldr	r3, [pc, #300]	@ (8001f88 <HAL_DMA_Init+0x154>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f8c <HAL_DMA_Init+0x158>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	009a      	lsls	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a48      	ldr	r2, [pc, #288]	@ (8001f90 <HAL_DMA_Init+0x15c>)
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e70:	e00e      	b.n	8001e90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b46      	ldr	r3, [pc, #280]	@ (8001f94 <HAL_DMA_Init+0x160>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a43      	ldr	r2, [pc, #268]	@ (8001f8c <HAL_DMA_Init+0x158>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a42      	ldr	r2, [pc, #264]	@ (8001f98 <HAL_DMA_Init+0x164>)
 8001e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eea:	d039      	beq.n	8001f60 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	4a27      	ldr	r2, [pc, #156]	@ (8001f90 <HAL_DMA_Init+0x15c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d11a      	bne.n	8001f2c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ef6:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <HAL_DMA_Init+0x168>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f003 031c 	and.w	r3, r3, #28
 8001f02:	210f      	movs	r1, #15
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4924      	ldr	r1, [pc, #144]	@ (8001f9c <HAL_DMA_Init+0x168>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f10:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <HAL_DMA_Init+0x168>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	f003 031c 	and.w	r3, r3, #28
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	491d      	ldr	r1, [pc, #116]	@ (8001f9c <HAL_DMA_Init+0x168>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
 8001f2a:	e019      	b.n	8001f60 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <HAL_DMA_Init+0x16c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	f003 031c 	and.w	r3, r3, #28
 8001f38:	210f      	movs	r1, #15
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	4917      	ldr	r1, [pc, #92]	@ (8001fa0 <HAL_DMA_Init+0x16c>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <HAL_DMA_Init+0x16c>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f003 031c 	and.w	r3, r3, #28
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	4911      	ldr	r1, [pc, #68]	@ (8001fa0 <HAL_DMA_Init+0x16c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40020407 	.word	0x40020407
 8001f88:	bffdfff8 	.word	0xbffdfff8
 8001f8c:	cccccccd 	.word	0xcccccccd
 8001f90:	40020000 	.word	0x40020000
 8001f94:	bffdfbf8 	.word	0xbffdfbf8
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	400200a8 	.word	0x400200a8
 8001fa0:	400204a8 	.word	0x400204a8

08001fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	f003 031c 	and.w	r3, r3, #28
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d026      	beq.n	800201e <HAL_DMA_IRQHandler+0x7a>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d021      	beq.n	800201e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0204 	bic.w	r2, r2, #4
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	f003 021c 	and.w	r2, r3, #28
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	2104      	movs	r1, #4
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	2b00      	cmp	r3, #0
 8002012:	d071      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800201c:	e06c      	b.n	80020f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f003 031c 	and.w	r3, r3, #28
 8002026:	2202      	movs	r2, #2
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02e      	beq.n	8002090 <HAL_DMA_IRQHandler+0xec>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d029      	beq.n	8002090 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 020a 	bic.w	r2, r2, #10
 8002058:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f003 021c 	and.w	r2, r3, #28
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	2102      	movs	r1, #2
 8002070:	fa01 f202 	lsl.w	r2, r1, r2
 8002074:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d038      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800208e:	e033      	b.n	80020f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	f003 031c 	and.w	r3, r3, #28
 8002098:	2208      	movs	r2, #8
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d02a      	beq.n	80020fa <HAL_DMA_IRQHandler+0x156>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d025      	beq.n	80020fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 020e 	bic.w	r2, r2, #14
 80020bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f003 021c 	and.w	r2, r3, #28
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
}
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002112:	e148      	b.n	80023a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 813a 	beq.w	80023a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d005      	beq.n	8002144 <HAL_GPIO_Init+0x40>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d130      	bne.n	80021a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800217a:	2201      	movs	r2, #1
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 0201 	and.w	r2, r3, #1
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d017      	beq.n	80021e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d123      	bne.n	8002236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	6939      	ldr	r1, [r7, #16]
 8002232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0203 	and.w	r2, r3, #3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8094 	beq.w	80023a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002278:	4b52      	ldr	r3, [pc, #328]	@ (80023c4 <HAL_GPIO_Init+0x2c0>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227c:	4a51      	ldr	r2, [pc, #324]	@ (80023c4 <HAL_GPIO_Init+0x2c0>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6613      	str	r3, [r2, #96]	@ 0x60
 8002284:	4b4f      	ldr	r3, [pc, #316]	@ (80023c4 <HAL_GPIO_Init+0x2c0>)
 8002286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002290:	4a4d      	ldr	r2, [pc, #308]	@ (80023c8 <HAL_GPIO_Init+0x2c4>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022ba:	d00d      	beq.n	80022d8 <HAL_GPIO_Init+0x1d4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a43      	ldr	r2, [pc, #268]	@ (80023cc <HAL_GPIO_Init+0x2c8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x1d0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a42      	ldr	r2, [pc, #264]	@ (80023d0 <HAL_GPIO_Init+0x2cc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_GPIO_Init+0x1cc>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e004      	b.n	80022da <HAL_GPIO_Init+0x1d6>
 80022d0:	2307      	movs	r3, #7
 80022d2:	e002      	b.n	80022da <HAL_GPIO_Init+0x1d6>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_GPIO_Init+0x1d6>
 80022d8:	2300      	movs	r3, #0
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	f002 0203 	and.w	r2, r2, #3
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	4093      	lsls	r3, r2
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ea:	4937      	ldr	r1, [pc, #220]	@ (80023c8 <HAL_GPIO_Init+0x2c4>)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022f8:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800231c:	4a2d      	ldr	r2, [pc, #180]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002322:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002346:	4a23      	ldr	r2, [pc, #140]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002370:	4a18      	ldr	r2, [pc, #96]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002376:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800239a:	4a0e      	ldr	r2, [pc, #56]	@ (80023d4 <HAL_GPIO_Init+0x2d0>)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f47f aeaf 	bne.w	8002114 <HAL_GPIO_Init+0x10>
  }
}
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010000 	.word	0x40010000
 80023cc:	48000400 	.word	0x48000400
 80023d0:	48000800 	.word	0x48000800
 80023d4:	40010400 	.word	0x40010400

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002424:	e002      	b.n	800242c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <HAL_PWREx_GetVoltageRange+0x18>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002462:	d130      	bne.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800246c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002470:	d038      	beq.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800247a:	4a1e      	ldr	r2, [pc, #120]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002482:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2232      	movs	r2, #50	@ 0x32
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	4a1b      	ldr	r2, [pc, #108]	@ (80024fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	3301      	adds	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002498:	e002      	b.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3b01      	subs	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ac:	d102      	bne.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f2      	bne.n	800249a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c0:	d110      	bne.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e00f      	b.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d2:	d007      	beq.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024dc:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40007000 	.word	0x40007000
 80024f8:	20000000 	.word	0x20000000
 80024fc:	431bde83 	.word	0x431bde83

08002500 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	f000 bc02 	b.w	8002d18 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002514:	4b96      	ldr	r3, [pc, #600]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800251e:	4b94      	ldr	r3, [pc, #592]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80e4 	beq.w	80026fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_RCC_OscConfig+0x4c>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	f040 808b 	bne.w	800265a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 8087 	bne.w	800265a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254c:	4b88      	ldr	r3, [pc, #544]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x64>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e3d9      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	4b81      	ldr	r3, [pc, #516]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_RCC_OscConfig+0x7e>
 8002574:	4b7e      	ldr	r3, [pc, #504]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800257c:	e005      	b.n	800258a <HAL_RCC_OscConfig+0x8a>
 800257e:	4b7c      	ldr	r3, [pc, #496]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258a:	4293      	cmp	r3, r2
 800258c:	d223      	bcs.n	80025d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fd54 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e3ba      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a2:	4b73      	ldr	r3, [pc, #460]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a72      	ldr	r2, [pc, #456]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b70      	ldr	r3, [pc, #448]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	496d      	ldr	r1, [pc, #436]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	4968      	ldr	r1, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e025      	b.n	8002622 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d6:	4b66      	ldr	r3, [pc, #408]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a65      	ldr	r2, [pc, #404]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b63      	ldr	r3, [pc, #396]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4960      	ldr	r1, [pc, #384]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	495b      	ldr	r1, [pc, #364]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fd14 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e37a      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002622:	f000 fc81 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b51      	ldr	r3, [pc, #324]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4950      	ldr	r1, [pc, #320]	@ (8002774 <HAL_RCC_OscConfig+0x274>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a4e      	ldr	r2, [pc, #312]	@ (8002778 <HAL_RCC_OscConfig+0x278>)
 8002640:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002642:	4b4e      	ldr	r3, [pc, #312]	@ (800277c <HAL_RCC_OscConfig+0x27c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe f9f0 	bl	8000a2c <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d052      	beq.n	80026fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	e35e      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d032      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002662:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266e:	f7fe fa2d 	bl	8000acc <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002676:	f7fe fa29 	bl	8000acc <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e347      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002688:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002694:	4b36      	ldr	r3, [pc, #216]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a35      	ldr	r2, [pc, #212]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b33      	ldr	r3, [pc, #204]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4930      	ldr	r1, [pc, #192]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	492b      	ldr	r1, [pc, #172]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
 80026c6:	e01a      	b.n	80026fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026c8:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a28      	ldr	r2, [pc, #160]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d4:	f7fe f9fa 	bl	8000acc <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026dc:	f7fe f9f6 	bl	8000acc <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e314      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1dc>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d073      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d005      	beq.n	800271c <HAL_RCC_OscConfig+0x21c>
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d10e      	bne.n	8002734 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d10b      	bne.n	8002734 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d063      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d15f      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e2f1      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x24c>
 800273e:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e025      	b.n	8002798 <HAL_RCC_OscConfig+0x298>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002754:	d114      	bne.n	8002780 <HAL_RCC_OscConfig+0x280>
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a02      	ldr	r2, [pc, #8]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e013      	b.n	8002798 <HAL_RCC_OscConfig+0x298>
 8002770:	40021000 	.word	0x40021000
 8002774:	080044ac 	.word	0x080044ac
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004
 8002780:	4ba0      	ldr	r3, [pc, #640]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a9f      	ldr	r2, [pc, #636]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b9d      	ldr	r3, [pc, #628]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a9c      	ldr	r2, [pc, #624]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe f994 	bl	8000acc <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe f990 	bl	8000acc <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e2ae      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ba:	4b92      	ldr	r3, [pc, #584]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2a8>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe f980 	bl	8000acc <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe f97c 	bl	8000acc <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e29a      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e2:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2d0>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d060      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x310>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d119      	bne.n	800283e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d116      	bne.n	800283e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002810:	4b7c      	ldr	r3, [pc, #496]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x328>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e277      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b76      	ldr	r3, [pc, #472]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	4973      	ldr	r1, [pc, #460]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	e040      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d023      	beq.n	800288e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002846:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe f93b 	bl	8000acc <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe f937 	bl	8000acc <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e255      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286c:	4b65      	ldr	r3, [pc, #404]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b62      	ldr	r3, [pc, #392]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	495f      	ldr	r1, [pc, #380]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5c      	ldr	r2, [pc, #368]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe f917 	bl	8000acc <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7fe f913 	bl	8000acc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e231      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03c      	beq.n	8002946 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028da:	4a4a      	ldr	r2, [pc, #296]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe f8f2 	bl	8000acc <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ec:	f7fe f8ee 	bl	8000acc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e20c      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x3ec>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe f8d5 	bl	8000acc <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe f8d1 	bl	8000acc <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1ef      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a6 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002958:	4b2a      	ldr	r3, [pc, #168]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10d      	bne.n	8002980 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	4a26      	ldr	r2, [pc, #152]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002970:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	4b21      	ldr	r3, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d118      	bne.n	80029be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1d      	ldr	r2, [pc, #116]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002998:	f7fe f898 	bl	8000acc <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7fe f894 	bl	8000acc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1b2      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4d8>
 80029c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d6:	e029      	b.n	8002a2c <HAL_RCC_OscConfig+0x52c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d115      	bne.n	8002a0c <HAL_RCC_OscConfig+0x50c>
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	4a07      	ldr	r2, [pc, #28]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	4a03      	ldr	r2, [pc, #12]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x52c>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	4b9a      	ldr	r3, [pc, #616]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	4a99      	ldr	r2, [pc, #612]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a1c:	4b96      	ldr	r3, [pc, #600]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	4a95      	ldr	r2, [pc, #596]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d016      	beq.n	8002a62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe f84a 	bl	8000acc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe f846 	bl	8000acc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e162      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	4b89      	ldr	r3, [pc, #548]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ed      	beq.n	8002a3c <HAL_RCC_OscConfig+0x53c>
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe f833 	bl	8000acc <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe f82f 	bl	8000acc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e14b      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a80:	4b7d      	ldr	r3, [pc, #500]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ed      	bne.n	8002a6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b78      	ldr	r3, [pc, #480]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a77      	ldr	r2, [pc, #476]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d03c      	beq.n	8002b26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01c      	beq.n	8002aee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ab4:	4b70      	ldr	r3, [pc, #448]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aba:	4a6f      	ldr	r2, [pc, #444]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f802 	bl	8000acc <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002acc:	f7fd fffe 	bl	8000acc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e11c      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ade:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <HAL_RCC_OscConfig+0x5cc>
 8002aec:	e01b      	b.n	8002b26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aee:	4b62      	ldr	r3, [pc, #392]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002af4:	4a60      	ldr	r2, [pc, #384]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7fd ffe5 	bl	8000acc <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b06:	f7fd ffe1 	bl	8000acc <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0ff      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b18:	4b57      	ldr	r3, [pc, #348]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ef      	bne.n	8002b06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80f3 	beq.w	8002d16 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f040 80c9 	bne.w	8002ccc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d12c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d123      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d113      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d06b      	beq.n	8002c80 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d062      	beq.n	8002c74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bae:	4b32      	ldr	r3, [pc, #200]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0ac      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002bc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bca:	f7fd ff7f 	bl	8000acc <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fd ff7b 	bl	8000acc <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e099      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_RCC_OscConfig+0x77c>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c00:	3a01      	subs	r2, #1
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	4311      	orrs	r1, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c0a:	0212      	lsls	r2, r2, #8
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c12:	0852      	lsrs	r2, r2, #1
 8002c14:	3a01      	subs	r2, #1
 8002c16:	0552      	lsls	r2, r2, #21
 8002c18:	4311      	orrs	r1, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c1e:	0852      	lsrs	r2, r2, #1
 8002c20:	3a01      	subs	r2, #1
 8002c22:	0652      	lsls	r2, r2, #25
 8002c24:	4311      	orrs	r1, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c2a:	06d2      	lsls	r2, r2, #27
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	4912      	ldr	r1, [pc, #72]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c34:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0f      	ldr	r2, [pc, #60]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c40:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a0c      	ldr	r2, [pc, #48]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c4c:	f7fd ff3e 	bl	8000acc <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fd ff3a 	bl	8000acc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e058      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c66:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <HAL_RCC_OscConfig+0x778>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c72:	e050      	b.n	8002d16 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e04f      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c80:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d144      	bne.n	8002d16 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a23      	ldr	r2, [pc, #140]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c98:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a20      	ldr	r2, [pc, #128]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca4:	f7fd ff12 	bl	8000acc <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fd ff0e 	bl	8000acc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e02c      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x7ac>
 8002cca:	e024      	b.n	8002d16 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d01f      	beq.n	8002d12 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a12      	ldr	r2, [pc, #72]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002cd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fd fef5 	bl	8000acc <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fd fef1 	bl	8000acc <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e00f      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	4905      	ldr	r1, [pc, #20]	@ (8002d20 <HAL_RCC_OscConfig+0x820>)
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_RCC_OscConfig+0x824>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60cb      	str	r3, [r1, #12]
 8002d10:	e001      	b.n	8002d16 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	feeefffc 	.word	0xfeeefffc

08002d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0e7      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b75      	ldr	r3, [pc, #468]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d910      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b72      	ldr	r3, [pc, #456]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 0207 	bic.w	r2, r3, #7
 8002d52:	4970      	ldr	r1, [pc, #448]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cf      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d010      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4b66      	ldr	r3, [pc, #408]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d908      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b63      	ldr	r3, [pc, #396]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4960      	ldr	r1, [pc, #384]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d04c      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	4b5a      	ldr	r3, [pc, #360]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d121      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0a6      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc6:	4b54      	ldr	r3, [pc, #336]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d115      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e09a      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dde:	4b4e      	ldr	r3, [pc, #312]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e08e      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dee:	4b4a      	ldr	r3, [pc, #296]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e086      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dfe:	4b46      	ldr	r3, [pc, #280]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4943      	ldr	r1, [pc, #268]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fd fe5c 	bl	8000acc <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e18:	f7fd fe58 	bl	8000acc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e06e      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 020c 	and.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1eb      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d010      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d208      	bcs.n	8002e6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	492b      	ldr	r1, [pc, #172]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6e:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d210      	bcs.n	8002e9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7c:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 0207 	bic.w	r2, r3, #7
 8002e84:	4923      	ldr	r1, [pc, #140]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8c:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e036      	b.n	8002f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4918      	ldr	r1, [pc, #96]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec8:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4910      	ldr	r1, [pc, #64]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002edc:	f000 f824 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	490b      	ldr	r1, [pc, #44]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f4>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	4a09      	ldr	r2, [pc, #36]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002efa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_RCC_ClockConfig+0x1fc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fd93 	bl	8000a2c <HAL_InitTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40022000 	.word	0x40022000
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	080044ac 	.word	0x080044ac
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	@ 0x24
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f36:	4b3e      	ldr	r3, [pc, #248]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x34>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d121      	bne.n	8002f9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d11e      	bne.n	8002f9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f5c:	4b34      	ldr	r3, [pc, #208]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e005      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f84:	4a2b      	ldr	r2, [pc, #172]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10d      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d102      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	e004      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fac:	4b23      	ldr	r3, [pc, #140]	@ (800303c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d134      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0xa6>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d003      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xac>
 8002fcc:	e005      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fce:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd0:	617b      	str	r3, [r7, #20]
      break;
 8002fd2:	e005      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fd6:	617b      	str	r3, [r7, #20]
      break;
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	617b      	str	r3, [r7, #20]
      break;
 8002fde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe0:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	3301      	adds	r3, #1
 8002fec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fee:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	fb03 f202 	mul.w	r2, r3, r2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	0e5b      	lsrs	r3, r3, #25
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	3301      	adds	r3, #1
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003020:	69bb      	ldr	r3, [r7, #24]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3724      	adds	r7, #36	@ 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	080044bc 	.word	0x080044bc
 8003038:	00f42400 	.word	0x00f42400
 800303c:	007a1200 	.word	0x007a1200

08003040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800304c:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003058:	f7ff f9ee 	bl	8002438 <HAL_PWREx_GetVoltageRange>
 800305c:	6178      	str	r0, [r7, #20]
 800305e:	e014      	b.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b25      	ldr	r3, [pc, #148]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	4a24      	ldr	r2, [pc, #144]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	@ 0x58
 800306c:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003078:	f7ff f9de 	bl	8002438 <HAL_PWREx_GetVoltageRange>
 800307c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003082:	4a1d      	ldr	r2, [pc, #116]	@ (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003090:	d10b      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b80      	cmp	r3, #128	@ 0x80
 8003096:	d919      	bls.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2ba0      	cmp	r3, #160	@ 0xa0
 800309c:	d902      	bls.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800309e:	2302      	movs	r3, #2
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e013      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a4:	2301      	movs	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e010      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b80      	cmp	r3, #128	@ 0x80
 80030ae:	d902      	bls.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b0:	2303      	movs	r3, #3
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e00a      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b80      	cmp	r3, #128	@ 0x80
 80030ba:	d102      	bne.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030bc:	2302      	movs	r3, #2
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e004      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b70      	cmp	r3, #112	@ 0x70
 80030c6:	d101      	bne.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 0207 	bic.w	r2, r3, #7
 80030d4:	4909      	ldr	r1, [pc, #36]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030dc:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40022000 	.word	0x40022000

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003108:	2300      	movs	r3, #0
 800310a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800310c:	2300      	movs	r3, #0
 800310e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003118:	2b00      	cmp	r3, #0
 800311a:	d031      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003120:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003124:	d01a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003126:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800312a:	d814      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003134:	d10f      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003136:	4b5d      	ldr	r3, [pc, #372]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4a5c      	ldr	r2, [pc, #368]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003140:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003142:	e00c      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f9ce 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003154:	e003      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	74fb      	strb	r3, [r7, #19]
      break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800315c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003164:	4b51      	ldr	r3, [pc, #324]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003172:	494e      	ldr	r1, [pc, #312]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800317a:	e001      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 809e 	beq.w	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003192:	4b46      	ldr	r3, [pc, #280]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	4a3f      	ldr	r2, [pc, #252]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b4:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b3a      	ldr	r3, [pc, #232]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a39      	ldr	r2, [pc, #228]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d0:	f7fd fc7c 	bl	8000acc <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031d6:	e009      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fd fc78 	bl	8000acc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d902      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ea:	e005      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ec:	4b30      	ldr	r3, [pc, #192]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ef      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d15a      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031fe:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003208:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01e      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	429a      	cmp	r2, r3
 8003218:	d019      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800321a:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003224:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003226:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322c:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323c:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003246:	4a19      	ldr	r2, [pc, #100]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d016      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd fc38 	bl	8000acc <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325e:	e00b      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fd fc34 	bl	8000acc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d902      	bls.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	74fb      	strb	r3, [r7, #19]
            break;
 8003276:	e006      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0ec      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800328c:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003292:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329a:	4904      	ldr	r1, [pc, #16]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032a2:	e009      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b8:	7c7b      	ldrb	r3, [r7, #17]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d105      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b8a      	ldr	r3, [pc, #552]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	4a89      	ldr	r2, [pc, #548]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d6:	4b84      	ldr	r3, [pc, #528]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	f023 0203 	bic.w	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4980      	ldr	r1, [pc, #512]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f8:	4b7b      	ldr	r3, [pc, #492]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	f023 020c 	bic.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	4978      	ldr	r1, [pc, #480]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800331a:	4b73      	ldr	r3, [pc, #460]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	496f      	ldr	r1, [pc, #444]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333c:	4b6a      	ldr	r3, [pc, #424]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003342:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334a:	4967      	ldr	r1, [pc, #412]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800335e:	4b62      	ldr	r3, [pc, #392]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	495e      	ldr	r1, [pc, #376]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003380:	4b59      	ldr	r3, [pc, #356]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003386:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	4956      	ldr	r1, [pc, #344]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033a2:	4b51      	ldr	r3, [pc, #324]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	494d      	ldr	r1, [pc, #308]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d028      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c4:	4b48      	ldr	r3, [pc, #288]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4945      	ldr	r1, [pc, #276]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033e2:	d106      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e4:	4b40      	ldr	r3, [pc, #256]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a3f      	ldr	r2, [pc, #252]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ee:	60d3      	str	r3, [r2, #12]
 80033f0:	e011      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033fa:	d10c      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f872 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d028      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003422:	4b31      	ldr	r3, [pc, #196]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003428:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003430:	492d      	ldr	r1, [pc, #180]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003440:	d106      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003442:	4b29      	ldr	r3, [pc, #164]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003448:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800344c:	60d3      	str	r3, [r2, #12]
 800344e:	e011      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003458:	d10c      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2101      	movs	r1, #1
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f843 	bl	80034ec <RCCEx_PLLSAI1_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800346a:	7cfb      	ldrb	r3, [r7, #19]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01c      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003480:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348e:	4916      	ldr	r1, [pc, #88]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800349e:	d10c      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f820 	bl	80034ec <RCCEx_PLLSAI1_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034c6:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d4:	4904      	ldr	r1, [pc, #16]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000

080034ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034fa:	4b74      	ldr	r3, [pc, #464]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d018      	beq.n	8003538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003506:	4b71      	ldr	r3, [pc, #452]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0203 	and.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d10d      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
       ||
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800351e:	4b6b      	ldr	r3, [pc, #428]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
       ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d047      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	e044      	b.n	80035c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d018      	beq.n	8003572 <RCCEx_PLLSAI1_Config+0x86>
 8003540:	2b03      	cmp	r3, #3
 8003542:	d825      	bhi.n	8003590 <RCCEx_PLLSAI1_Config+0xa4>
 8003544:	2b01      	cmp	r3, #1
 8003546:	d002      	beq.n	800354e <RCCEx_PLLSAI1_Config+0x62>
 8003548:	2b02      	cmp	r3, #2
 800354a:	d009      	beq.n	8003560 <RCCEx_PLLSAI1_Config+0x74>
 800354c:	e020      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800354e:	4b5f      	ldr	r3, [pc, #380]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11d      	bne.n	8003596 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355e:	e01a      	b.n	8003596 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003560:	4b5a      	ldr	r3, [pc, #360]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e013      	b.n	800359a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003572:	4b56      	ldr	r3, [pc, #344]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800357e:	4b53      	ldr	r3, [pc, #332]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800358e:	e006      	b.n	800359e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	e004      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800359e:	bf00      	nop
    }

    if(status == HAL_OK)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035a6:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	430b      	orrs	r3, r1
 80035bc:	4943      	ldr	r1, [pc, #268]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d17c      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035c8:	4b40      	ldr	r3, [pc, #256]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3f      	ldr	r2, [pc, #252]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d4:	f7fd fa7a 	bl	8000acc <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035da:	e009      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035dc:	f7fd fa76 	bl	8000acc <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d902      	bls.n	80035f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	73fb      	strb	r3, [r7, #15]
        break;
 80035ee:	e005      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035f0:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ef      	bne.n	80035dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d15f      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d110      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003608:	4b30      	ldr	r3, [pc, #192]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003610:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6892      	ldr	r2, [r2, #8]
 8003618:	0211      	lsls	r1, r2, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	06d2      	lsls	r2, r2, #27
 8003620:	430a      	orrs	r2, r1
 8003622:	492a      	ldr	r1, [pc, #168]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	610b      	str	r3, [r1, #16]
 8003628:	e027      	b.n	800367a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d112      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003630:	4b26      	ldr	r3, [pc, #152]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003638:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6892      	ldr	r2, [r2, #8]
 8003640:	0211      	lsls	r1, r2, #8
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6912      	ldr	r2, [r2, #16]
 8003646:	0852      	lsrs	r2, r2, #1
 8003648:	3a01      	subs	r2, #1
 800364a:	0552      	lsls	r2, r2, #21
 800364c:	430a      	orrs	r2, r1
 800364e:	491f      	ldr	r1, [pc, #124]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003650:	4313      	orrs	r3, r2
 8003652:	610b      	str	r3, [r1, #16]
 8003654:	e011      	b.n	800367a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003656:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800365e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6892      	ldr	r2, [r2, #8]
 8003666:	0211      	lsls	r1, r2, #8
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6952      	ldr	r2, [r2, #20]
 800366c:	0852      	lsrs	r2, r2, #1
 800366e:	3a01      	subs	r2, #1
 8003670:	0652      	lsls	r2, r2, #25
 8003672:	430a      	orrs	r2, r1
 8003674:	4915      	ldr	r1, [pc, #84]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003676:	4313      	orrs	r3, r2
 8003678:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800367a:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a13      	ldr	r2, [pc, #76]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003680:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003684:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fd fa21 	bl	8000acc <HAL_GetTick>
 800368a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800368c:	e009      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800368e:	f7fd fa1d 	bl	8000acc <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d902      	bls.n	80036a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	73fb      	strb	r3, [r7, #15]
          break;
 80036a0:	e005      	b.n	80036ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ef      	beq.n	800368e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	4903      	ldr	r1, [pc, #12]	@ (80036cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000

080036d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e095      	b.n	800380e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f2:	d009      	beq.n	8003708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
 80036fa:	e005      	b.n	8003708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd f880 	bl	8000828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800373e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003748:	d902      	bls.n	8003750 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	e002      	b.n	8003756 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003754:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800375e:	d007      	beq.n	8003770 <HAL_SPI_Init+0xa0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003768:	d002      	beq.n	8003770 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b2:	ea42 0103 	orr.w	r1, r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0204 	and.w	r2, r3, #4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80037ec:	ea42 0103 	orr.w	r1, r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b08a      	sub	sp, #40	@ 0x28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003824:	2301      	movs	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003828:	f7fd f950 	bl	8000acc <HAL_GetTick>
 800382c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003834:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003844:	7ffb      	ldrb	r3, [r7, #31]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d00c      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x4e>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003850:	d106      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x4a>
 800385a:	7ffb      	ldrb	r3, [r7, #31]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d001      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	e1f3      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x60>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x60>
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e1e8      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x72>
 8003884:	2302      	movs	r3, #2
 8003886:	e1e1      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x436>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b04      	cmp	r3, #4
 800389a:	d003      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2205      	movs	r2, #5
 80038a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	887a      	ldrh	r2, [r7, #2]
 80038ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038e6:	d802      	bhi.n	80038ee <HAL_SPI_TransmitReceive+0xd8>
 80038e8:	8abb      	ldrh	r3, [r7, #20]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d908      	bls.n	8003900 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e007      	b.n	8003910 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d007      	beq.n	800392e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003936:	f240 8083 	bls.w	8003a40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_SPI_TransmitReceive+0x132>
 8003942:	8afb      	ldrh	r3, [r7, #22]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d16f      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394c:	881a      	ldrh	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	1c9a      	adds	r2, r3, #2
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800396c:	e05c      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d11b      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x19e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x19e>
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	2b01      	cmp	r3, #1
 800398a:	d113      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	881a      	ldrh	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399c:	1c9a      	adds	r2, r3, #2
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d11c      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x1e6>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	b292      	uxth	r2, r2
 80039da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039f8:	2301      	movs	r3, #1
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039fc:	f7fd f866 	bl	8000acc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d80d      	bhi.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a12:	d009      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e111      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d19d      	bne.n	800396e <HAL_SPI_TransmitReceive+0x158>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d197      	bne.n	800396e <HAL_SPI_TransmitReceive+0x158>
 8003a3e:	e0e5      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x23a>
 8003a48:	8afb      	ldrh	r3, [r7, #22]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f040 80d1 	bne.w	8003bf2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d912      	bls.n	8003a80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	1c9a      	adds	r2, r3, #2
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b02      	subs	r3, #2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a7e:	e0b8      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aa6:	e0a4      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d134      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x30a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02f      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x30a>
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d12c      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d912      	bls.n	8003af6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	881a      	ldrh	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b02      	subs	r3, #2
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003af4:	e012      	b.n	8003b1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d148      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x3aa>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d042      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d923      	bls.n	8003b8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	b292      	uxth	r2, r2
 8003b52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b02      	subs	r3, #2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d81f      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	e016      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f103 020c 	add.w	r2, r3, #12
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bc0:	f7fc ff84 	bl	8000acc <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d803      	bhi.n	8003bd8 <HAL_SPI_TransmitReceive+0x3c2>
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd6:	d102      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x3c8>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e02c      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f47f af55 	bne.w	8003aa8 <HAL_SPI_TransmitReceive+0x292>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f47f af4e 	bne.w	8003aa8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f93d 	bl	8003e90 <SPI_EndRxTxTransaction>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00e      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	@ 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c64:	f7fc ff32 	bl	8000acc <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	4413      	add	r3, r2
 8003c72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c74:	f7fc ff2a 	bl	8000acc <HAL_GetTick>
 8003c78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c7a:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	015b      	lsls	r3, r3, #5
 8003c80:	0d1b      	lsrs	r3, r3, #20
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c8a:	e054      	b.n	8003d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c92:	d050      	beq.n	8003d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c94:	f7fc ff1a 	bl	8000acc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d902      	bls.n	8003caa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d13d      	bne.n	8003d26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cc2:	d111      	bne.n	8003ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ccc:	d004      	beq.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd6:	d107      	bne.n	8003ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf0:	d10f      	bne.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e017      	b.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d19b      	bne.n	8003c8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000000 	.word	0x20000000

08003d64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d76:	f7fc fea9 	bl	8000acc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	4413      	add	r3, r2
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d86:	f7fc fea1 	bl	8000acc <HAL_GetTick>
 8003d8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d94:	4b3d      	ldr	r3, [pc, #244]	@ (8003e8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00da      	lsls	r2, r3, #3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	0d1b      	lsrs	r3, r3, #20
 8003da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003dac:	e060      	b.n	8003e70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003db4:	d107      	bne.n	8003dc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dcc:	d050      	beq.n	8003e70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dce:	f7fc fe7d 	bl	8000acc <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d902      	bls.n	8003de4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d13d      	bne.n	8003e60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003df2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dfc:	d111      	bne.n	8003e22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e06:	d004      	beq.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e10:	d107      	bne.n	8003e22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2a:	d10f      	bne.n	8003e4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e010      	b.n	8003e82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d196      	bne.n	8003dae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3728      	adds	r7, #40	@ 0x28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000000 	.word	0x20000000

08003e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff ff5b 	bl	8003d64 <SPI_WaitFifoStateUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e027      	b.n	8003f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2180      	movs	r1, #128	@ 0x80
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff fec0 	bl	8003c54 <SPI_WaitFlagStateUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e014      	b.n	8003f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff34 	bl	8003d64 <SPI_WaitFifoStateUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e000      	b.n	8003f14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e049      	b.n	8003fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fcc4 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 f8fe 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_ConfigClockSource+0x1c>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0b6      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x18a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004004:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004008:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004010:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004022:	d03e      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0xd8>
 8004024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004028:	f200 8087 	bhi.w	800413a <HAL_TIM_ConfigClockSource+0x170>
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004030:	f000 8086 	beq.w	8004140 <HAL_TIM_ConfigClockSource+0x176>
 8004034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004038:	d87f      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x170>
 800403a:	2b70      	cmp	r3, #112	@ 0x70
 800403c:	d01a      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0xaa>
 800403e:	2b70      	cmp	r3, #112	@ 0x70
 8004040:	d87b      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x170>
 8004042:	2b60      	cmp	r3, #96	@ 0x60
 8004044:	d050      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0x11e>
 8004046:	2b60      	cmp	r3, #96	@ 0x60
 8004048:	d877      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x170>
 800404a:	2b50      	cmp	r3, #80	@ 0x50
 800404c:	d03c      	beq.n	80040c8 <HAL_TIM_ConfigClockSource+0xfe>
 800404e:	2b50      	cmp	r3, #80	@ 0x50
 8004050:	d873      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x170>
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d058      	beq.n	8004108 <HAL_TIM_ConfigClockSource+0x13e>
 8004056:	2b40      	cmp	r3, #64	@ 0x40
 8004058:	d86f      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x170>
 800405a:	2b30      	cmp	r3, #48	@ 0x30
 800405c:	d064      	beq.n	8004128 <HAL_TIM_ConfigClockSource+0x15e>
 800405e:	2b30      	cmp	r3, #48	@ 0x30
 8004060:	d86b      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x170>
 8004062:	2b20      	cmp	r3, #32
 8004064:	d060      	beq.n	8004128 <HAL_TIM_ConfigClockSource+0x15e>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d867      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x170>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d05c      	beq.n	8004128 <HAL_TIM_ConfigClockSource+0x15e>
 800406e:	2b10      	cmp	r3, #16
 8004070:	d05a      	beq.n	8004128 <HAL_TIM_ConfigClockSource+0x15e>
 8004072:	e062      	b.n	800413a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004084:	f000 f954 	bl	8004330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004096:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	609a      	str	r2, [r3, #8]
      break;
 80040a0:	e04f      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040b2:	f000 f93d 	bl	8004330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040c4:	609a      	str	r2, [r3, #8]
      break;
 80040c6:	e03c      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d4:	461a      	mov	r2, r3
 80040d6:	f000 f8b1 	bl	800423c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2150      	movs	r1, #80	@ 0x50
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f90a 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 80040e6:	e02c      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f4:	461a      	mov	r2, r3
 80040f6:	f000 f8d0 	bl	800429a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2160      	movs	r1, #96	@ 0x60
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f8fa 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8004106:	e01c      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004114:	461a      	mov	r2, r3
 8004116:	f000 f891 	bl	800423c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2140      	movs	r1, #64	@ 0x40
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f8ea 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8004126:	e00c      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 f8e1 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8004138:	e003      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
      break;
 800413e:	e000      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a30      	ldr	r2, [pc, #192]	@ (8004230 <TIM_Base_SetConfig+0xd4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0x20>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417a:	d108      	bne.n	800418e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <TIM_Base_SetConfig+0xd4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00b      	beq.n	80041ae <TIM_Base_SetConfig+0x52>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d007      	beq.n	80041ae <TIM_Base_SetConfig+0x52>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a24      	ldr	r2, [pc, #144]	@ (8004234 <TIM_Base_SetConfig+0xd8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <TIM_Base_SetConfig+0x52>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a23      	ldr	r2, [pc, #140]	@ (8004238 <TIM_Base_SetConfig+0xdc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d108      	bne.n	80041c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a12      	ldr	r2, [pc, #72]	@ (8004230 <TIM_Base_SetConfig+0xd4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <TIM_Base_SetConfig+0xa0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a11      	ldr	r2, [pc, #68]	@ (8004234 <TIM_Base_SetConfig+0xd8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0xa0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <TIM_Base_SetConfig+0xdc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d105      	bne.n	8004222 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]
  }
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40014000 	.word	0x40014000
 8004238:	40014400 	.word	0x40014400

0800423c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f023 030a 	bic.w	r3, r3, #10
 8004278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800429a:	b480      	push	{r7}
 800429c:	b087      	sub	sp, #28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0210 	bic.w	r2, r3, #16
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	031b      	lsls	r3, r3, #12
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	f043 0307 	orr.w	r3, r3, #7
 800431c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800434a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	021a      	lsls	r2, r3, #8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	431a      	orrs	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004384:	2302      	movs	r3, #2
 8004386:	e04f      	b.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f0:	d004      	beq.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a10      	ldr	r2, [pc, #64]	@ (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d10c      	bne.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40014000 	.word	0x40014000

0800443c <memset>:
 800443c:	4402      	add	r2, r0
 800443e:	4603      	mov	r3, r0
 8004440:	4293      	cmp	r3, r2
 8004442:	d100      	bne.n	8004446 <memset+0xa>
 8004444:	4770      	bx	lr
 8004446:	f803 1b01 	strb.w	r1, [r3], #1
 800444a:	e7f9      	b.n	8004440 <memset+0x4>

0800444c <__libc_init_array>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	4d0d      	ldr	r5, [pc, #52]	@ (8004484 <__libc_init_array+0x38>)
 8004450:	4c0d      	ldr	r4, [pc, #52]	@ (8004488 <__libc_init_array+0x3c>)
 8004452:	1b64      	subs	r4, r4, r5
 8004454:	10a4      	asrs	r4, r4, #2
 8004456:	2600      	movs	r6, #0
 8004458:	42a6      	cmp	r6, r4
 800445a:	d109      	bne.n	8004470 <__libc_init_array+0x24>
 800445c:	4d0b      	ldr	r5, [pc, #44]	@ (800448c <__libc_init_array+0x40>)
 800445e:	4c0c      	ldr	r4, [pc, #48]	@ (8004490 <__libc_init_array+0x44>)
 8004460:	f000 f818 	bl	8004494 <_init>
 8004464:	1b64      	subs	r4, r4, r5
 8004466:	10a4      	asrs	r4, r4, #2
 8004468:	2600      	movs	r6, #0
 800446a:	42a6      	cmp	r6, r4
 800446c:	d105      	bne.n	800447a <__libc_init_array+0x2e>
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	f855 3b04 	ldr.w	r3, [r5], #4
 8004474:	4798      	blx	r3
 8004476:	3601      	adds	r6, #1
 8004478:	e7ee      	b.n	8004458 <__libc_init_array+0xc>
 800447a:	f855 3b04 	ldr.w	r3, [r5], #4
 800447e:	4798      	blx	r3
 8004480:	3601      	adds	r6, #1
 8004482:	e7f2      	b.n	800446a <__libc_init_array+0x1e>
 8004484:	080044ec 	.word	0x080044ec
 8004488:	080044ec 	.word	0x080044ec
 800448c:	080044ec 	.word	0x080044ec
 8004490:	080044f0 	.word	0x080044f0

08004494 <_init>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	bf00      	nop
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr

080044a0 <_fini>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr
