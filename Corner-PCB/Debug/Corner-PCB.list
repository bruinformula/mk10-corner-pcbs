
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08008ff8  08008ff8  00009ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093cc  080093cc  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080093cc  080093cc  0000a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d4  080093d4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d4  080093d4  0000a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093d8  080093d8  0000a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080093dc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  200001d4  080095b0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  080095b0  0000b65c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac9e  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003483  00000000  00000000  00025ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00029328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134b  00000000  00000000  0002abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002523e  00000000  00000000  0002bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d768  00000000  00000000  00051159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3eca  00000000  00000000  0006e8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015278b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a7c  00000000  00000000  001527d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015a24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fdc 	.word	0x08008fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008fdc 	.word	0x08008fdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <CANTransmitMinion>:
#include "can.h"
#include "dataframes.h"



HAL_StatusTypeDef CANTransmitMinion (CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef TXStatusOut = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	77fb      	strb	r3, [r7, #31]
	//	printf("sending ID ");
	//	printf((uint32_t)(header->StdId));
	int i = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
	uint32_t mailbox = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000eec:	e012      	b.n	8000f14 <CANTransmitMinion+0x40>
		while(HAL_CAN_GetTxMailboxesFreeLevel(canport) < 1) {
 8000eee:	bf00      	nop
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f002 fd28 	bl	8003946 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f9      	beq.n	8000ef0 <CANTransmitMinion+0x1c>
					//wait until a new mailbox gets freed up
		//			printf("\n\rwaiting\n\r");
				}
		TXStatusOut = HAL_CAN_AddTxMessage(canport, header, dataArray, &mailbox);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f002 fc4e 	bl	80037a6 <HAL_CAN_AddTxMessage>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	77fb      	strb	r3, [r7, #31]

		i++;
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	dc02      	bgt.n	8000f20 <CANTransmitMinion+0x4c>
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1e6      	bne.n	8000eee <CANTransmitMinion+0x1a>
//	if (TXStatusOut != HAL_OK) {
//		mailbox = 0;
//
//	}
	//	printf("\n\r");
	return TXStatusOut;
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <clearEflagsHelper>:

void clearEflagsHelper(CORNER_CAN_CONTEXT *CANCONTEXT) {
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	CANCONTEXT->misc_dataframe.data.eflags.ADCErrorBit = 0;
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.BrakeTempErrorBit = 0;
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f46:	f023 0302 	bic.w	r3, r3, #2
 8000f4a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = 0;
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f54:	f023 0308 	bic.w	r3, r3, #8
 8000f58:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = 0;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f62:	f023 0304 	bic.w	r3, r3, #4
 8000f66:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = 0;
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f70:	f023 0310 	bic.w	r3, r3, #16
 8000f74:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = 0;
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f7e:	f023 0320 	bic.w	r3, r3, #32
 8000f82:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = 0;
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f90:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = 0;
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f9e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b

}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <CANMailman>:

void CANMailman(CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, CORNER_CAN_CONTEXT *CANCONTEXT) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	clearEflagsHelper(CANCONTEXT);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb5 	bl	8000f2a <clearEflagsHelper>
	HAL_StatusTypeDef txstatus;
	/*** BEGIN SEND MISC MESSAGE (btemp, whs, board temp, error flags, shock travel) */

	if (HAL_GetTick() - CANCONTEXT->ms_since_miscmsg_broadcast > MISC_DATA_TRANSMISSION_PERIOD) {
 8000fc0:	f001 f934 	bl	800222c <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b15      	cmp	r3, #21
 8000fce:	d91b      	bls.n	8001008 <CANMailman+0x5a>
		header->StdId = MISC_DATA_ID;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f240 7215 	movw	r2, #1813	@ 0x715
 8000fd6:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion(canport, header, CANCONTEXT->misc_dataframe.array);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3334      	adds	r3, #52	@ 0x34
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff77 	bl	8000ed4 <CANTransmitMinion>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <CANMailman+0x50>
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = true;
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_miscmsg_broadcast = HAL_GetTick();
 8000ffe:	f001 f915 	bl	800222c <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	631a      	str	r2, [r3, #48]	@ 0x30




	/**** BEGIN SEND STRAIN GAUGE DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_strain_broadcast > STRAIN_GAUGE_TRANSMISSION_PERIOD) {
 8001008:	f001 f910 	bl	800222c <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d91b      	bls.n	8001050 <CANMailman+0xa2>
		header->StdId = STRAIN_GAUGE_ID;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 800101e:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->straingauge_dataframe.array);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3304      	adds	r3, #4
 8001024:	461a      	mov	r2, r3
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff ff53 	bl	8000ed4 <CANTransmitMinion>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <CANMailman+0x98>
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = true;
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_strain_broadcast = HAL_GetTick();
 8001046:	f001 f8f1 	bl	800222c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]
	/**** END SEND STRAIN GAUGE DATA ****/



	/**** BEGIN SEND TIRE TEMP DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_ttemp_broadcast > TIRE_TEMP_TRANSMISSION_PERIOD) {
 8001050:	f001 f8ec 	bl	800222c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8001060:	d360      	bcc.n	8001124 <CANMailman+0x176>
		//		CTXHeader.IDE = CAN_ID_STD;
		//		CTXHeader.RTR = CAN_RTR_DATA;
		//		CTXHeader.DLC = 8;
		//		ms_since_ttemp_broadcast = HAL_GetTick();

		header->StdId = TIRE_TEMP_MSG1_ID;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f240 7211 	movw	r2, #1809	@ 0x711
 8001068:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[0].array);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3310      	adds	r3, #16
 800106e:	461a      	mov	r2, r3
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f7ff ff2e 	bl	8000ed4 <CANTransmitMinion>
 8001078:	4603      	mov	r3, r0
 800107a:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <CANMailman+0xe2>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = true;
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG2_ID;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f240 7212 	movw	r2, #1810	@ 0x712
 8001096:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[1].array);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3318      	adds	r3, #24
 800109c:	461a      	mov	r2, r3
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff17 	bl	8000ed4 <CANTransmitMinion>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <CANMailman+0x110>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = true;
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80010b6:	f043 0320 	orr.w	r3, r3, #32
 80010ba:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG3_ID;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f240 7213 	movw	r2, #1811	@ 0x713
 80010c4:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[2].array);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3320      	adds	r3, #32
 80010ca:	461a      	mov	r2, r3
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff ff00 	bl	8000ed4 <CANTransmitMinion>
 80010d4:	4603      	mov	r3, r0
 80010d6:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <CANMailman+0x13e>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = true;
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80010e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e8:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG4_ID;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f240 7214 	movw	r2, #1812	@ 0x714
 80010f2:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[3].array);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3328      	adds	r3, #40	@ 0x28
 80010f8:	461a      	mov	r2, r3
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff fee9 	bl	8000ed4 <CANTransmitMinion>
 8001102:	4603      	mov	r3, r0
 8001104:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <CANMailman+0x16c>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = true;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8001112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001116:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_ttemp_broadcast = HAL_GetTick();
 800111a:	f001 f887 	bl	800222c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	60da      	str	r2, [r3, #12]
	}

	/**** END SEND TIRE TEMP DATA ****/
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f001 f813 	bl	800215a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f84e 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 fa98 	bl	800166c <MX_GPIO_Init>
  MX_ADC1_Init();
 800113c:	f000 f89c 	bl	8001278 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001140:	f000 f9dc 	bl	80014fc <MX_TIM1_Init>
  MX_CAN1_Init();
 8001144:	f000 f8fc 	bl	8001340 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001148:	f000 f95a 	bl	8001400 <MX_I2C1_Init>
  MX_SPI1_Init();
 800114c:	f000 f998 	bl	8001480 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001150:	f000 fa28 	bl	80015a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001154:	f000 fa58 	bl	8001608 <MX_USART2_UART_Init>
		//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

		//		spamCan();

		//read the sensors
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8001158:	4a10      	ldr	r2, [pc, #64]	@ (800119c <main+0x70>)
 800115a:	4911      	ldr	r1, [pc, #68]	@ (80011a0 <main+0x74>)
 800115c:	4811      	ldr	r0, [pc, #68]	@ (80011a4 <main+0x78>)
 800115e:	f000 fb01 	bl	8001764 <readLinearPotentiometer>
		readBrakeTemp(&ms_since_btemp_read, &(CANCONTEXT.misc_dataframe));
 8001162:	490e      	ldr	r1, [pc, #56]	@ (800119c <main+0x70>)
 8001164:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <main+0x7c>)
 8001166:	f000 fb21 	bl	80017ac <readBrakeTemp>
		readTireTemp(&ms_since_ttemp_read, (CANCONTEXT.ttemp_dataframes));
 800116a:	4910      	ldr	r1, [pc, #64]	@ (80011ac <main+0x80>)
 800116c:	4810      	ldr	r0, [pc, #64]	@ (80011b0 <main+0x84>)
 800116e:	f000 fb36 	bl	80017de <readTireTemp>
		readStrainGauges(&hspi1, &ms_since_strain_read, &(CANCONTEXT.straingauge_dataframe));
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <main+0x88>)
 8001174:	4910      	ldr	r1, [pc, #64]	@ (80011b8 <main+0x8c>)
 8001176:	4811      	ldr	r0, [pc, #68]	@ (80011bc <main+0x90>)
 8001178:	f000 fba7 	bl	80018ca <readStrainGauges>
		readWheelSpeed(&ms_since_whs_read, &(CANCONTEXT.misc_dataframe));
 800117c:	4907      	ldr	r1, [pc, #28]	@ (800119c <main+0x70>)
 800117e:	4810      	ldr	r0, [pc, #64]	@ (80011c0 <main+0x94>)
 8001180:	f000 fbc6 	bl	8001910 <readWheelSpeed>
		readBoardTemp(&hspi1, &ms_since_boardtemp_read, &(CANCONTEXT.misc_dataframe));
 8001184:	4a05      	ldr	r2, [pc, #20]	@ (800119c <main+0x70>)
 8001186:	490f      	ldr	r1, [pc, #60]	@ (80011c4 <main+0x98>)
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <main+0x90>)
 800118a:	f000 fc33 	bl	80019f4 <readBoardTemp>


		//send out the sensors
		CANMailman(&hcan1, &CTXHeader, &CANCONTEXT);
 800118e:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <main+0x9c>)
 8001190:	490e      	ldr	r1, [pc, #56]	@ (80011cc <main+0xa0>)
 8001192:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <main+0xa4>)
 8001194:	f7ff ff0b 	bl	8000fae <CANMailman>
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8001198:	bf00      	nop
 800119a:	e7dd      	b.n	8001158 <main+0x2c>
 800119c:	200004c4 	.word	0x200004c4
 80011a0:	200004cc 	.word	0x200004cc
 80011a4:	200001f0 	.word	0x200001f0
 80011a8:	200004d8 	.word	0x200004d8
 80011ac:	200004a0 	.word	0x200004a0
 80011b0:	200004d4 	.word	0x200004d4
 80011b4:	20000494 	.word	0x20000494
 80011b8:	200004d0 	.word	0x200004d0
 80011bc:	200002d0 	.word	0x200002d0
 80011c0:	200004dc 	.word	0x200004dc
 80011c4:	200004e0 	.word	0x200004e0
 80011c8:	20000490 	.word	0x20000490
 80011cc:	200004e4 	.word	0x200004e4
 80011d0:	20000254 	.word	0x20000254

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b096      	sub	sp, #88	@ 0x58
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2244      	movs	r2, #68	@ 0x44
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 ffd1 	bl	800718a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011fa:	f003 f829 	bl	8004250 <HAL_PWREx_ControlVoltageScaling>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001204:	f000 faa8 	bl	8001758 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001210:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001212:	2310      	movs	r3, #16
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001216:	2302      	movs	r3, #2
 8001218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121a:	2302      	movs	r3, #2
 800121c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001222:	230a      	movs	r3, #10
 8001224:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001226:	2307      	movs	r3, #7
 8001228:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122a:	2302      	movs	r3, #2
 800122c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800122e:	2302      	movs	r3, #2
 8001230:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4618      	mov	r0, r3
 8001238:	f003 f860 	bl	80042fc <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001242:	f000 fa89 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2303      	movs	r3, #3
 800124c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2104      	movs	r1, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fc60 	bl	8004b24 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800126a:	f000 fa75 	bl	8001758 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3758      	adds	r7, #88	@ 0x58
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800128e:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <MX_ADC1_Init+0xbc>)
 8001290:	4a29      	ldr	r2, [pc, #164]	@ (8001338 <MX_ADC1_Init+0xc0>)
 8001292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <MX_ADC1_Init+0xbc>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <MX_ADC1_Init+0xbc>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ee:	4811      	ldr	r0, [pc, #68]	@ (8001334 <MX_ADC1_Init+0xbc>)
 80012f0:	f001 f970 	bl	80025d4 <HAL_ADC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80012fa:	f000 fa2d 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_ADC1_Init+0xc4>)
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001302:	2306      	movs	r3, #6
 8001304:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130a:	237f      	movs	r3, #127	@ 0x7f
 800130c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130e:	2304      	movs	r3, #4
 8001310:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_ADC1_Init+0xbc>)
 800131c:	f001 fb3e 	bl	800299c <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001326:	f000 fa17 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001f0 	.word	0x200001f0
 8001338:	50040000 	.word	0x50040000
 800133c:	19200040 	.word	0x19200040

08001340 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001346:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001348:	4a2b      	ldr	r2, [pc, #172]	@ (80013f8 <MX_CAN1_Init+0xb8>)
 800134a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800134c:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 800134e:	220a      	movs	r2, #10
 8001350:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001358:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800135e:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001360:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001364:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001368:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800136c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001370:	2200      	movs	r2, #0
 8001372:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001376:	2200      	movs	r2, #0
 8001378:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 800137c:	2200      	movs	r2, #0
 800137e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001380:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001382:	2200      	movs	r2, #0
 8001384:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001388:	2200      	movs	r2, #0
 800138a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 800138e:	2200      	movs	r2, #0
 8001390:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001392:	4818      	ldr	r0, [pc, #96]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 8001394:	f001 fffe 	bl	8003394 <HAL_CAN_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800139e:	f000 f9db 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* INITIALIZE CAN PARAMETERS */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 1;                       // value between 0 to 13 for JUST Master Mode (CAN1)
 80013a2:	2301      	movs	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;   // for filtering Identifiers
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 80013aa:	2301      	movs	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = (0x541) << 5;          // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 80013ae:	f64a 0320 	movw	r3, #43040	@ 0xa820
 80013b2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x00;                   // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x00;              // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x00;               // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;  // specify FIFO0 or FIFO1
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = CAN_FILTER_DISABLE; // Enable filtering
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]

	CTXHeader.IDE = CAN_ID_STD;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_CAN1_Init+0xbc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	CTXHeader.RTR = CAN_RTR_DATA;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <MX_CAN1_Init+0xbc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
	CTXHeader.DLC = 8;
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_CAN1_Init+0xbc>)
 80013d6:	2208      	movs	r2, #8
 80013d8:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 80013e0:	f002 f8d3 	bl	800358a <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <MX_CAN1_Init+0xb4>)
 80013e6:	f002 f99a 	bl	800371e <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000254 	.word	0x20000254
 80013f8:	40006400 	.word	0x40006400
 80013fc:	200004e4 	.word	0x200004e4

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <MX_I2C1_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <MX_I2C1_Init+0x74>)
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <MX_I2C1_Init+0x7c>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001418:	2201      	movs	r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143a:	480e      	ldr	r0, [pc, #56]	@ (8001474 <MX_I2C1_Init+0x74>)
 800143c:	f002 fdc8 	bl	8003fd0 <HAL_I2C_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001446:	f000 f987 	bl	8001758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4809      	ldr	r0, [pc, #36]	@ (8001474 <MX_I2C1_Init+0x74>)
 800144e:	f002 fe5a 	bl	8004106 <HAL_I2CEx_ConfigAnalogFilter>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001458:	f000 f97e 	bl	8001758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_I2C1_Init+0x74>)
 8001460:	f002 fe9c 	bl	800419c <HAL_I2CEx_ConfigDigitalFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f975 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000027c 	.word	0x2000027c
 8001478:	40005400 	.word	0x40005400
 800147c:	10d19ce4 	.word	0x10d19ce4

08001480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <MX_SPI1_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <MX_SPI1_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_SPI1_Init+0x74>)
 800148c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_SPI1_Init+0x74>)
 800149a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800149e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014b6:	2228      	movs	r2, #40	@ 0x28
 80014b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014ce:	2207      	movs	r2, #7
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014da:	2208      	movs	r2, #8
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_SPI1_Init+0x74>)
 80014e0:	f004 f82c 	bl	800553c <HAL_SPI_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 f935 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200002d0 	.word	0x200002d0
 80014f8:	40013000 	.word	0x40013000

080014fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <MX_TIM1_Init+0xa0>)
 800151c:	4a20      	ldr	r2, [pc, #128]	@ (80015a0 <MX_TIM1_Init+0xa4>)
 800151e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001520:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <MX_TIM1_Init+0xa0>)
 8001522:	2204      	movs	r2, #4
 8001524:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <MX_TIM1_Init+0xa0>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <MX_TIM1_Init+0xa0>)
 800152e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <MX_TIM1_Init+0xa0>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <MX_TIM1_Init+0xa0>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <MX_TIM1_Init+0xa0>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001546:	4815      	ldr	r0, [pc, #84]	@ (800159c <MX_TIM1_Init+0xa0>)
 8001548:	f004 f89b 	bl	8005682 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001552:	f000 f901 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	@ (800159c <MX_TIM1_Init+0xa0>)
 8001564:	f004 f8e4 	bl	8005730 <HAL_TIM_ConfigClockSource>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800156e:	f000 f8f3 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	@ (800159c <MX_TIM1_Init+0xa0>)
 8001584:	f004 faa8 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800158e:	f000 f8e3 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000334 	.word	0x20000334
 80015a0:	40012c00 	.word	0x40012c00

080015a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015aa:	4a16      	ldr	r2, [pc, #88]	@ (8001604 <MX_USART1_UART_Init+0x60>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80015e6:	2300      	movs	r3, #0
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	4804      	ldr	r0, [pc, #16]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015ee:	f004 fff8 	bl	80065e2 <HAL_RS485Ex_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015f8:	f000 f8ae 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000380 	.word	0x20000380
 8001604:	40013800 	.word	0x40013800

08001608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_UART_MspInit(&huart2);
 800160c:	4815      	ldr	r0, [pc, #84]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 800160e:	f000 fba3 	bl	8001d58 <HAL_UART_MspInit>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <MX_USART2_UART_Init+0x60>)
 8001616:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 800161a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800161e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001634:	220c      	movs	r2, #12
 8001636:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 800164c:	2200      	movs	r2, #0
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_USART2_UART_Init+0x5c>)
 8001652:	f004 faa7 	bl	8005ba4 <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800165c:	f000 f87c 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000408 	.word	0x20000408
 8001668:	40004400 	.word	0x40004400

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <MX_GPIO_Init+0xc0>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a29      	ldr	r2, [pc, #164]	@ (800172c <MX_GPIO_Init+0xc0>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <MX_GPIO_Init+0xc0>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b24      	ldr	r3, [pc, #144]	@ (800172c <MX_GPIO_Init+0xc0>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a23      	ldr	r2, [pc, #140]	@ (800172c <MX_GPIO_Init+0xc0>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b21      	ldr	r3, [pc, #132]	@ (800172c <MX_GPIO_Init+0xc0>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <MX_GPIO_Init+0xc0>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <MX_GPIO_Init+0xc0>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <MX_GPIO_Init+0xc0>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_FAULT_GPIO_Port, GEN_FAULT_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2101      	movs	r1, #1
 80016ce:	4818      	ldr	r0, [pc, #96]	@ (8001730 <MX_GPIO_Init+0xc4>)
 80016d0:	f002 fc66 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016d4:	2308      	movs	r3, #8
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ea:	f002 fad7 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_FAULT_Pin */
  GPIO_InitStruct.Pin = GEN_FAULT_Pin;
 80016ee:	2301      	movs	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEN_FAULT_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	4619      	mov	r1, r3
 8001704:	480a      	ldr	r0, [pc, #40]	@ (8001730 <MX_GPIO_Init+0xc4>)
 8001706:	f002 fac9 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 800170a:	2310      	movs	r3, #16
 800170c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	4619      	mov	r1, r3
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <MX_GPIO_Init+0xc4>)
 800171e:	f002 fabd 	bl	8003c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400

08001734 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the LPUART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001742:	2201      	movs	r2, #1
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <__io_putchar+0x20>)
 8001746:	f004 fa7b 	bl	8005c40 <HAL_UART_Transmit>

	return ch;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000408 	.word	0x20000408

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <Error_Handler+0x8>

08001764 <readLinearPotentiometer>:

#include "sensor_read_helpers.h"
#include <stdio.h>


void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS,  MISC_DATAFRAME *dataframe) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	uint32_t ADC_Read[1];
	uint32_t ADC_BUFFER = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
	//		HAL_ADC_PollForConversion(&hadc1, 100);
	//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

	HAL_ADC_Start_DMA(hadc, ADC_Read, ADC_BUFFER);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4619      	mov	r1, r3
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f001 f86b 	bl	8002858 <HAL_ADC_Start_DMA>
	if(HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD){
 8001782:	f000 fd53 	bl	800222c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b15      	cmp	r3, #21
 8001790:	d908      	bls.n	80017a4 <readLinearPotentiometer+0x40>
		dataframe->data.shockTravel = ADC_Read[0];
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	809a      	strh	r2, [r3, #4]

		*lastReadMS = HAL_GetTick();
 800179a:	f000 fd47 	bl	800222c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	601a      	str	r2, [r3, #0]
	}

	//todo: convert counts to travel
}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <readBrakeTemp>:

void readBrakeTemp(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > BRAKE_TEMP_SAMPLE_PERIOD){
 80017b6:	f000 fd39 	bl	800222c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b65      	cmp	r3, #101	@ 0x65
 80017c4:	d907      	bls.n	80017d6 <readBrakeTemp+0x2a>
		dataframe->data.brakeTemp = 0;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	805a      	strh	r2, [r3, #2]
		//todo: actual brake temp sensor read code
		*lastReadMS = HAL_GetTick();
 80017cc:	f000 fd2e 	bl	800222c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
	}

	//todo: convert to deg C
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <readTireTemp>:

void readTireTemp(uint32_t *lastReadMS, TTEMP_DATAFRAME *dataframes) {
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > TIRE_TEMP_SAMPLE_PERIOD){
 80017e8:	f000 fd20 	bl	800222c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80017f8:	d363      	bcc.n	80018c2 <readTireTemp+0xe4>
		for(int i = 0; i < 4; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	e058      	b.n	80018b2 <readTireTemp+0xd4>
			dataframes[i].data.pix0 = 1 + (4*i);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	b2da      	uxtb	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	440b      	add	r3, r1
 8001810:	3201      	adds	r2, #1
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix1 = 2 + (4*i);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	b2da      	uxtb	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	440b      	add	r3, r1
 8001826:	3202      	adds	r2, #2
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	705a      	strb	r2, [r3, #1]
			dataframes[i].data.pix2 = 3 + (4*i);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	6839      	ldr	r1, [r7, #0]
 800183a:	440b      	add	r3, r1
 800183c:	3203      	adds	r2, #3
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	709a      	strb	r2, [r3, #2]
			dataframes[i].data.pix3 = 4 + (4*i);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	6839      	ldr	r1, [r7, #0]
 800184e:	440b      	add	r3, r1
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	70da      	strb	r2, [r3, #3]
			dataframes[i].data.pix4 = 5 + (4*i);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	b2da      	uxtb	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	440b      	add	r3, r1
 8001866:	3205      	adds	r2, #5
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	711a      	strb	r2, [r3, #4]
			dataframes[i].data.pix5 = 6 + (4*i);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	6839      	ldr	r1, [r7, #0]
 800187a:	440b      	add	r3, r1
 800187c:	3206      	adds	r2, #6
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	715a      	strb	r2, [r3, #5]
			dataframes[i].data.pix6 = 7 + (4*i);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	b2da      	uxtb	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	440b      	add	r3, r1
 8001892:	3207      	adds	r2, #7
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	719a      	strb	r2, [r3, #6]
			dataframes[i].data.pix7 = 8 + (4*i);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3302      	adds	r3, #2
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	440b      	add	r3, r1
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	71da      	strb	r2, [r3, #7]
		for(int i = 0; i < 4; i++) {
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	dda3      	ble.n	8001800 <readTireTemp+0x22>
		}


		//todo: actual tire temp sensor read code
		*lastReadMS = HAL_GetTick();
 80018b8:	f000 fcb8 	bl	800222c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]
	}
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <readStrainGauges>:
void readStrainGauges(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, SG_DATAFRAME *dataframe) {
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 80018d6:	f000 fca9 	bl	800222c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d910      	bls.n	8001908 <readStrainGauges+0x3e>
		dataframe->data.SG0 = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	801a      	strh	r2, [r3, #0]
		dataframe->data.SG1 = 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	805a      	strh	r2, [r3, #2]
		dataframe->data.SG2 = 0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	809a      	strh	r2, [r3, #4]
		dataframe->data.SG3 = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	80da      	strh	r2, [r3, #6]

		//todo: actual strain gauge sensor read code
		//todo: convert counts to newtons
		*lastReadMS = HAL_GetTick();
 80018fe:	f000 fc95 	bl	800222c <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	601a      	str	r2, [r3, #0]
	}
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <readWheelSpeed>:

void readWheelSpeed(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
    static uint32_t edgeCount = 0;
    static uint32_t sampleStartTime = 0;
    static uint8_t prevLevel = 0;
    const uint32_t sampleWindowMS = 200;
 800191a:	23c8      	movs	r3, #200	@ 0xc8
 800191c:	61fb      	str	r3, [r7, #28]
    const uint32_t edgesPerRev = 24;
 800191e:	2318      	movs	r3, #24
 8001920:	61bb      	str	r3, [r7, #24]

    uint32_t now = HAL_GetTick();
 8001922:	f000 fc83 	bl	800222c <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

    if ((now - sampleStartTime) >= sampleWindowMS) {
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <readWheelSpeed+0xcc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	429a      	cmp	r2, r3
 8001934:	d837      	bhi.n	80019a6 <readWheelSpeed+0x96>
        float rotations = (float)edgeCount / (float)edgesPerRev;
 8001936:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <readWheelSpeed+0xd0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800194c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001950:	edc7 7a04 	vstr	s15, [r7, #16]
        float rpm = rotations * (60000.0f / sampleWindowMS);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800195e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80019e4 <readWheelSpeed+0xd4>
 8001962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001966:	ed97 7a04 	vldr	s14, [r7, #16]
 800196a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196e:	edc7 7a03 	vstr	s15, [r7, #12]

        dataframe->data.wheelRPM = (uint16_t)rpm;
 8001972:	edd7 7a03 	vldr	s15, [r7, #12]
 8001976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800197a:	ee17 3a90 	vmov	r3, s15
 800197e:	b29a      	uxth	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	801a      	strh	r2, [r3, #0]
        printf("Edges: %lu, RPM: %.2f\r\n", edgeCount, rpm);
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <readWheelSpeed+0xd0>)
 8001986:	681c      	ldr	r4, [r3, #0]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7fe fddd 	bl	8000548 <__aeabi_f2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4621      	mov	r1, r4
 8001994:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <readWheelSpeed+0xd8>)
 8001996:	f005 fba3 	bl	80070e0 <iprintf>

        edgeCount = 0;
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <readWheelSpeed+0xd0>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
        sampleStartTime = now;
 80019a0:	4a0e      	ldr	r2, [pc, #56]	@ (80019dc <readWheelSpeed+0xcc>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	6013      	str	r3, [r2, #0]
    }

    uint8_t currentLevel = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80019a6:	2110      	movs	r1, #16
 80019a8:	4810      	ldr	r0, [pc, #64]	@ (80019ec <readWheelSpeed+0xdc>)
 80019aa:	f002 fae1 	bl	8003f70 <HAL_GPIO_ReadPin>
 80019ae:	4603      	mov	r3, r0
 80019b0:	72fb      	strb	r3, [r7, #11]
    if (currentLevel != prevLevel) {
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <readWheelSpeed+0xe0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	7afa      	ldrb	r2, [r7, #11]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d007      	beq.n	80019cc <readWheelSpeed+0xbc>
        edgeCount++;
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <readWheelSpeed+0xd0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <readWheelSpeed+0xd0>)
 80019c4:	6013      	str	r3, [r2, #0]
        prevLevel = currentLevel;
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <readWheelSpeed+0xe0>)
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	7013      	strb	r3, [r2, #0]
    }

    *lastReadMS = now;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	200004fc 	.word	0x200004fc
 80019e0:	20000500 	.word	0x20000500
 80019e4:	476a6000 	.word	0x476a6000
 80019e8:	08008ff8 	.word	0x08008ff8
 80019ec:	48000400 	.word	0x48000400
 80019f0:	20000504 	.word	0x20000504

080019f4 <readBoardTemp>:




void readBoardTemp(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8001a00:	f000 fc14 	bl	800222c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d907      	bls.n	8001a20 <readBoardTemp+0x2c>
		dataframe->data.boardTemp = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	719a      	strb	r2, [r3, #6]


		//todo: use ads1118, same chip as the shits, to read board temp
		//todo: convert counts to deg.C
		*lastReadMS = HAL_GetTick();
 8001a16:	f000 fc09 	bl	800222c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	601a      	str	r2, [r3, #0]
	}
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b09e      	sub	sp, #120	@ 0x78
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2254      	movs	r2, #84	@ 0x54
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fb7a 	bl	800718a <memset>
  if(hadc->Instance==ADC1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a25      	ldr	r2, [pc, #148]	@ (8001b30 <HAL_ADC_MspInit+0xc0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d143      	bne.n	8001b28 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001aa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001aa4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001aa6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001aac:	2302      	movs	r3, #2
 8001aae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fa4c 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001ada:	f7ff fe3d 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_ADC_MspInit+0xc4>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <HAL_ADC_MspInit+0xc4>)
 8001ae4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_ADC_MspInit+0xc4>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_ADC_MspInit+0xc4>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_ADC_MspInit+0xc4>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_ADC_MspInit+0xc4>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b12:	230b      	movs	r3, #11
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b24:	f002 f8ba 	bl	8003c9c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b28:	bf00      	nop
 8001b2a:	3778      	adds	r7, #120	@ 0x78
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	50040000 	.word	0x50040000
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	@ (8001bdc <HAL_CAN_MspInit+0xa4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d13b      	bne.n	8001bd2 <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_CAN_MspInit+0xa8>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a20      	ldr	r2, [pc, #128]	@ (8001be0 <HAL_CAN_MspInit+0xa8>)
 8001b60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <HAL_CAN_MspInit+0xa8>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_CAN_MspInit+0xa8>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4a1a      	ldr	r2, [pc, #104]	@ (8001be0 <HAL_CAN_MspInit+0xa8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <HAL_CAN_MspInit+0xa8>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b9c:	2309      	movs	r3, #9
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001baa:	f002 f877 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bc0:	2309      	movs	r3, #9
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bce:	f002 f865 	bl	8003c9c <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	@ 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40006400 	.word	0x40006400
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b09e      	sub	sp, #120	@ 0x78
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	2254      	movs	r2, #84	@ 0x54
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fac0 	bl	800718a <memset>
  if(hi2c->Instance==I2C1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c88 <HAL_I2C_MspInit+0xa4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d135      	bne.n	8001c80 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c14:	2340      	movs	r3, #64	@ 0x40
 8001c16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 f9a3 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c2c:	f7ff fd94 	bl	8001758 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_I2C_MspInit+0xa8>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c34:	4a15      	ldr	r2, [pc, #84]	@ (8001c8c <HAL_I2C_MspInit+0xa8>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_I2C_MspInit+0xa8>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c48:	23c0      	movs	r3, #192	@ 0xc0
 8001c4a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4c:	2312      	movs	r3, #18
 8001c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c60:	4619      	mov	r1, r3
 8001c62:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <HAL_I2C_MspInit+0xac>)
 8001c64:	f002 f81a 	bl	8003c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <HAL_I2C_MspInit+0xa8>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6c:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <HAL_I2C_MspInit+0xa8>)
 8001c6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_I2C_MspInit+0xa8>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c80:	bf00      	nop
 8001c82:	3778      	adds	r7, #120	@ 0x78
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	48000400 	.word	0x48000400

08001c94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_SPI_MspInit+0x7c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d128      	bne.n	8001d08 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cba:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ce6:	23f0      	movs	r3, #240	@ 0xf0
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d04:	f001 ffca 	bl	8003c9c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	@ 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40013000 	.word	0x40013000
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_TIM_Base_MspInit+0x38>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10b      	bne.n	8001d42 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_TIM_Base_MspInit+0x3c>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <HAL_TIM_Base_MspInit+0x3c>)
 8001d30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_TIM_Base_MspInit+0x3c>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0a2      	sub	sp, #136	@ 0x88
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	2254      	movs	r2, #84	@ 0x54
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fa06 	bl	800718a <memset>
  if(huart->Instance==USART1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a59      	ldr	r2, [pc, #356]	@ (8001ee8 <HAL_UART_MspInit+0x190>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d158      	bne.n	8001e3a <HAL_UART_MspInit+0xe2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d90:	f107 0320 	add.w	r3, r7, #32
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 f8e9 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001da0:	f7ff fcda 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da4:	4b51      	ldr	r3, [pc, #324]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da8:	4a50      	ldr	r2, [pc, #320]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db0:	4b4e      	ldr	r3, [pc, #312]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc8:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd4:	4b45      	ldr	r3, [pc, #276]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd8:	4a44      	ldr	r2, [pc, #272]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de0:	4b42      	ldr	r3, [pc, #264]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB3 (JTDO-TRACESWO)     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001df0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e00:	2307      	movs	r3, #7
 8001e02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e10:	f001 ff44 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e14:	2308      	movs	r3, #8
 8001e16:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e26:	2307      	movs	r3, #7
 8001e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e30:	4619      	mov	r1, r3
 8001e32:	482f      	ldr	r0, [pc, #188]	@ (8001ef0 <HAL_UART_MspInit+0x198>)
 8001e34:	f001 ff32 	bl	8003c9c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e38:	e051      	b.n	8001ede <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef4 <HAL_UART_MspInit+0x19c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d14c      	bne.n	8001ede <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	f107 0320 	add.w	r3, r7, #32
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 f88b 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8001e5c:	f7ff fc7c 	bl	8001758 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b1c      	ldr	r3, [pc, #112]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <HAL_UART_MspInit+0x194>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e90:	2304      	movs	r3, #4
 8001e92:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb2:	f001 fef3 	bl	8003c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eda:	f001 fedf 	bl	8003c9c <HAL_GPIO_Init>
}
 8001ede:	bf00      	nop
 8001ee0:	3788      	adds	r7, #136	@ 0x88
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <NMI_Handler+0x4>

08001f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <MemManage_Handler+0x4>

08001f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4e:	f000 f959 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_kill>:

int _kill(int pid, int sig)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f70:	f005 f95e 	bl	8007230 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2216      	movs	r2, #22
 8001f78:	601a      	str	r2, [r3, #0]
  return -1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_exit>:

void _exit (int status)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffe7 	bl	8001f66 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <_exit+0x12>

08001f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e00a      	b.n	8001fc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fae:	f3af 8000 	nop.w
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	60ba      	str	r2, [r7, #8]
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf0      	blt.n	8001fae <_read+0x12>
  }

  return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e009      	b.n	8001ffc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	60ba      	str	r2, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fb9f 	bl	8001734 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	dbf1      	blt.n	8001fe8 <_write+0x12>
  }
  return len;
 8002004:	687b      	ldr	r3, [r7, #4]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_close>:

int _close(int file)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002036:	605a      	str	r2, [r3, #4]
  return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_isatty>:

int _isatty(int file)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	@ (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f005 f8c2 	bl	8007230 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000c000 	.word	0x2000c000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	20000508 	.word	0x20000508
 80020e0:	20000660 	.word	0x20000660

080020e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <SystemInit+0x20>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <SystemInit+0x20>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002140 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800210c:	f7ff ffea 	bl	80020e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002110:	480c      	ldr	r0, [pc, #48]	@ (8002144 <LoopForever+0x6>)
  ldr r1, =_edata
 8002112:	490d      	ldr	r1, [pc, #52]	@ (8002148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <LoopForever+0xe>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002128:	4c0a      	ldr	r4, [pc, #40]	@ (8002154 <LoopForever+0x16>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002136:	f005 f881 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800213a:	f7fe fff7 	bl	800112c <main>

0800213e <LoopForever>:

LoopForever:
    b LoopForever
 800213e:	e7fe      	b.n	800213e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002140:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800214c:	080093dc 	.word	0x080093dc
  ldr r2, =_sbss
 8002150:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002154:	2000065c 	.word	0x2000065c

08002158 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC1_IRQHandler>

0800215a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f001 fcd5 	bl	8003b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800216a:	2000      	movs	r0, #0
 800216c:	f000 f80e 	bl	800218c <HAL_InitTick>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	e001      	b.n	8002180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800217c:	f7ff fc54 	bl	8001a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002180:	79fb      	ldrb	r3, [r7, #7]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HAL_InitTick+0x6c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021a0:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <HAL_InitTick+0x70>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_InitTick+0x6c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 fcd3 	bl	8003b62 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10f      	bne.n	80021e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d809      	bhi.n	80021dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f001 fcab 	bl	8003b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_InitTick+0x74>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e007      	b.n	80021ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e004      	b.n	80021ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	e001      	b.n	80021ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000008 	.word	0x20000008
 8002228:	2000050c 	.word	0x2000050c

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	2000050c 	.word	0x2000050c

08002244 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3360      	adds	r3, #96	@ 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <LL_ADC_SetOffset+0x44>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	4313      	orrs	r3, r2
 80022dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	03fff000 	.word	0x03fff000

080022f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3360      	adds	r3, #96	@ 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3360      	adds	r3, #96	@ 0x60
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	431a      	orrs	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3330      	adds	r3, #48	@ 0x30
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	4413      	add	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	211f      	movs	r1, #31
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 011f 	and.w	r1, r3, #31
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	431a      	orrs	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3314      	adds	r3, #20
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	0e5b      	lsrs	r3, r3, #25
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0d1b      	lsrs	r3, r3, #20
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2107      	movs	r1, #7
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	0d1b      	lsrs	r3, r3, #20
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0318 	and.w	r3, r3, #24
 800244e:	4908      	ldr	r1, [pc, #32]	@ (8002470 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002450:	40d9      	lsrs	r1, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	400b      	ands	r3, r1
 8002456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245a:	431a      	orrs	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	0007ffff 	.word	0x0007ffff

08002474 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002484:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6093      	str	r3, [r2, #8]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ac:	d101      	bne.n	80024b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024fc:	d101      	bne.n	8002502 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <LL_ADC_IsEnabled+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_ADC_IsEnabled+0x1a>
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800256e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002572:	f043 0204 	orr.w	r2, r3, #4
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d101      	bne.n	800259e <LL_ADC_REG_IsConversionOngoing+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d101      	bne.n	80025c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e126      	b.n	800283c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fa37 	bl	8001a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff3f 	bl	8002498 <LL_ADC_IsDeepPowerDownEnabled>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff25 	bl	8002474 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff5a 	bl	80024e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d115      	bne.n	8002666 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff3e 	bl	80024c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002644:	4b7f      	ldr	r3, [pc, #508]	@ (8002844 <HAL_ADC_Init+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	4a7f      	ldr	r2, [pc, #508]	@ (8002848 <HAL_ADC_Init+0x274>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	3301      	adds	r3, #1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002658:	e002      	b.n	8002660 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b01      	subs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f9      	bne.n	800265a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff3c 	bl	80024e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff75 	bl	8002586 <LL_ADC_REG_IsConversionOngoing>
 800269c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 80bf 	bne.w	800282a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 80bb 	bne.w	800282a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff35 	bl	8002538 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d4:	485d      	ldr	r0, [pc, #372]	@ (800284c <HAL_ADC_Init+0x278>)
 80026d6:	f7ff ff2f 	bl	8002538 <LL_ADC_IsEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4619      	mov	r1, r3
 80026e6:	485a      	ldr	r0, [pc, #360]	@ (8002850 <HAL_ADC_Init+0x27c>)
 80026e8:	f7ff fdac 	bl	8002244 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e5b      	ldrb	r3, [r3, #25]
 80026f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002702:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	3b01      	subs	r3, #1
 8002720:	045b      	lsls	r3, r3, #17
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <HAL_ADC_Init+0x280>)
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	430b      	orrs	r3, r1
 8002756:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff25 	bl	80025ac <LL_ADC_INJ_IsConversionOngoing>
 8002762:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d13d      	bne.n	80027e6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d13a      	bne.n	80027e6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002774:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800277c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800278c:	f023 0302 	bic.w	r3, r3, #2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	430b      	orrs	r3, r1
 8002798:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d118      	bne.n	80027d6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027c6:	430a      	orrs	r2, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	611a      	str	r2, [r3, #16]
 80027d4:	e007      	b.n	80027e6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10c      	bne.n	8002808 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	f023 010f 	bic.w	r1, r3, #15
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	631a      	str	r2, [r3, #48]	@ 0x30
 8002806:	e007      	b.n	8002818 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 020f 	bic.w	r2, r2, #15
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	f023 0303 	bic.w	r3, r3, #3
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	@ 0x54
 8002828:	e007      	b.n	800283a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282e:	f043 0210 	orr.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800283a:	7ffb      	ldrb	r3, [r7, #31]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000
 8002848:	053e2d63 	.word	0x053e2d63
 800284c:	50040000 	.word	0x50040000
 8002850:	50040300 	.word	0x50040300
 8002854:	fff0c007 	.word	0xfff0c007

08002858 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe8c 	bl	8002586 <LL_ADC_REG_IsConversionOngoing>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d167      	bne.n	8002944 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_ADC_Start_DMA+0x2a>
 800287e:	2302      	movs	r3, #2
 8002880:	e063      	b.n	800294a <HAL_ADC_Start_DMA+0xf2>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fc68 	bl	8003160 <ADC_Enable>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14f      	bne.n	800293a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	f023 0206 	bic.w	r2, r3, #6
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80028c6:	e002      	b.n	80028ce <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	4a20      	ldr	r2, [pc, #128]	@ (8002954 <HAL_ADC_Start_DMA+0xfc>)
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	4a1f      	ldr	r2, [pc, #124]	@ (8002958 <HAL_ADC_Start_DMA+0x100>)
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	4a1e      	ldr	r2, [pc, #120]	@ (800295c <HAL_ADC_Start_DMA+0x104>)
 80028e4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	221c      	movs	r2, #28
 80028ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0210 	orr.w	r2, r2, #16
 8002904:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3340      	adds	r3, #64	@ 0x40
 8002920:	4619      	mov	r1, r3
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f001 f928 	bl	8003b7a <HAL_DMA_Start_IT>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fe13 	bl	800255e <LL_ADC_REG_StartConversion>
 8002938:	e006      	b.n	8002948 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002942:	e001      	b.n	8002948 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002948:	7dfb      	ldrb	r3, [r7, #23]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	0800326d 	.word	0x0800326d
 8002958:	08003345 	.word	0x08003345
 800295c:	08003361 	.word	0x08003361

08002960 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0b6      	sub	sp, #216	@ 0xd8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x22>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e3bb      	b.n	8003136 <HAL_ADC_ConfigChannel+0x79a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fddb 	bl	8002586 <LL_ADC_REG_IsConversionOngoing>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 83a0 	bne.w	8003118 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d824      	bhi.n	8002a32 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	3b02      	subs	r3, #2
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d81b      	bhi.n	8002a2a <HAL_ADC_ConfigChannel+0x8e>
 80029f2:	a201      	add	r2, pc, #4	@ (adr r2, 80029f8 <HAL_ADC_ConfigChannel+0x5c>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a09 	.word	0x08002a09
 80029fc:	08002a11 	.word	0x08002a11
 8002a00:	08002a19 	.word	0x08002a19
 8002a04:	08002a21 	.word	0x08002a21
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a08:	230c      	movs	r3, #12
 8002a0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a0e:	e010      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a10:	2312      	movs	r3, #18
 8002a12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a16:	e00c      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a18:	2318      	movs	r3, #24
 8002a1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a1e:	e008      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a28:	e003      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a30:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a40:	f7ff fc9c 	bl	800237c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fd9c 	bl	8002586 <LL_ADC_REG_IsConversionOngoing>
 8002a4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fda8 	bl	80025ac <LL_ADC_INJ_IsConversionOngoing>
 8002a5c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 81a4 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 819f 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f7ff fca7 	bl	80023d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d00a      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6919      	ldr	r1, [r3, #16]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ab8:	f7ff fbf8 	bl	80022ac <LL_ADC_SetOffset>
 8002abc:	e179      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fc15 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x14e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fc0a 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	e01e      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x18c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fbff 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e004      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002b1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1a4>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	e018      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1d6>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e004      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002b68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d106      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fbce 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fbb2 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x214>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fba7 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	e01e      	b.n	8002bee <HAL_ADC_ConfigChannel+0x252>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fb9c 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002bce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002bde:	2320      	movs	r3, #32
 8002be0:	e004      	b.n	8002bec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x26a>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	e018      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x29c>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fb6b 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fb4f 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x2da>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2102      	movs	r1, #2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fb44 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	e01e      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x318>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fb39 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e004      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x330>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	e014      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x35a>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002cda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	e004      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d106      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fb0c 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2103      	movs	r1, #3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff faf0 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x398>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2103      	movs	r1, #3
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fae5 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	f003 021f 	and.w	r2, r3, #31
 8002d32:	e017      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x3c8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2103      	movs	r1, #3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fada 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002d40:	4603      	mov	r3, r0
 8002d42:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002d56:	2320      	movs	r3, #32
 8002d58:	e003      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x3e0>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	e011      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x404>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002d8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002d98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d106      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2103      	movs	r1, #3
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fab7 	bl	8002320 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fbbe 	bl	8002538 <LL_ADC_IsEnabled>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8140 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f7ff fb2b 	bl	800242c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a8f      	ldr	r2, [pc, #572]	@ (8003018 <HAL_ADC_ConfigChannel+0x67c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	f040 8131 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10b      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x46e>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	0e9b      	lsrs	r3, r3, #26
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2b09      	cmp	r3, #9
 8002e00:	bf94      	ite	ls
 8002e02:	2301      	movls	r3, #1
 8002e04:	2300      	movhi	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e019      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x4a2>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e003      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002e26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	bf94      	ite	ls
 8002e38:	2301      	movls	r3, #1
 8002e3a:	2300      	movhi	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d079      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x4c2>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0e9b      	lsrs	r3, r3, #26
 8002e54:	3301      	adds	r3, #1
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5c:	e015      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x4ee>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e6e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e003      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	069b      	lsls	r3, r3, #26
 8002e86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x50e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	e017      	b.n	8002eda <HAL_ADC_ConfigChannel+0x53e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e003      	b.n	8002ece <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	ea42 0103 	orr.w	r1, r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x564>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 021f 	and.w	r2, r3, #31
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	051b      	lsls	r3, r3, #20
 8002efe:	e018      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x596>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f003 021f 	and.w	r2, r3, #31
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f32:	430b      	orrs	r3, r1
 8002f34:	e081      	b.n	800303a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d107      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x5b6>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	0e9b      	lsrs	r3, r3, #26
 8002f48:	3301      	adds	r3, #1
 8002f4a:	069b      	lsls	r3, r3, #26
 8002f4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f50:	e015      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x5e2>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e003      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	069b      	lsls	r3, r3, #26
 8002f7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x602>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	0e9b      	lsrs	r3, r3, #26
 8002f90:	3301      	adds	r3, #1
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	e017      	b.n	8002fce <HAL_ADC_ConfigChannel+0x632>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	61bb      	str	r3, [r7, #24]
  return result;
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e003      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x65e>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 021f 	and.w	r2, r3, #31
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b1e      	subs	r3, #30
 8002ff2:	051b      	lsls	r3, r3, #20
 8002ff4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ff8:	e01e      	b.n	8003038 <HAL_ADC_ConfigChannel+0x69c>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	60fb      	str	r3, [r7, #12]
  return result;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d104      	bne.n	800301c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e006      	b.n	8003024 <HAL_ADC_ConfigChannel+0x688>
 8003016:	bf00      	nop
 8003018:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	3b1e      	subs	r3, #30
 8003032:	051b      	lsls	r3, r3, #20
 8003034:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003038:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303e:	4619      	mov	r1, r3
 8003040:	f7ff f9c8 	bl	80023d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <HAL_ADC_ConfigChannel+0x7a4>)
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d06c      	beq.n	800312a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003050:	483c      	ldr	r0, [pc, #240]	@ (8003144 <HAL_ADC_ConfigChannel+0x7a8>)
 8003052:	f7ff f91d 	bl	8002290 <LL_ADC_GetCommonPathInternalCh>
 8003056:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3a      	ldr	r2, [pc, #232]	@ (8003148 <HAL_ADC_ConfigChannel+0x7ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d127      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003064:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d121      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a35      	ldr	r2, [pc, #212]	@ (800314c <HAL_ADC_ConfigChannel+0x7b0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d157      	bne.n	800312a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800307a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800307e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003082:	4619      	mov	r1, r3
 8003084:	482f      	ldr	r0, [pc, #188]	@ (8003144 <HAL_ADC_ConfigChannel+0x7a8>)
 8003086:	f7ff f8f0 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800308a:	4b31      	ldr	r3, [pc, #196]	@ (8003150 <HAL_ADC_ConfigChannel+0x7b4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	4a30      	ldr	r2, [pc, #192]	@ (8003154 <HAL_ADC_ConfigChannel+0x7b8>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030a4:	e002      	b.n	80030ac <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f9      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b2:	e03a      	b.n	800312a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_ADC_ConfigChannel+0x7bc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <HAL_ADC_ConfigChannel+0x7b0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d12a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030dc:	4619      	mov	r1, r3
 80030de:	4819      	ldr	r0, [pc, #100]	@ (8003144 <HAL_ADC_ConfigChannel+0x7a8>)
 80030e0:	f7ff f8c3 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e4:	e021      	b.n	800312a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <HAL_ADC_ConfigChannel+0x7c0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d11c      	bne.n	800312a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a12      	ldr	r2, [pc, #72]	@ (800314c <HAL_ADC_ConfigChannel+0x7b0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d111      	bne.n	800312a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800310a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800310e:	4619      	mov	r1, r3
 8003110:	480c      	ldr	r0, [pc, #48]	@ (8003144 <HAL_ADC_ConfigChannel+0x7a8>)
 8003112:	f7ff f8aa 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
 8003116:	e008      	b.n	800312a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003132:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003136:	4618      	mov	r0, r3
 8003138:	37d8      	adds	r7, #216	@ 0xd8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	80080000 	.word	0x80080000
 8003144:	50040300 	.word	0x50040300
 8003148:	c7520000 	.word	0xc7520000
 800314c:	50040000 	.word	0x50040000
 8003150:	20000000 	.word	0x20000000
 8003154:	053e2d63 	.word	0x053e2d63
 8003158:	cb840000 	.word	0xcb840000
 800315c:	80000001 	.word	0x80000001

08003160 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f9e1 	bl	8002538 <LL_ADC_IsEnabled>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d169      	bne.n	8003250 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b36      	ldr	r3, [pc, #216]	@ (800325c <ADC_Enable+0xfc>)
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00d      	beq.n	80031a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	f043 0210 	orr.w	r2, r3, #16
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e055      	b.n	8003252 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f9b0 	bl	8002510 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031b0:	482b      	ldr	r0, [pc, #172]	@ (8003260 <ADC_Enable+0x100>)
 80031b2:	f7ff f86d 	bl	8002290 <LL_ADC_GetCommonPathInternalCh>
 80031b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c0:	4b28      	ldr	r3, [pc, #160]	@ (8003264 <ADC_Enable+0x104>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	4a28      	ldr	r2, [pc, #160]	@ (8003268 <ADC_Enable+0x108>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031da:	e002      	b.n	80031e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3b01      	subs	r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031e8:	f7ff f820 	bl	800222c <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ee:	e028      	b.n	8003242 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f99f 	bl	8002538 <LL_ADC_IsEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f983 	bl	8002510 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800320a:	f7ff f80f 	bl	800222c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d914      	bls.n	8003242 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d00d      	beq.n	8003242 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e007      	b.n	8003252 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d1cf      	bne.n	80031f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	8000003f 	.word	0x8000003f
 8003260:	50040300 	.word	0x50040300
 8003264:	20000000 	.word	0x20000000
 8003268:	053e2d63 	.word	0x053e2d63

0800326c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003282:	2b00      	cmp	r3, #0
 8003284:	d14b      	bne.n	800331e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d021      	beq.n	80032e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f856 	bl	8002356 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d032      	beq.n	8003316 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d12b      	bne.n	8003316 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11f      	bne.n	8003316 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80032e2:	e018      	b.n	8003316 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d111      	bne.n	8003316 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff fb22 	bl	8002960 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800331c:	e00e      	b.n	800333c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff fb2c 	bl	8002988 <HAL_ADC_ErrorCallback>
}
 8003330:	e004      	b.n	800333c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff fb0e 	bl	8002974 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337e:	f043 0204 	orr.w	r2, r3, #4
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff fafe 	bl	8002988 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0ed      	b.n	8003582 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe fbc0 	bl	8001b38 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c8:	f7fe ff30 	bl	800222c <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033ce:	e012      	b.n	80033f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033d0:	f7fe ff2c 	bl	800222c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d90b      	bls.n	80033f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2205      	movs	r2, #5
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0c5      	b.n	8003582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0e5      	beq.n	80033d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0202 	bic.w	r2, r2, #2
 8003412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003414:	f7fe ff0a 	bl	800222c <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800341a:	e012      	b.n	8003442 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800341c:	f7fe ff06 	bl	800222c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b0a      	cmp	r3, #10
 8003428:	d90b      	bls.n	8003442 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2205      	movs	r2, #5
 800343a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e09f      	b.n	8003582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7e1b      	ldrb	r3, [r3, #24]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d108      	bne.n	800346a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e007      	b.n	800347a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	7e5b      	ldrb	r3, [r3, #25]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e007      	b.n	80034a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7e9b      	ldrb	r3, [r3, #26]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d108      	bne.n	80034be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0220 	orr.w	r2, r2, #32
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e007      	b.n	80034ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0220 	bic.w	r2, r2, #32
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7edb      	ldrb	r3, [r3, #27]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d108      	bne.n	80034e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0210 	bic.w	r2, r2, #16
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e007      	b.n	80034f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0210 	orr.w	r2, r2, #16
 80034f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7f1b      	ldrb	r3, [r3, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0208 	orr.w	r2, r2, #8
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e007      	b.n	8003522 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0208 	bic.w	r2, r2, #8
 8003520:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7f5b      	ldrb	r3, [r3, #29]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d108      	bne.n	800353c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0204 	orr.w	r2, r2, #4
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e007      	b.n	800354c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0204 	bic.w	r2, r2, #4
 800354a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	ea42 0103 	orr.w	r1, r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	1e5a      	subs	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800358a:	b480      	push	{r7}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d003      	beq.n	80035b0 <HAL_CAN_ConfigFilter+0x26>
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	f040 80aa 	bne.w	8003704 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2201      	movs	r2, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	401a      	ands	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d123      	bne.n	8003632 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	401a      	ands	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800360c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3248      	adds	r2, #72	@ 0x48
 8003612:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003626:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	3348      	adds	r3, #72	@ 0x48
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	440b      	add	r3, r1
 8003630:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d122      	bne.n	8003680 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	431a      	orrs	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800365a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3248      	adds	r2, #72	@ 0x48
 8003660:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003674:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003676:	6979      	ldr	r1, [r7, #20]
 8003678:	3348      	adds	r3, #72	@ 0x48
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800369a:	e007      	b.n	80036ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43db      	mvns	r3, r3
 80036be:	401a      	ands	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80036c6:	e007      	b.n	80036d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d107      	bne.n	80036f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e006      	b.n	8003712 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d12e      	bne.n	8003790 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800374a:	f7fe fd6f 	bl	800222c <HAL_GetTick>
 800374e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003750:	e012      	b.n	8003778 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003752:	f7fe fd6b 	bl	800222c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b0a      	cmp	r3, #10
 800375e:	d90b      	bls.n	8003778 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2205      	movs	r2, #5
 8003770:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e012      	b.n	800379e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e006      	b.n	800379e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b089      	sub	sp, #36	@ 0x24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037c4:	7ffb      	ldrb	r3, [r7, #31]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d003      	beq.n	80037d2 <HAL_CAN_AddTxMessage+0x2c>
 80037ca:	7ffb      	ldrb	r3, [r7, #31]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f040 80ad 	bne.w	800392c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8095 	beq.w	800391c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	0e1b      	lsrs	r3, r3, #24
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80037fc:	2201      	movs	r2, #1
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	409a      	lsls	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	6809      	ldr	r1, [r1, #0]
 800381c:	431a      	orrs	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3318      	adds	r3, #24
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	440b      	add	r3, r1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e00f      	b.n	800384a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003834:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800383e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3318      	adds	r3, #24
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	440b      	add	r3, r1
 8003848:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3318      	adds	r3, #24
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	440b      	add	r3, r1
 800385a:	3304      	adds	r3, #4
 800385c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	7d1b      	ldrb	r3, [r3, #20]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d111      	bne.n	800388a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3318      	adds	r3, #24
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	4413      	add	r3, r2
 8003872:	3304      	adds	r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	6811      	ldr	r1, [r2, #0]
 800387a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3318      	adds	r3, #24
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	440b      	add	r3, r1
 8003886:	3304      	adds	r3, #4
 8003888:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3307      	adds	r3, #7
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	061a      	lsls	r2, r3, #24
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3306      	adds	r3, #6
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3305      	adds	r3, #5
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	4313      	orrs	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	3204      	adds	r2, #4
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	4610      	mov	r0, r2
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6811      	ldr	r1, [r2, #0]
 80038b2:	ea43 0200 	orr.w	r2, r3, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80038c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3303      	adds	r3, #3
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	061a      	lsls	r2, r3, #24
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3302      	adds	r3, #2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3301      	adds	r3, #1
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	4313      	orrs	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	4610      	mov	r0, r2
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	6811      	ldr	r1, [r2, #0]
 80038e8:	ea43 0200 	orr.w	r2, r3, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	440b      	add	r3, r1
 80038f2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80038f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3318      	adds	r3, #24
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4413      	add	r3, r2
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6811      	ldr	r1, [r2, #0]
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3318      	adds	r3, #24
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	440b      	add	r3, r1
 8003916:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e00e      	b.n	800393a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e006      	b.n	800393a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003958:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800395a:	7afb      	ldrb	r3, [r7, #11]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d002      	beq.n	8003966 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d11d      	bne.n	80039a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3301      	adds	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	@ (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	@ (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <__NVIC_SetPriority+0x4c>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a3c:	e00a      	b.n	8003a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4908      	ldr	r1, [pc, #32]	@ (8003a64 <__NVIC_SetPriority+0x50>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	440b      	add	r3, r1
 8003a52:	761a      	strb	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	@ 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f1c3 0307 	rsb	r3, r3, #7
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	bf28      	it	cs
 8003a86:	2304      	movcs	r3, #4
 8003a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d902      	bls.n	8003a98 <NVIC_EncodePriority+0x30>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3b03      	subs	r3, #3
 8003a96:	e000      	b.n	8003a9a <NVIC_EncodePriority+0x32>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	401a      	ands	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	43d9      	mvns	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	4313      	orrs	r3, r2
         );
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae0:	d301      	bcc.n	8003ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00f      	b.n	8003b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <SysTick_Config+0x40>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aee:	210f      	movs	r1, #15
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	f7ff ff8e 	bl	8003a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <SysTick_Config+0x40>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afe:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <SysTick_Config+0x40>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	e000e010 	.word	0xe000e010

08003b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff47 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b3c:	f7ff ff5c 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	6978      	ldr	r0, [r7, #20]
 8003b48:	f7ff ff8e 	bl	8003a68 <NVIC_EncodePriority>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff5d 	bl	8003a14 <__NVIC_SetPriority>
}
 8003b5a:	bf00      	nop
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffb0 	bl	8003ad0 <SysTick_Config>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_DMA_Start_IT+0x20>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e04b      	b.n	8003c32 <HAL_DMA_Start_IT+0xb8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d13a      	bne.n	8003c24 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f831 	bl	8003c3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 020e 	orr.w	r2, r2, #14
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e00f      	b.n	8003c12 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0204 	bic.w	r2, r2, #4
 8003c00:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 020a 	orr.w	r2, r2, #10
 8003c10:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e005      	b.n	8003c30 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	f003 021c 	and.w	r2, r3, #28
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d108      	bne.n	8003c7e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c7c:	e007      	b.n	8003c8e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	60da      	str	r2, [r3, #12]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003caa:	e148      	b.n	8003f3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 813a 	beq.w	8003f38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d005      	beq.n	8003cdc <HAL_GPIO_Init+0x40>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d130      	bne.n	8003d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d12:	2201      	movs	r2, #1
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0201 	and.w	r2, r3, #1
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d017      	beq.n	8003d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d123      	bne.n	8003dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3208      	adds	r2, #8
 8003d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4013      	ands	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	08da      	lsrs	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3208      	adds	r2, #8
 8003dc8:	6939      	ldr	r1, [r7, #16]
 8003dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4013      	ands	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8094 	beq.w	8003f38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e10:	4b52      	ldr	r3, [pc, #328]	@ (8003f5c <HAL_GPIO_Init+0x2c0>)
 8003e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e14:	4a51      	ldr	r2, [pc, #324]	@ (8003f5c <HAL_GPIO_Init+0x2c0>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8003f5c <HAL_GPIO_Init+0x2c0>)
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e28:	4a4d      	ldr	r2, [pc, #308]	@ (8003f60 <HAL_GPIO_Init+0x2c4>)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3302      	adds	r3, #2
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e52:	d00d      	beq.n	8003e70 <HAL_GPIO_Init+0x1d4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a43      	ldr	r2, [pc, #268]	@ (8003f64 <HAL_GPIO_Init+0x2c8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <HAL_GPIO_Init+0x1d0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a42      	ldr	r2, [pc, #264]	@ (8003f68 <HAL_GPIO_Init+0x2cc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_GPIO_Init+0x1cc>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e004      	b.n	8003e72 <HAL_GPIO_Init+0x1d6>
 8003e68:	2307      	movs	r3, #7
 8003e6a:	e002      	b.n	8003e72 <HAL_GPIO_Init+0x1d6>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <HAL_GPIO_Init+0x1d6>
 8003e70:	2300      	movs	r3, #0
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	f002 0203 	and.w	r2, r2, #3
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	4093      	lsls	r3, r2
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e82:	4937      	ldr	r1, [pc, #220]	@ (8003f60 <HAL_GPIO_Init+0x2c4>)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e90:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eba:	4b2c      	ldr	r3, [pc, #176]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ede:	4a23      	ldr	r2, [pc, #140]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f0e:	4b17      	ldr	r3, [pc, #92]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f32:	4a0e      	ldr	r2, [pc, #56]	@ (8003f6c <HAL_GPIO_Init+0x2d0>)
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f47f aeaf 	bne.w	8003cac <HAL_GPIO_Init+0x10>
  }
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40010000 	.word	0x40010000
 8003f64:	48000400 	.word	0x48000400
 8003f68:	48000800 	.word	0x48000800
 8003f6c:	40010400 	.word	0x40010400

08003f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	887b      	ldrh	r3, [r7, #2]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e001      	b.n	8003f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e08d      	b.n	80040fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd fdf4 	bl	8001be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	@ 0x24
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d107      	bne.n	800404a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	e006      	b.n	8004058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d108      	bne.n	8004072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	e007      	b.n	8004082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d138      	bne.n	800418e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004126:	2302      	movs	r3, #2
 8004128:	e032      	b.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2224      	movs	r2, #36	@ 0x24
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004158:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d139      	bne.n	8004226 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041bc:	2302      	movs	r3, #2
 80041be:	e033      	b.n	8004228 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	@ 0x24
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004238:	4b04      	ldr	r3, [pc, #16]	@ (800424c <HAL_PWREx_GetVoltageRange+0x18>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40007000 	.word	0x40007000

08004250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800425e:	d130      	bne.n	80042c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004260:	4b23      	ldr	r3, [pc, #140]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426c:	d038      	beq.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800426e:	4b20      	ldr	r3, [pc, #128]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004276:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004278:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800427c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800427e:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2232      	movs	r2, #50	@ 0x32
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	0c9b      	lsrs	r3, r3, #18
 8004290:	3301      	adds	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004294:	e002      	b.n	800429c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3b01      	subs	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a8:	d102      	bne.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f2      	bne.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042bc:	d110      	bne.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e00f      	b.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042c2:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ce:	d007      	beq.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042d0:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042d8:	4a05      	ldr	r2, [pc, #20]	@ (80042f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40007000 	.word	0x40007000
 80042f4:	20000000 	.word	0x20000000
 80042f8:	431bde83 	.word	0x431bde83

080042fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f000 bc02 	b.w	8004b14 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004310:	4b96      	ldr	r3, [pc, #600]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800431a:	4b94      	ldr	r3, [pc, #592]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80e4 	beq.w	80044fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_RCC_OscConfig+0x4c>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	f040 808b 	bne.w	8004456 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b01      	cmp	r3, #1
 8004344:	f040 8087 	bne.w	8004456 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004348:	4b88      	ldr	r3, [pc, #544]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x64>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e3d9      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	4b81      	ldr	r3, [pc, #516]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_RCC_OscConfig+0x7e>
 8004370:	4b7e      	ldr	r3, [pc, #504]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004378:	e005      	b.n	8004386 <HAL_RCC_OscConfig+0x8a>
 800437a:	4b7c      	ldr	r3, [pc, #496]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004386:	4293      	cmp	r3, r2
 8004388:	d223      	bcs.n	80043d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fd8c 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e3ba      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800439e:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a72      	ldr	r2, [pc, #456]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043a4:	f043 0308 	orr.w	r3, r3, #8
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b70      	ldr	r3, [pc, #448]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	496d      	ldr	r1, [pc, #436]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043bc:	4b6b      	ldr	r3, [pc, #428]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	4968      	ldr	r1, [pc, #416]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]
 80043d0:	e025      	b.n	800441e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d2:	4b66      	ldr	r3, [pc, #408]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a65      	ldr	r2, [pc, #404]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043d8:	f043 0308 	orr.w	r3, r3, #8
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b63      	ldr	r3, [pc, #396]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	4960      	ldr	r1, [pc, #384]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f0:	4b5e      	ldr	r3, [pc, #376]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	495b      	ldr	r1, [pc, #364]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fd4c 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e37a      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800441e:	f000 fc81 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b51      	ldr	r3, [pc, #324]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	4950      	ldr	r1, [pc, #320]	@ (8004570 <HAL_RCC_OscConfig+0x274>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	fa22 f303 	lsr.w	r3, r2, r3
 800443a:	4a4e      	ldr	r2, [pc, #312]	@ (8004574 <HAL_RCC_OscConfig+0x278>)
 800443c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800443e:	4b4e      	ldr	r3, [pc, #312]	@ (8004578 <HAL_RCC_OscConfig+0x27c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd fea2 	bl	800218c <HAL_InitTick>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d052      	beq.n	80044f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	e35e      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d032      	beq.n	80044c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800445e:	4b43      	ldr	r3, [pc, #268]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a42      	ldr	r2, [pc, #264]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800446a:	f7fd fedf 	bl	800222c <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004472:	f7fd fedb 	bl	800222c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e347      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004484:	4b39      	ldr	r3, [pc, #228]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004490:	4b36      	ldr	r3, [pc, #216]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004496:	f043 0308 	orr.w	r3, r3, #8
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b33      	ldr	r3, [pc, #204]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4930      	ldr	r1, [pc, #192]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ae:	4b2f      	ldr	r3, [pc, #188]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	492b      	ldr	r1, [pc, #172]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
 80044c2:	e01a      	b.n	80044fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a28      	ldr	r2, [pc, #160]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d0:	f7fd feac 	bl	800222c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d8:	f7fd fea8 	bl	800222c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e314      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ea:	4b20      	ldr	r3, [pc, #128]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x1dc>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d073      	beq.n	80045ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d005      	beq.n	8004518 <HAL_RCC_OscConfig+0x21c>
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b0c      	cmp	r3, #12
 8004510:	d10e      	bne.n	8004530 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d10b      	bne.n	8004530 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	4b14      	ldr	r3, [pc, #80]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d063      	beq.n	80045ec <HAL_RCC_OscConfig+0x2f0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d15f      	bne.n	80045ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e2f1      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x24c>
 800453a:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0b      	ldr	r2, [pc, #44]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e025      	b.n	8004594 <HAL_RCC_OscConfig+0x298>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004550:	d114      	bne.n	800457c <HAL_RCC_OscConfig+0x280>
 8004552:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a05      	ldr	r2, [pc, #20]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a02      	ldr	r2, [pc, #8]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e013      	b.n	8004594 <HAL_RCC_OscConfig+0x298>
 800456c:	40021000 	.word	0x40021000
 8004570:	08009010 	.word	0x08009010
 8004574:	20000000 	.word	0x20000000
 8004578:	20000004 	.word	0x20000004
 800457c:	4ba0      	ldr	r3, [pc, #640]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a9f      	ldr	r2, [pc, #636]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b9d      	ldr	r3, [pc, #628]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a9c      	ldr	r2, [pc, #624]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fe46 	bl	800222c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fd fe42 	bl	800222c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e2ae      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	4b92      	ldr	r3, [pc, #584]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x2a8>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fe32 	bl	800222c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd fe2e 	bl	800222c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e29a      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045de:	4b88      	ldr	r3, [pc, #544]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x2d0>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d060      	beq.n	80046bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d005      	beq.n	800460c <HAL_RCC_OscConfig+0x310>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d119      	bne.n	800463a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d116      	bne.n	800463a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460c:	4b7c      	ldr	r3, [pc, #496]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_OscConfig+0x328>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e277      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b76      	ldr	r3, [pc, #472]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	4973      	ldr	r1, [pc, #460]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004638:	e040      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d023      	beq.n	800468a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004642:	4b6f      	ldr	r3, [pc, #444]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6e      	ldr	r2, [pc, #440]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fd fded 	bl	800222c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7fd fde9 	bl	800222c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e255      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004668:	4b65      	ldr	r3, [pc, #404]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b62      	ldr	r3, [pc, #392]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	495f      	ldr	r1, [pc, #380]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	e018      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468a:	4b5d      	ldr	r3, [pc, #372]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a5c      	ldr	r2, [pc, #368]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd fdc9 	bl	800222c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469e:	f7fd fdc5 	bl	800222c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e231      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b0:	4b53      	ldr	r3, [pc, #332]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03c      	beq.n	8004742 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fd fda4 	bl	800222c <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fd fda0 	bl	800222c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e20c      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fa:	4b41      	ldr	r3, [pc, #260]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80046fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0ef      	beq.n	80046e8 <HAL_RCC_OscConfig+0x3ec>
 8004708:	e01b      	b.n	8004742 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470a:	4b3d      	ldr	r3, [pc, #244]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800470c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004710:	4a3b      	ldr	r2, [pc, #236]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fd87 	bl	800222c <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004722:	f7fd fd83 	bl	800222c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1ef      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004734:	4b32      	ldr	r3, [pc, #200]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ef      	bne.n	8004722 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80a6 	beq.w	800489c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004750:	2300      	movs	r3, #0
 8004752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004754:	4b2a      	ldr	r3, [pc, #168]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10d      	bne.n	800477c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b27      	ldr	r3, [pc, #156]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	4a26      	ldr	r2, [pc, #152]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	6593      	str	r3, [r2, #88]	@ 0x58
 800476c:	4b24      	ldr	r3, [pc, #144]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004778:	2301      	movs	r3, #1
 800477a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477c:	4b21      	ldr	r3, [pc, #132]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d118      	bne.n	80047ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004788:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1d      	ldr	r2, [pc, #116]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004794:	f7fd fd4a 	bl	800222c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fd fd46 	bl	800222c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1b2      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <HAL_RCC_OscConfig+0x508>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d108      	bne.n	80047d4 <HAL_RCC_OscConfig+0x4d8>
 80047c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d2:	e029      	b.n	8004828 <HAL_RCC_OscConfig+0x52c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d115      	bne.n	8004808 <HAL_RCC_OscConfig+0x50c>
 80047dc:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	4a07      	ldr	r2, [pc, #28]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ec:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	4a03      	ldr	r2, [pc, #12]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047fc:	e014      	b.n	8004828 <HAL_RCC_OscConfig+0x52c>
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
 8004808:	4b9a      	ldr	r3, [pc, #616]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	4a99      	ldr	r2, [pc, #612]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004818:	4b96      	ldr	r3, [pc, #600]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	4a95      	ldr	r2, [pc, #596]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d016      	beq.n	800485e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd fcfc 	bl	800222c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd fcf8 	bl	800222c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e162      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484e:	4b89      	ldr	r3, [pc, #548]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ed      	beq.n	8004838 <HAL_RCC_OscConfig+0x53c>
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485e:	f7fd fce5 	bl	800222c <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd fce1 	bl	800222c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e14b      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800487c:	4b7d      	ldr	r3, [pc, #500]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1ed      	bne.n	8004866 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800488a:	7ffb      	ldrb	r3, [r7, #31]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004890:	4b78      	ldr	r3, [pc, #480]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	4a77      	ldr	r2, [pc, #476]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800489a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d03c      	beq.n	8004922 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048b0:	4b70      	ldr	r3, [pc, #448]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80048b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd fcb4 	bl	800222c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c8:	f7fd fcb0 	bl	800222c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e11c      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048da:	4b66      	ldr	r3, [pc, #408]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80048dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ef      	beq.n	80048c8 <HAL_RCC_OscConfig+0x5cc>
 80048e8:	e01b      	b.n	8004922 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ea:	4b62      	ldr	r3, [pc, #392]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80048ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048f0:	4a60      	ldr	r2, [pc, #384]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fa:	f7fd fc97 	bl	800222c <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004902:	f7fd fc93 	bl	800222c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0ff      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004914:	4b57      	ldr	r3, [pc, #348]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ef      	bne.n	8004902 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80f3 	beq.w	8004b12 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	2b02      	cmp	r3, #2
 8004932:	f040 80c9 	bne.w	8004ac8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004936:	4b4f      	ldr	r3, [pc, #316]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0203 	and.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	429a      	cmp	r2, r3
 8004948:	d12c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	3b01      	subs	r3, #1
 8004956:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d123      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004966:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d11b      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d113      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	3b01      	subs	r3, #1
 800498a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d109      	bne.n	80049a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	3b01      	subs	r3, #1
 800499e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d06b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d062      	beq.n	8004a70 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049aa:	4b32      	ldr	r3, [pc, #200]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e0ac      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2d      	ldr	r2, [pc, #180]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80049c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c6:	f7fd fc31 	bl	800222c <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fd fc2d 	bl	800222c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e099      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e0:	4b24      	ldr	r3, [pc, #144]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ec:	4b21      	ldr	r3, [pc, #132]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	4b21      	ldr	r3, [pc, #132]	@ (8004a78 <HAL_RCC_OscConfig+0x77c>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049fc:	3a01      	subs	r2, #1
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	4311      	orrs	r1, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a06:	0212      	lsls	r2, r2, #8
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a0e:	0852      	lsrs	r2, r2, #1
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0552      	lsls	r2, r2, #21
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0652      	lsls	r2, r2, #25
 8004a20:	4311      	orrs	r1, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a26:	06d2      	lsls	r2, r2, #27
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	4912      	ldr	r1, [pc, #72]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a30:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0f      	ldr	r2, [pc, #60]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a0c      	ldr	r2, [pc, #48]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a48:	f7fd fbf0 	bl	800222c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd fbec 	bl	800222c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e058      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <HAL_RCC_OscConfig+0x778>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6e:	e050      	b.n	8004b12 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e04f      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
 8004a74:	40021000 	.word	0x40021000
 8004a78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7c:	4b27      	ldr	r3, [pc, #156]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d144      	bne.n	8004b12 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a88:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a23      	ldr	r2, [pc, #140]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a94:	4b21      	ldr	r3, [pc, #132]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a20      	ldr	r2, [pc, #128]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004aa0:	f7fd fbc4 	bl	800222c <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fd fbc0 	bl	800222c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e02c      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	4b18      	ldr	r3, [pc, #96]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x7ac>
 8004ac6:	e024      	b.n	8004b12 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d01f      	beq.n	8004b0e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a12      	ldr	r2, [pc, #72]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ada:	f7fd fba7 	bl	800222c <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fd fba3 	bl	800222c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e00f      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	4905      	ldr	r1, [pc, #20]	@ (8004b1c <HAL_RCC_OscConfig+0x820>)
 8004b06:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <HAL_RCC_OscConfig+0x824>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60cb      	str	r3, [r1, #12]
 8004b0c:	e001      	b.n	8004b12 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	feeefffc 	.word	0xfeeefffc

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0e7      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b38:	4b75      	ldr	r3, [pc, #468]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d910      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b72      	ldr	r3, [pc, #456]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 0207 	bic.w	r2, r3, #7
 8004b4e:	4970      	ldr	r1, [pc, #448]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b6e      	ldr	r3, [pc, #440]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0cf      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	4b66      	ldr	r3, [pc, #408]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d908      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b63      	ldr	r3, [pc, #396]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4960      	ldr	r1, [pc, #384]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d04c      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004baa:	4b5a      	ldr	r3, [pc, #360]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d121      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0a6      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc2:	4b54      	ldr	r3, [pc, #336]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d115      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e09a      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bda:	4b4e      	ldr	r3, [pc, #312]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e08e      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e086      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b46      	ldr	r3, [pc, #280]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4943      	ldr	r1, [pc, #268]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fb0e 	bl	800222c <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fd fb0a 	bl	800222c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e06e      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b31      	ldr	r3, [pc, #196]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d208      	bcs.n	8004c6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b2e      	ldr	r3, [pc, #184]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	492b      	ldr	r1, [pc, #172]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6a:	4b29      	ldr	r3, [pc, #164]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d210      	bcs.n	8004c9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c78:	4b25      	ldr	r3, [pc, #148]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 0207 	bic.w	r2, r3, #7
 8004c80:	4923      	ldr	r1, [pc, #140]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e036      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4918      	ldr	r1, [pc, #96]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc4:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4910      	ldr	r1, [pc, #64]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd8:	f000 f824 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	490b      	ldr	r1, [pc, #44]	@ (8004d18 <HAL_RCC_ClockConfig+0x1f4>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <HAL_RCC_ClockConfig+0x1f8>)
 8004cf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <HAL_RCC_ClockConfig+0x1fc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fd fa45 	bl	800218c <HAL_InitTick>
 8004d02:	4603      	mov	r3, r0
 8004d04:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d06:	7afb      	ldrb	r3, [r7, #11]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40022000 	.word	0x40022000
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08009010 	.word	0x08009010
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	20000004 	.word	0x20000004

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b089      	sub	sp, #36	@ 0x24
 8004d28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	4b3e      	ldr	r3, [pc, #248]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d11e      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d58:	4b34      	ldr	r3, [pc, #208]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d64:	4b31      	ldr	r3, [pc, #196]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d74:	4b2d      	ldr	r3, [pc, #180]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d80:	4a2b      	ldr	r2, [pc, #172]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10d      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d102      	bne.n	8004da2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d9c:	4b25      	ldr	r3, [pc, #148]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	e004      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004da8:	4b23      	ldr	r3, [pc, #140]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004daa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b0c      	cmp	r3, #12
 8004db0:	d134      	bne.n	8004e1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004db2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0xa6>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xac>
 8004dc8:	e005      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dca:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dcc:	617b      	str	r3, [r7, #20]
      break;
 8004dce:	e005      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dd0:	4b19      	ldr	r3, [pc, #100]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dd2:	617b      	str	r3, [r7, #20]
      break;
 8004dd4:	e002      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	617b      	str	r3, [r7, #20]
      break;
 8004dda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	fb03 f202 	mul.w	r2, r3, r2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	0e5b      	lsrs	r3, r3, #25
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3724      	adds	r7, #36	@ 0x24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	08009028 	.word	0x08009028
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	007a1200 	.word	0x007a1200

08004e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e40:	4b03      	ldr	r3, [pc, #12]	@ (8004e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e42:	681b      	ldr	r3, [r3, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000000 	.word	0x20000000

08004e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e58:	f7ff fff0 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4904      	ldr	r1, [pc, #16]	@ (8004e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	08009020 	.word	0x08009020

08004e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e84:	f7ff ffda 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0adb      	lsrs	r3, r3, #11
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	@ (8004ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	08009020 	.word	0x08009020

08004eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ec4:	f7ff f9b6 	bl	8004234 <HAL_PWREx_GetVoltageRange>
 8004ec8:	6178      	str	r0, [r7, #20]
 8004eca:	e014      	b.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	4b25      	ldr	r3, [pc, #148]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	4a24      	ldr	r2, [pc, #144]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ed8:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ee4:	f7ff f9a6 	bl	8004234 <HAL_PWREx_GetVoltageRange>
 8004ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eea:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eee:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004efc:	d10b      	bne.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b80      	cmp	r3, #128	@ 0x80
 8004f02:	d919      	bls.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f08:	d902      	bls.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e013      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f10:	2301      	movs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e010      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	@ 0x80
 8004f1a:	d902      	bls.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e00a      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b80      	cmp	r3, #128	@ 0x80
 8004f26:	d102      	bne.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f28:	2302      	movs	r3, #2
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e004      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b70      	cmp	r3, #112	@ 0x70
 8004f32:	d101      	bne.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f34:	2301      	movs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 0207 	bic.w	r2, r3, #7
 8004f40:	4909      	ldr	r1, [pc, #36]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f48:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40022000 	.word	0x40022000

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f74:	2300      	movs	r3, #0
 8004f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f78:	2300      	movs	r3, #0
 8004f7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d031      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f90:	d01a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f96:	d814      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fa0:	d10f      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4a5c      	ldr	r2, [pc, #368]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fae:	e00c      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f9ce 	bl	8005358 <RCCEx_PLLSAI1_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc0:	e003      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fc6:	e000      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fca:	7cfb      	ldrb	r3, [r7, #19]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd0:	4b51      	ldr	r3, [pc, #324]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	494e      	ldr	r1, [pc, #312]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004fe6:	e001      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 809e 	beq.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ffe:	4b46      	ldr	r3, [pc, #280]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005014:	4b40      	ldr	r3, [pc, #256]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	4a3f      	ldr	r2, [pc, #252]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800501a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800501e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005020:	4b3d      	ldr	r3, [pc, #244]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502c:	2301      	movs	r3, #1
 800502e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005030:	4b3a      	ldr	r3, [pc, #232]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a39      	ldr	r2, [pc, #228]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503c:	f7fd f8f6 	bl	800222c <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005042:	e009      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fd f8f2 	bl	800222c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d902      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	74fb      	strb	r3, [r7, #19]
        break;
 8005056:	e005      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005058:	4b30      	ldr	r3, [pc, #192]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0ef      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d15a      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800506a:	4b2b      	ldr	r3, [pc, #172]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005074:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01e      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	429a      	cmp	r2, r3
 8005084:	d019      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005090:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005092:	4b21      	ldr	r3, [pc, #132]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	4a1f      	ldr	r2, [pc, #124]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050b2:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d016      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fd f8b2 	bl	800222c <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ca:	e00b      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fd f8ae 	bl	800222c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d902      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	74fb      	strb	r3, [r7, #19]
            break;
 80050e2:	e006      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0ec      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80050f2:	7cfb      	ldrb	r3, [r7, #19]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f8:	4b07      	ldr	r3, [pc, #28]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005106:	4904      	ldr	r1, [pc, #16]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800510e:	e009      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	74bb      	strb	r3, [r7, #18]
 8005114:	e006      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005124:	7c7b      	ldrb	r3, [r7, #17]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512a:	4b8a      	ldr	r3, [pc, #552]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800512c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512e:	4a89      	ldr	r2, [pc, #548]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005134:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005142:	4b84      	ldr	r3, [pc, #528]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	4980      	ldr	r1, [pc, #512]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005164:	4b7b      	ldr	r3, [pc, #492]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516a:	f023 020c 	bic.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	4978      	ldr	r1, [pc, #480]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005186:	4b73      	ldr	r3, [pc, #460]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	496f      	ldr	r1, [pc, #444]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b6:	4967      	ldr	r1, [pc, #412]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ca:	4b62      	ldr	r3, [pc, #392]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	495e      	ldr	r1, [pc, #376]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ec:	4b59      	ldr	r3, [pc, #356]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	4956      	ldr	r1, [pc, #344]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800520e:	4b51      	ldr	r3, [pc, #324]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005214:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521c:	494d      	ldr	r1, [pc, #308]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d028      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005230:	4b48      	ldr	r3, [pc, #288]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005236:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	4945      	ldr	r1, [pc, #276]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800524e:	d106      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005250:	4b40      	ldr	r3, [pc, #256]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a3f      	ldr	r2, [pc, #252]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800525a:	60d3      	str	r3, [r2, #12]
 800525c:	e011      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005266:	d10c      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f872 	bl	8005358 <RCCEx_PLLSAI1_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d028      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800528e:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529c:	492d      	ldr	r1, [pc, #180]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ac:	d106      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ae:	4b29      	ldr	r3, [pc, #164]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	4a28      	ldr	r2, [pc, #160]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b8:	60d3      	str	r3, [r2, #12]
 80052ba:	e011      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2101      	movs	r1, #1
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f843 	bl	8005358 <RCCEx_PLLSAI1_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01c      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052ec:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fa:	4916      	ldr	r1, [pc, #88]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800530a:	d10c      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	2102      	movs	r1, #2
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f820 	bl	8005358 <RCCEx_PLLSAI1_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005332:	4b08      	ldr	r3, [pc, #32]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005338:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005340:	4904      	ldr	r1, [pc, #16]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005348:	7cbb      	ldrb	r3, [r7, #18]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000

08005358 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005366:	4b74      	ldr	r3, [pc, #464]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d018      	beq.n	80053a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005372:	4b71      	ldr	r3, [pc, #452]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0203 	and.w	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d10d      	bne.n	800539e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
       ||
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800538a:	4b6b      	ldr	r3, [pc, #428]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
       ||
 800539a:	429a      	cmp	r2, r3
 800539c:	d047      	beq.n	800542e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	e044      	b.n	800542e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d018      	beq.n	80053de <RCCEx_PLLSAI1_Config+0x86>
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d825      	bhi.n	80053fc <RCCEx_PLLSAI1_Config+0xa4>
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d002      	beq.n	80053ba <RCCEx_PLLSAI1_Config+0x62>
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d009      	beq.n	80053cc <RCCEx_PLLSAI1_Config+0x74>
 80053b8:	e020      	b.n	80053fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d11d      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ca:	e01a      	b.n	8005402 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d116      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053dc:	e013      	b.n	8005406 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053de:	4b56      	ldr	r3, [pc, #344]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10f      	bne.n	800540a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ea:	4b53      	ldr	r3, [pc, #332]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053fa:	e006      	b.n	800540a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e004      	b.n	800540c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005402:	bf00      	nop
 8005404:	e002      	b.n	800540c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005406:	bf00      	nop
 8005408:	e000      	b.n	800540c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800540a:	bf00      	nop
    }

    if(status == HAL_OK)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005412:	4b49      	ldr	r3, [pc, #292]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6819      	ldr	r1, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	430b      	orrs	r3, r1
 8005428:	4943      	ldr	r1, [pc, #268]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800542a:	4313      	orrs	r3, r2
 800542c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d17c      	bne.n	800552e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005434:	4b40      	ldr	r3, [pc, #256]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a3f      	ldr	r2, [pc, #252]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800543a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800543e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005440:	f7fc fef4 	bl	800222c <HAL_GetTick>
 8005444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005446:	e009      	b.n	800545c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005448:	f7fc fef0 	bl	800222c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d902      	bls.n	800545c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	73fb      	strb	r3, [r7, #15]
        break;
 800545a:	e005      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800545c:	4b36      	ldr	r3, [pc, #216]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1ef      	bne.n	8005448 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d15f      	bne.n	800552e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d110      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005474:	4b30      	ldr	r3, [pc, #192]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800547c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6892      	ldr	r2, [r2, #8]
 8005484:	0211      	lsls	r1, r2, #8
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68d2      	ldr	r2, [r2, #12]
 800548a:	06d2      	lsls	r2, r2, #27
 800548c:	430a      	orrs	r2, r1
 800548e:	492a      	ldr	r1, [pc, #168]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	610b      	str	r3, [r1, #16]
 8005494:	e027      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d112      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800549c:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80054a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6892      	ldr	r2, [r2, #8]
 80054ac:	0211      	lsls	r1, r2, #8
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6912      	ldr	r2, [r2, #16]
 80054b2:	0852      	lsrs	r2, r2, #1
 80054b4:	3a01      	subs	r2, #1
 80054b6:	0552      	lsls	r2, r2, #21
 80054b8:	430a      	orrs	r2, r1
 80054ba:	491f      	ldr	r1, [pc, #124]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	610b      	str	r3, [r1, #16]
 80054c0:	e011      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80054ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6892      	ldr	r2, [r2, #8]
 80054d2:	0211      	lsls	r1, r2, #8
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6952      	ldr	r2, [r2, #20]
 80054d8:	0852      	lsrs	r2, r2, #1
 80054da:	3a01      	subs	r2, #1
 80054dc:	0652      	lsls	r2, r2, #25
 80054de:	430a      	orrs	r2, r1
 80054e0:	4915      	ldr	r1, [pc, #84]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054e6:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a13      	ldr	r2, [pc, #76]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f2:	f7fc fe9b 	bl	800222c <HAL_GetTick>
 80054f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054f8:	e009      	b.n	800550e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054fa:	f7fc fe97 	bl	800222c <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d902      	bls.n	800550e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	73fb      	strb	r3, [r7, #15]
          break;
 800550c:	e005      	b.n	800551a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800550e:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ef      	beq.n	80054fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	4903      	ldr	r1, [pc, #12]	@ (8005538 <RCCEx_PLLSAI1_Config+0x1e0>)
 800552a:	4313      	orrs	r3, r2
 800552c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40021000 	.word	0x40021000

0800553c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e095      	b.n	800567a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800555e:	d009      	beq.n	8005574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	61da      	str	r2, [r3, #28]
 8005566:	e005      	b.n	8005574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc fb80 	bl	8001c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055b4:	d902      	bls.n	80055bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e002      	b.n	80055c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80055ca:	d007      	beq.n	80055dc <HAL_SPI_Init+0xa0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055d4:	d002      	beq.n	80055dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561e:	ea42 0103 	orr.w	r1, r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	f003 0204 	and.w	r2, r3, #4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005658:	ea42 0103 	orr.w	r1, r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e049      	b.n	8005728 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fc fb35 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f000 f8ff 	bl	80058c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_TIM_ConfigClockSource+0x1c>
 8005748:	2302      	movs	r3, #2
 800574a:	e0b6      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x18a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800576e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005788:	d03e      	beq.n	8005808 <HAL_TIM_ConfigClockSource+0xd8>
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578e:	f200 8087 	bhi.w	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005796:	f000 8086 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x176>
 800579a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800579e:	d87f      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 80057a0:	2b70      	cmp	r3, #112	@ 0x70
 80057a2:	d01a      	beq.n	80057da <HAL_TIM_ConfigClockSource+0xaa>
 80057a4:	2b70      	cmp	r3, #112	@ 0x70
 80057a6:	d87b      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 80057a8:	2b60      	cmp	r3, #96	@ 0x60
 80057aa:	d050      	beq.n	800584e <HAL_TIM_ConfigClockSource+0x11e>
 80057ac:	2b60      	cmp	r3, #96	@ 0x60
 80057ae:	d877      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 80057b0:	2b50      	cmp	r3, #80	@ 0x50
 80057b2:	d03c      	beq.n	800582e <HAL_TIM_ConfigClockSource+0xfe>
 80057b4:	2b50      	cmp	r3, #80	@ 0x50
 80057b6:	d873      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	d058      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x13e>
 80057bc:	2b40      	cmp	r3, #64	@ 0x40
 80057be:	d86f      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 80057c0:	2b30      	cmp	r3, #48	@ 0x30
 80057c2:	d064      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15e>
 80057c4:	2b30      	cmp	r3, #48	@ 0x30
 80057c6:	d86b      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d060      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15e>
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d867      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d05c      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15e>
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d05a      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15e>
 80057d8:	e062      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057ea:	f000 f955 	bl	8005a98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	609a      	str	r2, [r3, #8]
      break;
 8005806:	e04f      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	f000 f93e 	bl	8005a98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800582a:	609a      	str	r2, [r3, #8]
      break;
 800582c:	e03c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	461a      	mov	r2, r3
 800583c:	f000 f8b2 	bl	80059a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2150      	movs	r1, #80	@ 0x50
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f90b 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 800584c:	e02c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800585a:	461a      	mov	r2, r3
 800585c:	f000 f8d1 	bl	8005a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2160      	movs	r1, #96	@ 0x60
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f8fb 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 800586c:	e01c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	461a      	mov	r2, r3
 800587c:	f000 f892 	bl	80059a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2140      	movs	r1, #64	@ 0x40
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f8eb 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 800588c:	e00c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f000 f8e2 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 800589e:	e003      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      break;
 80058a4:	e000      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a30      	ldr	r2, [pc, #192]	@ (8005998 <TIM_Base_SetConfig+0xd4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_Base_SetConfig+0x20>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e2:	d108      	bne.n	80058f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a27      	ldr	r2, [pc, #156]	@ (8005998 <TIM_Base_SetConfig+0xd4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_Base_SetConfig+0x52>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005904:	d007      	beq.n	8005916 <TIM_Base_SetConfig+0x52>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a24      	ldr	r2, [pc, #144]	@ (800599c <TIM_Base_SetConfig+0xd8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_Base_SetConfig+0x52>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a23      	ldr	r2, [pc, #140]	@ (80059a0 <TIM_Base_SetConfig+0xdc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <TIM_Base_SetConfig+0xd4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0xa0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a11      	ldr	r2, [pc, #68]	@ (800599c <TIM_Base_SetConfig+0xd8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0xa0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a10      	ldr	r2, [pc, #64]	@ (80059a0 <TIM_Base_SetConfig+0xdc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	611a      	str	r2, [r3, #16]
  }
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400

080059a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0201 	bic.w	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f023 030a 	bic.w	r3, r3, #10
 80059e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b087      	sub	sp, #28
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f023 0210 	bic.w	r2, r3, #16
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	031b      	lsls	r3, r3, #12
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f043 0307 	orr.w	r3, r3, #7
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e04f      	b.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a21      	ldr	r2, [pc, #132]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d108      	bne.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b58:	d004      	beq.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10c      	bne.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40014000 	.word	0x40014000

08005ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e040      	b.n	8005c38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fc f8c6 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	@ 0x24
 8005bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fade 	bl	80061ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f8af 	bl	8005d54 <UART_SetConfig>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e01b      	b.n	8005c38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fb5d 	bl	80062f0 <UART_CheckIdleState>
 8005c36:	4603      	mov	r3, r0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	@ 0x28
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d177      	bne.n	8005d48 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_UART_Transmit+0x24>
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e070      	b.n	8005d4a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2221      	movs	r2, #33	@ 0x21
 8005c74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c76:	f7fc fad9 	bl	800222c <HAL_GetTick>
 8005c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	88fa      	ldrh	r2, [r7, #6]
 8005c88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c94:	d108      	bne.n	8005ca8 <HAL_UART_Transmit+0x68>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	e003      	b.n	8005cb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cb0:	e02f      	b.n	8005d12 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2180      	movs	r1, #128	@ 0x80
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fbbf 	bl	8006440 <UART_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e03b      	b.n	8005d4a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	881a      	ldrh	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce4:	b292      	uxth	r2, r2
 8005ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	3302      	adds	r3, #2
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	e007      	b.n	8005d00 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1c9      	bne.n	8005cb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2140      	movs	r1, #64	@ 0x40
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fb89 	bl	8006440 <UART_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e005      	b.n	8005d4a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d58:	b08a      	sub	sp, #40	@ 0x28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4bb4      	ldr	r3, [pc, #720]	@ (8006054 <UART_SetConfig+0x300>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4aa9      	ldr	r2, [pc, #676]	@ (8006058 <UART_SetConfig+0x304>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4aa0      	ldr	r2, [pc, #640]	@ (800605c <UART_SetConfig+0x308>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d126      	bne.n	8005e2c <UART_SetConfig+0xd8>
 8005dde:	4ba0      	ldr	r3, [pc, #640]	@ (8006060 <UART_SetConfig+0x30c>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d81b      	bhi.n	8005e24 <UART_SetConfig+0xd0>
 8005dec:	a201      	add	r2, pc, #4	@ (adr r2, 8005df4 <UART_SetConfig+0xa0>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0a:	e080      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e12:	e07c      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1a:	e078      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e22:	e074      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2a:	e070      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a8c      	ldr	r2, [pc, #560]	@ (8006064 <UART_SetConfig+0x310>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d138      	bne.n	8005ea8 <UART_SetConfig+0x154>
 8005e36:	4b8a      	ldr	r3, [pc, #552]	@ (8006060 <UART_SetConfig+0x30c>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d82d      	bhi.n	8005ea0 <UART_SetConfig+0x14c>
 8005e44:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <UART_SetConfig+0xf8>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005ea1 	.word	0x08005ea1
 8005e54:	08005ea1 	.word	0x08005ea1
 8005e58:	08005ea1 	.word	0x08005ea1
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005ea1 	.word	0x08005ea1
 8005e64:	08005ea1 	.word	0x08005ea1
 8005e68:	08005ea1 	.word	0x08005ea1
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005ea1 	.word	0x08005ea1
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005e99 	.word	0x08005e99
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e042      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e03e      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e03a      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e036      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e032      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a6a      	ldr	r2, [pc, #424]	@ (8006058 <UART_SetConfig+0x304>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d12a      	bne.n	8005f08 <UART_SetConfig+0x1b4>
 8005eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8006060 <UART_SetConfig+0x30c>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ebc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ec0:	d01a      	beq.n	8005ef8 <UART_SetConfig+0x1a4>
 8005ec2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ec6:	d81b      	bhi.n	8005f00 <UART_SetConfig+0x1ac>
 8005ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ecc:	d00c      	beq.n	8005ee8 <UART_SetConfig+0x194>
 8005ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ed2:	d815      	bhi.n	8005f00 <UART_SetConfig+0x1ac>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <UART_SetConfig+0x18c>
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005edc:	d008      	beq.n	8005ef0 <UART_SetConfig+0x19c>
 8005ede:	e00f      	b.n	8005f00 <UART_SetConfig+0x1ac>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee6:	e012      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eee:	e00e      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef6:	e00a      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efe:	e006      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e002      	b.n	8005f0e <UART_SetConfig+0x1ba>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a51      	ldr	r2, [pc, #324]	@ (8006058 <UART_SetConfig+0x304>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d17a      	bne.n	800600e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d824      	bhi.n	8005f6a <UART_SetConfig+0x216>
 8005f20:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <UART_SetConfig+0x1d4>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f6b 	.word	0x08005f6b
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f6b 	.word	0x08005f6b
 8005f38:	08005f5b 	.word	0x08005f5b
 8005f3c:	08005f6b 	.word	0x08005f6b
 8005f40:	08005f6b 	.word	0x08005f6b
 8005f44:	08005f6b 	.word	0x08005f6b
 8005f48:	08005f63 	.word	0x08005f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f7fe ff82 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8005f50:	61f8      	str	r0, [r7, #28]
        break;
 8005f52:	e010      	b.n	8005f76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f54:	4b44      	ldr	r3, [pc, #272]	@ (8006068 <UART_SetConfig+0x314>)
 8005f56:	61fb      	str	r3, [r7, #28]
        break;
 8005f58:	e00d      	b.n	8005f76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5a:	f7fe fee3 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8005f5e:	61f8      	str	r0, [r7, #28]
        break;
 8005f60:	e009      	b.n	8005f76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f66:	61fb      	str	r3, [r7, #28]
        break;
 8005f68:	e005      	b.n	8005f76 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8107 	beq.w	800618c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d305      	bcc.n	8005f9a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d903      	bls.n	8005fa2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fa0:	e0f4      	b.n	800618c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	461c      	mov	r4, r3
 8005fa8:	4615      	mov	r5, r2
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	022b      	lsls	r3, r5, #8
 8005fb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fb8:	0222      	lsls	r2, r4, #8
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	6849      	ldr	r1, [r1, #4]
 8005fbe:	0849      	lsrs	r1, r1, #1
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	4688      	mov	r8, r1
 8005fc4:	4681      	mov	r9, r0
 8005fc6:	eb12 0a08 	adds.w	sl, r2, r8
 8005fca:	eb43 0b09 	adc.w	fp, r3, r9
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	603b      	str	r3, [r7, #0]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fdc:	4650      	mov	r0, sl
 8005fde:	4659      	mov	r1, fp
 8005fe0:	f7fa fde2 	bl	8000ba8 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4613      	mov	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ff2:	d308      	bcc.n	8006006 <UART_SetConfig+0x2b2>
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ffa:	d204      	bcs.n	8006006 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	e0c2      	b.n	800618c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800600c:	e0be      	b.n	800618c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006016:	d16a      	bne.n	80060ee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006018:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800601c:	2b08      	cmp	r3, #8
 800601e:	d834      	bhi.n	800608a <UART_SetConfig+0x336>
 8006020:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <UART_SetConfig+0x2d4>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	0800604d 	.word	0x0800604d
 800602c:	0800606d 	.word	0x0800606d
 8006030:	08006075 	.word	0x08006075
 8006034:	0800608b 	.word	0x0800608b
 8006038:	0800607b 	.word	0x0800607b
 800603c:	0800608b 	.word	0x0800608b
 8006040:	0800608b 	.word	0x0800608b
 8006044:	0800608b 	.word	0x0800608b
 8006048:	08006083 	.word	0x08006083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604c:	f7fe ff02 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8006050:	61f8      	str	r0, [r7, #28]
        break;
 8006052:	e020      	b.n	8006096 <UART_SetConfig+0x342>
 8006054:	efff69f3 	.word	0xefff69f3
 8006058:	40008000 	.word	0x40008000
 800605c:	40013800 	.word	0x40013800
 8006060:	40021000 	.word	0x40021000
 8006064:	40004400 	.word	0x40004400
 8006068:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800606c:	f7fe ff08 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 8006070:	61f8      	str	r0, [r7, #28]
        break;
 8006072:	e010      	b.n	8006096 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006074:	4b4c      	ldr	r3, [pc, #304]	@ (80061a8 <UART_SetConfig+0x454>)
 8006076:	61fb      	str	r3, [r7, #28]
        break;
 8006078:	e00d      	b.n	8006096 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607a:	f7fe fe53 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 800607e:	61f8      	str	r0, [r7, #28]
        break;
 8006080:	e009      	b.n	8006096 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006086:	61fb      	str	r3, [r7, #28]
        break;
 8006088:	e005      	b.n	8006096 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d077      	beq.n	800618c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	005a      	lsls	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	441a      	add	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b0f      	cmp	r3, #15
 80060b6:	d916      	bls.n	80060e6 <UART_SetConfig+0x392>
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060be:	d212      	bcs.n	80060e6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f023 030f 	bic.w	r3, r3, #15
 80060c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	085b      	lsrs	r3, r3, #1
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	8afb      	ldrh	r3, [r7, #22]
 80060d8:	4313      	orrs	r3, r2
 80060da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	8afa      	ldrh	r2, [r7, #22]
 80060e2:	60da      	str	r2, [r3, #12]
 80060e4:	e052      	b.n	800618c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060ec:	e04e      	b.n	800618c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d827      	bhi.n	8006146 <UART_SetConfig+0x3f2>
 80060f6:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <UART_SetConfig+0x3a8>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006121 	.word	0x08006121
 8006100:	08006129 	.word	0x08006129
 8006104:	08006131 	.word	0x08006131
 8006108:	08006147 	.word	0x08006147
 800610c:	08006137 	.word	0x08006137
 8006110:	08006147 	.word	0x08006147
 8006114:	08006147 	.word	0x08006147
 8006118:	08006147 	.word	0x08006147
 800611c:	0800613f 	.word	0x0800613f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006120:	f7fe fe98 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8006124:	61f8      	str	r0, [r7, #28]
        break;
 8006126:	e014      	b.n	8006152 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006128:	f7fe feaa 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 800612c:	61f8      	str	r0, [r7, #28]
        break;
 800612e:	e010      	b.n	8006152 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006130:	4b1d      	ldr	r3, [pc, #116]	@ (80061a8 <UART_SetConfig+0x454>)
 8006132:	61fb      	str	r3, [r7, #28]
        break;
 8006134:	e00d      	b.n	8006152 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006136:	f7fe fdf5 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 800613a:	61f8      	str	r0, [r7, #28]
        break;
 800613c:	e009      	b.n	8006152 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006142:	61fb      	str	r3, [r7, #28]
        break;
 8006144:	e005      	b.n	8006152 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006150:	bf00      	nop
    }

    if (pclk != 0U)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d019      	beq.n	800618c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	085a      	lsrs	r2, r3, #1
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	fbb2 f3f3 	udiv	r3, r2, r3
 800616a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b0f      	cmp	r3, #15
 8006170:	d909      	bls.n	8006186 <UART_SetConfig+0x432>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006178:	d205      	bcs.n	8006186 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60da      	str	r2, [r3, #12]
 8006184:	e002      	b.n	800618c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006198:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800619c:	4618      	mov	r0, r3
 800619e:	3728      	adds	r7, #40	@ 0x28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a6:	bf00      	nop
 80061a8:	00f42400 	.word	0x00f42400

080061ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062aa:	d10a      	bne.n	80062c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b098      	sub	sp, #96	@ 0x60
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006300:	f7fb ff94 	bl	800222c <HAL_GetTick>
 8006304:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d12e      	bne.n	8006372 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006314:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800631c:	2200      	movs	r2, #0
 800631e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f88c 	bl	8006440 <UART_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d021      	beq.n	8006372 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800633c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006342:	653b      	str	r3, [r7, #80]	@ 0x50
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800634c:	647b      	str	r3, [r7, #68]	@ 0x44
 800634e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800635a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e6      	bne.n	800632e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e062      	b.n	8006438 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b04      	cmp	r3, #4
 800637e:	d149      	bne.n	8006414 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006388:	2200      	movs	r2, #0
 800638a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f856 	bl	8006440 <UART_WaitOnFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d03c      	beq.n	8006414 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	623b      	str	r3, [r7, #32]
   return(result);
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3308      	adds	r3, #8
 80063d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	60fb      	str	r3, [r7, #12]
   return(result);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ec:	61fa      	str	r2, [r7, #28]
 80063ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	69b9      	ldr	r1, [r7, #24]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	617b      	str	r3, [r7, #20]
   return(result);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e5      	bne.n	80063cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e011      	b.n	8006438 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3758      	adds	r7, #88	@ 0x58
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006450:	e04f      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d04b      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7fb fee7 	bl	800222c <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <UART_WaitOnFlagUntilTimeout+0x30>
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e04e      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d037      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b80      	cmp	r3, #128	@ 0x80
 8006486:	d034      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b40      	cmp	r3, #64	@ 0x40
 800648c:	d031      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b08      	cmp	r3, #8
 800649a:	d110      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2208      	movs	r2, #8
 80064a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f838 	bl	800651a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2208      	movs	r2, #8
 80064ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e029      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064cc:	d111      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f81e 	bl	800651a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e00f      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4013      	ands	r3, r2
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	429a      	cmp	r2, r3
 8006500:	bf0c      	ite	eq
 8006502:	2301      	moveq	r3, #1
 8006504:	2300      	movne	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	429a      	cmp	r2, r3
 800650e:	d0a0      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800651a:	b480      	push	{r7}
 800651c:	b095      	sub	sp, #84	@ 0x54
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006540:	643b      	str	r3, [r7, #64]	@ 0x40
 8006542:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006546:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e6      	bne.n	8006522 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	61fb      	str	r3, [r7, #28]
   return(result);
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006574:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800657a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e5      	bne.n	8006554 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658c:	2b01      	cmp	r3, #1
 800658e:	d118      	bne.n	80065c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	60bb      	str	r3, [r7, #8]
   return(result);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f023 0310 	bic.w	r3, r3, #16
 80065a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	613b      	str	r3, [r7, #16]
   return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e6      	bne.n	8006590 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065d6:	bf00      	nop
 80065d8:	3754      	adds	r7, #84	@ 0x54
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e056      	b.n	80066a8 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7fb fba4 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2224      	movs	r2, #36	@ 0x24
 8006614:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0201 	bic.w	r2, r2, #1
 8006624:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fdbc 	bl	80061ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff fb8d 	bl	8005d54 <UART_SetConfig>
 800663a:	4603      	mov	r3, r0
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e031      	b.n	80066a8 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006652:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	055b      	lsls	r3, r3, #21
 800666c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8006682:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	6979      	ldr	r1, [r7, #20]
 800668c:	430b      	orrs	r3, r1
 800668e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff fe25 	bl	80062f0 <UART_CheckIdleState>
 80066a6:	4603      	mov	r3, r0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <__cvt>:
 80066b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	ec57 6b10 	vmov	r6, r7, d0
 80066b8:	2f00      	cmp	r7, #0
 80066ba:	460c      	mov	r4, r1
 80066bc:	4619      	mov	r1, r3
 80066be:	463b      	mov	r3, r7
 80066c0:	bfbb      	ittet	lt
 80066c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066c6:	461f      	movlt	r7, r3
 80066c8:	2300      	movge	r3, #0
 80066ca:	232d      	movlt	r3, #45	@ 0x2d
 80066cc:	700b      	strb	r3, [r1, #0]
 80066ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066d4:	4691      	mov	r9, r2
 80066d6:	f023 0820 	bic.w	r8, r3, #32
 80066da:	bfbc      	itt	lt
 80066dc:	4632      	movlt	r2, r6
 80066de:	4616      	movlt	r6, r2
 80066e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066e4:	d005      	beq.n	80066f2 <__cvt+0x42>
 80066e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066ea:	d100      	bne.n	80066ee <__cvt+0x3e>
 80066ec:	3401      	adds	r4, #1
 80066ee:	2102      	movs	r1, #2
 80066f0:	e000      	b.n	80066f4 <__cvt+0x44>
 80066f2:	2103      	movs	r1, #3
 80066f4:	ab03      	add	r3, sp, #12
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	ab02      	add	r3, sp, #8
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	ec47 6b10 	vmov	d0, r6, r7
 8006700:	4653      	mov	r3, sl
 8006702:	4622      	mov	r2, r4
 8006704:	f000 fe4c 	bl	80073a0 <_dtoa_r>
 8006708:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800670c:	4605      	mov	r5, r0
 800670e:	d119      	bne.n	8006744 <__cvt+0x94>
 8006710:	f019 0f01 	tst.w	r9, #1
 8006714:	d00e      	beq.n	8006734 <__cvt+0x84>
 8006716:	eb00 0904 	add.w	r9, r0, r4
 800671a:	2200      	movs	r2, #0
 800671c:	2300      	movs	r3, #0
 800671e:	4630      	mov	r0, r6
 8006720:	4639      	mov	r1, r7
 8006722:	f7fa f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006726:	b108      	cbz	r0, 800672c <__cvt+0x7c>
 8006728:	f8cd 900c 	str.w	r9, [sp, #12]
 800672c:	2230      	movs	r2, #48	@ 0x30
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	454b      	cmp	r3, r9
 8006732:	d31e      	bcc.n	8006772 <__cvt+0xc2>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006738:	1b5b      	subs	r3, r3, r5
 800673a:	4628      	mov	r0, r5
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	b004      	add	sp, #16
 8006740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006744:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006748:	eb00 0904 	add.w	r9, r0, r4
 800674c:	d1e5      	bne.n	800671a <__cvt+0x6a>
 800674e:	7803      	ldrb	r3, [r0, #0]
 8006750:	2b30      	cmp	r3, #48	@ 0x30
 8006752:	d10a      	bne.n	800676a <__cvt+0xba>
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006760:	b918      	cbnz	r0, 800676a <__cvt+0xba>
 8006762:	f1c4 0401 	rsb	r4, r4, #1
 8006766:	f8ca 4000 	str.w	r4, [sl]
 800676a:	f8da 3000 	ldr.w	r3, [sl]
 800676e:	4499      	add	r9, r3
 8006770:	e7d3      	b.n	800671a <__cvt+0x6a>
 8006772:	1c59      	adds	r1, r3, #1
 8006774:	9103      	str	r1, [sp, #12]
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	e7d9      	b.n	800672e <__cvt+0x7e>

0800677a <__exponent>:
 800677a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800677c:	2900      	cmp	r1, #0
 800677e:	bfba      	itte	lt
 8006780:	4249      	neglt	r1, r1
 8006782:	232d      	movlt	r3, #45	@ 0x2d
 8006784:	232b      	movge	r3, #43	@ 0x2b
 8006786:	2909      	cmp	r1, #9
 8006788:	7002      	strb	r2, [r0, #0]
 800678a:	7043      	strb	r3, [r0, #1]
 800678c:	dd29      	ble.n	80067e2 <__exponent+0x68>
 800678e:	f10d 0307 	add.w	r3, sp, #7
 8006792:	461d      	mov	r5, r3
 8006794:	270a      	movs	r7, #10
 8006796:	461a      	mov	r2, r3
 8006798:	fbb1 f6f7 	udiv	r6, r1, r7
 800679c:	fb07 1416 	mls	r4, r7, r6, r1
 80067a0:	3430      	adds	r4, #48	@ 0x30
 80067a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067a6:	460c      	mov	r4, r1
 80067a8:	2c63      	cmp	r4, #99	@ 0x63
 80067aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80067ae:	4631      	mov	r1, r6
 80067b0:	dcf1      	bgt.n	8006796 <__exponent+0x1c>
 80067b2:	3130      	adds	r1, #48	@ 0x30
 80067b4:	1e94      	subs	r4, r2, #2
 80067b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067ba:	1c41      	adds	r1, r0, #1
 80067bc:	4623      	mov	r3, r4
 80067be:	42ab      	cmp	r3, r5
 80067c0:	d30a      	bcc.n	80067d8 <__exponent+0x5e>
 80067c2:	f10d 0309 	add.w	r3, sp, #9
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	42ac      	cmp	r4, r5
 80067ca:	bf88      	it	hi
 80067cc:	2300      	movhi	r3, #0
 80067ce:	3302      	adds	r3, #2
 80067d0:	4403      	add	r3, r0
 80067d2:	1a18      	subs	r0, r3, r0
 80067d4:	b003      	add	sp, #12
 80067d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067e0:	e7ed      	b.n	80067be <__exponent+0x44>
 80067e2:	2330      	movs	r3, #48	@ 0x30
 80067e4:	3130      	adds	r1, #48	@ 0x30
 80067e6:	7083      	strb	r3, [r0, #2]
 80067e8:	70c1      	strb	r1, [r0, #3]
 80067ea:	1d03      	adds	r3, r0, #4
 80067ec:	e7f1      	b.n	80067d2 <__exponent+0x58>
	...

080067f0 <_printf_float>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	b08d      	sub	sp, #52	@ 0x34
 80067f6:	460c      	mov	r4, r1
 80067f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067fc:	4616      	mov	r6, r2
 80067fe:	461f      	mov	r7, r3
 8006800:	4605      	mov	r5, r0
 8006802:	f000 fccb 	bl	800719c <_localeconv_r>
 8006806:	6803      	ldr	r3, [r0, #0]
 8006808:	9304      	str	r3, [sp, #16]
 800680a:	4618      	mov	r0, r3
 800680c:	f7f9 fd30 	bl	8000270 <strlen>
 8006810:	2300      	movs	r3, #0
 8006812:	930a      	str	r3, [sp, #40]	@ 0x28
 8006814:	f8d8 3000 	ldr.w	r3, [r8]
 8006818:	9005      	str	r0, [sp, #20]
 800681a:	3307      	adds	r3, #7
 800681c:	f023 0307 	bic.w	r3, r3, #7
 8006820:	f103 0208 	add.w	r2, r3, #8
 8006824:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006828:	f8d4 b000 	ldr.w	fp, [r4]
 800682c:	f8c8 2000 	str.w	r2, [r8]
 8006830:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006834:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	f8cd 8018 	str.w	r8, [sp, #24]
 800683e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006846:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <_printf_float+0x2c8>)
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	f7fa f96e 	bl	8000b2c <__aeabi_dcmpun>
 8006850:	bb70      	cbnz	r0, 80068b0 <_printf_float+0xc0>
 8006852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006856:	4b98      	ldr	r3, [pc, #608]	@ (8006ab8 <_printf_float+0x2c8>)
 8006858:	f04f 32ff 	mov.w	r2, #4294967295
 800685c:	f7fa f948 	bl	8000af0 <__aeabi_dcmple>
 8006860:	bb30      	cbnz	r0, 80068b0 <_printf_float+0xc0>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4640      	mov	r0, r8
 8006868:	4649      	mov	r1, r9
 800686a:	f7fa f937 	bl	8000adc <__aeabi_dcmplt>
 800686e:	b110      	cbz	r0, 8006876 <_printf_float+0x86>
 8006870:	232d      	movs	r3, #45	@ 0x2d
 8006872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006876:	4a91      	ldr	r2, [pc, #580]	@ (8006abc <_printf_float+0x2cc>)
 8006878:	4b91      	ldr	r3, [pc, #580]	@ (8006ac0 <_printf_float+0x2d0>)
 800687a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800687e:	bf8c      	ite	hi
 8006880:	4690      	movhi	r8, r2
 8006882:	4698      	movls	r8, r3
 8006884:	2303      	movs	r3, #3
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	f02b 0304 	bic.w	r3, fp, #4
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	f04f 0900 	mov.w	r9, #0
 8006892:	9700      	str	r7, [sp, #0]
 8006894:	4633      	mov	r3, r6
 8006896:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f9d2 	bl	8006c44 <_printf_common>
 80068a0:	3001      	adds	r0, #1
 80068a2:	f040 808d 	bne.w	80069c0 <_printf_float+0x1d0>
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	b00d      	add	sp, #52	@ 0x34
 80068ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	4640      	mov	r0, r8
 80068b6:	4649      	mov	r1, r9
 80068b8:	f7fa f938 	bl	8000b2c <__aeabi_dcmpun>
 80068bc:	b140      	cbz	r0, 80068d0 <_printf_float+0xe0>
 80068be:	464b      	mov	r3, r9
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfbc      	itt	lt
 80068c4:	232d      	movlt	r3, #45	@ 0x2d
 80068c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068ca:	4a7e      	ldr	r2, [pc, #504]	@ (8006ac4 <_printf_float+0x2d4>)
 80068cc:	4b7e      	ldr	r3, [pc, #504]	@ (8006ac8 <_printf_float+0x2d8>)
 80068ce:	e7d4      	b.n	800687a <_printf_float+0x8a>
 80068d0:	6863      	ldr	r3, [r4, #4]
 80068d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068d6:	9206      	str	r2, [sp, #24]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	d13b      	bne.n	8006954 <_printf_float+0x164>
 80068dc:	2306      	movs	r3, #6
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068e4:	2300      	movs	r3, #0
 80068e6:	6022      	str	r2, [r4, #0]
 80068e8:	9303      	str	r3, [sp, #12]
 80068ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80068ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068f0:	ab09      	add	r3, sp, #36	@ 0x24
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	6861      	ldr	r1, [r4, #4]
 80068f6:	ec49 8b10 	vmov	d0, r8, r9
 80068fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068fe:	4628      	mov	r0, r5
 8006900:	f7ff fed6 	bl	80066b0 <__cvt>
 8006904:	9b06      	ldr	r3, [sp, #24]
 8006906:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006908:	2b47      	cmp	r3, #71	@ 0x47
 800690a:	4680      	mov	r8, r0
 800690c:	d129      	bne.n	8006962 <_printf_float+0x172>
 800690e:	1cc8      	adds	r0, r1, #3
 8006910:	db02      	blt.n	8006918 <_printf_float+0x128>
 8006912:	6863      	ldr	r3, [r4, #4]
 8006914:	4299      	cmp	r1, r3
 8006916:	dd41      	ble.n	800699c <_printf_float+0x1ac>
 8006918:	f1aa 0a02 	sub.w	sl, sl, #2
 800691c:	fa5f fa8a 	uxtb.w	sl, sl
 8006920:	3901      	subs	r1, #1
 8006922:	4652      	mov	r2, sl
 8006924:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006928:	9109      	str	r1, [sp, #36]	@ 0x24
 800692a:	f7ff ff26 	bl	800677a <__exponent>
 800692e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006930:	1813      	adds	r3, r2, r0
 8006932:	2a01      	cmp	r2, #1
 8006934:	4681      	mov	r9, r0
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	dc02      	bgt.n	8006940 <_printf_float+0x150>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	07d2      	lsls	r2, r2, #31
 800693e:	d501      	bpl.n	8006944 <_printf_float+0x154>
 8006940:	3301      	adds	r3, #1
 8006942:	6123      	str	r3, [r4, #16]
 8006944:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0a2      	beq.n	8006892 <_printf_float+0xa2>
 800694c:	232d      	movs	r3, #45	@ 0x2d
 800694e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006952:	e79e      	b.n	8006892 <_printf_float+0xa2>
 8006954:	9a06      	ldr	r2, [sp, #24]
 8006956:	2a47      	cmp	r2, #71	@ 0x47
 8006958:	d1c2      	bne.n	80068e0 <_printf_float+0xf0>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1c0      	bne.n	80068e0 <_printf_float+0xf0>
 800695e:	2301      	movs	r3, #1
 8006960:	e7bd      	b.n	80068de <_printf_float+0xee>
 8006962:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006966:	d9db      	bls.n	8006920 <_printf_float+0x130>
 8006968:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800696c:	d118      	bne.n	80069a0 <_printf_float+0x1b0>
 800696e:	2900      	cmp	r1, #0
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	dd0b      	ble.n	800698c <_printf_float+0x19c>
 8006974:	6121      	str	r1, [r4, #16]
 8006976:	b913      	cbnz	r3, 800697e <_printf_float+0x18e>
 8006978:	6822      	ldr	r2, [r4, #0]
 800697a:	07d0      	lsls	r0, r2, #31
 800697c:	d502      	bpl.n	8006984 <_printf_float+0x194>
 800697e:	3301      	adds	r3, #1
 8006980:	440b      	add	r3, r1
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006986:	f04f 0900 	mov.w	r9, #0
 800698a:	e7db      	b.n	8006944 <_printf_float+0x154>
 800698c:	b913      	cbnz	r3, 8006994 <_printf_float+0x1a4>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	07d2      	lsls	r2, r2, #31
 8006992:	d501      	bpl.n	8006998 <_printf_float+0x1a8>
 8006994:	3302      	adds	r3, #2
 8006996:	e7f4      	b.n	8006982 <_printf_float+0x192>
 8006998:	2301      	movs	r3, #1
 800699a:	e7f2      	b.n	8006982 <_printf_float+0x192>
 800699c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069a2:	4299      	cmp	r1, r3
 80069a4:	db05      	blt.n	80069b2 <_printf_float+0x1c2>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	6121      	str	r1, [r4, #16]
 80069aa:	07d8      	lsls	r0, r3, #31
 80069ac:	d5ea      	bpl.n	8006984 <_printf_float+0x194>
 80069ae:	1c4b      	adds	r3, r1, #1
 80069b0:	e7e7      	b.n	8006982 <_printf_float+0x192>
 80069b2:	2900      	cmp	r1, #0
 80069b4:	bfd4      	ite	le
 80069b6:	f1c1 0202 	rsble	r2, r1, #2
 80069ba:	2201      	movgt	r2, #1
 80069bc:	4413      	add	r3, r2
 80069be:	e7e0      	b.n	8006982 <_printf_float+0x192>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	055a      	lsls	r2, r3, #21
 80069c4:	d407      	bmi.n	80069d6 <_printf_float+0x1e6>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	4642      	mov	r2, r8
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	d12b      	bne.n	8006a2c <_printf_float+0x23c>
 80069d4:	e767      	b.n	80068a6 <_printf_float+0xb6>
 80069d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069da:	f240 80dd 	bls.w	8006b98 <_printf_float+0x3a8>
 80069de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069e2:	2200      	movs	r2, #0
 80069e4:	2300      	movs	r3, #0
 80069e6:	f7fa f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d033      	beq.n	8006a56 <_printf_float+0x266>
 80069ee:	4a37      	ldr	r2, [pc, #220]	@ (8006acc <_printf_float+0x2dc>)
 80069f0:	2301      	movs	r3, #1
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f af54 	beq.w	80068a6 <_printf_float+0xb6>
 80069fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a02:	4543      	cmp	r3, r8
 8006a04:	db02      	blt.n	8006a0c <_printf_float+0x21c>
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	07d8      	lsls	r0, r3, #31
 8006a0a:	d50f      	bpl.n	8006a2c <_printf_float+0x23c>
 8006a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	f43f af45 	beq.w	80068a6 <_printf_float+0xb6>
 8006a1c:	f04f 0900 	mov.w	r9, #0
 8006a20:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a24:	f104 0a1a 	add.w	sl, r4, #26
 8006a28:	45c8      	cmp	r8, r9
 8006a2a:	dc09      	bgt.n	8006a40 <_printf_float+0x250>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	079b      	lsls	r3, r3, #30
 8006a30:	f100 8103 	bmi.w	8006c3a <_printf_float+0x44a>
 8006a34:	68e0      	ldr	r0, [r4, #12]
 8006a36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a38:	4298      	cmp	r0, r3
 8006a3a:	bfb8      	it	lt
 8006a3c:	4618      	movlt	r0, r3
 8006a3e:	e734      	b.n	80068aa <_printf_float+0xba>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4652      	mov	r2, sl
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f af2b 	beq.w	80068a6 <_printf_float+0xb6>
 8006a50:	f109 0901 	add.w	r9, r9, #1
 8006a54:	e7e8      	b.n	8006a28 <_printf_float+0x238>
 8006a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dc39      	bgt.n	8006ad0 <_printf_float+0x2e0>
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006acc <_printf_float+0x2dc>)
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	f43f af1d 	beq.w	80068a6 <_printf_float+0xb6>
 8006a6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a70:	ea59 0303 	orrs.w	r3, r9, r3
 8006a74:	d102      	bne.n	8006a7c <_printf_float+0x28c>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	07d9      	lsls	r1, r3, #31
 8006a7a:	d5d7      	bpl.n	8006a2c <_printf_float+0x23c>
 8006a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f af0d 	beq.w	80068a6 <_printf_float+0xb6>
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	f104 0b1a 	add.w	fp, r4, #26
 8006a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a96:	425b      	negs	r3, r3
 8006a98:	4553      	cmp	r3, sl
 8006a9a:	dc01      	bgt.n	8006aa0 <_printf_float+0x2b0>
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	e793      	b.n	80069c8 <_printf_float+0x1d8>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	465a      	mov	r2, fp
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	47b8      	blx	r7
 8006aaa:	3001      	adds	r0, #1
 8006aac:	f43f aefb 	beq.w	80068a6 <_printf_float+0xb6>
 8006ab0:	f10a 0a01 	add.w	sl, sl, #1
 8006ab4:	e7ee      	b.n	8006a94 <_printf_float+0x2a4>
 8006ab6:	bf00      	nop
 8006ab8:	7fefffff 	.word	0x7fefffff
 8006abc:	0800905c 	.word	0x0800905c
 8006ac0:	08009058 	.word	0x08009058
 8006ac4:	08009064 	.word	0x08009064
 8006ac8:	08009060 	.word	0x08009060
 8006acc:	08009068 	.word	0x08009068
 8006ad0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ad2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ad6:	4553      	cmp	r3, sl
 8006ad8:	bfa8      	it	ge
 8006ada:	4653      	movge	r3, sl
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	4699      	mov	r9, r3
 8006ae0:	dc36      	bgt.n	8006b50 <_printf_float+0x360>
 8006ae2:	f04f 0b00 	mov.w	fp, #0
 8006ae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aea:	f104 021a 	add.w	r2, r4, #26
 8006aee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006af0:	9306      	str	r3, [sp, #24]
 8006af2:	eba3 0309 	sub.w	r3, r3, r9
 8006af6:	455b      	cmp	r3, fp
 8006af8:	dc31      	bgt.n	8006b5e <_printf_float+0x36e>
 8006afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afc:	459a      	cmp	sl, r3
 8006afe:	dc3a      	bgt.n	8006b76 <_printf_float+0x386>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	07da      	lsls	r2, r3, #31
 8006b04:	d437      	bmi.n	8006b76 <_printf_float+0x386>
 8006b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b08:	ebaa 0903 	sub.w	r9, sl, r3
 8006b0c:	9b06      	ldr	r3, [sp, #24]
 8006b0e:	ebaa 0303 	sub.w	r3, sl, r3
 8006b12:	4599      	cmp	r9, r3
 8006b14:	bfa8      	it	ge
 8006b16:	4699      	movge	r9, r3
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	dc33      	bgt.n	8006b86 <_printf_float+0x396>
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b26:	f104 0b1a 	add.w	fp, r4, #26
 8006b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b2c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b30:	eba3 0309 	sub.w	r3, r3, r9
 8006b34:	4543      	cmp	r3, r8
 8006b36:	f77f af79 	ble.w	8006a2c <_printf_float+0x23c>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	465a      	mov	r2, fp
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f aeae 	beq.w	80068a6 <_printf_float+0xb6>
 8006b4a:	f108 0801 	add.w	r8, r8, #1
 8006b4e:	e7ec      	b.n	8006b2a <_printf_float+0x33a>
 8006b50:	4642      	mov	r2, r8
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d1c2      	bne.n	8006ae2 <_printf_float+0x2f2>
 8006b5c:	e6a3      	b.n	80068a6 <_printf_float+0xb6>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	9206      	str	r2, [sp, #24]
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f ae9c 	beq.w	80068a6 <_printf_float+0xb6>
 8006b6e:	9a06      	ldr	r2, [sp, #24]
 8006b70:	f10b 0b01 	add.w	fp, fp, #1
 8006b74:	e7bb      	b.n	8006aee <_printf_float+0x2fe>
 8006b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b8      	blx	r7
 8006b80:	3001      	adds	r0, #1
 8006b82:	d1c0      	bne.n	8006b06 <_printf_float+0x316>
 8006b84:	e68f      	b.n	80068a6 <_printf_float+0xb6>
 8006b86:	9a06      	ldr	r2, [sp, #24]
 8006b88:	464b      	mov	r3, r9
 8006b8a:	4442      	add	r2, r8
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	d1c3      	bne.n	8006b1e <_printf_float+0x32e>
 8006b96:	e686      	b.n	80068a6 <_printf_float+0xb6>
 8006b98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b9c:	f1ba 0f01 	cmp.w	sl, #1
 8006ba0:	dc01      	bgt.n	8006ba6 <_printf_float+0x3b6>
 8006ba2:	07db      	lsls	r3, r3, #31
 8006ba4:	d536      	bpl.n	8006c14 <_printf_float+0x424>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4642      	mov	r2, r8
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f ae78 	beq.w	80068a6 <_printf_float+0xb6>
 8006bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	47b8      	blx	r7
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	f43f ae70 	beq.w	80068a6 <_printf_float+0xb6>
 8006bc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bd2:	f7f9 ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bd6:	b9c0      	cbnz	r0, 8006c0a <_printf_float+0x41a>
 8006bd8:	4653      	mov	r3, sl
 8006bda:	f108 0201 	add.w	r2, r8, #1
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	d10c      	bne.n	8006c02 <_printf_float+0x412>
 8006be8:	e65d      	b.n	80068a6 <_printf_float+0xb6>
 8006bea:	2301      	movs	r3, #1
 8006bec:	465a      	mov	r2, fp
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b8      	blx	r7
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	f43f ae56 	beq.w	80068a6 <_printf_float+0xb6>
 8006bfa:	f108 0801 	add.w	r8, r8, #1
 8006bfe:	45d0      	cmp	r8, sl
 8006c00:	dbf3      	blt.n	8006bea <_printf_float+0x3fa>
 8006c02:	464b      	mov	r3, r9
 8006c04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c08:	e6df      	b.n	80069ca <_printf_float+0x1da>
 8006c0a:	f04f 0800 	mov.w	r8, #0
 8006c0e:	f104 0b1a 	add.w	fp, r4, #26
 8006c12:	e7f4      	b.n	8006bfe <_printf_float+0x40e>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4642      	mov	r2, r8
 8006c18:	e7e1      	b.n	8006bde <_printf_float+0x3ee>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	464a      	mov	r2, r9
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
 8006c22:	47b8      	blx	r7
 8006c24:	3001      	adds	r0, #1
 8006c26:	f43f ae3e 	beq.w	80068a6 <_printf_float+0xb6>
 8006c2a:	f108 0801 	add.w	r8, r8, #1
 8006c2e:	68e3      	ldr	r3, [r4, #12]
 8006c30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c32:	1a5b      	subs	r3, r3, r1
 8006c34:	4543      	cmp	r3, r8
 8006c36:	dcf0      	bgt.n	8006c1a <_printf_float+0x42a>
 8006c38:	e6fc      	b.n	8006a34 <_printf_float+0x244>
 8006c3a:	f04f 0800 	mov.w	r8, #0
 8006c3e:	f104 0919 	add.w	r9, r4, #25
 8006c42:	e7f4      	b.n	8006c2e <_printf_float+0x43e>

08006c44 <_printf_common>:
 8006c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	4616      	mov	r6, r2
 8006c4a:	4698      	mov	r8, r3
 8006c4c:	688a      	ldr	r2, [r1, #8]
 8006c4e:	690b      	ldr	r3, [r1, #16]
 8006c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	bfb8      	it	lt
 8006c58:	4613      	movlt	r3, r2
 8006c5a:	6033      	str	r3, [r6, #0]
 8006c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c60:	4607      	mov	r7, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	b10a      	cbz	r2, 8006c6a <_printf_common+0x26>
 8006c66:	3301      	adds	r3, #1
 8006c68:	6033      	str	r3, [r6, #0]
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	0699      	lsls	r1, r3, #26
 8006c6e:	bf42      	ittt	mi
 8006c70:	6833      	ldrmi	r3, [r6, #0]
 8006c72:	3302      	addmi	r3, #2
 8006c74:	6033      	strmi	r3, [r6, #0]
 8006c76:	6825      	ldr	r5, [r4, #0]
 8006c78:	f015 0506 	ands.w	r5, r5, #6
 8006c7c:	d106      	bne.n	8006c8c <_printf_common+0x48>
 8006c7e:	f104 0a19 	add.w	sl, r4, #25
 8006c82:	68e3      	ldr	r3, [r4, #12]
 8006c84:	6832      	ldr	r2, [r6, #0]
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	42ab      	cmp	r3, r5
 8006c8a:	dc26      	bgt.n	8006cda <_printf_common+0x96>
 8006c8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	3b00      	subs	r3, #0
 8006c94:	bf18      	it	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	0692      	lsls	r2, r2, #26
 8006c9a:	d42b      	bmi.n	8006cf4 <_printf_common+0xb0>
 8006c9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ca0:	4641      	mov	r1, r8
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	47c8      	blx	r9
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d01e      	beq.n	8006ce8 <_printf_common+0xa4>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	6922      	ldr	r2, [r4, #16]
 8006cae:	f003 0306 	and.w	r3, r3, #6
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	bf02      	ittt	eq
 8006cb6:	68e5      	ldreq	r5, [r4, #12]
 8006cb8:	6833      	ldreq	r3, [r6, #0]
 8006cba:	1aed      	subeq	r5, r5, r3
 8006cbc:	68a3      	ldr	r3, [r4, #8]
 8006cbe:	bf0c      	ite	eq
 8006cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc4:	2500      	movne	r5, #0
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	bfc4      	itt	gt
 8006cca:	1a9b      	subgt	r3, r3, r2
 8006ccc:	18ed      	addgt	r5, r5, r3
 8006cce:	2600      	movs	r6, #0
 8006cd0:	341a      	adds	r4, #26
 8006cd2:	42b5      	cmp	r5, r6
 8006cd4:	d11a      	bne.n	8006d0c <_printf_common+0xc8>
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	e008      	b.n	8006cec <_printf_common+0xa8>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4652      	mov	r2, sl
 8006cde:	4641      	mov	r1, r8
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	47c8      	blx	r9
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d103      	bne.n	8006cf0 <_printf_common+0xac>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf0:	3501      	adds	r5, #1
 8006cf2:	e7c6      	b.n	8006c82 <_printf_common+0x3e>
 8006cf4:	18e1      	adds	r1, r4, r3
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	2030      	movs	r0, #48	@ 0x30
 8006cfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cfe:	4422      	add	r2, r4
 8006d00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d08:	3302      	adds	r3, #2
 8006d0a:	e7c7      	b.n	8006c9c <_printf_common+0x58>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4622      	mov	r2, r4
 8006d10:	4641      	mov	r1, r8
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c8      	blx	r9
 8006d16:	3001      	adds	r0, #1
 8006d18:	d0e6      	beq.n	8006ce8 <_printf_common+0xa4>
 8006d1a:	3601      	adds	r6, #1
 8006d1c:	e7d9      	b.n	8006cd2 <_printf_common+0x8e>
	...

08006d20 <_printf_i>:
 8006d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	7e0f      	ldrb	r7, [r1, #24]
 8006d26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d28:	2f78      	cmp	r7, #120	@ 0x78
 8006d2a:	4691      	mov	r9, r2
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	469a      	mov	sl, r3
 8006d32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d36:	d807      	bhi.n	8006d48 <_printf_i+0x28>
 8006d38:	2f62      	cmp	r7, #98	@ 0x62
 8006d3a:	d80a      	bhi.n	8006d52 <_printf_i+0x32>
 8006d3c:	2f00      	cmp	r7, #0
 8006d3e:	f000 80d1 	beq.w	8006ee4 <_printf_i+0x1c4>
 8006d42:	2f58      	cmp	r7, #88	@ 0x58
 8006d44:	f000 80b8 	beq.w	8006eb8 <_printf_i+0x198>
 8006d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d50:	e03a      	b.n	8006dc8 <_printf_i+0xa8>
 8006d52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d56:	2b15      	cmp	r3, #21
 8006d58:	d8f6      	bhi.n	8006d48 <_printf_i+0x28>
 8006d5a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d60 <_printf_i+0x40>)
 8006d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d60:	08006db9 	.word	0x08006db9
 8006d64:	08006dcd 	.word	0x08006dcd
 8006d68:	08006d49 	.word	0x08006d49
 8006d6c:	08006d49 	.word	0x08006d49
 8006d70:	08006d49 	.word	0x08006d49
 8006d74:	08006d49 	.word	0x08006d49
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006d49 	.word	0x08006d49
 8006d80:	08006d49 	.word	0x08006d49
 8006d84:	08006d49 	.word	0x08006d49
 8006d88:	08006d49 	.word	0x08006d49
 8006d8c:	08006ecb 	.word	0x08006ecb
 8006d90:	08006df7 	.word	0x08006df7
 8006d94:	08006e85 	.word	0x08006e85
 8006d98:	08006d49 	.word	0x08006d49
 8006d9c:	08006d49 	.word	0x08006d49
 8006da0:	08006eed 	.word	0x08006eed
 8006da4:	08006d49 	.word	0x08006d49
 8006da8:	08006df7 	.word	0x08006df7
 8006dac:	08006d49 	.word	0x08006d49
 8006db0:	08006d49 	.word	0x08006d49
 8006db4:	08006e8d 	.word	0x08006e8d
 8006db8:	6833      	ldr	r3, [r6, #0]
 8006dba:	1d1a      	adds	r2, r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6032      	str	r2, [r6, #0]
 8006dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e09c      	b.n	8006f06 <_printf_i+0x1e6>
 8006dcc:	6833      	ldr	r3, [r6, #0]
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	1d19      	adds	r1, r3, #4
 8006dd2:	6031      	str	r1, [r6, #0]
 8006dd4:	0606      	lsls	r6, r0, #24
 8006dd6:	d501      	bpl.n	8006ddc <_printf_i+0xbc>
 8006dd8:	681d      	ldr	r5, [r3, #0]
 8006dda:	e003      	b.n	8006de4 <_printf_i+0xc4>
 8006ddc:	0645      	lsls	r5, r0, #25
 8006dde:	d5fb      	bpl.n	8006dd8 <_printf_i+0xb8>
 8006de0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	da03      	bge.n	8006df0 <_printf_i+0xd0>
 8006de8:	232d      	movs	r3, #45	@ 0x2d
 8006dea:	426d      	negs	r5, r5
 8006dec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006df0:	4858      	ldr	r0, [pc, #352]	@ (8006f54 <_printf_i+0x234>)
 8006df2:	230a      	movs	r3, #10
 8006df4:	e011      	b.n	8006e1a <_printf_i+0xfa>
 8006df6:	6821      	ldr	r1, [r4, #0]
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	0608      	lsls	r0, r1, #24
 8006dfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e00:	d402      	bmi.n	8006e08 <_printf_i+0xe8>
 8006e02:	0649      	lsls	r1, r1, #25
 8006e04:	bf48      	it	mi
 8006e06:	b2ad      	uxthmi	r5, r5
 8006e08:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e0a:	4852      	ldr	r0, [pc, #328]	@ (8006f54 <_printf_i+0x234>)
 8006e0c:	6033      	str	r3, [r6, #0]
 8006e0e:	bf14      	ite	ne
 8006e10:	230a      	movne	r3, #10
 8006e12:	2308      	moveq	r3, #8
 8006e14:	2100      	movs	r1, #0
 8006e16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e1a:	6866      	ldr	r6, [r4, #4]
 8006e1c:	60a6      	str	r6, [r4, #8]
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	db05      	blt.n	8006e2e <_printf_i+0x10e>
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	432e      	orrs	r6, r5
 8006e26:	f021 0104 	bic.w	r1, r1, #4
 8006e2a:	6021      	str	r1, [r4, #0]
 8006e2c:	d04b      	beq.n	8006ec6 <_printf_i+0x1a6>
 8006e2e:	4616      	mov	r6, r2
 8006e30:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e34:	fb03 5711 	mls	r7, r3, r1, r5
 8006e38:	5dc7      	ldrb	r7, [r0, r7]
 8006e3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e3e:	462f      	mov	r7, r5
 8006e40:	42bb      	cmp	r3, r7
 8006e42:	460d      	mov	r5, r1
 8006e44:	d9f4      	bls.n	8006e30 <_printf_i+0x110>
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d10b      	bne.n	8006e62 <_printf_i+0x142>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	07df      	lsls	r7, r3, #31
 8006e4e:	d508      	bpl.n	8006e62 <_printf_i+0x142>
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	6861      	ldr	r1, [r4, #4]
 8006e54:	4299      	cmp	r1, r3
 8006e56:	bfde      	ittt	le
 8006e58:	2330      	movle	r3, #48	@ 0x30
 8006e5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e62:	1b92      	subs	r2, r2, r6
 8006e64:	6122      	str	r2, [r4, #16]
 8006e66:	f8cd a000 	str.w	sl, [sp]
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	aa03      	add	r2, sp, #12
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4640      	mov	r0, r8
 8006e72:	f7ff fee7 	bl	8006c44 <_printf_common>
 8006e76:	3001      	adds	r0, #1
 8006e78:	d14a      	bne.n	8006f10 <_printf_i+0x1f0>
 8006e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7e:	b004      	add	sp, #16
 8006e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	f043 0320 	orr.w	r3, r3, #32
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	4832      	ldr	r0, [pc, #200]	@ (8006f58 <_printf_i+0x238>)
 8006e8e:	2778      	movs	r7, #120	@ 0x78
 8006e90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	6831      	ldr	r1, [r6, #0]
 8006e98:	061f      	lsls	r7, r3, #24
 8006e9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e9e:	d402      	bmi.n	8006ea6 <_printf_i+0x186>
 8006ea0:	065f      	lsls	r7, r3, #25
 8006ea2:	bf48      	it	mi
 8006ea4:	b2ad      	uxthmi	r5, r5
 8006ea6:	6031      	str	r1, [r6, #0]
 8006ea8:	07d9      	lsls	r1, r3, #31
 8006eaa:	bf44      	itt	mi
 8006eac:	f043 0320 	orrmi.w	r3, r3, #32
 8006eb0:	6023      	strmi	r3, [r4, #0]
 8006eb2:	b11d      	cbz	r5, 8006ebc <_printf_i+0x19c>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	e7ad      	b.n	8006e14 <_printf_i+0xf4>
 8006eb8:	4826      	ldr	r0, [pc, #152]	@ (8006f54 <_printf_i+0x234>)
 8006eba:	e7e9      	b.n	8006e90 <_printf_i+0x170>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	f023 0320 	bic.w	r3, r3, #32
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	e7f6      	b.n	8006eb4 <_printf_i+0x194>
 8006ec6:	4616      	mov	r6, r2
 8006ec8:	e7bd      	b.n	8006e46 <_printf_i+0x126>
 8006eca:	6833      	ldr	r3, [r6, #0]
 8006ecc:	6825      	ldr	r5, [r4, #0]
 8006ece:	6961      	ldr	r1, [r4, #20]
 8006ed0:	1d18      	adds	r0, r3, #4
 8006ed2:	6030      	str	r0, [r6, #0]
 8006ed4:	062e      	lsls	r6, r5, #24
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	d501      	bpl.n	8006ede <_printf_i+0x1be>
 8006eda:	6019      	str	r1, [r3, #0]
 8006edc:	e002      	b.n	8006ee4 <_printf_i+0x1c4>
 8006ede:	0668      	lsls	r0, r5, #25
 8006ee0:	d5fb      	bpl.n	8006eda <_printf_i+0x1ba>
 8006ee2:	8019      	strh	r1, [r3, #0]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	4616      	mov	r6, r2
 8006eea:	e7bc      	b.n	8006e66 <_printf_i+0x146>
 8006eec:	6833      	ldr	r3, [r6, #0]
 8006eee:	1d1a      	adds	r2, r3, #4
 8006ef0:	6032      	str	r2, [r6, #0]
 8006ef2:	681e      	ldr	r6, [r3, #0]
 8006ef4:	6862      	ldr	r2, [r4, #4]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7f9 f969 	bl	80001d0 <memchr>
 8006efe:	b108      	cbz	r0, 8006f04 <_printf_i+0x1e4>
 8006f00:	1b80      	subs	r0, r0, r6
 8006f02:	6060      	str	r0, [r4, #4]
 8006f04:	6863      	ldr	r3, [r4, #4]
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f0e:	e7aa      	b.n	8006e66 <_printf_i+0x146>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	4632      	mov	r2, r6
 8006f14:	4649      	mov	r1, r9
 8006f16:	4640      	mov	r0, r8
 8006f18:	47d0      	blx	sl
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d0ad      	beq.n	8006e7a <_printf_i+0x15a>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	079b      	lsls	r3, r3, #30
 8006f22:	d413      	bmi.n	8006f4c <_printf_i+0x22c>
 8006f24:	68e0      	ldr	r0, [r4, #12]
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	4298      	cmp	r0, r3
 8006f2a:	bfb8      	it	lt
 8006f2c:	4618      	movlt	r0, r3
 8006f2e:	e7a6      	b.n	8006e7e <_printf_i+0x15e>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4632      	mov	r2, r6
 8006f34:	4649      	mov	r1, r9
 8006f36:	4640      	mov	r0, r8
 8006f38:	47d0      	blx	sl
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d09d      	beq.n	8006e7a <_printf_i+0x15a>
 8006f3e:	3501      	adds	r5, #1
 8006f40:	68e3      	ldr	r3, [r4, #12]
 8006f42:	9903      	ldr	r1, [sp, #12]
 8006f44:	1a5b      	subs	r3, r3, r1
 8006f46:	42ab      	cmp	r3, r5
 8006f48:	dcf2      	bgt.n	8006f30 <_printf_i+0x210>
 8006f4a:	e7eb      	b.n	8006f24 <_printf_i+0x204>
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	f104 0619 	add.w	r6, r4, #25
 8006f52:	e7f5      	b.n	8006f40 <_printf_i+0x220>
 8006f54:	0800906a 	.word	0x0800906a
 8006f58:	0800907b 	.word	0x0800907b

08006f5c <std>:
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	e9c0 3300 	strd	r3, r3, [r0]
 8006f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f6a:	6083      	str	r3, [r0, #8]
 8006f6c:	8181      	strh	r1, [r0, #12]
 8006f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f70:	81c2      	strh	r2, [r0, #14]
 8006f72:	6183      	str	r3, [r0, #24]
 8006f74:	4619      	mov	r1, r3
 8006f76:	2208      	movs	r2, #8
 8006f78:	305c      	adds	r0, #92	@ 0x5c
 8006f7a:	f000 f906 	bl	800718a <memset>
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <std+0x58>)
 8006f80:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <std+0x5c>)
 8006f84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <std+0x60>)
 8006f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <std+0x64>)
 8006f8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <std+0x68>)
 8006f90:	6224      	str	r4, [r4, #32]
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d006      	beq.n	8006fa4 <std+0x48>
 8006f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f9a:	4294      	cmp	r4, r2
 8006f9c:	d002      	beq.n	8006fa4 <std+0x48>
 8006f9e:	33d0      	adds	r3, #208	@ 0xd0
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	d105      	bne.n	8006fb0 <std+0x54>
 8006fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f000 b96a 	b.w	8007284 <__retarget_lock_init_recursive>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08007105 	.word	0x08007105
 8006fb8:	08007127 	.word	0x08007127
 8006fbc:	0800715f 	.word	0x0800715f
 8006fc0:	08007183 	.word	0x08007183
 8006fc4:	20000510 	.word	0x20000510

08006fc8 <stdio_exit_handler>:
 8006fc8:	4a02      	ldr	r2, [pc, #8]	@ (8006fd4 <stdio_exit_handler+0xc>)
 8006fca:	4903      	ldr	r1, [pc, #12]	@ (8006fd8 <stdio_exit_handler+0x10>)
 8006fcc:	4803      	ldr	r0, [pc, #12]	@ (8006fdc <stdio_exit_handler+0x14>)
 8006fce:	f000 b869 	b.w	80070a4 <_fwalk_sglue>
 8006fd2:	bf00      	nop
 8006fd4:	2000000c 	.word	0x2000000c
 8006fd8:	08008bc1 	.word	0x08008bc1
 8006fdc:	2000001c 	.word	0x2000001c

08006fe0 <cleanup_stdio>:
 8006fe0:	6841      	ldr	r1, [r0, #4]
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <cleanup_stdio+0x34>)
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	d001      	beq.n	8006ff0 <cleanup_stdio+0x10>
 8006fec:	f001 fde8 	bl	8008bc0 <_fflush_r>
 8006ff0:	68a1      	ldr	r1, [r4, #8]
 8006ff2:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <cleanup_stdio+0x38>)
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	d002      	beq.n	8006ffe <cleanup_stdio+0x1e>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f001 fde1 	bl	8008bc0 <_fflush_r>
 8006ffe:	68e1      	ldr	r1, [r4, #12]
 8007000:	4b06      	ldr	r3, [pc, #24]	@ (800701c <cleanup_stdio+0x3c>)
 8007002:	4299      	cmp	r1, r3
 8007004:	d004      	beq.n	8007010 <cleanup_stdio+0x30>
 8007006:	4620      	mov	r0, r4
 8007008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800700c:	f001 bdd8 	b.w	8008bc0 <_fflush_r>
 8007010:	bd10      	pop	{r4, pc}
 8007012:	bf00      	nop
 8007014:	20000510 	.word	0x20000510
 8007018:	20000578 	.word	0x20000578
 800701c:	200005e0 	.word	0x200005e0

08007020 <global_stdio_init.part.0>:
 8007020:	b510      	push	{r4, lr}
 8007022:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <global_stdio_init.part.0+0x30>)
 8007024:	4c0b      	ldr	r4, [pc, #44]	@ (8007054 <global_stdio_init.part.0+0x34>)
 8007026:	4a0c      	ldr	r2, [pc, #48]	@ (8007058 <global_stdio_init.part.0+0x38>)
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	4620      	mov	r0, r4
 800702c:	2200      	movs	r2, #0
 800702e:	2104      	movs	r1, #4
 8007030:	f7ff ff94 	bl	8006f5c <std>
 8007034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007038:	2201      	movs	r2, #1
 800703a:	2109      	movs	r1, #9
 800703c:	f7ff ff8e 	bl	8006f5c <std>
 8007040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007044:	2202      	movs	r2, #2
 8007046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800704a:	2112      	movs	r1, #18
 800704c:	f7ff bf86 	b.w	8006f5c <std>
 8007050:	20000648 	.word	0x20000648
 8007054:	20000510 	.word	0x20000510
 8007058:	08006fc9 	.word	0x08006fc9

0800705c <__sfp_lock_acquire>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__sfp_lock_acquire+0x8>)
 800705e:	f000 b912 	b.w	8007286 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	20000651 	.word	0x20000651

08007068 <__sfp_lock_release>:
 8007068:	4801      	ldr	r0, [pc, #4]	@ (8007070 <__sfp_lock_release+0x8>)
 800706a:	f000 b90d 	b.w	8007288 <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	20000651 	.word	0x20000651

08007074 <__sinit>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	f7ff fff0 	bl	800705c <__sfp_lock_acquire>
 800707c:	6a23      	ldr	r3, [r4, #32]
 800707e:	b11b      	cbz	r3, 8007088 <__sinit+0x14>
 8007080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007084:	f7ff bff0 	b.w	8007068 <__sfp_lock_release>
 8007088:	4b04      	ldr	r3, [pc, #16]	@ (800709c <__sinit+0x28>)
 800708a:	6223      	str	r3, [r4, #32]
 800708c:	4b04      	ldr	r3, [pc, #16]	@ (80070a0 <__sinit+0x2c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f5      	bne.n	8007080 <__sinit+0xc>
 8007094:	f7ff ffc4 	bl	8007020 <global_stdio_init.part.0>
 8007098:	e7f2      	b.n	8007080 <__sinit+0xc>
 800709a:	bf00      	nop
 800709c:	08006fe1 	.word	0x08006fe1
 80070a0:	20000648 	.word	0x20000648

080070a4 <_fwalk_sglue>:
 80070a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4607      	mov	r7, r0
 80070aa:	4688      	mov	r8, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	2600      	movs	r6, #0
 80070b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070b4:	f1b9 0901 	subs.w	r9, r9, #1
 80070b8:	d505      	bpl.n	80070c6 <_fwalk_sglue+0x22>
 80070ba:	6824      	ldr	r4, [r4, #0]
 80070bc:	2c00      	cmp	r4, #0
 80070be:	d1f7      	bne.n	80070b0 <_fwalk_sglue+0xc>
 80070c0:	4630      	mov	r0, r6
 80070c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d907      	bls.n	80070dc <_fwalk_sglue+0x38>
 80070cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070d0:	3301      	adds	r3, #1
 80070d2:	d003      	beq.n	80070dc <_fwalk_sglue+0x38>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c0      	blx	r8
 80070da:	4306      	orrs	r6, r0
 80070dc:	3568      	adds	r5, #104	@ 0x68
 80070de:	e7e9      	b.n	80070b4 <_fwalk_sglue+0x10>

080070e0 <iprintf>:
 80070e0:	b40f      	push	{r0, r1, r2, r3}
 80070e2:	b507      	push	{r0, r1, r2, lr}
 80070e4:	4906      	ldr	r1, [pc, #24]	@ (8007100 <iprintf+0x20>)
 80070e6:	ab04      	add	r3, sp, #16
 80070e8:	6808      	ldr	r0, [r1, #0]
 80070ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ee:	6881      	ldr	r1, [r0, #8]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	f001 fbc9 	bl	8008888 <_vfiprintf_r>
 80070f6:	b003      	add	sp, #12
 80070f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070fc:	b004      	add	sp, #16
 80070fe:	4770      	bx	lr
 8007100:	20000018 	.word	0x20000018

08007104 <__sread>:
 8007104:	b510      	push	{r4, lr}
 8007106:	460c      	mov	r4, r1
 8007108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710c:	f000 f86c 	bl	80071e8 <_read_r>
 8007110:	2800      	cmp	r0, #0
 8007112:	bfab      	itete	ge
 8007114:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007116:	89a3      	ldrhlt	r3, [r4, #12]
 8007118:	181b      	addge	r3, r3, r0
 800711a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800711e:	bfac      	ite	ge
 8007120:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007122:	81a3      	strhlt	r3, [r4, #12]
 8007124:	bd10      	pop	{r4, pc}

08007126 <__swrite>:
 8007126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712a:	461f      	mov	r7, r3
 800712c:	898b      	ldrh	r3, [r1, #12]
 800712e:	05db      	lsls	r3, r3, #23
 8007130:	4605      	mov	r5, r0
 8007132:	460c      	mov	r4, r1
 8007134:	4616      	mov	r6, r2
 8007136:	d505      	bpl.n	8007144 <__swrite+0x1e>
 8007138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713c:	2302      	movs	r3, #2
 800713e:	2200      	movs	r2, #0
 8007140:	f000 f840 	bl	80071c4 <_lseek_r>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	4632      	mov	r2, r6
 8007152:	463b      	mov	r3, r7
 8007154:	4628      	mov	r0, r5
 8007156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	f000 b857 	b.w	800720c <_write_r>

0800715e <__sseek>:
 800715e:	b510      	push	{r4, lr}
 8007160:	460c      	mov	r4, r1
 8007162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007166:	f000 f82d 	bl	80071c4 <_lseek_r>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	bf15      	itete	ne
 8007170:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007172:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007176:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800717a:	81a3      	strheq	r3, [r4, #12]
 800717c:	bf18      	it	ne
 800717e:	81a3      	strhne	r3, [r4, #12]
 8007180:	bd10      	pop	{r4, pc}

08007182 <__sclose>:
 8007182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007186:	f000 b80d 	b.w	80071a4 <_close_r>

0800718a <memset>:
 800718a:	4402      	add	r2, r0
 800718c:	4603      	mov	r3, r0
 800718e:	4293      	cmp	r3, r2
 8007190:	d100      	bne.n	8007194 <memset+0xa>
 8007192:	4770      	bx	lr
 8007194:	f803 1b01 	strb.w	r1, [r3], #1
 8007198:	e7f9      	b.n	800718e <memset+0x4>
	...

0800719c <_localeconv_r>:
 800719c:	4800      	ldr	r0, [pc, #0]	@ (80071a0 <_localeconv_r+0x4>)
 800719e:	4770      	bx	lr
 80071a0:	20000158 	.word	0x20000158

080071a4 <_close_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d06      	ldr	r5, [pc, #24]	@ (80071c0 <_close_r+0x1c>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	f7fa ff2d 	bl	800200e <_close>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_close_r+0x1a>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_close_r+0x1a>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	2000064c 	.word	0x2000064c

080071c4 <_lseek_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d07      	ldr	r5, [pc, #28]	@ (80071e4 <_lseek_r+0x20>)
 80071c8:	4604      	mov	r4, r0
 80071ca:	4608      	mov	r0, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f7fa ff42 	bl	800205c <_lseek>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_lseek_r+0x1e>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_lseek_r+0x1e>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	2000064c 	.word	0x2000064c

080071e8 <_read_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d07      	ldr	r5, [pc, #28]	@ (8007208 <_read_r+0x20>)
 80071ec:	4604      	mov	r4, r0
 80071ee:	4608      	mov	r0, r1
 80071f0:	4611      	mov	r1, r2
 80071f2:	2200      	movs	r2, #0
 80071f4:	602a      	str	r2, [r5, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f7fa fed0 	bl	8001f9c <_read>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_read_r+0x1e>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b103      	cbz	r3, 8007206 <_read_r+0x1e>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	2000064c 	.word	0x2000064c

0800720c <_write_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d07      	ldr	r5, [pc, #28]	@ (800722c <_write_r+0x20>)
 8007210:	4604      	mov	r4, r0
 8007212:	4608      	mov	r0, r1
 8007214:	4611      	mov	r1, r2
 8007216:	2200      	movs	r2, #0
 8007218:	602a      	str	r2, [r5, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	f7fa fedb 	bl	8001fd6 <_write>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_write_r+0x1e>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_write_r+0x1e>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	2000064c 	.word	0x2000064c

08007230 <__errno>:
 8007230:	4b01      	ldr	r3, [pc, #4]	@ (8007238 <__errno+0x8>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	20000018 	.word	0x20000018

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4d0d      	ldr	r5, [pc, #52]	@ (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	@ (8007278 <__libc_init_array+0x3c>)
 8007242:	1b64      	subs	r4, r4, r5
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2600      	movs	r6, #0
 8007248:	42a6      	cmp	r6, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4d0b      	ldr	r5, [pc, #44]	@ (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	@ (8007280 <__libc_init_array+0x44>)
 8007250:	f001 fec4 	bl	8008fdc <_init>
 8007254:	1b64      	subs	r4, r4, r5
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2600      	movs	r6, #0
 800725a:	42a6      	cmp	r6, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f855 3b04 	ldr.w	r3, [r5], #4
 8007264:	4798      	blx	r3
 8007266:	3601      	adds	r6, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f855 3b04 	ldr.w	r3, [r5], #4
 800726e:	4798      	blx	r3
 8007270:	3601      	adds	r6, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	080093d4 	.word	0x080093d4
 8007278:	080093d4 	.word	0x080093d4
 800727c:	080093d4 	.word	0x080093d4
 8007280:	080093d8 	.word	0x080093d8

08007284 <__retarget_lock_init_recursive>:
 8007284:	4770      	bx	lr

08007286 <__retarget_lock_acquire_recursive>:
 8007286:	4770      	bx	lr

08007288 <__retarget_lock_release_recursive>:
 8007288:	4770      	bx	lr

0800728a <quorem>:
 800728a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728e:	6903      	ldr	r3, [r0, #16]
 8007290:	690c      	ldr	r4, [r1, #16]
 8007292:	42a3      	cmp	r3, r4
 8007294:	4607      	mov	r7, r0
 8007296:	db7e      	blt.n	8007396 <quorem+0x10c>
 8007298:	3c01      	subs	r4, #1
 800729a:	f101 0814 	add.w	r8, r1, #20
 800729e:	00a3      	lsls	r3, r4, #2
 80072a0:	f100 0514 	add.w	r5, r0, #20
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b4:	3301      	adds	r3, #1
 80072b6:	429a      	cmp	r2, r3
 80072b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80072c0:	d32e      	bcc.n	8007320 <quorem+0x96>
 80072c2:	f04f 0a00 	mov.w	sl, #0
 80072c6:	46c4      	mov	ip, r8
 80072c8:	46ae      	mov	lr, r5
 80072ca:	46d3      	mov	fp, sl
 80072cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072d0:	b298      	uxth	r0, r3
 80072d2:	fb06 a000 	mla	r0, r6, r0, sl
 80072d6:	0c02      	lsrs	r2, r0, #16
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	fb06 2303 	mla	r3, r6, r3, r2
 80072de:	f8de 2000 	ldr.w	r2, [lr]
 80072e2:	b280      	uxth	r0, r0
 80072e4:	b292      	uxth	r2, r2
 80072e6:	1a12      	subs	r2, r2, r0
 80072e8:	445a      	add	r2, fp
 80072ea:	f8de 0000 	ldr.w	r0, [lr]
 80072ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80072f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80072fc:	b292      	uxth	r2, r2
 80072fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007302:	45e1      	cmp	r9, ip
 8007304:	f84e 2b04 	str.w	r2, [lr], #4
 8007308:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800730c:	d2de      	bcs.n	80072cc <quorem+0x42>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	58eb      	ldr	r3, [r5, r3]
 8007312:	b92b      	cbnz	r3, 8007320 <quorem+0x96>
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	3b04      	subs	r3, #4
 8007318:	429d      	cmp	r5, r3
 800731a:	461a      	mov	r2, r3
 800731c:	d32f      	bcc.n	800737e <quorem+0xf4>
 800731e:	613c      	str	r4, [r7, #16]
 8007320:	4638      	mov	r0, r7
 8007322:	f001 f97f 	bl	8008624 <__mcmp>
 8007326:	2800      	cmp	r0, #0
 8007328:	db25      	blt.n	8007376 <quorem+0xec>
 800732a:	4629      	mov	r1, r5
 800732c:	2000      	movs	r0, #0
 800732e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007332:	f8d1 c000 	ldr.w	ip, [r1]
 8007336:	fa1f fe82 	uxth.w	lr, r2
 800733a:	fa1f f38c 	uxth.w	r3, ip
 800733e:	eba3 030e 	sub.w	r3, r3, lr
 8007342:	4403      	add	r3, r0
 8007344:	0c12      	lsrs	r2, r2, #16
 8007346:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800734a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800734e:	b29b      	uxth	r3, r3
 8007350:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007354:	45c1      	cmp	r9, r8
 8007356:	f841 3b04 	str.w	r3, [r1], #4
 800735a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800735e:	d2e6      	bcs.n	800732e <quorem+0xa4>
 8007360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007368:	b922      	cbnz	r2, 8007374 <quorem+0xea>
 800736a:	3b04      	subs	r3, #4
 800736c:	429d      	cmp	r5, r3
 800736e:	461a      	mov	r2, r3
 8007370:	d30b      	bcc.n	800738a <quorem+0x100>
 8007372:	613c      	str	r4, [r7, #16]
 8007374:	3601      	adds	r6, #1
 8007376:	4630      	mov	r0, r6
 8007378:	b003      	add	sp, #12
 800737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	3b04      	subs	r3, #4
 8007382:	2a00      	cmp	r2, #0
 8007384:	d1cb      	bne.n	800731e <quorem+0x94>
 8007386:	3c01      	subs	r4, #1
 8007388:	e7c6      	b.n	8007318 <quorem+0x8e>
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	3b04      	subs	r3, #4
 800738e:	2a00      	cmp	r2, #0
 8007390:	d1ef      	bne.n	8007372 <quorem+0xe8>
 8007392:	3c01      	subs	r4, #1
 8007394:	e7ea      	b.n	800736c <quorem+0xe2>
 8007396:	2000      	movs	r0, #0
 8007398:	e7ee      	b.n	8007378 <quorem+0xee>
 800739a:	0000      	movs	r0, r0
 800739c:	0000      	movs	r0, r0
	...

080073a0 <_dtoa_r>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	69c7      	ldr	r7, [r0, #28]
 80073a6:	b097      	sub	sp, #92	@ 0x5c
 80073a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80073ac:	ec55 4b10 	vmov	r4, r5, d0
 80073b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80073b2:	9107      	str	r1, [sp, #28]
 80073b4:	4681      	mov	r9, r0
 80073b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80073b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80073ba:	b97f      	cbnz	r7, 80073dc <_dtoa_r+0x3c>
 80073bc:	2010      	movs	r0, #16
 80073be:	f000 fe09 	bl	8007fd4 <malloc>
 80073c2:	4602      	mov	r2, r0
 80073c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80073c8:	b920      	cbnz	r0, 80073d4 <_dtoa_r+0x34>
 80073ca:	4ba9      	ldr	r3, [pc, #676]	@ (8007670 <_dtoa_r+0x2d0>)
 80073cc:	21ef      	movs	r1, #239	@ 0xef
 80073ce:	48a9      	ldr	r0, [pc, #676]	@ (8007674 <_dtoa_r+0x2d4>)
 80073d0:	f001 fcd0 	bl	8008d74 <__assert_func>
 80073d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80073d8:	6007      	str	r7, [r0, #0]
 80073da:	60c7      	str	r7, [r0, #12]
 80073dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80073e0:	6819      	ldr	r1, [r3, #0]
 80073e2:	b159      	cbz	r1, 80073fc <_dtoa_r+0x5c>
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	604a      	str	r2, [r1, #4]
 80073e8:	2301      	movs	r3, #1
 80073ea:	4093      	lsls	r3, r2
 80073ec:	608b      	str	r3, [r1, #8]
 80073ee:	4648      	mov	r0, r9
 80073f0:	f000 fee6 	bl	80081c0 <_Bfree>
 80073f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	1e2b      	subs	r3, r5, #0
 80073fe:	bfb9      	ittee	lt
 8007400:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007404:	9305      	strlt	r3, [sp, #20]
 8007406:	2300      	movge	r3, #0
 8007408:	6033      	strge	r3, [r6, #0]
 800740a:	9f05      	ldr	r7, [sp, #20]
 800740c:	4b9a      	ldr	r3, [pc, #616]	@ (8007678 <_dtoa_r+0x2d8>)
 800740e:	bfbc      	itt	lt
 8007410:	2201      	movlt	r2, #1
 8007412:	6032      	strlt	r2, [r6, #0]
 8007414:	43bb      	bics	r3, r7
 8007416:	d112      	bne.n	800743e <_dtoa_r+0x9e>
 8007418:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800741a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007424:	4323      	orrs	r3, r4
 8007426:	f000 855a 	beq.w	8007ede <_dtoa_r+0xb3e>
 800742a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800742c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800768c <_dtoa_r+0x2ec>
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 855c 	beq.w	8007eee <_dtoa_r+0xb4e>
 8007436:	f10a 0303 	add.w	r3, sl, #3
 800743a:	f000 bd56 	b.w	8007eea <_dtoa_r+0xb4a>
 800743e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007442:	2200      	movs	r2, #0
 8007444:	ec51 0b17 	vmov	r0, r1, d7
 8007448:	2300      	movs	r3, #0
 800744a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800744e:	f7f9 fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007452:	4680      	mov	r8, r0
 8007454:	b158      	cbz	r0, 800746e <_dtoa_r+0xce>
 8007456:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007458:	2301      	movs	r3, #1
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800745e:	b113      	cbz	r3, 8007466 <_dtoa_r+0xc6>
 8007460:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007462:	4b86      	ldr	r3, [pc, #536]	@ (800767c <_dtoa_r+0x2dc>)
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007690 <_dtoa_r+0x2f0>
 800746a:	f000 bd40 	b.w	8007eee <_dtoa_r+0xb4e>
 800746e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007472:	aa14      	add	r2, sp, #80	@ 0x50
 8007474:	a915      	add	r1, sp, #84	@ 0x54
 8007476:	4648      	mov	r0, r9
 8007478:	f001 f984 	bl	8008784 <__d2b>
 800747c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007480:	9002      	str	r0, [sp, #8]
 8007482:	2e00      	cmp	r6, #0
 8007484:	d078      	beq.n	8007578 <_dtoa_r+0x1d8>
 8007486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007488:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800748c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007494:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007498:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800749c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074a0:	4619      	mov	r1, r3
 80074a2:	2200      	movs	r2, #0
 80074a4:	4b76      	ldr	r3, [pc, #472]	@ (8007680 <_dtoa_r+0x2e0>)
 80074a6:	f7f8 feef 	bl	8000288 <__aeabi_dsub>
 80074aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8007658 <_dtoa_r+0x2b8>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f9 f8a2 	bl	80005f8 <__aeabi_dmul>
 80074b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007660 <_dtoa_r+0x2c0>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f8 fee7 	bl	800028c <__adddf3>
 80074be:	4604      	mov	r4, r0
 80074c0:	4630      	mov	r0, r6
 80074c2:	460d      	mov	r5, r1
 80074c4:	f7f9 f82e 	bl	8000524 <__aeabi_i2d>
 80074c8:	a367      	add	r3, pc, #412	@ (adr r3, 8007668 <_dtoa_r+0x2c8>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f8 fed7 	bl	800028c <__adddf3>
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7f9 fb39 	bl	8000b58 <__aeabi_d2iz>
 80074e6:	2200      	movs	r2, #0
 80074e8:	4607      	mov	r7, r0
 80074ea:	2300      	movs	r3, #0
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f9 faf4 	bl	8000adc <__aeabi_dcmplt>
 80074f4:	b140      	cbz	r0, 8007508 <_dtoa_r+0x168>
 80074f6:	4638      	mov	r0, r7
 80074f8:	f7f9 f814 	bl	8000524 <__aeabi_i2d>
 80074fc:	4622      	mov	r2, r4
 80074fe:	462b      	mov	r3, r5
 8007500:	f7f9 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007504:	b900      	cbnz	r0, 8007508 <_dtoa_r+0x168>
 8007506:	3f01      	subs	r7, #1
 8007508:	2f16      	cmp	r7, #22
 800750a:	d852      	bhi.n	80075b2 <_dtoa_r+0x212>
 800750c:	4b5d      	ldr	r3, [pc, #372]	@ (8007684 <_dtoa_r+0x2e4>)
 800750e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800751a:	f7f9 fadf 	bl	8000adc <__aeabi_dcmplt>
 800751e:	2800      	cmp	r0, #0
 8007520:	d049      	beq.n	80075b6 <_dtoa_r+0x216>
 8007522:	3f01      	subs	r7, #1
 8007524:	2300      	movs	r3, #0
 8007526:	9310      	str	r3, [sp, #64]	@ 0x40
 8007528:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800752a:	1b9b      	subs	r3, r3, r6
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	bf45      	ittet	mi
 8007530:	f1c3 0301 	rsbmi	r3, r3, #1
 8007534:	9300      	strmi	r3, [sp, #0]
 8007536:	2300      	movpl	r3, #0
 8007538:	2300      	movmi	r3, #0
 800753a:	9206      	str	r2, [sp, #24]
 800753c:	bf54      	ite	pl
 800753e:	9300      	strpl	r3, [sp, #0]
 8007540:	9306      	strmi	r3, [sp, #24]
 8007542:	2f00      	cmp	r7, #0
 8007544:	db39      	blt.n	80075ba <_dtoa_r+0x21a>
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	970d      	str	r7, [sp, #52]	@ 0x34
 800754a:	443b      	add	r3, r7
 800754c:	9306      	str	r3, [sp, #24]
 800754e:	2300      	movs	r3, #0
 8007550:	9308      	str	r3, [sp, #32]
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	2b09      	cmp	r3, #9
 8007556:	d863      	bhi.n	8007620 <_dtoa_r+0x280>
 8007558:	2b05      	cmp	r3, #5
 800755a:	bfc4      	itt	gt
 800755c:	3b04      	subgt	r3, #4
 800755e:	9307      	strgt	r3, [sp, #28]
 8007560:	9b07      	ldr	r3, [sp, #28]
 8007562:	f1a3 0302 	sub.w	r3, r3, #2
 8007566:	bfcc      	ite	gt
 8007568:	2400      	movgt	r4, #0
 800756a:	2401      	movle	r4, #1
 800756c:	2b03      	cmp	r3, #3
 800756e:	d863      	bhi.n	8007638 <_dtoa_r+0x298>
 8007570:	e8df f003 	tbb	[pc, r3]
 8007574:	2b375452 	.word	0x2b375452
 8007578:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800757c:	441e      	add	r6, r3
 800757e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007582:	2b20      	cmp	r3, #32
 8007584:	bfc1      	itttt	gt
 8007586:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800758a:	409f      	lslgt	r7, r3
 800758c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007590:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007594:	bfd6      	itet	le
 8007596:	f1c3 0320 	rsble	r3, r3, #32
 800759a:	ea47 0003 	orrgt.w	r0, r7, r3
 800759e:	fa04 f003 	lslle.w	r0, r4, r3
 80075a2:	f7f8 ffaf 	bl	8000504 <__aeabi_ui2d>
 80075a6:	2201      	movs	r2, #1
 80075a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075ac:	3e01      	subs	r6, #1
 80075ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80075b0:	e776      	b.n	80074a0 <_dtoa_r+0x100>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e7b7      	b.n	8007526 <_dtoa_r+0x186>
 80075b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80075b8:	e7b6      	b.n	8007528 <_dtoa_r+0x188>
 80075ba:	9b00      	ldr	r3, [sp, #0]
 80075bc:	1bdb      	subs	r3, r3, r7
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	427b      	negs	r3, r7
 80075c2:	9308      	str	r3, [sp, #32]
 80075c4:	2300      	movs	r3, #0
 80075c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80075c8:	e7c3      	b.n	8007552 <_dtoa_r+0x1b2>
 80075ca:	2301      	movs	r3, #1
 80075cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075d0:	eb07 0b03 	add.w	fp, r7, r3
 80075d4:	f10b 0301 	add.w	r3, fp, #1
 80075d8:	2b01      	cmp	r3, #1
 80075da:	9303      	str	r3, [sp, #12]
 80075dc:	bfb8      	it	lt
 80075de:	2301      	movlt	r3, #1
 80075e0:	e006      	b.n	80075f0 <_dtoa_r+0x250>
 80075e2:	2301      	movs	r3, #1
 80075e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dd28      	ble.n	800763e <_dtoa_r+0x29e>
 80075ec:	469b      	mov	fp, r3
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80075f4:	2100      	movs	r1, #0
 80075f6:	2204      	movs	r2, #4
 80075f8:	f102 0514 	add.w	r5, r2, #20
 80075fc:	429d      	cmp	r5, r3
 80075fe:	d926      	bls.n	800764e <_dtoa_r+0x2ae>
 8007600:	6041      	str	r1, [r0, #4]
 8007602:	4648      	mov	r0, r9
 8007604:	f000 fd9c 	bl	8008140 <_Balloc>
 8007608:	4682      	mov	sl, r0
 800760a:	2800      	cmp	r0, #0
 800760c:	d142      	bne.n	8007694 <_dtoa_r+0x2f4>
 800760e:	4b1e      	ldr	r3, [pc, #120]	@ (8007688 <_dtoa_r+0x2e8>)
 8007610:	4602      	mov	r2, r0
 8007612:	f240 11af 	movw	r1, #431	@ 0x1af
 8007616:	e6da      	b.n	80073ce <_dtoa_r+0x2e>
 8007618:	2300      	movs	r3, #0
 800761a:	e7e3      	b.n	80075e4 <_dtoa_r+0x244>
 800761c:	2300      	movs	r3, #0
 800761e:	e7d5      	b.n	80075cc <_dtoa_r+0x22c>
 8007620:	2401      	movs	r4, #1
 8007622:	2300      	movs	r3, #0
 8007624:	9307      	str	r3, [sp, #28]
 8007626:	9409      	str	r4, [sp, #36]	@ 0x24
 8007628:	f04f 3bff 	mov.w	fp, #4294967295
 800762c:	2200      	movs	r2, #0
 800762e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007632:	2312      	movs	r3, #18
 8007634:	920c      	str	r2, [sp, #48]	@ 0x30
 8007636:	e7db      	b.n	80075f0 <_dtoa_r+0x250>
 8007638:	2301      	movs	r3, #1
 800763a:	9309      	str	r3, [sp, #36]	@ 0x24
 800763c:	e7f4      	b.n	8007628 <_dtoa_r+0x288>
 800763e:	f04f 0b01 	mov.w	fp, #1
 8007642:	f8cd b00c 	str.w	fp, [sp, #12]
 8007646:	465b      	mov	r3, fp
 8007648:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800764c:	e7d0      	b.n	80075f0 <_dtoa_r+0x250>
 800764e:	3101      	adds	r1, #1
 8007650:	0052      	lsls	r2, r2, #1
 8007652:	e7d1      	b.n	80075f8 <_dtoa_r+0x258>
 8007654:	f3af 8000 	nop.w
 8007658:	636f4361 	.word	0x636f4361
 800765c:	3fd287a7 	.word	0x3fd287a7
 8007660:	8b60c8b3 	.word	0x8b60c8b3
 8007664:	3fc68a28 	.word	0x3fc68a28
 8007668:	509f79fb 	.word	0x509f79fb
 800766c:	3fd34413 	.word	0x3fd34413
 8007670:	08009099 	.word	0x08009099
 8007674:	080090b0 	.word	0x080090b0
 8007678:	7ff00000 	.word	0x7ff00000
 800767c:	08009069 	.word	0x08009069
 8007680:	3ff80000 	.word	0x3ff80000
 8007684:	08009200 	.word	0x08009200
 8007688:	08009108 	.word	0x08009108
 800768c:	08009095 	.word	0x08009095
 8007690:	08009068 	.word	0x08009068
 8007694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007698:	6018      	str	r0, [r3, #0]
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	2b0e      	cmp	r3, #14
 800769e:	f200 80a1 	bhi.w	80077e4 <_dtoa_r+0x444>
 80076a2:	2c00      	cmp	r4, #0
 80076a4:	f000 809e 	beq.w	80077e4 <_dtoa_r+0x444>
 80076a8:	2f00      	cmp	r7, #0
 80076aa:	dd33      	ble.n	8007714 <_dtoa_r+0x374>
 80076ac:	4b9c      	ldr	r3, [pc, #624]	@ (8007920 <_dtoa_r+0x580>)
 80076ae:	f007 020f 	and.w	r2, r7, #15
 80076b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076b6:	ed93 7b00 	vldr	d7, [r3]
 80076ba:	05f8      	lsls	r0, r7, #23
 80076bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80076c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076c4:	d516      	bpl.n	80076f4 <_dtoa_r+0x354>
 80076c6:	4b97      	ldr	r3, [pc, #604]	@ (8007924 <_dtoa_r+0x584>)
 80076c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80076cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076d0:	f7f9 f8bc 	bl	800084c <__aeabi_ddiv>
 80076d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076d8:	f004 040f 	and.w	r4, r4, #15
 80076dc:	2603      	movs	r6, #3
 80076de:	4d91      	ldr	r5, [pc, #580]	@ (8007924 <_dtoa_r+0x584>)
 80076e0:	b954      	cbnz	r4, 80076f8 <_dtoa_r+0x358>
 80076e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ea:	f7f9 f8af 	bl	800084c <__aeabi_ddiv>
 80076ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f2:	e028      	b.n	8007746 <_dtoa_r+0x3a6>
 80076f4:	2602      	movs	r6, #2
 80076f6:	e7f2      	b.n	80076de <_dtoa_r+0x33e>
 80076f8:	07e1      	lsls	r1, r4, #31
 80076fa:	d508      	bpl.n	800770e <_dtoa_r+0x36e>
 80076fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007704:	f7f8 ff78 	bl	80005f8 <__aeabi_dmul>
 8007708:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800770c:	3601      	adds	r6, #1
 800770e:	1064      	asrs	r4, r4, #1
 8007710:	3508      	adds	r5, #8
 8007712:	e7e5      	b.n	80076e0 <_dtoa_r+0x340>
 8007714:	f000 80af 	beq.w	8007876 <_dtoa_r+0x4d6>
 8007718:	427c      	negs	r4, r7
 800771a:	4b81      	ldr	r3, [pc, #516]	@ (8007920 <_dtoa_r+0x580>)
 800771c:	4d81      	ldr	r5, [pc, #516]	@ (8007924 <_dtoa_r+0x584>)
 800771e:	f004 020f 	and.w	r2, r4, #15
 8007722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800772e:	f7f8 ff63 	bl	80005f8 <__aeabi_dmul>
 8007732:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007736:	1124      	asrs	r4, r4, #4
 8007738:	2300      	movs	r3, #0
 800773a:	2602      	movs	r6, #2
 800773c:	2c00      	cmp	r4, #0
 800773e:	f040 808f 	bne.w	8007860 <_dtoa_r+0x4c0>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1d3      	bne.n	80076ee <_dtoa_r+0x34e>
 8007746:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007748:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8094 	beq.w	800787a <_dtoa_r+0x4da>
 8007752:	4b75      	ldr	r3, [pc, #468]	@ (8007928 <_dtoa_r+0x588>)
 8007754:	2200      	movs	r2, #0
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f9 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800775e:	2800      	cmp	r0, #0
 8007760:	f000 808b 	beq.w	800787a <_dtoa_r+0x4da>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8087 	beq.w	800787a <_dtoa_r+0x4da>
 800776c:	f1bb 0f00 	cmp.w	fp, #0
 8007770:	dd34      	ble.n	80077dc <_dtoa_r+0x43c>
 8007772:	4620      	mov	r0, r4
 8007774:	4b6d      	ldr	r3, [pc, #436]	@ (800792c <_dtoa_r+0x58c>)
 8007776:	2200      	movs	r2, #0
 8007778:	4629      	mov	r1, r5
 800777a:	f7f8 ff3d 	bl	80005f8 <__aeabi_dmul>
 800777e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007782:	f107 38ff 	add.w	r8, r7, #4294967295
 8007786:	3601      	adds	r6, #1
 8007788:	465c      	mov	r4, fp
 800778a:	4630      	mov	r0, r6
 800778c:	f7f8 feca 	bl	8000524 <__aeabi_i2d>
 8007790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007794:	f7f8 ff30 	bl	80005f8 <__aeabi_dmul>
 8007798:	4b65      	ldr	r3, [pc, #404]	@ (8007930 <_dtoa_r+0x590>)
 800779a:	2200      	movs	r2, #0
 800779c:	f7f8 fd76 	bl	800028c <__adddf3>
 80077a0:	4605      	mov	r5, r0
 80077a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077a6:	2c00      	cmp	r4, #0
 80077a8:	d16a      	bne.n	8007880 <_dtoa_r+0x4e0>
 80077aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ae:	4b61      	ldr	r3, [pc, #388]	@ (8007934 <_dtoa_r+0x594>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	f7f8 fd69 	bl	8000288 <__aeabi_dsub>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077be:	462a      	mov	r2, r5
 80077c0:	4633      	mov	r3, r6
 80077c2:	f7f9 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f040 8298 	bne.w	8007cfc <_dtoa_r+0x95c>
 80077cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077d0:	462a      	mov	r2, r5
 80077d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077d6:	f7f9 f981 	bl	8000adc <__aeabi_dcmplt>
 80077da:	bb38      	cbnz	r0, 800782c <_dtoa_r+0x48c>
 80077dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80077e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80077e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f2c0 8157 	blt.w	8007a9a <_dtoa_r+0x6fa>
 80077ec:	2f0e      	cmp	r7, #14
 80077ee:	f300 8154 	bgt.w	8007a9a <_dtoa_r+0x6fa>
 80077f2:	4b4b      	ldr	r3, [pc, #300]	@ (8007920 <_dtoa_r+0x580>)
 80077f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077f8:	ed93 7b00 	vldr	d7, [r3]
 80077fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077fe:	2b00      	cmp	r3, #0
 8007800:	ed8d 7b00 	vstr	d7, [sp]
 8007804:	f280 80e5 	bge.w	80079d2 <_dtoa_r+0x632>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f300 80e1 	bgt.w	80079d2 <_dtoa_r+0x632>
 8007810:	d10c      	bne.n	800782c <_dtoa_r+0x48c>
 8007812:	4b48      	ldr	r3, [pc, #288]	@ (8007934 <_dtoa_r+0x594>)
 8007814:	2200      	movs	r2, #0
 8007816:	ec51 0b17 	vmov	r0, r1, d7
 800781a:	f7f8 feed 	bl	80005f8 <__aeabi_dmul>
 800781e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007822:	f7f9 f96f 	bl	8000b04 <__aeabi_dcmpge>
 8007826:	2800      	cmp	r0, #0
 8007828:	f000 8266 	beq.w	8007cf8 <_dtoa_r+0x958>
 800782c:	2400      	movs	r4, #0
 800782e:	4625      	mov	r5, r4
 8007830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007832:	4656      	mov	r6, sl
 8007834:	ea6f 0803 	mvn.w	r8, r3
 8007838:	2700      	movs	r7, #0
 800783a:	4621      	mov	r1, r4
 800783c:	4648      	mov	r0, r9
 800783e:	f000 fcbf 	bl	80081c0 <_Bfree>
 8007842:	2d00      	cmp	r5, #0
 8007844:	f000 80bd 	beq.w	80079c2 <_dtoa_r+0x622>
 8007848:	b12f      	cbz	r7, 8007856 <_dtoa_r+0x4b6>
 800784a:	42af      	cmp	r7, r5
 800784c:	d003      	beq.n	8007856 <_dtoa_r+0x4b6>
 800784e:	4639      	mov	r1, r7
 8007850:	4648      	mov	r0, r9
 8007852:	f000 fcb5 	bl	80081c0 <_Bfree>
 8007856:	4629      	mov	r1, r5
 8007858:	4648      	mov	r0, r9
 800785a:	f000 fcb1 	bl	80081c0 <_Bfree>
 800785e:	e0b0      	b.n	80079c2 <_dtoa_r+0x622>
 8007860:	07e2      	lsls	r2, r4, #31
 8007862:	d505      	bpl.n	8007870 <_dtoa_r+0x4d0>
 8007864:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007868:	f7f8 fec6 	bl	80005f8 <__aeabi_dmul>
 800786c:	3601      	adds	r6, #1
 800786e:	2301      	movs	r3, #1
 8007870:	1064      	asrs	r4, r4, #1
 8007872:	3508      	adds	r5, #8
 8007874:	e762      	b.n	800773c <_dtoa_r+0x39c>
 8007876:	2602      	movs	r6, #2
 8007878:	e765      	b.n	8007746 <_dtoa_r+0x3a6>
 800787a:	9c03      	ldr	r4, [sp, #12]
 800787c:	46b8      	mov	r8, r7
 800787e:	e784      	b.n	800778a <_dtoa_r+0x3ea>
 8007880:	4b27      	ldr	r3, [pc, #156]	@ (8007920 <_dtoa_r+0x580>)
 8007882:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007888:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800788c:	4454      	add	r4, sl
 800788e:	2900      	cmp	r1, #0
 8007890:	d054      	beq.n	800793c <_dtoa_r+0x59c>
 8007892:	4929      	ldr	r1, [pc, #164]	@ (8007938 <_dtoa_r+0x598>)
 8007894:	2000      	movs	r0, #0
 8007896:	f7f8 ffd9 	bl	800084c <__aeabi_ddiv>
 800789a:	4633      	mov	r3, r6
 800789c:	462a      	mov	r2, r5
 800789e:	f7f8 fcf3 	bl	8000288 <__aeabi_dsub>
 80078a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80078a6:	4656      	mov	r6, sl
 80078a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ac:	f7f9 f954 	bl	8000b58 <__aeabi_d2iz>
 80078b0:	4605      	mov	r5, r0
 80078b2:	f7f8 fe37 	bl	8000524 <__aeabi_i2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078be:	f7f8 fce3 	bl	8000288 <__aeabi_dsub>
 80078c2:	3530      	adds	r5, #48	@ 0x30
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078cc:	f806 5b01 	strb.w	r5, [r6], #1
 80078d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078d4:	f7f9 f902 	bl	8000adc <__aeabi_dcmplt>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d172      	bne.n	80079c2 <_dtoa_r+0x622>
 80078dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e0:	4911      	ldr	r1, [pc, #68]	@ (8007928 <_dtoa_r+0x588>)
 80078e2:	2000      	movs	r0, #0
 80078e4:	f7f8 fcd0 	bl	8000288 <__aeabi_dsub>
 80078e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078ec:	f7f9 f8f6 	bl	8000adc <__aeabi_dcmplt>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	f040 80b4 	bne.w	8007a5e <_dtoa_r+0x6be>
 80078f6:	42a6      	cmp	r6, r4
 80078f8:	f43f af70 	beq.w	80077dc <_dtoa_r+0x43c>
 80078fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007900:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <_dtoa_r+0x58c>)
 8007902:	2200      	movs	r2, #0
 8007904:	f7f8 fe78 	bl	80005f8 <__aeabi_dmul>
 8007908:	4b08      	ldr	r3, [pc, #32]	@ (800792c <_dtoa_r+0x58c>)
 800790a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800790e:	2200      	movs	r2, #0
 8007910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007914:	f7f8 fe70 	bl	80005f8 <__aeabi_dmul>
 8007918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800791c:	e7c4      	b.n	80078a8 <_dtoa_r+0x508>
 800791e:	bf00      	nop
 8007920:	08009200 	.word	0x08009200
 8007924:	080091d8 	.word	0x080091d8
 8007928:	3ff00000 	.word	0x3ff00000
 800792c:	40240000 	.word	0x40240000
 8007930:	401c0000 	.word	0x401c0000
 8007934:	40140000 	.word	0x40140000
 8007938:	3fe00000 	.word	0x3fe00000
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	f7f8 fe5a 	bl	80005f8 <__aeabi_dmul>
 8007944:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007948:	9413      	str	r4, [sp, #76]	@ 0x4c
 800794a:	4656      	mov	r6, sl
 800794c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007950:	f7f9 f902 	bl	8000b58 <__aeabi_d2iz>
 8007954:	4605      	mov	r5, r0
 8007956:	f7f8 fde5 	bl	8000524 <__aeabi_i2d>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007962:	f7f8 fc91 	bl	8000288 <__aeabi_dsub>
 8007966:	3530      	adds	r5, #48	@ 0x30
 8007968:	f806 5b01 	strb.w	r5, [r6], #1
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	42a6      	cmp	r6, r4
 8007972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	d124      	bne.n	80079c6 <_dtoa_r+0x626>
 800797c:	4baf      	ldr	r3, [pc, #700]	@ (8007c3c <_dtoa_r+0x89c>)
 800797e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007982:	f7f8 fc83 	bl	800028c <__adddf3>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800798e:	f7f9 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 8007992:	2800      	cmp	r0, #0
 8007994:	d163      	bne.n	8007a5e <_dtoa_r+0x6be>
 8007996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800799a:	49a8      	ldr	r1, [pc, #672]	@ (8007c3c <_dtoa_r+0x89c>)
 800799c:	2000      	movs	r0, #0
 800799e:	f7f8 fc73 	bl	8000288 <__aeabi_dsub>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079aa:	f7f9 f897 	bl	8000adc <__aeabi_dcmplt>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f43f af14 	beq.w	80077dc <_dtoa_r+0x43c>
 80079b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80079b6:	1e73      	subs	r3, r6, #1
 80079b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079be:	2b30      	cmp	r3, #48	@ 0x30
 80079c0:	d0f8      	beq.n	80079b4 <_dtoa_r+0x614>
 80079c2:	4647      	mov	r7, r8
 80079c4:	e03b      	b.n	8007a3e <_dtoa_r+0x69e>
 80079c6:	4b9e      	ldr	r3, [pc, #632]	@ (8007c40 <_dtoa_r+0x8a0>)
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079d0:	e7bc      	b.n	800794c <_dtoa_r+0x5ac>
 80079d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80079d6:	4656      	mov	r6, sl
 80079d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f8 ff34 	bl	800084c <__aeabi_ddiv>
 80079e4:	f7f9 f8b8 	bl	8000b58 <__aeabi_d2iz>
 80079e8:	4680      	mov	r8, r0
 80079ea:	f7f8 fd9b 	bl	8000524 <__aeabi_i2d>
 80079ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079f2:	f7f8 fe01 	bl	80005f8 <__aeabi_dmul>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a02:	f7f8 fc41 	bl	8000288 <__aeabi_dsub>
 8007a06:	f806 4b01 	strb.w	r4, [r6], #1
 8007a0a:	9d03      	ldr	r5, [sp, #12]
 8007a0c:	eba6 040a 	sub.w	r4, r6, sl
 8007a10:	42a5      	cmp	r5, r4
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	d133      	bne.n	8007a80 <_dtoa_r+0x6e0>
 8007a18:	f7f8 fc38 	bl	800028c <__adddf3>
 8007a1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	f7f9 f878 	bl	8000b18 <__aeabi_dcmpgt>
 8007a28:	b9c0      	cbnz	r0, 8007a5c <_dtoa_r+0x6bc>
 8007a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f9 f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a36:	b110      	cbz	r0, 8007a3e <_dtoa_r+0x69e>
 8007a38:	f018 0f01 	tst.w	r8, #1
 8007a3c:	d10e      	bne.n	8007a5c <_dtoa_r+0x6bc>
 8007a3e:	9902      	ldr	r1, [sp, #8]
 8007a40:	4648      	mov	r0, r9
 8007a42:	f000 fbbd 	bl	80081c0 <_Bfree>
 8007a46:	2300      	movs	r3, #0
 8007a48:	7033      	strb	r3, [r6, #0]
 8007a4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a4c:	3701      	adds	r7, #1
 8007a4e:	601f      	str	r7, [r3, #0]
 8007a50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 824b 	beq.w	8007eee <_dtoa_r+0xb4e>
 8007a58:	601e      	str	r6, [r3, #0]
 8007a5a:	e248      	b.n	8007eee <_dtoa_r+0xb4e>
 8007a5c:	46b8      	mov	r8, r7
 8007a5e:	4633      	mov	r3, r6
 8007a60:	461e      	mov	r6, r3
 8007a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a66:	2a39      	cmp	r2, #57	@ 0x39
 8007a68:	d106      	bne.n	8007a78 <_dtoa_r+0x6d8>
 8007a6a:	459a      	cmp	sl, r3
 8007a6c:	d1f8      	bne.n	8007a60 <_dtoa_r+0x6c0>
 8007a6e:	2230      	movs	r2, #48	@ 0x30
 8007a70:	f108 0801 	add.w	r8, r8, #1
 8007a74:	f88a 2000 	strb.w	r2, [sl]
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e7a0      	b.n	80079c2 <_dtoa_r+0x622>
 8007a80:	4b6f      	ldr	r3, [pc, #444]	@ (8007c40 <_dtoa_r+0x8a0>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	f7f8 fdb8 	bl	80005f8 <__aeabi_dmul>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	f7f9 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d09f      	beq.n	80079d8 <_dtoa_r+0x638>
 8007a98:	e7d1      	b.n	8007a3e <_dtoa_r+0x69e>
 8007a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	f000 80ea 	beq.w	8007c76 <_dtoa_r+0x8d6>
 8007aa2:	9a07      	ldr	r2, [sp, #28]
 8007aa4:	2a01      	cmp	r2, #1
 8007aa6:	f300 80cd 	bgt.w	8007c44 <_dtoa_r+0x8a4>
 8007aaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	f000 80c1 	beq.w	8007c34 <_dtoa_r+0x894>
 8007ab2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ab6:	9c08      	ldr	r4, [sp, #32]
 8007ab8:	9e00      	ldr	r6, [sp, #0]
 8007aba:	9a00      	ldr	r2, [sp, #0]
 8007abc:	441a      	add	r2, r3
 8007abe:	9200      	str	r2, [sp, #0]
 8007ac0:	9a06      	ldr	r2, [sp, #24]
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	441a      	add	r2, r3
 8007ac6:	4648      	mov	r0, r9
 8007ac8:	9206      	str	r2, [sp, #24]
 8007aca:	f000 fc2d 	bl	8008328 <__i2b>
 8007ace:	4605      	mov	r5, r0
 8007ad0:	b166      	cbz	r6, 8007aec <_dtoa_r+0x74c>
 8007ad2:	9b06      	ldr	r3, [sp, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dd09      	ble.n	8007aec <_dtoa_r+0x74c>
 8007ad8:	42b3      	cmp	r3, r6
 8007ada:	9a00      	ldr	r2, [sp, #0]
 8007adc:	bfa8      	it	ge
 8007ade:	4633      	movge	r3, r6
 8007ae0:	1ad2      	subs	r2, r2, r3
 8007ae2:	9200      	str	r2, [sp, #0]
 8007ae4:	9a06      	ldr	r2, [sp, #24]
 8007ae6:	1af6      	subs	r6, r6, r3
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	9306      	str	r3, [sp, #24]
 8007aec:	9b08      	ldr	r3, [sp, #32]
 8007aee:	b30b      	cbz	r3, 8007b34 <_dtoa_r+0x794>
 8007af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 80c6 	beq.w	8007c84 <_dtoa_r+0x8e4>
 8007af8:	2c00      	cmp	r4, #0
 8007afa:	f000 80c0 	beq.w	8007c7e <_dtoa_r+0x8de>
 8007afe:	4629      	mov	r1, r5
 8007b00:	4622      	mov	r2, r4
 8007b02:	4648      	mov	r0, r9
 8007b04:	f000 fcc8 	bl	8008498 <__pow5mult>
 8007b08:	9a02      	ldr	r2, [sp, #8]
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	4648      	mov	r0, r9
 8007b10:	f000 fc20 	bl	8008354 <__multiply>
 8007b14:	9902      	ldr	r1, [sp, #8]
 8007b16:	4680      	mov	r8, r0
 8007b18:	4648      	mov	r0, r9
 8007b1a:	f000 fb51 	bl	80081c0 <_Bfree>
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	1b1b      	subs	r3, r3, r4
 8007b22:	9308      	str	r3, [sp, #32]
 8007b24:	f000 80b1 	beq.w	8007c8a <_dtoa_r+0x8ea>
 8007b28:	9a08      	ldr	r2, [sp, #32]
 8007b2a:	4641      	mov	r1, r8
 8007b2c:	4648      	mov	r0, r9
 8007b2e:	f000 fcb3 	bl	8008498 <__pow5mult>
 8007b32:	9002      	str	r0, [sp, #8]
 8007b34:	2101      	movs	r1, #1
 8007b36:	4648      	mov	r0, r9
 8007b38:	f000 fbf6 	bl	8008328 <__i2b>
 8007b3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b3e:	4604      	mov	r4, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 81d8 	beq.w	8007ef6 <_dtoa_r+0xb56>
 8007b46:	461a      	mov	r2, r3
 8007b48:	4601      	mov	r1, r0
 8007b4a:	4648      	mov	r0, r9
 8007b4c:	f000 fca4 	bl	8008498 <__pow5mult>
 8007b50:	9b07      	ldr	r3, [sp, #28]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	4604      	mov	r4, r0
 8007b56:	f300 809f 	bgt.w	8007c98 <_dtoa_r+0x8f8>
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 8097 	bne.w	8007c90 <_dtoa_r+0x8f0>
 8007b62:	9b05      	ldr	r3, [sp, #20]
 8007b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 8093 	bne.w	8007c94 <_dtoa_r+0x8f4>
 8007b6e:	9b05      	ldr	r3, [sp, #20]
 8007b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b74:	0d1b      	lsrs	r3, r3, #20
 8007b76:	051b      	lsls	r3, r3, #20
 8007b78:	b133      	cbz	r3, 8007b88 <_dtoa_r+0x7e8>
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	9b06      	ldr	r3, [sp, #24]
 8007b82:	3301      	adds	r3, #1
 8007b84:	9306      	str	r3, [sp, #24]
 8007b86:	2301      	movs	r3, #1
 8007b88:	9308      	str	r3, [sp, #32]
 8007b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 81b8 	beq.w	8007f02 <_dtoa_r+0xb62>
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b98:	6918      	ldr	r0, [r3, #16]
 8007b9a:	f000 fb79 	bl	8008290 <__hi0bits>
 8007b9e:	f1c0 0020 	rsb	r0, r0, #32
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	4418      	add	r0, r3
 8007ba6:	f010 001f 	ands.w	r0, r0, #31
 8007baa:	f000 8082 	beq.w	8007cb2 <_dtoa_r+0x912>
 8007bae:	f1c0 0320 	rsb	r3, r0, #32
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	dd73      	ble.n	8007c9e <_dtoa_r+0x8fe>
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	f1c0 001c 	rsb	r0, r0, #28
 8007bbc:	4403      	add	r3, r0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	9b06      	ldr	r3, [sp, #24]
 8007bc2:	4403      	add	r3, r0
 8007bc4:	4406      	add	r6, r0
 8007bc6:	9306      	str	r3, [sp, #24]
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd05      	ble.n	8007bda <_dtoa_r+0x83a>
 8007bce:	9902      	ldr	r1, [sp, #8]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4648      	mov	r0, r9
 8007bd4:	f000 fcba 	bl	800854c <__lshift>
 8007bd8:	9002      	str	r0, [sp, #8]
 8007bda:	9b06      	ldr	r3, [sp, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dd05      	ble.n	8007bec <_dtoa_r+0x84c>
 8007be0:	4621      	mov	r1, r4
 8007be2:	461a      	mov	r2, r3
 8007be4:	4648      	mov	r0, r9
 8007be6:	f000 fcb1 	bl	800854c <__lshift>
 8007bea:	4604      	mov	r4, r0
 8007bec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d061      	beq.n	8007cb6 <_dtoa_r+0x916>
 8007bf2:	9802      	ldr	r0, [sp, #8]
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f000 fd15 	bl	8008624 <__mcmp>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	da5b      	bge.n	8007cb6 <_dtoa_r+0x916>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9902      	ldr	r1, [sp, #8]
 8007c02:	220a      	movs	r2, #10
 8007c04:	4648      	mov	r0, r9
 8007c06:	f000 fafd 	bl	8008204 <__multadd>
 8007c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0c:	9002      	str	r0, [sp, #8]
 8007c0e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8177 	beq.w	8007f06 <_dtoa_r+0xb66>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	4648      	mov	r0, r9
 8007c20:	f000 faf0 	bl	8008204 <__multadd>
 8007c24:	f1bb 0f00 	cmp.w	fp, #0
 8007c28:	4605      	mov	r5, r0
 8007c2a:	dc6f      	bgt.n	8007d0c <_dtoa_r+0x96c>
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	dc49      	bgt.n	8007cc6 <_dtoa_r+0x926>
 8007c32:	e06b      	b.n	8007d0c <_dtoa_r+0x96c>
 8007c34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c3a:	e73c      	b.n	8007ab6 <_dtoa_r+0x716>
 8007c3c:	3fe00000 	.word	0x3fe00000
 8007c40:	40240000 	.word	0x40240000
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	1e5c      	subs	r4, r3, #1
 8007c48:	9b08      	ldr	r3, [sp, #32]
 8007c4a:	42a3      	cmp	r3, r4
 8007c4c:	db09      	blt.n	8007c62 <_dtoa_r+0x8c2>
 8007c4e:	1b1c      	subs	r4, r3, r4
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f6bf af30 	bge.w	8007ab8 <_dtoa_r+0x718>
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	9a03      	ldr	r2, [sp, #12]
 8007c5c:	1a9e      	subs	r6, r3, r2
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e72b      	b.n	8007aba <_dtoa_r+0x71a>
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c66:	9408      	str	r4, [sp, #32]
 8007c68:	1ae3      	subs	r3, r4, r3
 8007c6a:	441a      	add	r2, r3
 8007c6c:	9e00      	ldr	r6, [sp, #0]
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	920d      	str	r2, [sp, #52]	@ 0x34
 8007c72:	2400      	movs	r4, #0
 8007c74:	e721      	b.n	8007aba <_dtoa_r+0x71a>
 8007c76:	9c08      	ldr	r4, [sp, #32]
 8007c78:	9e00      	ldr	r6, [sp, #0]
 8007c7a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007c7c:	e728      	b.n	8007ad0 <_dtoa_r+0x730>
 8007c7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007c82:	e751      	b.n	8007b28 <_dtoa_r+0x788>
 8007c84:	9a08      	ldr	r2, [sp, #32]
 8007c86:	9902      	ldr	r1, [sp, #8]
 8007c88:	e750      	b.n	8007b2c <_dtoa_r+0x78c>
 8007c8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007c8e:	e751      	b.n	8007b34 <_dtoa_r+0x794>
 8007c90:	2300      	movs	r3, #0
 8007c92:	e779      	b.n	8007b88 <_dtoa_r+0x7e8>
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	e777      	b.n	8007b88 <_dtoa_r+0x7e8>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9308      	str	r3, [sp, #32]
 8007c9c:	e779      	b.n	8007b92 <_dtoa_r+0x7f2>
 8007c9e:	d093      	beq.n	8007bc8 <_dtoa_r+0x828>
 8007ca0:	9a00      	ldr	r2, [sp, #0]
 8007ca2:	331c      	adds	r3, #28
 8007ca4:	441a      	add	r2, r3
 8007ca6:	9200      	str	r2, [sp, #0]
 8007ca8:	9a06      	ldr	r2, [sp, #24]
 8007caa:	441a      	add	r2, r3
 8007cac:	441e      	add	r6, r3
 8007cae:	9206      	str	r2, [sp, #24]
 8007cb0:	e78a      	b.n	8007bc8 <_dtoa_r+0x828>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	e7f4      	b.n	8007ca0 <_dtoa_r+0x900>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	46b8      	mov	r8, r7
 8007cbc:	dc20      	bgt.n	8007d00 <_dtoa_r+0x960>
 8007cbe:	469b      	mov	fp, r3
 8007cc0:	9b07      	ldr	r3, [sp, #28]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	dd1e      	ble.n	8007d04 <_dtoa_r+0x964>
 8007cc6:	f1bb 0f00 	cmp.w	fp, #0
 8007cca:	f47f adb1 	bne.w	8007830 <_dtoa_r+0x490>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	465b      	mov	r3, fp
 8007cd2:	2205      	movs	r2, #5
 8007cd4:	4648      	mov	r0, r9
 8007cd6:	f000 fa95 	bl	8008204 <__multadd>
 8007cda:	4601      	mov	r1, r0
 8007cdc:	4604      	mov	r4, r0
 8007cde:	9802      	ldr	r0, [sp, #8]
 8007ce0:	f000 fca0 	bl	8008624 <__mcmp>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f77f ada3 	ble.w	8007830 <_dtoa_r+0x490>
 8007cea:	4656      	mov	r6, sl
 8007cec:	2331      	movs	r3, #49	@ 0x31
 8007cee:	f806 3b01 	strb.w	r3, [r6], #1
 8007cf2:	f108 0801 	add.w	r8, r8, #1
 8007cf6:	e59f      	b.n	8007838 <_dtoa_r+0x498>
 8007cf8:	9c03      	ldr	r4, [sp, #12]
 8007cfa:	46b8      	mov	r8, r7
 8007cfc:	4625      	mov	r5, r4
 8007cfe:	e7f4      	b.n	8007cea <_dtoa_r+0x94a>
 8007d00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 8101 	beq.w	8007f0e <_dtoa_r+0xb6e>
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	dd05      	ble.n	8007d1c <_dtoa_r+0x97c>
 8007d10:	4629      	mov	r1, r5
 8007d12:	4632      	mov	r2, r6
 8007d14:	4648      	mov	r0, r9
 8007d16:	f000 fc19 	bl	800854c <__lshift>
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	9b08      	ldr	r3, [sp, #32]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d05c      	beq.n	8007ddc <_dtoa_r+0xa3c>
 8007d22:	6869      	ldr	r1, [r5, #4]
 8007d24:	4648      	mov	r0, r9
 8007d26:	f000 fa0b 	bl	8008140 <_Balloc>
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <_dtoa_r+0x99a>
 8007d2e:	4b82      	ldr	r3, [pc, #520]	@ (8007f38 <_dtoa_r+0xb98>)
 8007d30:	4602      	mov	r2, r0
 8007d32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d36:	f7ff bb4a 	b.w	80073ce <_dtoa_r+0x2e>
 8007d3a:	692a      	ldr	r2, [r5, #16]
 8007d3c:	3202      	adds	r2, #2
 8007d3e:	0092      	lsls	r2, r2, #2
 8007d40:	f105 010c 	add.w	r1, r5, #12
 8007d44:	300c      	adds	r0, #12
 8007d46:	f001 f807 	bl	8008d58 <memcpy>
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4648      	mov	r0, r9
 8007d50:	f000 fbfc 	bl	800854c <__lshift>
 8007d54:	f10a 0301 	add.w	r3, sl, #1
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	eb0a 030b 	add.w	r3, sl, fp
 8007d5e:	9308      	str	r3, [sp, #32]
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	462f      	mov	r7, r5
 8007d68:	9306      	str	r3, [sp, #24]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	9802      	ldr	r0, [sp, #8]
 8007d70:	4621      	mov	r1, r4
 8007d72:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d76:	f7ff fa88 	bl	800728a <quorem>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	3330      	adds	r3, #48	@ 0x30
 8007d7e:	9003      	str	r0, [sp, #12]
 8007d80:	4639      	mov	r1, r7
 8007d82:	9802      	ldr	r0, [sp, #8]
 8007d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d86:	f000 fc4d 	bl	8008624 <__mcmp>
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	9004      	str	r0, [sp, #16]
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4648      	mov	r0, r9
 8007d92:	f000 fc63 	bl	800865c <__mdiff>
 8007d96:	68c2      	ldr	r2, [r0, #12]
 8007d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	bb02      	cbnz	r2, 8007de0 <_dtoa_r+0xa40>
 8007d9e:	4601      	mov	r1, r0
 8007da0:	9802      	ldr	r0, [sp, #8]
 8007da2:	f000 fc3f 	bl	8008624 <__mcmp>
 8007da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da8:	4602      	mov	r2, r0
 8007daa:	4631      	mov	r1, r6
 8007dac:	4648      	mov	r0, r9
 8007dae:	920c      	str	r2, [sp, #48]	@ 0x30
 8007db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007db2:	f000 fa05 	bl	80081c0 <_Bfree>
 8007db6:	9b07      	ldr	r3, [sp, #28]
 8007db8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007dba:	9e00      	ldr	r6, [sp, #0]
 8007dbc:	ea42 0103 	orr.w	r1, r2, r3
 8007dc0:	9b06      	ldr	r3, [sp, #24]
 8007dc2:	4319      	orrs	r1, r3
 8007dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc6:	d10d      	bne.n	8007de4 <_dtoa_r+0xa44>
 8007dc8:	2b39      	cmp	r3, #57	@ 0x39
 8007dca:	d027      	beq.n	8007e1c <_dtoa_r+0xa7c>
 8007dcc:	9a04      	ldr	r2, [sp, #16]
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	dd01      	ble.n	8007dd6 <_dtoa_r+0xa36>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	3331      	adds	r3, #49	@ 0x31
 8007dd6:	f88b 3000 	strb.w	r3, [fp]
 8007dda:	e52e      	b.n	800783a <_dtoa_r+0x49a>
 8007ddc:	4628      	mov	r0, r5
 8007dde:	e7b9      	b.n	8007d54 <_dtoa_r+0x9b4>
 8007de0:	2201      	movs	r2, #1
 8007de2:	e7e2      	b.n	8007daa <_dtoa_r+0xa0a>
 8007de4:	9904      	ldr	r1, [sp, #16]
 8007de6:	2900      	cmp	r1, #0
 8007de8:	db04      	blt.n	8007df4 <_dtoa_r+0xa54>
 8007dea:	9807      	ldr	r0, [sp, #28]
 8007dec:	4301      	orrs	r1, r0
 8007dee:	9806      	ldr	r0, [sp, #24]
 8007df0:	4301      	orrs	r1, r0
 8007df2:	d120      	bne.n	8007e36 <_dtoa_r+0xa96>
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	ddee      	ble.n	8007dd6 <_dtoa_r+0xa36>
 8007df8:	9902      	ldr	r1, [sp, #8]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4648      	mov	r0, r9
 8007e00:	f000 fba4 	bl	800854c <__lshift>
 8007e04:	4621      	mov	r1, r4
 8007e06:	9002      	str	r0, [sp, #8]
 8007e08:	f000 fc0c 	bl	8008624 <__mcmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	9b00      	ldr	r3, [sp, #0]
 8007e10:	dc02      	bgt.n	8007e18 <_dtoa_r+0xa78>
 8007e12:	d1e0      	bne.n	8007dd6 <_dtoa_r+0xa36>
 8007e14:	07da      	lsls	r2, r3, #31
 8007e16:	d5de      	bpl.n	8007dd6 <_dtoa_r+0xa36>
 8007e18:	2b39      	cmp	r3, #57	@ 0x39
 8007e1a:	d1da      	bne.n	8007dd2 <_dtoa_r+0xa32>
 8007e1c:	2339      	movs	r3, #57	@ 0x39
 8007e1e:	f88b 3000 	strb.w	r3, [fp]
 8007e22:	4633      	mov	r3, r6
 8007e24:	461e      	mov	r6, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e2c:	2a39      	cmp	r2, #57	@ 0x39
 8007e2e:	d04e      	beq.n	8007ece <_dtoa_r+0xb2e>
 8007e30:	3201      	adds	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	e501      	b.n	800783a <_dtoa_r+0x49a>
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	dd03      	ble.n	8007e42 <_dtoa_r+0xaa2>
 8007e3a:	2b39      	cmp	r3, #57	@ 0x39
 8007e3c:	d0ee      	beq.n	8007e1c <_dtoa_r+0xa7c>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	e7c9      	b.n	8007dd6 <_dtoa_r+0xa36>
 8007e42:	9a00      	ldr	r2, [sp, #0]
 8007e44:	9908      	ldr	r1, [sp, #32]
 8007e46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e4a:	428a      	cmp	r2, r1
 8007e4c:	d028      	beq.n	8007ea0 <_dtoa_r+0xb00>
 8007e4e:	9902      	ldr	r1, [sp, #8]
 8007e50:	2300      	movs	r3, #0
 8007e52:	220a      	movs	r2, #10
 8007e54:	4648      	mov	r0, r9
 8007e56:	f000 f9d5 	bl	8008204 <__multadd>
 8007e5a:	42af      	cmp	r7, r5
 8007e5c:	9002      	str	r0, [sp, #8]
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	f04f 020a 	mov.w	r2, #10
 8007e66:	4639      	mov	r1, r7
 8007e68:	4648      	mov	r0, r9
 8007e6a:	d107      	bne.n	8007e7c <_dtoa_r+0xadc>
 8007e6c:	f000 f9ca 	bl	8008204 <__multadd>
 8007e70:	4607      	mov	r7, r0
 8007e72:	4605      	mov	r5, r0
 8007e74:	9b00      	ldr	r3, [sp, #0]
 8007e76:	3301      	adds	r3, #1
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	e777      	b.n	8007d6c <_dtoa_r+0x9cc>
 8007e7c:	f000 f9c2 	bl	8008204 <__multadd>
 8007e80:	4629      	mov	r1, r5
 8007e82:	4607      	mov	r7, r0
 8007e84:	2300      	movs	r3, #0
 8007e86:	220a      	movs	r2, #10
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f000 f9bb 	bl	8008204 <__multadd>
 8007e8e:	4605      	mov	r5, r0
 8007e90:	e7f0      	b.n	8007e74 <_dtoa_r+0xad4>
 8007e92:	f1bb 0f00 	cmp.w	fp, #0
 8007e96:	bfcc      	ite	gt
 8007e98:	465e      	movgt	r6, fp
 8007e9a:	2601      	movle	r6, #1
 8007e9c:	4456      	add	r6, sl
 8007e9e:	2700      	movs	r7, #0
 8007ea0:	9902      	ldr	r1, [sp, #8]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	4648      	mov	r0, r9
 8007ea8:	f000 fb50 	bl	800854c <__lshift>
 8007eac:	4621      	mov	r1, r4
 8007eae:	9002      	str	r0, [sp, #8]
 8007eb0:	f000 fbb8 	bl	8008624 <__mcmp>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	dcb4      	bgt.n	8007e22 <_dtoa_r+0xa82>
 8007eb8:	d102      	bne.n	8007ec0 <_dtoa_r+0xb20>
 8007eba:	9b00      	ldr	r3, [sp, #0]
 8007ebc:	07db      	lsls	r3, r3, #31
 8007ebe:	d4b0      	bmi.n	8007e22 <_dtoa_r+0xa82>
 8007ec0:	4633      	mov	r3, r6
 8007ec2:	461e      	mov	r6, r3
 8007ec4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ec8:	2a30      	cmp	r2, #48	@ 0x30
 8007eca:	d0fa      	beq.n	8007ec2 <_dtoa_r+0xb22>
 8007ecc:	e4b5      	b.n	800783a <_dtoa_r+0x49a>
 8007ece:	459a      	cmp	sl, r3
 8007ed0:	d1a8      	bne.n	8007e24 <_dtoa_r+0xa84>
 8007ed2:	2331      	movs	r3, #49	@ 0x31
 8007ed4:	f108 0801 	add.w	r8, r8, #1
 8007ed8:	f88a 3000 	strb.w	r3, [sl]
 8007edc:	e4ad      	b.n	800783a <_dtoa_r+0x49a>
 8007ede:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ee0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007f3c <_dtoa_r+0xb9c>
 8007ee4:	b11b      	cbz	r3, 8007eee <_dtoa_r+0xb4e>
 8007ee6:	f10a 0308 	add.w	r3, sl, #8
 8007eea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	4650      	mov	r0, sl
 8007ef0:	b017      	add	sp, #92	@ 0x5c
 8007ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef6:	9b07      	ldr	r3, [sp, #28]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	f77f ae2e 	ble.w	8007b5a <_dtoa_r+0x7ba>
 8007efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f00:	9308      	str	r3, [sp, #32]
 8007f02:	2001      	movs	r0, #1
 8007f04:	e64d      	b.n	8007ba2 <_dtoa_r+0x802>
 8007f06:	f1bb 0f00 	cmp.w	fp, #0
 8007f0a:	f77f aed9 	ble.w	8007cc0 <_dtoa_r+0x920>
 8007f0e:	4656      	mov	r6, sl
 8007f10:	9802      	ldr	r0, [sp, #8]
 8007f12:	4621      	mov	r1, r4
 8007f14:	f7ff f9b9 	bl	800728a <quorem>
 8007f18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8007f20:	eba6 020a 	sub.w	r2, r6, sl
 8007f24:	4593      	cmp	fp, r2
 8007f26:	ddb4      	ble.n	8007e92 <_dtoa_r+0xaf2>
 8007f28:	9902      	ldr	r1, [sp, #8]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	4648      	mov	r0, r9
 8007f30:	f000 f968 	bl	8008204 <__multadd>
 8007f34:	9002      	str	r0, [sp, #8]
 8007f36:	e7eb      	b.n	8007f10 <_dtoa_r+0xb70>
 8007f38:	08009108 	.word	0x08009108
 8007f3c:	0800908c 	.word	0x0800908c

08007f40 <_free_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4605      	mov	r5, r0
 8007f44:	2900      	cmp	r1, #0
 8007f46:	d041      	beq.n	8007fcc <_free_r+0x8c>
 8007f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f4c:	1f0c      	subs	r4, r1, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfb8      	it	lt
 8007f52:	18e4      	addlt	r4, r4, r3
 8007f54:	f000 f8e8 	bl	8008128 <__malloc_lock>
 8007f58:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd0 <_free_r+0x90>)
 8007f5a:	6813      	ldr	r3, [r2, #0]
 8007f5c:	b933      	cbnz	r3, 8007f6c <_free_r+0x2c>
 8007f5e:	6063      	str	r3, [r4, #4]
 8007f60:	6014      	str	r4, [r2, #0]
 8007f62:	4628      	mov	r0, r5
 8007f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f68:	f000 b8e4 	b.w	8008134 <__malloc_unlock>
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	d908      	bls.n	8007f82 <_free_r+0x42>
 8007f70:	6820      	ldr	r0, [r4, #0]
 8007f72:	1821      	adds	r1, r4, r0
 8007f74:	428b      	cmp	r3, r1
 8007f76:	bf01      	itttt	eq
 8007f78:	6819      	ldreq	r1, [r3, #0]
 8007f7a:	685b      	ldreq	r3, [r3, #4]
 8007f7c:	1809      	addeq	r1, r1, r0
 8007f7e:	6021      	streq	r1, [r4, #0]
 8007f80:	e7ed      	b.n	8007f5e <_free_r+0x1e>
 8007f82:	461a      	mov	r2, r3
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b10b      	cbz	r3, 8007f8c <_free_r+0x4c>
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	d9fa      	bls.n	8007f82 <_free_r+0x42>
 8007f8c:	6811      	ldr	r1, [r2, #0]
 8007f8e:	1850      	adds	r0, r2, r1
 8007f90:	42a0      	cmp	r0, r4
 8007f92:	d10b      	bne.n	8007fac <_free_r+0x6c>
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	4401      	add	r1, r0
 8007f98:	1850      	adds	r0, r2, r1
 8007f9a:	4283      	cmp	r3, r0
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	d1e0      	bne.n	8007f62 <_free_r+0x22>
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	6053      	str	r3, [r2, #4]
 8007fa6:	4408      	add	r0, r1
 8007fa8:	6010      	str	r0, [r2, #0]
 8007faa:	e7da      	b.n	8007f62 <_free_r+0x22>
 8007fac:	d902      	bls.n	8007fb4 <_free_r+0x74>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	e7d6      	b.n	8007f62 <_free_r+0x22>
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	1821      	adds	r1, r4, r0
 8007fb8:	428b      	cmp	r3, r1
 8007fba:	bf04      	itt	eq
 8007fbc:	6819      	ldreq	r1, [r3, #0]
 8007fbe:	685b      	ldreq	r3, [r3, #4]
 8007fc0:	6063      	str	r3, [r4, #4]
 8007fc2:	bf04      	itt	eq
 8007fc4:	1809      	addeq	r1, r1, r0
 8007fc6:	6021      	streq	r1, [r4, #0]
 8007fc8:	6054      	str	r4, [r2, #4]
 8007fca:	e7ca      	b.n	8007f62 <_free_r+0x22>
 8007fcc:	bd38      	pop	{r3, r4, r5, pc}
 8007fce:	bf00      	nop
 8007fd0:	20000658 	.word	0x20000658

08007fd4 <malloc>:
 8007fd4:	4b02      	ldr	r3, [pc, #8]	@ (8007fe0 <malloc+0xc>)
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	f000 b825 	b.w	8008028 <_malloc_r>
 8007fde:	bf00      	nop
 8007fe0:	20000018 	.word	0x20000018

08007fe4 <sbrk_aligned>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8008024 <sbrk_aligned+0x40>)
 8007fe8:	460c      	mov	r4, r1
 8007fea:	6831      	ldr	r1, [r6, #0]
 8007fec:	4605      	mov	r5, r0
 8007fee:	b911      	cbnz	r1, 8007ff6 <sbrk_aligned+0x12>
 8007ff0:	f000 fea2 	bl	8008d38 <_sbrk_r>
 8007ff4:	6030      	str	r0, [r6, #0]
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 fe9d 	bl	8008d38 <_sbrk_r>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	d103      	bne.n	800800a <sbrk_aligned+0x26>
 8008002:	f04f 34ff 	mov.w	r4, #4294967295
 8008006:	4620      	mov	r0, r4
 8008008:	bd70      	pop	{r4, r5, r6, pc}
 800800a:	1cc4      	adds	r4, r0, #3
 800800c:	f024 0403 	bic.w	r4, r4, #3
 8008010:	42a0      	cmp	r0, r4
 8008012:	d0f8      	beq.n	8008006 <sbrk_aligned+0x22>
 8008014:	1a21      	subs	r1, r4, r0
 8008016:	4628      	mov	r0, r5
 8008018:	f000 fe8e 	bl	8008d38 <_sbrk_r>
 800801c:	3001      	adds	r0, #1
 800801e:	d1f2      	bne.n	8008006 <sbrk_aligned+0x22>
 8008020:	e7ef      	b.n	8008002 <sbrk_aligned+0x1e>
 8008022:	bf00      	nop
 8008024:	20000654 	.word	0x20000654

08008028 <_malloc_r>:
 8008028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800802c:	1ccd      	adds	r5, r1, #3
 800802e:	f025 0503 	bic.w	r5, r5, #3
 8008032:	3508      	adds	r5, #8
 8008034:	2d0c      	cmp	r5, #12
 8008036:	bf38      	it	cc
 8008038:	250c      	movcc	r5, #12
 800803a:	2d00      	cmp	r5, #0
 800803c:	4606      	mov	r6, r0
 800803e:	db01      	blt.n	8008044 <_malloc_r+0x1c>
 8008040:	42a9      	cmp	r1, r5
 8008042:	d904      	bls.n	800804e <_malloc_r+0x26>
 8008044:	230c      	movs	r3, #12
 8008046:	6033      	str	r3, [r6, #0]
 8008048:	2000      	movs	r0, #0
 800804a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008124 <_malloc_r+0xfc>
 8008052:	f000 f869 	bl	8008128 <__malloc_lock>
 8008056:	f8d8 3000 	ldr.w	r3, [r8]
 800805a:	461c      	mov	r4, r3
 800805c:	bb44      	cbnz	r4, 80080b0 <_malloc_r+0x88>
 800805e:	4629      	mov	r1, r5
 8008060:	4630      	mov	r0, r6
 8008062:	f7ff ffbf 	bl	8007fe4 <sbrk_aligned>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	4604      	mov	r4, r0
 800806a:	d158      	bne.n	800811e <_malloc_r+0xf6>
 800806c:	f8d8 4000 	ldr.w	r4, [r8]
 8008070:	4627      	mov	r7, r4
 8008072:	2f00      	cmp	r7, #0
 8008074:	d143      	bne.n	80080fe <_malloc_r+0xd6>
 8008076:	2c00      	cmp	r4, #0
 8008078:	d04b      	beq.n	8008112 <_malloc_r+0xea>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	4639      	mov	r1, r7
 800807e:	4630      	mov	r0, r6
 8008080:	eb04 0903 	add.w	r9, r4, r3
 8008084:	f000 fe58 	bl	8008d38 <_sbrk_r>
 8008088:	4581      	cmp	r9, r0
 800808a:	d142      	bne.n	8008112 <_malloc_r+0xea>
 800808c:	6821      	ldr	r1, [r4, #0]
 800808e:	1a6d      	subs	r5, r5, r1
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f7ff ffa6 	bl	8007fe4 <sbrk_aligned>
 8008098:	3001      	adds	r0, #1
 800809a:	d03a      	beq.n	8008112 <_malloc_r+0xea>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	442b      	add	r3, r5
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	f8d8 3000 	ldr.w	r3, [r8]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	bb62      	cbnz	r2, 8008104 <_malloc_r+0xdc>
 80080aa:	f8c8 7000 	str.w	r7, [r8]
 80080ae:	e00f      	b.n	80080d0 <_malloc_r+0xa8>
 80080b0:	6822      	ldr	r2, [r4, #0]
 80080b2:	1b52      	subs	r2, r2, r5
 80080b4:	d420      	bmi.n	80080f8 <_malloc_r+0xd0>
 80080b6:	2a0b      	cmp	r2, #11
 80080b8:	d917      	bls.n	80080ea <_malloc_r+0xc2>
 80080ba:	1961      	adds	r1, r4, r5
 80080bc:	42a3      	cmp	r3, r4
 80080be:	6025      	str	r5, [r4, #0]
 80080c0:	bf18      	it	ne
 80080c2:	6059      	strne	r1, [r3, #4]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	bf08      	it	eq
 80080c8:	f8c8 1000 	streq.w	r1, [r8]
 80080cc:	5162      	str	r2, [r4, r5]
 80080ce:	604b      	str	r3, [r1, #4]
 80080d0:	4630      	mov	r0, r6
 80080d2:	f000 f82f 	bl	8008134 <__malloc_unlock>
 80080d6:	f104 000b 	add.w	r0, r4, #11
 80080da:	1d23      	adds	r3, r4, #4
 80080dc:	f020 0007 	bic.w	r0, r0, #7
 80080e0:	1ac2      	subs	r2, r0, r3
 80080e2:	bf1c      	itt	ne
 80080e4:	1a1b      	subne	r3, r3, r0
 80080e6:	50a3      	strne	r3, [r4, r2]
 80080e8:	e7af      	b.n	800804a <_malloc_r+0x22>
 80080ea:	6862      	ldr	r2, [r4, #4]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	bf0c      	ite	eq
 80080f0:	f8c8 2000 	streq.w	r2, [r8]
 80080f4:	605a      	strne	r2, [r3, #4]
 80080f6:	e7eb      	b.n	80080d0 <_malloc_r+0xa8>
 80080f8:	4623      	mov	r3, r4
 80080fa:	6864      	ldr	r4, [r4, #4]
 80080fc:	e7ae      	b.n	800805c <_malloc_r+0x34>
 80080fe:	463c      	mov	r4, r7
 8008100:	687f      	ldr	r7, [r7, #4]
 8008102:	e7b6      	b.n	8008072 <_malloc_r+0x4a>
 8008104:	461a      	mov	r2, r3
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	42a3      	cmp	r3, r4
 800810a:	d1fb      	bne.n	8008104 <_malloc_r+0xdc>
 800810c:	2300      	movs	r3, #0
 800810e:	6053      	str	r3, [r2, #4]
 8008110:	e7de      	b.n	80080d0 <_malloc_r+0xa8>
 8008112:	230c      	movs	r3, #12
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	4630      	mov	r0, r6
 8008118:	f000 f80c 	bl	8008134 <__malloc_unlock>
 800811c:	e794      	b.n	8008048 <_malloc_r+0x20>
 800811e:	6005      	str	r5, [r0, #0]
 8008120:	e7d6      	b.n	80080d0 <_malloc_r+0xa8>
 8008122:	bf00      	nop
 8008124:	20000658 	.word	0x20000658

08008128 <__malloc_lock>:
 8008128:	4801      	ldr	r0, [pc, #4]	@ (8008130 <__malloc_lock+0x8>)
 800812a:	f7ff b8ac 	b.w	8007286 <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	20000650 	.word	0x20000650

08008134 <__malloc_unlock>:
 8008134:	4801      	ldr	r0, [pc, #4]	@ (800813c <__malloc_unlock+0x8>)
 8008136:	f7ff b8a7 	b.w	8007288 <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	20000650 	.word	0x20000650

08008140 <_Balloc>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	69c6      	ldr	r6, [r0, #28]
 8008144:	4604      	mov	r4, r0
 8008146:	460d      	mov	r5, r1
 8008148:	b976      	cbnz	r6, 8008168 <_Balloc+0x28>
 800814a:	2010      	movs	r0, #16
 800814c:	f7ff ff42 	bl	8007fd4 <malloc>
 8008150:	4602      	mov	r2, r0
 8008152:	61e0      	str	r0, [r4, #28]
 8008154:	b920      	cbnz	r0, 8008160 <_Balloc+0x20>
 8008156:	4b18      	ldr	r3, [pc, #96]	@ (80081b8 <_Balloc+0x78>)
 8008158:	4818      	ldr	r0, [pc, #96]	@ (80081bc <_Balloc+0x7c>)
 800815a:	216b      	movs	r1, #107	@ 0x6b
 800815c:	f000 fe0a 	bl	8008d74 <__assert_func>
 8008160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008164:	6006      	str	r6, [r0, #0]
 8008166:	60c6      	str	r6, [r0, #12]
 8008168:	69e6      	ldr	r6, [r4, #28]
 800816a:	68f3      	ldr	r3, [r6, #12]
 800816c:	b183      	cbz	r3, 8008190 <_Balloc+0x50>
 800816e:	69e3      	ldr	r3, [r4, #28]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008176:	b9b8      	cbnz	r0, 80081a8 <_Balloc+0x68>
 8008178:	2101      	movs	r1, #1
 800817a:	fa01 f605 	lsl.w	r6, r1, r5
 800817e:	1d72      	adds	r2, r6, #5
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fe14 	bl	8008db0 <_calloc_r>
 8008188:	b160      	cbz	r0, 80081a4 <_Balloc+0x64>
 800818a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800818e:	e00e      	b.n	80081ae <_Balloc+0x6e>
 8008190:	2221      	movs	r2, #33	@ 0x21
 8008192:	2104      	movs	r1, #4
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fe0b 	bl	8008db0 <_calloc_r>
 800819a:	69e3      	ldr	r3, [r4, #28]
 800819c:	60f0      	str	r0, [r6, #12]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e4      	bne.n	800816e <_Balloc+0x2e>
 80081a4:	2000      	movs	r0, #0
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	6802      	ldr	r2, [r0, #0]
 80081aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081ae:	2300      	movs	r3, #0
 80081b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081b4:	e7f7      	b.n	80081a6 <_Balloc+0x66>
 80081b6:	bf00      	nop
 80081b8:	08009099 	.word	0x08009099
 80081bc:	08009119 	.word	0x08009119

080081c0 <_Bfree>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	69c6      	ldr	r6, [r0, #28]
 80081c4:	4605      	mov	r5, r0
 80081c6:	460c      	mov	r4, r1
 80081c8:	b976      	cbnz	r6, 80081e8 <_Bfree+0x28>
 80081ca:	2010      	movs	r0, #16
 80081cc:	f7ff ff02 	bl	8007fd4 <malloc>
 80081d0:	4602      	mov	r2, r0
 80081d2:	61e8      	str	r0, [r5, #28]
 80081d4:	b920      	cbnz	r0, 80081e0 <_Bfree+0x20>
 80081d6:	4b09      	ldr	r3, [pc, #36]	@ (80081fc <_Bfree+0x3c>)
 80081d8:	4809      	ldr	r0, [pc, #36]	@ (8008200 <_Bfree+0x40>)
 80081da:	218f      	movs	r1, #143	@ 0x8f
 80081dc:	f000 fdca 	bl	8008d74 <__assert_func>
 80081e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e4:	6006      	str	r6, [r0, #0]
 80081e6:	60c6      	str	r6, [r0, #12]
 80081e8:	b13c      	cbz	r4, 80081fa <_Bfree+0x3a>
 80081ea:	69eb      	ldr	r3, [r5, #28]
 80081ec:	6862      	ldr	r2, [r4, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081f4:	6021      	str	r1, [r4, #0]
 80081f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	08009099 	.word	0x08009099
 8008200:	08009119 	.word	0x08009119

08008204 <__multadd>:
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	690d      	ldr	r5, [r1, #16]
 800820a:	4607      	mov	r7, r0
 800820c:	460c      	mov	r4, r1
 800820e:	461e      	mov	r6, r3
 8008210:	f101 0c14 	add.w	ip, r1, #20
 8008214:	2000      	movs	r0, #0
 8008216:	f8dc 3000 	ldr.w	r3, [ip]
 800821a:	b299      	uxth	r1, r3
 800821c:	fb02 6101 	mla	r1, r2, r1, r6
 8008220:	0c1e      	lsrs	r6, r3, #16
 8008222:	0c0b      	lsrs	r3, r1, #16
 8008224:	fb02 3306 	mla	r3, r2, r6, r3
 8008228:	b289      	uxth	r1, r1
 800822a:	3001      	adds	r0, #1
 800822c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008230:	4285      	cmp	r5, r0
 8008232:	f84c 1b04 	str.w	r1, [ip], #4
 8008236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800823a:	dcec      	bgt.n	8008216 <__multadd+0x12>
 800823c:	b30e      	cbz	r6, 8008282 <__multadd+0x7e>
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc19      	bgt.n	8008278 <__multadd+0x74>
 8008244:	6861      	ldr	r1, [r4, #4]
 8008246:	4638      	mov	r0, r7
 8008248:	3101      	adds	r1, #1
 800824a:	f7ff ff79 	bl	8008140 <_Balloc>
 800824e:	4680      	mov	r8, r0
 8008250:	b928      	cbnz	r0, 800825e <__multadd+0x5a>
 8008252:	4602      	mov	r2, r0
 8008254:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <__multadd+0x84>)
 8008256:	480d      	ldr	r0, [pc, #52]	@ (800828c <__multadd+0x88>)
 8008258:	21ba      	movs	r1, #186	@ 0xba
 800825a:	f000 fd8b 	bl	8008d74 <__assert_func>
 800825e:	6922      	ldr	r2, [r4, #16]
 8008260:	3202      	adds	r2, #2
 8008262:	f104 010c 	add.w	r1, r4, #12
 8008266:	0092      	lsls	r2, r2, #2
 8008268:	300c      	adds	r0, #12
 800826a:	f000 fd75 	bl	8008d58 <memcpy>
 800826e:	4621      	mov	r1, r4
 8008270:	4638      	mov	r0, r7
 8008272:	f7ff ffa5 	bl	80081c0 <_Bfree>
 8008276:	4644      	mov	r4, r8
 8008278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800827c:	3501      	adds	r5, #1
 800827e:	615e      	str	r6, [r3, #20]
 8008280:	6125      	str	r5, [r4, #16]
 8008282:	4620      	mov	r0, r4
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	08009108 	.word	0x08009108
 800828c:	08009119 	.word	0x08009119

08008290 <__hi0bits>:
 8008290:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008294:	4603      	mov	r3, r0
 8008296:	bf36      	itet	cc
 8008298:	0403      	lslcc	r3, r0, #16
 800829a:	2000      	movcs	r0, #0
 800829c:	2010      	movcc	r0, #16
 800829e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082a2:	bf3c      	itt	cc
 80082a4:	021b      	lslcc	r3, r3, #8
 80082a6:	3008      	addcc	r0, #8
 80082a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082ac:	bf3c      	itt	cc
 80082ae:	011b      	lslcc	r3, r3, #4
 80082b0:	3004      	addcc	r0, #4
 80082b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b6:	bf3c      	itt	cc
 80082b8:	009b      	lslcc	r3, r3, #2
 80082ba:	3002      	addcc	r0, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	db05      	blt.n	80082cc <__hi0bits+0x3c>
 80082c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082c4:	f100 0001 	add.w	r0, r0, #1
 80082c8:	bf08      	it	eq
 80082ca:	2020      	moveq	r0, #32
 80082cc:	4770      	bx	lr

080082ce <__lo0bits>:
 80082ce:	6803      	ldr	r3, [r0, #0]
 80082d0:	4602      	mov	r2, r0
 80082d2:	f013 0007 	ands.w	r0, r3, #7
 80082d6:	d00b      	beq.n	80082f0 <__lo0bits+0x22>
 80082d8:	07d9      	lsls	r1, r3, #31
 80082da:	d421      	bmi.n	8008320 <__lo0bits+0x52>
 80082dc:	0798      	lsls	r0, r3, #30
 80082de:	bf49      	itett	mi
 80082e0:	085b      	lsrmi	r3, r3, #1
 80082e2:	089b      	lsrpl	r3, r3, #2
 80082e4:	2001      	movmi	r0, #1
 80082e6:	6013      	strmi	r3, [r2, #0]
 80082e8:	bf5c      	itt	pl
 80082ea:	6013      	strpl	r3, [r2, #0]
 80082ec:	2002      	movpl	r0, #2
 80082ee:	4770      	bx	lr
 80082f0:	b299      	uxth	r1, r3
 80082f2:	b909      	cbnz	r1, 80082f8 <__lo0bits+0x2a>
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	2010      	movs	r0, #16
 80082f8:	b2d9      	uxtb	r1, r3
 80082fa:	b909      	cbnz	r1, 8008300 <__lo0bits+0x32>
 80082fc:	3008      	adds	r0, #8
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	0719      	lsls	r1, r3, #28
 8008302:	bf04      	itt	eq
 8008304:	091b      	lsreq	r3, r3, #4
 8008306:	3004      	addeq	r0, #4
 8008308:	0799      	lsls	r1, r3, #30
 800830a:	bf04      	itt	eq
 800830c:	089b      	lsreq	r3, r3, #2
 800830e:	3002      	addeq	r0, #2
 8008310:	07d9      	lsls	r1, r3, #31
 8008312:	d403      	bmi.n	800831c <__lo0bits+0x4e>
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	f100 0001 	add.w	r0, r0, #1
 800831a:	d003      	beq.n	8008324 <__lo0bits+0x56>
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	4770      	bx	lr
 8008320:	2000      	movs	r0, #0
 8008322:	4770      	bx	lr
 8008324:	2020      	movs	r0, #32
 8008326:	4770      	bx	lr

08008328 <__i2b>:
 8008328:	b510      	push	{r4, lr}
 800832a:	460c      	mov	r4, r1
 800832c:	2101      	movs	r1, #1
 800832e:	f7ff ff07 	bl	8008140 <_Balloc>
 8008332:	4602      	mov	r2, r0
 8008334:	b928      	cbnz	r0, 8008342 <__i2b+0x1a>
 8008336:	4b05      	ldr	r3, [pc, #20]	@ (800834c <__i2b+0x24>)
 8008338:	4805      	ldr	r0, [pc, #20]	@ (8008350 <__i2b+0x28>)
 800833a:	f240 1145 	movw	r1, #325	@ 0x145
 800833e:	f000 fd19 	bl	8008d74 <__assert_func>
 8008342:	2301      	movs	r3, #1
 8008344:	6144      	str	r4, [r0, #20]
 8008346:	6103      	str	r3, [r0, #16]
 8008348:	bd10      	pop	{r4, pc}
 800834a:	bf00      	nop
 800834c:	08009108 	.word	0x08009108
 8008350:	08009119 	.word	0x08009119

08008354 <__multiply>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	4617      	mov	r7, r2
 800835a:	690a      	ldr	r2, [r1, #16]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	429a      	cmp	r2, r3
 8008360:	bfa8      	it	ge
 8008362:	463b      	movge	r3, r7
 8008364:	4689      	mov	r9, r1
 8008366:	bfa4      	itt	ge
 8008368:	460f      	movge	r7, r1
 800836a:	4699      	movge	r9, r3
 800836c:	693d      	ldr	r5, [r7, #16]
 800836e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	eb05 060a 	add.w	r6, r5, sl
 800837a:	42b3      	cmp	r3, r6
 800837c:	b085      	sub	sp, #20
 800837e:	bfb8      	it	lt
 8008380:	3101      	addlt	r1, #1
 8008382:	f7ff fedd 	bl	8008140 <_Balloc>
 8008386:	b930      	cbnz	r0, 8008396 <__multiply+0x42>
 8008388:	4602      	mov	r2, r0
 800838a:	4b41      	ldr	r3, [pc, #260]	@ (8008490 <__multiply+0x13c>)
 800838c:	4841      	ldr	r0, [pc, #260]	@ (8008494 <__multiply+0x140>)
 800838e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008392:	f000 fcef 	bl	8008d74 <__assert_func>
 8008396:	f100 0414 	add.w	r4, r0, #20
 800839a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800839e:	4623      	mov	r3, r4
 80083a0:	2200      	movs	r2, #0
 80083a2:	4573      	cmp	r3, lr
 80083a4:	d320      	bcc.n	80083e8 <__multiply+0x94>
 80083a6:	f107 0814 	add.w	r8, r7, #20
 80083aa:	f109 0114 	add.w	r1, r9, #20
 80083ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80083b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	1beb      	subs	r3, r5, r7
 80083ba:	3b15      	subs	r3, #21
 80083bc:	f023 0303 	bic.w	r3, r3, #3
 80083c0:	3304      	adds	r3, #4
 80083c2:	3715      	adds	r7, #21
 80083c4:	42bd      	cmp	r5, r7
 80083c6:	bf38      	it	cc
 80083c8:	2304      	movcc	r3, #4
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	9103      	str	r1, [sp, #12]
 80083d0:	428b      	cmp	r3, r1
 80083d2:	d80c      	bhi.n	80083ee <__multiply+0x9a>
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	dd03      	ble.n	80083e0 <__multiply+0x8c>
 80083d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d055      	beq.n	800848c <__multiply+0x138>
 80083e0:	6106      	str	r6, [r0, #16]
 80083e2:	b005      	add	sp, #20
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e8:	f843 2b04 	str.w	r2, [r3], #4
 80083ec:	e7d9      	b.n	80083a2 <__multiply+0x4e>
 80083ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80083f2:	f1ba 0f00 	cmp.w	sl, #0
 80083f6:	d01f      	beq.n	8008438 <__multiply+0xe4>
 80083f8:	46c4      	mov	ip, r8
 80083fa:	46a1      	mov	r9, r4
 80083fc:	2700      	movs	r7, #0
 80083fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008402:	f8d9 3000 	ldr.w	r3, [r9]
 8008406:	fa1f fb82 	uxth.w	fp, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008410:	443b      	add	r3, r7
 8008412:	f8d9 7000 	ldr.w	r7, [r9]
 8008416:	0c12      	lsrs	r2, r2, #16
 8008418:	0c3f      	lsrs	r7, r7, #16
 800841a:	fb0a 7202 	mla	r2, sl, r2, r7
 800841e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008422:	b29b      	uxth	r3, r3
 8008424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008428:	4565      	cmp	r5, ip
 800842a:	f849 3b04 	str.w	r3, [r9], #4
 800842e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008432:	d8e4      	bhi.n	80083fe <__multiply+0xaa>
 8008434:	9b01      	ldr	r3, [sp, #4]
 8008436:	50e7      	str	r7, [r4, r3]
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800843e:	3104      	adds	r1, #4
 8008440:	f1b9 0f00 	cmp.w	r9, #0
 8008444:	d020      	beq.n	8008488 <__multiply+0x134>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	4647      	mov	r7, r8
 800844a:	46a4      	mov	ip, r4
 800844c:	f04f 0a00 	mov.w	sl, #0
 8008450:	f8b7 b000 	ldrh.w	fp, [r7]
 8008454:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008458:	fb09 220b 	mla	r2, r9, fp, r2
 800845c:	4452      	add	r2, sl
 800845e:	b29b      	uxth	r3, r3
 8008460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008464:	f84c 3b04 	str.w	r3, [ip], #4
 8008468:	f857 3b04 	ldr.w	r3, [r7], #4
 800846c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008470:	f8bc 3000 	ldrh.w	r3, [ip]
 8008474:	fb09 330a 	mla	r3, r9, sl, r3
 8008478:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800847c:	42bd      	cmp	r5, r7
 800847e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008482:	d8e5      	bhi.n	8008450 <__multiply+0xfc>
 8008484:	9a01      	ldr	r2, [sp, #4]
 8008486:	50a3      	str	r3, [r4, r2]
 8008488:	3404      	adds	r4, #4
 800848a:	e79f      	b.n	80083cc <__multiply+0x78>
 800848c:	3e01      	subs	r6, #1
 800848e:	e7a1      	b.n	80083d4 <__multiply+0x80>
 8008490:	08009108 	.word	0x08009108
 8008494:	08009119 	.word	0x08009119

08008498 <__pow5mult>:
 8008498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800849c:	4615      	mov	r5, r2
 800849e:	f012 0203 	ands.w	r2, r2, #3
 80084a2:	4607      	mov	r7, r0
 80084a4:	460e      	mov	r6, r1
 80084a6:	d007      	beq.n	80084b8 <__pow5mult+0x20>
 80084a8:	4c25      	ldr	r4, [pc, #148]	@ (8008540 <__pow5mult+0xa8>)
 80084aa:	3a01      	subs	r2, #1
 80084ac:	2300      	movs	r3, #0
 80084ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084b2:	f7ff fea7 	bl	8008204 <__multadd>
 80084b6:	4606      	mov	r6, r0
 80084b8:	10ad      	asrs	r5, r5, #2
 80084ba:	d03d      	beq.n	8008538 <__pow5mult+0xa0>
 80084bc:	69fc      	ldr	r4, [r7, #28]
 80084be:	b97c      	cbnz	r4, 80084e0 <__pow5mult+0x48>
 80084c0:	2010      	movs	r0, #16
 80084c2:	f7ff fd87 	bl	8007fd4 <malloc>
 80084c6:	4602      	mov	r2, r0
 80084c8:	61f8      	str	r0, [r7, #28]
 80084ca:	b928      	cbnz	r0, 80084d8 <__pow5mult+0x40>
 80084cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008544 <__pow5mult+0xac>)
 80084ce:	481e      	ldr	r0, [pc, #120]	@ (8008548 <__pow5mult+0xb0>)
 80084d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084d4:	f000 fc4e 	bl	8008d74 <__assert_func>
 80084d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084dc:	6004      	str	r4, [r0, #0]
 80084de:	60c4      	str	r4, [r0, #12]
 80084e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084e8:	b94c      	cbnz	r4, 80084fe <__pow5mult+0x66>
 80084ea:	f240 2171 	movw	r1, #625	@ 0x271
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff ff1a 	bl	8008328 <__i2b>
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084fa:	4604      	mov	r4, r0
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	f04f 0900 	mov.w	r9, #0
 8008502:	07eb      	lsls	r3, r5, #31
 8008504:	d50a      	bpl.n	800851c <__pow5mult+0x84>
 8008506:	4631      	mov	r1, r6
 8008508:	4622      	mov	r2, r4
 800850a:	4638      	mov	r0, r7
 800850c:	f7ff ff22 	bl	8008354 <__multiply>
 8008510:	4631      	mov	r1, r6
 8008512:	4680      	mov	r8, r0
 8008514:	4638      	mov	r0, r7
 8008516:	f7ff fe53 	bl	80081c0 <_Bfree>
 800851a:	4646      	mov	r6, r8
 800851c:	106d      	asrs	r5, r5, #1
 800851e:	d00b      	beq.n	8008538 <__pow5mult+0xa0>
 8008520:	6820      	ldr	r0, [r4, #0]
 8008522:	b938      	cbnz	r0, 8008534 <__pow5mult+0x9c>
 8008524:	4622      	mov	r2, r4
 8008526:	4621      	mov	r1, r4
 8008528:	4638      	mov	r0, r7
 800852a:	f7ff ff13 	bl	8008354 <__multiply>
 800852e:	6020      	str	r0, [r4, #0]
 8008530:	f8c0 9000 	str.w	r9, [r0]
 8008534:	4604      	mov	r4, r0
 8008536:	e7e4      	b.n	8008502 <__pow5mult+0x6a>
 8008538:	4630      	mov	r0, r6
 800853a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853e:	bf00      	nop
 8008540:	080091cc 	.word	0x080091cc
 8008544:	08009099 	.word	0x08009099
 8008548:	08009119 	.word	0x08009119

0800854c <__lshift>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	460c      	mov	r4, r1
 8008552:	6849      	ldr	r1, [r1, #4]
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	4607      	mov	r7, r0
 800855e:	4691      	mov	r9, r2
 8008560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008564:	f108 0601 	add.w	r6, r8, #1
 8008568:	42b3      	cmp	r3, r6
 800856a:	db0b      	blt.n	8008584 <__lshift+0x38>
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff fde7 	bl	8008140 <_Balloc>
 8008572:	4605      	mov	r5, r0
 8008574:	b948      	cbnz	r0, 800858a <__lshift+0x3e>
 8008576:	4602      	mov	r2, r0
 8008578:	4b28      	ldr	r3, [pc, #160]	@ (800861c <__lshift+0xd0>)
 800857a:	4829      	ldr	r0, [pc, #164]	@ (8008620 <__lshift+0xd4>)
 800857c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008580:	f000 fbf8 	bl	8008d74 <__assert_func>
 8008584:	3101      	adds	r1, #1
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	e7ee      	b.n	8008568 <__lshift+0x1c>
 800858a:	2300      	movs	r3, #0
 800858c:	f100 0114 	add.w	r1, r0, #20
 8008590:	f100 0210 	add.w	r2, r0, #16
 8008594:	4618      	mov	r0, r3
 8008596:	4553      	cmp	r3, sl
 8008598:	db33      	blt.n	8008602 <__lshift+0xb6>
 800859a:	6920      	ldr	r0, [r4, #16]
 800859c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085a0:	f104 0314 	add.w	r3, r4, #20
 80085a4:	f019 091f 	ands.w	r9, r9, #31
 80085a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085b0:	d02b      	beq.n	800860a <__lshift+0xbe>
 80085b2:	f1c9 0e20 	rsb	lr, r9, #32
 80085b6:	468a      	mov	sl, r1
 80085b8:	2200      	movs	r2, #0
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	fa00 f009 	lsl.w	r0, r0, r9
 80085c0:	4310      	orrs	r0, r2
 80085c2:	f84a 0b04 	str.w	r0, [sl], #4
 80085c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ca:	459c      	cmp	ip, r3
 80085cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80085d0:	d8f3      	bhi.n	80085ba <__lshift+0x6e>
 80085d2:	ebac 0304 	sub.w	r3, ip, r4
 80085d6:	3b15      	subs	r3, #21
 80085d8:	f023 0303 	bic.w	r3, r3, #3
 80085dc:	3304      	adds	r3, #4
 80085de:	f104 0015 	add.w	r0, r4, #21
 80085e2:	4560      	cmp	r0, ip
 80085e4:	bf88      	it	hi
 80085e6:	2304      	movhi	r3, #4
 80085e8:	50ca      	str	r2, [r1, r3]
 80085ea:	b10a      	cbz	r2, 80085f0 <__lshift+0xa4>
 80085ec:	f108 0602 	add.w	r6, r8, #2
 80085f0:	3e01      	subs	r6, #1
 80085f2:	4638      	mov	r0, r7
 80085f4:	612e      	str	r6, [r5, #16]
 80085f6:	4621      	mov	r1, r4
 80085f8:	f7ff fde2 	bl	80081c0 <_Bfree>
 80085fc:	4628      	mov	r0, r5
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	f842 0f04 	str.w	r0, [r2, #4]!
 8008606:	3301      	adds	r3, #1
 8008608:	e7c5      	b.n	8008596 <__lshift+0x4a>
 800860a:	3904      	subs	r1, #4
 800860c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008610:	f841 2f04 	str.w	r2, [r1, #4]!
 8008614:	459c      	cmp	ip, r3
 8008616:	d8f9      	bhi.n	800860c <__lshift+0xc0>
 8008618:	e7ea      	b.n	80085f0 <__lshift+0xa4>
 800861a:	bf00      	nop
 800861c:	08009108 	.word	0x08009108
 8008620:	08009119 	.word	0x08009119

08008624 <__mcmp>:
 8008624:	690a      	ldr	r2, [r1, #16]
 8008626:	4603      	mov	r3, r0
 8008628:	6900      	ldr	r0, [r0, #16]
 800862a:	1a80      	subs	r0, r0, r2
 800862c:	b530      	push	{r4, r5, lr}
 800862e:	d10e      	bne.n	800864e <__mcmp+0x2a>
 8008630:	3314      	adds	r3, #20
 8008632:	3114      	adds	r1, #20
 8008634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800863c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008644:	4295      	cmp	r5, r2
 8008646:	d003      	beq.n	8008650 <__mcmp+0x2c>
 8008648:	d205      	bcs.n	8008656 <__mcmp+0x32>
 800864a:	f04f 30ff 	mov.w	r0, #4294967295
 800864e:	bd30      	pop	{r4, r5, pc}
 8008650:	42a3      	cmp	r3, r4
 8008652:	d3f3      	bcc.n	800863c <__mcmp+0x18>
 8008654:	e7fb      	b.n	800864e <__mcmp+0x2a>
 8008656:	2001      	movs	r0, #1
 8008658:	e7f9      	b.n	800864e <__mcmp+0x2a>
	...

0800865c <__mdiff>:
 800865c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4689      	mov	r9, r1
 8008662:	4606      	mov	r6, r0
 8008664:	4611      	mov	r1, r2
 8008666:	4648      	mov	r0, r9
 8008668:	4614      	mov	r4, r2
 800866a:	f7ff ffdb 	bl	8008624 <__mcmp>
 800866e:	1e05      	subs	r5, r0, #0
 8008670:	d112      	bne.n	8008698 <__mdiff+0x3c>
 8008672:	4629      	mov	r1, r5
 8008674:	4630      	mov	r0, r6
 8008676:	f7ff fd63 	bl	8008140 <_Balloc>
 800867a:	4602      	mov	r2, r0
 800867c:	b928      	cbnz	r0, 800868a <__mdiff+0x2e>
 800867e:	4b3f      	ldr	r3, [pc, #252]	@ (800877c <__mdiff+0x120>)
 8008680:	f240 2137 	movw	r1, #567	@ 0x237
 8008684:	483e      	ldr	r0, [pc, #248]	@ (8008780 <__mdiff+0x124>)
 8008686:	f000 fb75 	bl	8008d74 <__assert_func>
 800868a:	2301      	movs	r3, #1
 800868c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008690:	4610      	mov	r0, r2
 8008692:	b003      	add	sp, #12
 8008694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008698:	bfbc      	itt	lt
 800869a:	464b      	movlt	r3, r9
 800869c:	46a1      	movlt	r9, r4
 800869e:	4630      	mov	r0, r6
 80086a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086a4:	bfba      	itte	lt
 80086a6:	461c      	movlt	r4, r3
 80086a8:	2501      	movlt	r5, #1
 80086aa:	2500      	movge	r5, #0
 80086ac:	f7ff fd48 	bl	8008140 <_Balloc>
 80086b0:	4602      	mov	r2, r0
 80086b2:	b918      	cbnz	r0, 80086bc <__mdiff+0x60>
 80086b4:	4b31      	ldr	r3, [pc, #196]	@ (800877c <__mdiff+0x120>)
 80086b6:	f240 2145 	movw	r1, #581	@ 0x245
 80086ba:	e7e3      	b.n	8008684 <__mdiff+0x28>
 80086bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086c0:	6926      	ldr	r6, [r4, #16]
 80086c2:	60c5      	str	r5, [r0, #12]
 80086c4:	f109 0310 	add.w	r3, r9, #16
 80086c8:	f109 0514 	add.w	r5, r9, #20
 80086cc:	f104 0e14 	add.w	lr, r4, #20
 80086d0:	f100 0b14 	add.w	fp, r0, #20
 80086d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	46d9      	mov	r9, fp
 80086e0:	f04f 0c00 	mov.w	ip, #0
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086ee:	9301      	str	r3, [sp, #4]
 80086f0:	fa1f f38a 	uxth.w	r3, sl
 80086f4:	4619      	mov	r1, r3
 80086f6:	b283      	uxth	r3, r0
 80086f8:	1acb      	subs	r3, r1, r3
 80086fa:	0c00      	lsrs	r0, r0, #16
 80086fc:	4463      	add	r3, ip
 80086fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008702:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800870c:	4576      	cmp	r6, lr
 800870e:	f849 3b04 	str.w	r3, [r9], #4
 8008712:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008716:	d8e5      	bhi.n	80086e4 <__mdiff+0x88>
 8008718:	1b33      	subs	r3, r6, r4
 800871a:	3b15      	subs	r3, #21
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	3415      	adds	r4, #21
 8008722:	3304      	adds	r3, #4
 8008724:	42a6      	cmp	r6, r4
 8008726:	bf38      	it	cc
 8008728:	2304      	movcc	r3, #4
 800872a:	441d      	add	r5, r3
 800872c:	445b      	add	r3, fp
 800872e:	461e      	mov	r6, r3
 8008730:	462c      	mov	r4, r5
 8008732:	4544      	cmp	r4, r8
 8008734:	d30e      	bcc.n	8008754 <__mdiff+0xf8>
 8008736:	f108 0103 	add.w	r1, r8, #3
 800873a:	1b49      	subs	r1, r1, r5
 800873c:	f021 0103 	bic.w	r1, r1, #3
 8008740:	3d03      	subs	r5, #3
 8008742:	45a8      	cmp	r8, r5
 8008744:	bf38      	it	cc
 8008746:	2100      	movcc	r1, #0
 8008748:	440b      	add	r3, r1
 800874a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800874e:	b191      	cbz	r1, 8008776 <__mdiff+0x11a>
 8008750:	6117      	str	r7, [r2, #16]
 8008752:	e79d      	b.n	8008690 <__mdiff+0x34>
 8008754:	f854 1b04 	ldr.w	r1, [r4], #4
 8008758:	46e6      	mov	lr, ip
 800875a:	0c08      	lsrs	r0, r1, #16
 800875c:	fa1c fc81 	uxtah	ip, ip, r1
 8008760:	4471      	add	r1, lr
 8008762:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008766:	b289      	uxth	r1, r1
 8008768:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800876c:	f846 1b04 	str.w	r1, [r6], #4
 8008770:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008774:	e7dd      	b.n	8008732 <__mdiff+0xd6>
 8008776:	3f01      	subs	r7, #1
 8008778:	e7e7      	b.n	800874a <__mdiff+0xee>
 800877a:	bf00      	nop
 800877c:	08009108 	.word	0x08009108
 8008780:	08009119 	.word	0x08009119

08008784 <__d2b>:
 8008784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008788:	460f      	mov	r7, r1
 800878a:	2101      	movs	r1, #1
 800878c:	ec59 8b10 	vmov	r8, r9, d0
 8008790:	4616      	mov	r6, r2
 8008792:	f7ff fcd5 	bl	8008140 <_Balloc>
 8008796:	4604      	mov	r4, r0
 8008798:	b930      	cbnz	r0, 80087a8 <__d2b+0x24>
 800879a:	4602      	mov	r2, r0
 800879c:	4b23      	ldr	r3, [pc, #140]	@ (800882c <__d2b+0xa8>)
 800879e:	4824      	ldr	r0, [pc, #144]	@ (8008830 <__d2b+0xac>)
 80087a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80087a4:	f000 fae6 	bl	8008d74 <__assert_func>
 80087a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087b0:	b10d      	cbz	r5, 80087b6 <__d2b+0x32>
 80087b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	f1b8 0300 	subs.w	r3, r8, #0
 80087bc:	d023      	beq.n	8008806 <__d2b+0x82>
 80087be:	4668      	mov	r0, sp
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	f7ff fd84 	bl	80082ce <__lo0bits>
 80087c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087ca:	b1d0      	cbz	r0, 8008802 <__d2b+0x7e>
 80087cc:	f1c0 0320 	rsb	r3, r0, #32
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	430b      	orrs	r3, r1
 80087d6:	40c2      	lsrs	r2, r0
 80087d8:	6163      	str	r3, [r4, #20]
 80087da:	9201      	str	r2, [sp, #4]
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	61a3      	str	r3, [r4, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bf0c      	ite	eq
 80087e4:	2201      	moveq	r2, #1
 80087e6:	2202      	movne	r2, #2
 80087e8:	6122      	str	r2, [r4, #16]
 80087ea:	b1a5      	cbz	r5, 8008816 <__d2b+0x92>
 80087ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087f0:	4405      	add	r5, r0
 80087f2:	603d      	str	r5, [r7, #0]
 80087f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087f8:	6030      	str	r0, [r6, #0]
 80087fa:	4620      	mov	r0, r4
 80087fc:	b003      	add	sp, #12
 80087fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008802:	6161      	str	r1, [r4, #20]
 8008804:	e7ea      	b.n	80087dc <__d2b+0x58>
 8008806:	a801      	add	r0, sp, #4
 8008808:	f7ff fd61 	bl	80082ce <__lo0bits>
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	6163      	str	r3, [r4, #20]
 8008810:	3020      	adds	r0, #32
 8008812:	2201      	movs	r2, #1
 8008814:	e7e8      	b.n	80087e8 <__d2b+0x64>
 8008816:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800881a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800881e:	6038      	str	r0, [r7, #0]
 8008820:	6918      	ldr	r0, [r3, #16]
 8008822:	f7ff fd35 	bl	8008290 <__hi0bits>
 8008826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800882a:	e7e5      	b.n	80087f8 <__d2b+0x74>
 800882c:	08009108 	.word	0x08009108
 8008830:	08009119 	.word	0x08009119

08008834 <__sfputc_r>:
 8008834:	6893      	ldr	r3, [r2, #8]
 8008836:	3b01      	subs	r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	b410      	push	{r4}
 800883c:	6093      	str	r3, [r2, #8]
 800883e:	da08      	bge.n	8008852 <__sfputc_r+0x1e>
 8008840:	6994      	ldr	r4, [r2, #24]
 8008842:	42a3      	cmp	r3, r4
 8008844:	db01      	blt.n	800884a <__sfputc_r+0x16>
 8008846:	290a      	cmp	r1, #10
 8008848:	d103      	bne.n	8008852 <__sfputc_r+0x1e>
 800884a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800884e:	f000 b9df 	b.w	8008c10 <__swbuf_r>
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	1c58      	adds	r0, r3, #1
 8008856:	6010      	str	r0, [r2, #0]
 8008858:	7019      	strb	r1, [r3, #0]
 800885a:	4608      	mov	r0, r1
 800885c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008860:	4770      	bx	lr

08008862 <__sfputs_r>:
 8008862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008864:	4606      	mov	r6, r0
 8008866:	460f      	mov	r7, r1
 8008868:	4614      	mov	r4, r2
 800886a:	18d5      	adds	r5, r2, r3
 800886c:	42ac      	cmp	r4, r5
 800886e:	d101      	bne.n	8008874 <__sfputs_r+0x12>
 8008870:	2000      	movs	r0, #0
 8008872:	e007      	b.n	8008884 <__sfputs_r+0x22>
 8008874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008878:	463a      	mov	r2, r7
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ffda 	bl	8008834 <__sfputc_r>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d1f3      	bne.n	800886c <__sfputs_r+0xa>
 8008884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008888 <_vfiprintf_r>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	460d      	mov	r5, r1
 800888e:	b09d      	sub	sp, #116	@ 0x74
 8008890:	4614      	mov	r4, r2
 8008892:	4698      	mov	r8, r3
 8008894:	4606      	mov	r6, r0
 8008896:	b118      	cbz	r0, 80088a0 <_vfiprintf_r+0x18>
 8008898:	6a03      	ldr	r3, [r0, #32]
 800889a:	b90b      	cbnz	r3, 80088a0 <_vfiprintf_r+0x18>
 800889c:	f7fe fbea 	bl	8007074 <__sinit>
 80088a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088a2:	07d9      	lsls	r1, r3, #31
 80088a4:	d405      	bmi.n	80088b2 <_vfiprintf_r+0x2a>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	059a      	lsls	r2, r3, #22
 80088aa:	d402      	bmi.n	80088b2 <_vfiprintf_r+0x2a>
 80088ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ae:	f7fe fcea 	bl	8007286 <__retarget_lock_acquire_recursive>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	071b      	lsls	r3, r3, #28
 80088b6:	d501      	bpl.n	80088bc <_vfiprintf_r+0x34>
 80088b8:	692b      	ldr	r3, [r5, #16]
 80088ba:	b99b      	cbnz	r3, 80088e4 <_vfiprintf_r+0x5c>
 80088bc:	4629      	mov	r1, r5
 80088be:	4630      	mov	r0, r6
 80088c0:	f000 f9e4 	bl	8008c8c <__swsetup_r>
 80088c4:	b170      	cbz	r0, 80088e4 <_vfiprintf_r+0x5c>
 80088c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088c8:	07dc      	lsls	r4, r3, #31
 80088ca:	d504      	bpl.n	80088d6 <_vfiprintf_r+0x4e>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	b01d      	add	sp, #116	@ 0x74
 80088d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	89ab      	ldrh	r3, [r5, #12]
 80088d8:	0598      	lsls	r0, r3, #22
 80088da:	d4f7      	bmi.n	80088cc <_vfiprintf_r+0x44>
 80088dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088de:	f7fe fcd3 	bl	8007288 <__retarget_lock_release_recursive>
 80088e2:	e7f3      	b.n	80088cc <_vfiprintf_r+0x44>
 80088e4:	2300      	movs	r3, #0
 80088e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e8:	2320      	movs	r3, #32
 80088ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80088f2:	2330      	movs	r3, #48	@ 0x30
 80088f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008aa4 <_vfiprintf_r+0x21c>
 80088f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088fc:	f04f 0901 	mov.w	r9, #1
 8008900:	4623      	mov	r3, r4
 8008902:	469a      	mov	sl, r3
 8008904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008908:	b10a      	cbz	r2, 800890e <_vfiprintf_r+0x86>
 800890a:	2a25      	cmp	r2, #37	@ 0x25
 800890c:	d1f9      	bne.n	8008902 <_vfiprintf_r+0x7a>
 800890e:	ebba 0b04 	subs.w	fp, sl, r4
 8008912:	d00b      	beq.n	800892c <_vfiprintf_r+0xa4>
 8008914:	465b      	mov	r3, fp
 8008916:	4622      	mov	r2, r4
 8008918:	4629      	mov	r1, r5
 800891a:	4630      	mov	r0, r6
 800891c:	f7ff ffa1 	bl	8008862 <__sfputs_r>
 8008920:	3001      	adds	r0, #1
 8008922:	f000 80a7 	beq.w	8008a74 <_vfiprintf_r+0x1ec>
 8008926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008928:	445a      	add	r2, fp
 800892a:	9209      	str	r2, [sp, #36]	@ 0x24
 800892c:	f89a 3000 	ldrb.w	r3, [sl]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 809f 	beq.w	8008a74 <_vfiprintf_r+0x1ec>
 8008936:	2300      	movs	r3, #0
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008940:	f10a 0a01 	add.w	sl, sl, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800894c:	931a      	str	r3, [sp, #104]	@ 0x68
 800894e:	4654      	mov	r4, sl
 8008950:	2205      	movs	r2, #5
 8008952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008956:	4853      	ldr	r0, [pc, #332]	@ (8008aa4 <_vfiprintf_r+0x21c>)
 8008958:	f7f7 fc3a 	bl	80001d0 <memchr>
 800895c:	9a04      	ldr	r2, [sp, #16]
 800895e:	b9d8      	cbnz	r0, 8008998 <_vfiprintf_r+0x110>
 8008960:	06d1      	lsls	r1, r2, #27
 8008962:	bf44      	itt	mi
 8008964:	2320      	movmi	r3, #32
 8008966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800896a:	0713      	lsls	r3, r2, #28
 800896c:	bf44      	itt	mi
 800896e:	232b      	movmi	r3, #43	@ 0x2b
 8008970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008974:	f89a 3000 	ldrb.w	r3, [sl]
 8008978:	2b2a      	cmp	r3, #42	@ 0x2a
 800897a:	d015      	beq.n	80089a8 <_vfiprintf_r+0x120>
 800897c:	9a07      	ldr	r2, [sp, #28]
 800897e:	4654      	mov	r4, sl
 8008980:	2000      	movs	r0, #0
 8008982:	f04f 0c0a 	mov.w	ip, #10
 8008986:	4621      	mov	r1, r4
 8008988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800898c:	3b30      	subs	r3, #48	@ 0x30
 800898e:	2b09      	cmp	r3, #9
 8008990:	d94b      	bls.n	8008a2a <_vfiprintf_r+0x1a2>
 8008992:	b1b0      	cbz	r0, 80089c2 <_vfiprintf_r+0x13a>
 8008994:	9207      	str	r2, [sp, #28]
 8008996:	e014      	b.n	80089c2 <_vfiprintf_r+0x13a>
 8008998:	eba0 0308 	sub.w	r3, r0, r8
 800899c:	fa09 f303 	lsl.w	r3, r9, r3
 80089a0:	4313      	orrs	r3, r2
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	46a2      	mov	sl, r4
 80089a6:	e7d2      	b.n	800894e <_vfiprintf_r+0xc6>
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	1d19      	adds	r1, r3, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	9103      	str	r1, [sp, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bfbb      	ittet	lt
 80089b4:	425b      	neglt	r3, r3
 80089b6:	f042 0202 	orrlt.w	r2, r2, #2
 80089ba:	9307      	strge	r3, [sp, #28]
 80089bc:	9307      	strlt	r3, [sp, #28]
 80089be:	bfb8      	it	lt
 80089c0:	9204      	strlt	r2, [sp, #16]
 80089c2:	7823      	ldrb	r3, [r4, #0]
 80089c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80089c6:	d10a      	bne.n	80089de <_vfiprintf_r+0x156>
 80089c8:	7863      	ldrb	r3, [r4, #1]
 80089ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80089cc:	d132      	bne.n	8008a34 <_vfiprintf_r+0x1ac>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	1d1a      	adds	r2, r3, #4
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	9203      	str	r2, [sp, #12]
 80089d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089da:	3402      	adds	r4, #2
 80089dc:	9305      	str	r3, [sp, #20]
 80089de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ab4 <_vfiprintf_r+0x22c>
 80089e2:	7821      	ldrb	r1, [r4, #0]
 80089e4:	2203      	movs	r2, #3
 80089e6:	4650      	mov	r0, sl
 80089e8:	f7f7 fbf2 	bl	80001d0 <memchr>
 80089ec:	b138      	cbz	r0, 80089fe <_vfiprintf_r+0x176>
 80089ee:	9b04      	ldr	r3, [sp, #16]
 80089f0:	eba0 000a 	sub.w	r0, r0, sl
 80089f4:	2240      	movs	r2, #64	@ 0x40
 80089f6:	4082      	lsls	r2, r0
 80089f8:	4313      	orrs	r3, r2
 80089fa:	3401      	adds	r4, #1
 80089fc:	9304      	str	r3, [sp, #16]
 80089fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a02:	4829      	ldr	r0, [pc, #164]	@ (8008aa8 <_vfiprintf_r+0x220>)
 8008a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a08:	2206      	movs	r2, #6
 8008a0a:	f7f7 fbe1 	bl	80001d0 <memchr>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d03f      	beq.n	8008a92 <_vfiprintf_r+0x20a>
 8008a12:	4b26      	ldr	r3, [pc, #152]	@ (8008aac <_vfiprintf_r+0x224>)
 8008a14:	bb1b      	cbnz	r3, 8008a5e <_vfiprintf_r+0x1d6>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	3307      	adds	r3, #7
 8008a1a:	f023 0307 	bic.w	r3, r3, #7
 8008a1e:	3308      	adds	r3, #8
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a24:	443b      	add	r3, r7
 8008a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a28:	e76a      	b.n	8008900 <_vfiprintf_r+0x78>
 8008a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a2e:	460c      	mov	r4, r1
 8008a30:	2001      	movs	r0, #1
 8008a32:	e7a8      	b.n	8008986 <_vfiprintf_r+0xfe>
 8008a34:	2300      	movs	r3, #0
 8008a36:	3401      	adds	r4, #1
 8008a38:	9305      	str	r3, [sp, #20]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f04f 0c0a 	mov.w	ip, #10
 8008a40:	4620      	mov	r0, r4
 8008a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a46:	3a30      	subs	r2, #48	@ 0x30
 8008a48:	2a09      	cmp	r2, #9
 8008a4a:	d903      	bls.n	8008a54 <_vfiprintf_r+0x1cc>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0c6      	beq.n	80089de <_vfiprintf_r+0x156>
 8008a50:	9105      	str	r1, [sp, #20]
 8008a52:	e7c4      	b.n	80089de <_vfiprintf_r+0x156>
 8008a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a58:	4604      	mov	r4, r0
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e7f0      	b.n	8008a40 <_vfiprintf_r+0x1b8>
 8008a5e:	ab03      	add	r3, sp, #12
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	462a      	mov	r2, r5
 8008a64:	4b12      	ldr	r3, [pc, #72]	@ (8008ab0 <_vfiprintf_r+0x228>)
 8008a66:	a904      	add	r1, sp, #16
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7fd fec1 	bl	80067f0 <_printf_float>
 8008a6e:	4607      	mov	r7, r0
 8008a70:	1c78      	adds	r0, r7, #1
 8008a72:	d1d6      	bne.n	8008a22 <_vfiprintf_r+0x19a>
 8008a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a76:	07d9      	lsls	r1, r3, #31
 8008a78:	d405      	bmi.n	8008a86 <_vfiprintf_r+0x1fe>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	059a      	lsls	r2, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_vfiprintf_r+0x1fe>
 8008a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a82:	f7fe fc01 	bl	8007288 <__retarget_lock_release_recursive>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	065b      	lsls	r3, r3, #25
 8008a8a:	f53f af1f 	bmi.w	80088cc <_vfiprintf_r+0x44>
 8008a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a90:	e71e      	b.n	80088d0 <_vfiprintf_r+0x48>
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	462a      	mov	r2, r5
 8008a98:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <_vfiprintf_r+0x228>)
 8008a9a:	a904      	add	r1, sp, #16
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7fe f93f 	bl	8006d20 <_printf_i>
 8008aa2:	e7e4      	b.n	8008a6e <_vfiprintf_r+0x1e6>
 8008aa4:	08009172 	.word	0x08009172
 8008aa8:	0800917c 	.word	0x0800917c
 8008aac:	080067f1 	.word	0x080067f1
 8008ab0:	08008863 	.word	0x08008863
 8008ab4:	08009178 	.word	0x08009178

08008ab8 <__sflush_r>:
 8008ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac0:	0716      	lsls	r6, r2, #28
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	d454      	bmi.n	8008b72 <__sflush_r+0xba>
 8008ac8:	684b      	ldr	r3, [r1, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	dc02      	bgt.n	8008ad4 <__sflush_r+0x1c>
 8008ace:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dd48      	ble.n	8008b66 <__sflush_r+0xae>
 8008ad4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ad6:	2e00      	cmp	r6, #0
 8008ad8:	d045      	beq.n	8008b66 <__sflush_r+0xae>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ae0:	682f      	ldr	r7, [r5, #0]
 8008ae2:	6a21      	ldr	r1, [r4, #32]
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	d030      	beq.n	8008b4a <__sflush_r+0x92>
 8008ae8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	0759      	lsls	r1, r3, #29
 8008aee:	d505      	bpl.n	8008afc <__sflush_r+0x44>
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	1ad2      	subs	r2, r2, r3
 8008af4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008af6:	b10b      	cbz	r3, 8008afc <__sflush_r+0x44>
 8008af8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008afa:	1ad2      	subs	r2, r2, r3
 8008afc:	2300      	movs	r3, #0
 8008afe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b00:	6a21      	ldr	r1, [r4, #32]
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b0      	blx	r6
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	d106      	bne.n	8008b1a <__sflush_r+0x62>
 8008b0c:	6829      	ldr	r1, [r5, #0]
 8008b0e:	291d      	cmp	r1, #29
 8008b10:	d82b      	bhi.n	8008b6a <__sflush_r+0xb2>
 8008b12:	4a2a      	ldr	r2, [pc, #168]	@ (8008bbc <__sflush_r+0x104>)
 8008b14:	40ca      	lsrs	r2, r1
 8008b16:	07d6      	lsls	r6, r2, #31
 8008b18:	d527      	bpl.n	8008b6a <__sflush_r+0xb2>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	6062      	str	r2, [r4, #4]
 8008b1e:	04d9      	lsls	r1, r3, #19
 8008b20:	6922      	ldr	r2, [r4, #16]
 8008b22:	6022      	str	r2, [r4, #0]
 8008b24:	d504      	bpl.n	8008b30 <__sflush_r+0x78>
 8008b26:	1c42      	adds	r2, r0, #1
 8008b28:	d101      	bne.n	8008b2e <__sflush_r+0x76>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	b903      	cbnz	r3, 8008b30 <__sflush_r+0x78>
 8008b2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b32:	602f      	str	r7, [r5, #0]
 8008b34:	b1b9      	cbz	r1, 8008b66 <__sflush_r+0xae>
 8008b36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b3a:	4299      	cmp	r1, r3
 8008b3c:	d002      	beq.n	8008b44 <__sflush_r+0x8c>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f7ff f9fe 	bl	8007f40 <_free_r>
 8008b44:	2300      	movs	r3, #0
 8008b46:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b48:	e00d      	b.n	8008b66 <__sflush_r+0xae>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b0      	blx	r6
 8008b50:	4602      	mov	r2, r0
 8008b52:	1c50      	adds	r0, r2, #1
 8008b54:	d1c9      	bne.n	8008aea <__sflush_r+0x32>
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0c6      	beq.n	8008aea <__sflush_r+0x32>
 8008b5c:	2b1d      	cmp	r3, #29
 8008b5e:	d001      	beq.n	8008b64 <__sflush_r+0xac>
 8008b60:	2b16      	cmp	r3, #22
 8008b62:	d11e      	bne.n	8008ba2 <__sflush_r+0xea>
 8008b64:	602f      	str	r7, [r5, #0]
 8008b66:	2000      	movs	r0, #0
 8008b68:	e022      	b.n	8008bb0 <__sflush_r+0xf8>
 8008b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b6e:	b21b      	sxth	r3, r3
 8008b70:	e01b      	b.n	8008baa <__sflush_r+0xf2>
 8008b72:	690f      	ldr	r7, [r1, #16]
 8008b74:	2f00      	cmp	r7, #0
 8008b76:	d0f6      	beq.n	8008b66 <__sflush_r+0xae>
 8008b78:	0793      	lsls	r3, r2, #30
 8008b7a:	680e      	ldr	r6, [r1, #0]
 8008b7c:	bf08      	it	eq
 8008b7e:	694b      	ldreq	r3, [r1, #20]
 8008b80:	600f      	str	r7, [r1, #0]
 8008b82:	bf18      	it	ne
 8008b84:	2300      	movne	r3, #0
 8008b86:	eba6 0807 	sub.w	r8, r6, r7
 8008b8a:	608b      	str	r3, [r1, #8]
 8008b8c:	f1b8 0f00 	cmp.w	r8, #0
 8008b90:	dde9      	ble.n	8008b66 <__sflush_r+0xae>
 8008b92:	6a21      	ldr	r1, [r4, #32]
 8008b94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b96:	4643      	mov	r3, r8
 8008b98:	463a      	mov	r2, r7
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b0      	blx	r6
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	dc08      	bgt.n	8008bb4 <__sflush_r+0xfc>
 8008ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008baa:	81a3      	strh	r3, [r4, #12]
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb4:	4407      	add	r7, r0
 8008bb6:	eba8 0800 	sub.w	r8, r8, r0
 8008bba:	e7e7      	b.n	8008b8c <__sflush_r+0xd4>
 8008bbc:	20400001 	.word	0x20400001

08008bc0 <_fflush_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	690b      	ldr	r3, [r1, #16]
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	b913      	cbnz	r3, 8008bd0 <_fflush_r+0x10>
 8008bca:	2500      	movs	r5, #0
 8008bcc:	4628      	mov	r0, r5
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	b118      	cbz	r0, 8008bda <_fflush_r+0x1a>
 8008bd2:	6a03      	ldr	r3, [r0, #32]
 8008bd4:	b90b      	cbnz	r3, 8008bda <_fflush_r+0x1a>
 8008bd6:	f7fe fa4d 	bl	8007074 <__sinit>
 8008bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f3      	beq.n	8008bca <_fflush_r+0xa>
 8008be2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008be4:	07d0      	lsls	r0, r2, #31
 8008be6:	d404      	bmi.n	8008bf2 <_fflush_r+0x32>
 8008be8:	0599      	lsls	r1, r3, #22
 8008bea:	d402      	bmi.n	8008bf2 <_fflush_r+0x32>
 8008bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bee:	f7fe fb4a 	bl	8007286 <__retarget_lock_acquire_recursive>
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	f7ff ff5f 	bl	8008ab8 <__sflush_r>
 8008bfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bfc:	07da      	lsls	r2, r3, #31
 8008bfe:	4605      	mov	r5, r0
 8008c00:	d4e4      	bmi.n	8008bcc <_fflush_r+0xc>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	059b      	lsls	r3, r3, #22
 8008c06:	d4e1      	bmi.n	8008bcc <_fflush_r+0xc>
 8008c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c0a:	f7fe fb3d 	bl	8007288 <__retarget_lock_release_recursive>
 8008c0e:	e7dd      	b.n	8008bcc <_fflush_r+0xc>

08008c10 <__swbuf_r>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	460e      	mov	r6, r1
 8008c14:	4614      	mov	r4, r2
 8008c16:	4605      	mov	r5, r0
 8008c18:	b118      	cbz	r0, 8008c22 <__swbuf_r+0x12>
 8008c1a:	6a03      	ldr	r3, [r0, #32]
 8008c1c:	b90b      	cbnz	r3, 8008c22 <__swbuf_r+0x12>
 8008c1e:	f7fe fa29 	bl	8007074 <__sinit>
 8008c22:	69a3      	ldr	r3, [r4, #24]
 8008c24:	60a3      	str	r3, [r4, #8]
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	071a      	lsls	r2, r3, #28
 8008c2a:	d501      	bpl.n	8008c30 <__swbuf_r+0x20>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	b943      	cbnz	r3, 8008c42 <__swbuf_r+0x32>
 8008c30:	4621      	mov	r1, r4
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 f82a 	bl	8008c8c <__swsetup_r>
 8008c38:	b118      	cbz	r0, 8008c42 <__swbuf_r+0x32>
 8008c3a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c3e:	4638      	mov	r0, r7
 8008c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	1a98      	subs	r0, r3, r2
 8008c48:	6963      	ldr	r3, [r4, #20]
 8008c4a:	b2f6      	uxtb	r6, r6
 8008c4c:	4283      	cmp	r3, r0
 8008c4e:	4637      	mov	r7, r6
 8008c50:	dc05      	bgt.n	8008c5e <__swbuf_r+0x4e>
 8008c52:	4621      	mov	r1, r4
 8008c54:	4628      	mov	r0, r5
 8008c56:	f7ff ffb3 	bl	8008bc0 <_fflush_r>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d1ed      	bne.n	8008c3a <__swbuf_r+0x2a>
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	6022      	str	r2, [r4, #0]
 8008c6a:	701e      	strb	r6, [r3, #0]
 8008c6c:	6962      	ldr	r2, [r4, #20]
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d004      	beq.n	8008c7e <__swbuf_r+0x6e>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	07db      	lsls	r3, r3, #31
 8008c78:	d5e1      	bpl.n	8008c3e <__swbuf_r+0x2e>
 8008c7a:	2e0a      	cmp	r6, #10
 8008c7c:	d1df      	bne.n	8008c3e <__swbuf_r+0x2e>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	f7ff ff9d 	bl	8008bc0 <_fflush_r>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d0d9      	beq.n	8008c3e <__swbuf_r+0x2e>
 8008c8a:	e7d6      	b.n	8008c3a <__swbuf_r+0x2a>

08008c8c <__swsetup_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4b29      	ldr	r3, [pc, #164]	@ (8008d34 <__swsetup_r+0xa8>)
 8008c90:	4605      	mov	r5, r0
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	460c      	mov	r4, r1
 8008c96:	b118      	cbz	r0, 8008ca0 <__swsetup_r+0x14>
 8008c98:	6a03      	ldr	r3, [r0, #32]
 8008c9a:	b90b      	cbnz	r3, 8008ca0 <__swsetup_r+0x14>
 8008c9c:	f7fe f9ea 	bl	8007074 <__sinit>
 8008ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca4:	0719      	lsls	r1, r3, #28
 8008ca6:	d422      	bmi.n	8008cee <__swsetup_r+0x62>
 8008ca8:	06da      	lsls	r2, r3, #27
 8008caa:	d407      	bmi.n	8008cbc <__swsetup_r+0x30>
 8008cac:	2209      	movs	r2, #9
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	e033      	b.n	8008d24 <__swsetup_r+0x98>
 8008cbc:	0758      	lsls	r0, r3, #29
 8008cbe:	d512      	bpl.n	8008ce6 <__swsetup_r+0x5a>
 8008cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cc2:	b141      	cbz	r1, 8008cd6 <__swsetup_r+0x4a>
 8008cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cc8:	4299      	cmp	r1, r3
 8008cca:	d002      	beq.n	8008cd2 <__swsetup_r+0x46>
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f7ff f937 	bl	8007f40 <_free_r>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6063      	str	r3, [r4, #4]
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f043 0308 	orr.w	r3, r3, #8
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	b94b      	cbnz	r3, 8008d06 <__swsetup_r+0x7a>
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cfc:	d003      	beq.n	8008d06 <__swsetup_r+0x7a>
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4628      	mov	r0, r5
 8008d02:	f000 f8c1 	bl	8008e88 <__smakebuf_r>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	f013 0201 	ands.w	r2, r3, #1
 8008d0e:	d00a      	beq.n	8008d26 <__swsetup_r+0x9a>
 8008d10:	2200      	movs	r2, #0
 8008d12:	60a2      	str	r2, [r4, #8]
 8008d14:	6962      	ldr	r2, [r4, #20]
 8008d16:	4252      	negs	r2, r2
 8008d18:	61a2      	str	r2, [r4, #24]
 8008d1a:	6922      	ldr	r2, [r4, #16]
 8008d1c:	b942      	cbnz	r2, 8008d30 <__swsetup_r+0xa4>
 8008d1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d22:	d1c5      	bne.n	8008cb0 <__swsetup_r+0x24>
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
 8008d26:	0799      	lsls	r1, r3, #30
 8008d28:	bf58      	it	pl
 8008d2a:	6962      	ldrpl	r2, [r4, #20]
 8008d2c:	60a2      	str	r2, [r4, #8]
 8008d2e:	e7f4      	b.n	8008d1a <__swsetup_r+0x8e>
 8008d30:	2000      	movs	r0, #0
 8008d32:	e7f7      	b.n	8008d24 <__swsetup_r+0x98>
 8008d34:	20000018 	.word	0x20000018

08008d38 <_sbrk_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	@ (8008d54 <_sbrk_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f9 f998 	bl	8002078 <_sbrk>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_sbrk_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_sbrk_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	2000064c 	.word	0x2000064c

08008d58 <memcpy>:
 8008d58:	440a      	add	r2, r1
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d60:	d100      	bne.n	8008d64 <memcpy+0xc>
 8008d62:	4770      	bx	lr
 8008d64:	b510      	push	{r4, lr}
 8008d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	d1f9      	bne.n	8008d66 <memcpy+0xe>
 8008d72:	bd10      	pop	{r4, pc}

08008d74 <__assert_func>:
 8008d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d76:	4614      	mov	r4, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <__assert_func+0x2c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4605      	mov	r5, r0
 8008d80:	68d8      	ldr	r0, [r3, #12]
 8008d82:	b14c      	cbz	r4, 8008d98 <__assert_func+0x24>
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <__assert_func+0x30>)
 8008d86:	9100      	str	r1, [sp, #0]
 8008d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d8c:	4906      	ldr	r1, [pc, #24]	@ (8008da8 <__assert_func+0x34>)
 8008d8e:	462b      	mov	r3, r5
 8008d90:	f000 f842 	bl	8008e18 <fiprintf>
 8008d94:	f000 f8d6 	bl	8008f44 <abort>
 8008d98:	4b04      	ldr	r3, [pc, #16]	@ (8008dac <__assert_func+0x38>)
 8008d9a:	461c      	mov	r4, r3
 8008d9c:	e7f3      	b.n	8008d86 <__assert_func+0x12>
 8008d9e:	bf00      	nop
 8008da0:	20000018 	.word	0x20000018
 8008da4:	0800918d 	.word	0x0800918d
 8008da8:	0800919a 	.word	0x0800919a
 8008dac:	080091c8 	.word	0x080091c8

08008db0 <_calloc_r>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	fba1 5402 	umull	r5, r4, r1, r2
 8008db6:	b934      	cbnz	r4, 8008dc6 <_calloc_r+0x16>
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7ff f935 	bl	8008028 <_malloc_r>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	b928      	cbnz	r0, 8008dce <_calloc_r+0x1e>
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
 8008dc6:	220c      	movs	r2, #12
 8008dc8:	6002      	str	r2, [r0, #0]
 8008dca:	2600      	movs	r6, #0
 8008dcc:	e7f9      	b.n	8008dc2 <_calloc_r+0x12>
 8008dce:	462a      	mov	r2, r5
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f7fe f9da 	bl	800718a <memset>
 8008dd6:	e7f4      	b.n	8008dc2 <_calloc_r+0x12>

08008dd8 <__ascii_mbtowc>:
 8008dd8:	b082      	sub	sp, #8
 8008dda:	b901      	cbnz	r1, 8008dde <__ascii_mbtowc+0x6>
 8008ddc:	a901      	add	r1, sp, #4
 8008dde:	b142      	cbz	r2, 8008df2 <__ascii_mbtowc+0x1a>
 8008de0:	b14b      	cbz	r3, 8008df6 <__ascii_mbtowc+0x1e>
 8008de2:	7813      	ldrb	r3, [r2, #0]
 8008de4:	600b      	str	r3, [r1, #0]
 8008de6:	7812      	ldrb	r2, [r2, #0]
 8008de8:	1e10      	subs	r0, r2, #0
 8008dea:	bf18      	it	ne
 8008dec:	2001      	movne	r0, #1
 8008dee:	b002      	add	sp, #8
 8008df0:	4770      	bx	lr
 8008df2:	4610      	mov	r0, r2
 8008df4:	e7fb      	b.n	8008dee <__ascii_mbtowc+0x16>
 8008df6:	f06f 0001 	mvn.w	r0, #1
 8008dfa:	e7f8      	b.n	8008dee <__ascii_mbtowc+0x16>

08008dfc <__ascii_wctomb>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	b141      	cbz	r1, 8008e14 <__ascii_wctomb+0x18>
 8008e02:	2aff      	cmp	r2, #255	@ 0xff
 8008e04:	d904      	bls.n	8008e10 <__ascii_wctomb+0x14>
 8008e06:	228a      	movs	r2, #138	@ 0x8a
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0e:	4770      	bx	lr
 8008e10:	700a      	strb	r2, [r1, #0]
 8008e12:	2001      	movs	r0, #1
 8008e14:	4770      	bx	lr
	...

08008e18 <fiprintf>:
 8008e18:	b40e      	push	{r1, r2, r3}
 8008e1a:	b503      	push	{r0, r1, lr}
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	4805      	ldr	r0, [pc, #20]	@ (8008e38 <fiprintf+0x20>)
 8008e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	f7ff fd2d 	bl	8008888 <_vfiprintf_r>
 8008e2e:	b002      	add	sp, #8
 8008e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e34:	b003      	add	sp, #12
 8008e36:	4770      	bx	lr
 8008e38:	20000018 	.word	0x20000018

08008e3c <__swhatbuf_r>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	2900      	cmp	r1, #0
 8008e46:	b096      	sub	sp, #88	@ 0x58
 8008e48:	4615      	mov	r5, r2
 8008e4a:	461e      	mov	r6, r3
 8008e4c:	da0d      	bge.n	8008e6a <__swhatbuf_r+0x2e>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e54:	f04f 0100 	mov.w	r1, #0
 8008e58:	bf14      	ite	ne
 8008e5a:	2340      	movne	r3, #64	@ 0x40
 8008e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e60:	2000      	movs	r0, #0
 8008e62:	6031      	str	r1, [r6, #0]
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	b016      	add	sp, #88	@ 0x58
 8008e68:	bd70      	pop	{r4, r5, r6, pc}
 8008e6a:	466a      	mov	r2, sp
 8008e6c:	f000 f848 	bl	8008f00 <_fstat_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	dbec      	blt.n	8008e4e <__swhatbuf_r+0x12>
 8008e74:	9901      	ldr	r1, [sp, #4]
 8008e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e7e:	4259      	negs	r1, r3
 8008e80:	4159      	adcs	r1, r3
 8008e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e86:	e7eb      	b.n	8008e60 <__swhatbuf_r+0x24>

08008e88 <__smakebuf_r>:
 8008e88:	898b      	ldrh	r3, [r1, #12]
 8008e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e8c:	079d      	lsls	r5, r3, #30
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460c      	mov	r4, r1
 8008e92:	d507      	bpl.n	8008ea4 <__smakebuf_r+0x1c>
 8008e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	6163      	str	r3, [r4, #20]
 8008ea0:	b003      	add	sp, #12
 8008ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea4:	ab01      	add	r3, sp, #4
 8008ea6:	466a      	mov	r2, sp
 8008ea8:	f7ff ffc8 	bl	8008e3c <__swhatbuf_r>
 8008eac:	9f00      	ldr	r7, [sp, #0]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff f8b8 	bl	8008028 <_malloc_r>
 8008eb8:	b948      	cbnz	r0, 8008ece <__smakebuf_r+0x46>
 8008eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ebe:	059a      	lsls	r2, r3, #22
 8008ec0:	d4ee      	bmi.n	8008ea0 <__smakebuf_r+0x18>
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	f043 0302 	orr.w	r3, r3, #2
 8008eca:	81a3      	strh	r3, [r4, #12]
 8008ecc:	e7e2      	b.n	8008e94 <__smakebuf_r+0xc>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	6020      	str	r0, [r4, #0]
 8008ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	9b01      	ldr	r3, [sp, #4]
 8008eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ede:	b15b      	cbz	r3, 8008ef8 <__smakebuf_r+0x70>
 8008ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 f81d 	bl	8008f24 <_isatty_r>
 8008eea:	b128      	cbz	r0, 8008ef8 <__smakebuf_r+0x70>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f023 0303 	bic.w	r3, r3, #3
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	431d      	orrs	r5, r3
 8008efc:	81a5      	strh	r5, [r4, #12]
 8008efe:	e7cf      	b.n	8008ea0 <__smakebuf_r+0x18>

08008f00 <_fstat_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	@ (8008f20 <_fstat_r+0x20>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	f7f9 f88a 	bl	8002026 <_fstat>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d102      	bne.n	8008f1c <_fstat_r+0x1c>
 8008f16:	682b      	ldr	r3, [r5, #0]
 8008f18:	b103      	cbz	r3, 8008f1c <_fstat_r+0x1c>
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	bd38      	pop	{r3, r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	2000064c 	.word	0x2000064c

08008f24 <_isatty_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d06      	ldr	r5, [pc, #24]	@ (8008f40 <_isatty_r+0x1c>)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	f7f9 f889 	bl	8002046 <_isatty>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_isatty_r+0x1a>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_isatty_r+0x1a>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	2000064c 	.word	0x2000064c

08008f44 <abort>:
 8008f44:	b508      	push	{r3, lr}
 8008f46:	2006      	movs	r0, #6
 8008f48:	f000 f82c 	bl	8008fa4 <raise>
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f7f9 f81a 	bl	8001f86 <_exit>

08008f52 <_raise_r>:
 8008f52:	291f      	cmp	r1, #31
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4605      	mov	r5, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	d904      	bls.n	8008f66 <_raise_r+0x14>
 8008f5c:	2316      	movs	r3, #22
 8008f5e:	6003      	str	r3, [r0, #0]
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	bd38      	pop	{r3, r4, r5, pc}
 8008f66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f68:	b112      	cbz	r2, 8008f70 <_raise_r+0x1e>
 8008f6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f6e:	b94b      	cbnz	r3, 8008f84 <_raise_r+0x32>
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f831 	bl	8008fd8 <_getpid_r>
 8008f76:	4622      	mov	r2, r4
 8008f78:	4601      	mov	r1, r0
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f80:	f000 b818 	b.w	8008fb4 <_kill_r>
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d00a      	beq.n	8008f9e <_raise_r+0x4c>
 8008f88:	1c59      	adds	r1, r3, #1
 8008f8a:	d103      	bne.n	8008f94 <_raise_r+0x42>
 8008f8c:	2316      	movs	r3, #22
 8008f8e:	6003      	str	r3, [r0, #0]
 8008f90:	2001      	movs	r0, #1
 8008f92:	e7e7      	b.n	8008f64 <_raise_r+0x12>
 8008f94:	2100      	movs	r1, #0
 8008f96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4798      	blx	r3
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	e7e0      	b.n	8008f64 <_raise_r+0x12>
	...

08008fa4 <raise>:
 8008fa4:	4b02      	ldr	r3, [pc, #8]	@ (8008fb0 <raise+0xc>)
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f7ff bfd2 	b.w	8008f52 <_raise_r>
 8008fae:	bf00      	nop
 8008fb0:	20000018 	.word	0x20000018

08008fb4 <_kill_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4d07      	ldr	r5, [pc, #28]	@ (8008fd4 <_kill_r+0x20>)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	f7f8 ffd0 	bl	8001f66 <_kill>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d102      	bne.n	8008fd0 <_kill_r+0x1c>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	b103      	cbz	r3, 8008fd0 <_kill_r+0x1c>
 8008fce:	6023      	str	r3, [r4, #0]
 8008fd0:	bd38      	pop	{r3, r4, r5, pc}
 8008fd2:	bf00      	nop
 8008fd4:	2000064c 	.word	0x2000064c

08008fd8 <_getpid_r>:
 8008fd8:	f7f8 bfbd 	b.w	8001f56 <_getpid>

08008fdc <_init>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	bf00      	nop
 8008fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe2:	bc08      	pop	{r3}
 8008fe4:	469e      	mov	lr, r3
 8008fe6:	4770      	bx	lr

08008fe8 <_fini>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr
