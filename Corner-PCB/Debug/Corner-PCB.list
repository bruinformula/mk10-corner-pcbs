
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a90  08005a90  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a98  08005a98  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a98  08005a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005aa0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000000c  08005aac  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005aac  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c20  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303f  00000000  00000000  00020c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00023ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b0  00000000  00000000  00025468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f0b  00000000  00000000  00026718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c01d  00000000  00000000  0004a623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d7c  00000000  00000000  00066640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001483bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006730  00000000  00000000  00148400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0014eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005a30 	.word	0x08005a30

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005a30 	.word	0x08005a30

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <CANTransmitMinion>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


HAL_StatusTypeDef CANTransmitMinion (CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef TXStatusOut = HAL_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	77fb      	strb	r3, [r7, #31]
	//	printf("sending ID ");
	//	printf((uint32_t)(header->StdId));
	int i = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
	uint32_t mailbox = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000510:	e012      	b.n	8000538 <CANTransmitMinion+0x40>
		while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) < 1) {
 8000512:	bf00      	nop
 8000514:	4810      	ldr	r0, [pc, #64]	@ (8000558 <CANTransmitMinion+0x60>)
 8000516:	f002 fc34 	bl	8002d82 <HAL_CAN_GetTxMailboxesFreeLevel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f9      	beq.n	8000514 <CANTransmitMinion+0x1c>
					//wait until a new mailbox gets freed up
		//			printf("\n\rwaiting\n\r");
				}
		TXStatusOut = HAL_CAN_AddTxMessage(canport, header, dataArray, &mailbox);
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	68b9      	ldr	r1, [r7, #8]
 8000528:	68f8      	ldr	r0, [r7, #12]
 800052a:	f002 fb5a 	bl	8002be2 <HAL_CAN_AddTxMessage>
 800052e:	4603      	mov	r3, r0
 8000530:	77fb      	strb	r3, [r7, #31]

		i++;
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	3301      	adds	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	2b02      	cmp	r3, #2
 800053c:	dc02      	bgt.n	8000544 <CANTransmitMinion+0x4c>
 800053e:	7ffb      	ldrb	r3, [r7, #31]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1e6      	bne.n	8000512 <CANTransmitMinion+0x1a>
	}

	if (TXStatusOut != HAL_OK) {
 8000544:	7ffb      	ldrb	r3, [r7, #31]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <CANTransmitMinion+0x56>
		mailbox = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]

	}
	//	printf("\n\r");
	return TXStatusOut;
 800054e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000008c 	.word	0x2000008c

0800055c <clearEflagsHelper>:

void clearEflagsHelper(void) {
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	misc_dataframe.data.eflags.ADCErrorBit = 0;
 8000560:	4a16      	ldr	r2, [pc, #88]	@ (80005bc <clearEflagsHelper+0x60>)
 8000562:	79d3      	ldrb	r3, [r2, #7]
 8000564:	f023 0301 	bic.w	r3, r3, #1
 8000568:	71d3      	strb	r3, [r2, #7]
	misc_dataframe.data.eflags.BrakeTempErrorBit = 0;
 800056a:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <clearEflagsHelper+0x60>)
 800056c:	79d3      	ldrb	r3, [r2, #7]
 800056e:	f023 0302 	bic.w	r3, r3, #2
 8000572:	71d3      	strb	r3, [r2, #7]
	misc_dataframe.data.eflags.SGMsgErrorBit = 0;
 8000574:	4a11      	ldr	r2, [pc, #68]	@ (80005bc <clearEflagsHelper+0x60>)
 8000576:	79d3      	ldrb	r3, [r2, #7]
 8000578:	f023 0308 	bic.w	r3, r3, #8
 800057c:	71d3      	strb	r3, [r2, #7]
	misc_dataframe.data.eflags.MiscMsgErrorBit = 0;
 800057e:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <clearEflagsHelper+0x60>)
 8000580:	79d3      	ldrb	r3, [r2, #7]
 8000582:	f023 0304 	bic.w	r3, r3, #4
 8000586:	71d3      	strb	r3, [r2, #7]
	misc_dataframe.data.eflags.TTempMsg1ErrorBit = 0;
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <clearEflagsHelper+0x60>)
 800058a:	79d3      	ldrb	r3, [r2, #7]
 800058c:	f023 0310 	bic.w	r3, r3, #16
 8000590:	71d3      	strb	r3, [r2, #7]
	misc_dataframe.data.eflags.TTempMsg2ErrorBit = 0;
 8000592:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <clearEflagsHelper+0x60>)
 8000594:	79d3      	ldrb	r3, [r2, #7]
 8000596:	f023 0320 	bic.w	r3, r3, #32
 800059a:	71d3      	strb	r3, [r2, #7]
	misc_dataframe.data.eflags.TTempMsg3ErrorBit = 0;
 800059c:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <clearEflagsHelper+0x60>)
 800059e:	79d3      	ldrb	r3, [r2, #7]
 80005a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005a4:	71d3      	strb	r3, [r2, #7]
	misc_dataframe.data.eflags.TTempMsg4ErrorBit = 0;
 80005a6:	4a05      	ldr	r2, [pc, #20]	@ (80005bc <clearEflagsHelper+0x60>)
 80005a8:	79d3      	ldrb	r3, [r2, #7]
 80005aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005ae:	71d3      	strb	r3, [r2, #7]

}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200002f0 	.word	0x200002f0

080005c0 <CANMailman>:

void CANMailman(void) {
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
	clearEflagsHelper();
 80005c6:	f7ff ffc9 	bl	800055c <clearEflagsHelper>
	HAL_StatusTypeDef txstatus;
	/*** BEGIN SEND MISC MESSAGE (btemp, whs, board temp, error flags, shock travel) */

	if (HAL_GetTick() - ms_since_miscmsg_broadcast > MISC_DATA_TRANSMISSION_PERIOD) {
 80005ca:	f001 f84d 	bl	8001668 <HAL_GetTick>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b52      	ldr	r3, [pc, #328]	@ (800071c <CANMailman+0x15c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	2b15      	cmp	r3, #21
 80005d8:	d917      	bls.n	800060a <CANMailman+0x4a>
		CTXHeader.StdId = MISC_DATA_ID;
 80005da:	4b51      	ldr	r3, [pc, #324]	@ (8000720 <CANMailman+0x160>)
 80005dc:	f240 7215 	movw	r2, #1813	@ 0x715
 80005e0:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion(&hcan1, &CTXHeader, misc_dataframe.array);
 80005e2:	4a50      	ldr	r2, [pc, #320]	@ (8000724 <CANMailman+0x164>)
 80005e4:	494e      	ldr	r1, [pc, #312]	@ (8000720 <CANMailman+0x160>)
 80005e6:	4850      	ldr	r0, [pc, #320]	@ (8000728 <CANMailman+0x168>)
 80005e8:	f7ff ff86 	bl	80004f8 <CANTransmitMinion>
 80005ec:	4603      	mov	r3, r0
 80005ee:	77fb      	strb	r3, [r7, #31]

		//set error flag
		if (txstatus != HAL_OK) {
 80005f0:	7ffb      	ldrb	r3, [r7, #31]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d004      	beq.n	8000600 <CANMailman+0x40>
			misc_dataframe.data.eflags.MiscMsgErrorBit = true;
 80005f6:	4a4b      	ldr	r2, [pc, #300]	@ (8000724 <CANMailman+0x164>)
 80005f8:	79d3      	ldrb	r3, [r2, #7]
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	71d3      	strb	r3, [r2, #7]
		}

		ms_since_miscmsg_broadcast = HAL_GetTick();
 8000600:	f001 f832 	bl	8001668 <HAL_GetTick>
 8000604:	4603      	mov	r3, r0
 8000606:	4a45      	ldr	r2, [pc, #276]	@ (800071c <CANMailman+0x15c>)
 8000608:	6013      	str	r3, [r2, #0]




	/**** BEGIN SEND STRAIN GAUGE DATA ****/
	if (HAL_GetTick() - ms_since_strain_broadcast > STRAIN_GAUGE_TRANSMISSION_PERIOD) {
 800060a:	f001 f82d 	bl	8001668 <HAL_GetTick>
 800060e:	4602      	mov	r2, r0
 8000610:	4b46      	ldr	r3, [pc, #280]	@ (800072c <CANMailman+0x16c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	2b02      	cmp	r3, #2
 8000618:	d917      	bls.n	800064a <CANMailman+0x8a>
		CTXHeader.StdId = STRAIN_GAUGE_ID;
 800061a:	4b41      	ldr	r3, [pc, #260]	@ (8000720 <CANMailman+0x160>)
 800061c:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8000620:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (&hcan1, &CTXHeader, sg_dataframe.array);
 8000622:	4a43      	ldr	r2, [pc, #268]	@ (8000730 <CANMailman+0x170>)
 8000624:	493e      	ldr	r1, [pc, #248]	@ (8000720 <CANMailman+0x160>)
 8000626:	4840      	ldr	r0, [pc, #256]	@ (8000728 <CANMailman+0x168>)
 8000628:	f7ff ff66 	bl	80004f8 <CANTransmitMinion>
 800062c:	4603      	mov	r3, r0
 800062e:	77fb      	strb	r3, [r7, #31]

		//set error flag
		if (txstatus != HAL_OK) {
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d004      	beq.n	8000640 <CANMailman+0x80>
			misc_dataframe.data.eflags.SGMsgErrorBit = true;
 8000636:	4a3b      	ldr	r2, [pc, #236]	@ (8000724 <CANMailman+0x164>)
 8000638:	79d3      	ldrb	r3, [r2, #7]
 800063a:	f043 0308 	orr.w	r3, r3, #8
 800063e:	71d3      	strb	r3, [r2, #7]
		}

		ms_since_strain_broadcast = HAL_GetTick();
 8000640:	f001 f812 	bl	8001668 <HAL_GetTick>
 8000644:	4603      	mov	r3, r0
 8000646:	4a39      	ldr	r2, [pc, #228]	@ (800072c <CANMailman+0x16c>)
 8000648:	6013      	str	r3, [r2, #0]
	}
	/**** END SEND STRAIN GAUGE DATA ****/



	uint32_t tick = HAL_GetTick();
 800064a:	f001 f80d 	bl	8001668 <HAL_GetTick>
 800064e:	61b8      	str	r0, [r7, #24]
	/**** BEGIN SEND TIRE TEMP DATA ****/
	if (tick - ms_since_ttemp_broadcast > TIRE_TEMP_TRANSMISSION_PERIOD) {
 8000650:	4b38      	ldr	r3, [pc, #224]	@ (8000734 <CANMailman+0x174>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	69ba      	ldr	r2, [r7, #24]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 800065c:	d359      	bcc.n	8000712 <CANMailman+0x152>
		//		CTXHeader.IDE = CAN_ID_STD;
		//		CTXHeader.RTR = CAN_RTR_DATA;
		//		CTXHeader.DLC = 8;
		//		ms_since_ttemp_broadcast = HAL_GetTick();

		CAN_TxHeaderTypeDef head = CTXHeader;
 800065e:	4b30      	ldr	r3, [pc, #192]	@ (8000720 <CANMailman+0x160>)
 8000660:	463c      	mov	r4, r7
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0003 	ldmia.w	r5, {r0, r1}
 800066c:	e884 0003 	stmia.w	r4, {r0, r1}
		CTXHeader.StdId = TIRE_TEMP_MSG1_ID;
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <CANMailman+0x160>)
 8000672:	f240 7211 	movw	r2, #1809	@ 0x711
 8000676:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (&hcan1, &CTXHeader, ttemp_dataframes[0].array);
 8000678:	4a2f      	ldr	r2, [pc, #188]	@ (8000738 <CANMailman+0x178>)
 800067a:	4929      	ldr	r1, [pc, #164]	@ (8000720 <CANMailman+0x160>)
 800067c:	482a      	ldr	r0, [pc, #168]	@ (8000728 <CANMailman+0x168>)
 800067e:	f7ff ff3b 	bl	80004f8 <CANTransmitMinion>
 8000682:	4603      	mov	r3, r0
 8000684:	77fb      	strb	r3, [r7, #31]
		if (txstatus != HAL_OK) {
 8000686:	7ffb      	ldrb	r3, [r7, #31]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <CANMailman+0xd6>
			misc_dataframe.data.eflags.TTempMsg1ErrorBit = true;
 800068c:	4a25      	ldr	r2, [pc, #148]	@ (8000724 <CANMailman+0x164>)
 800068e:	79d3      	ldrb	r3, [r2, #7]
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	71d3      	strb	r3, [r2, #7]
		}

		CTXHeader.StdId = TIRE_TEMP_MSG2_ID;
 8000696:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <CANMailman+0x160>)
 8000698:	f240 7212 	movw	r2, #1810	@ 0x712
 800069c:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (&hcan1, &CTXHeader, ttemp_dataframes[1].array);
 800069e:	4a27      	ldr	r2, [pc, #156]	@ (800073c <CANMailman+0x17c>)
 80006a0:	491f      	ldr	r1, [pc, #124]	@ (8000720 <CANMailman+0x160>)
 80006a2:	4821      	ldr	r0, [pc, #132]	@ (8000728 <CANMailman+0x168>)
 80006a4:	f7ff ff28 	bl	80004f8 <CANTransmitMinion>
 80006a8:	4603      	mov	r3, r0
 80006aa:	77fb      	strb	r3, [r7, #31]
		if (txstatus != HAL_OK) {
 80006ac:	7ffb      	ldrb	r3, [r7, #31]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d004      	beq.n	80006bc <CANMailman+0xfc>
			misc_dataframe.data.eflags.TTempMsg2ErrorBit = true;
 80006b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <CANMailman+0x164>)
 80006b4:	79d3      	ldrb	r3, [r2, #7]
 80006b6:	f043 0320 	orr.w	r3, r3, #32
 80006ba:	71d3      	strb	r3, [r2, #7]
		}

		CTXHeader.StdId = TIRE_TEMP_MSG3_ID;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <CANMailman+0x160>)
 80006be:	f240 7213 	movw	r2, #1811	@ 0x713
 80006c2:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (&hcan1, &CTXHeader, ttemp_dataframes[2].array);
 80006c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <CANMailman+0x180>)
 80006c6:	4916      	ldr	r1, [pc, #88]	@ (8000720 <CANMailman+0x160>)
 80006c8:	4817      	ldr	r0, [pc, #92]	@ (8000728 <CANMailman+0x168>)
 80006ca:	f7ff ff15 	bl	80004f8 <CANTransmitMinion>
 80006ce:	4603      	mov	r3, r0
 80006d0:	77fb      	strb	r3, [r7, #31]
		if (txstatus != HAL_OK) {
 80006d2:	7ffb      	ldrb	r3, [r7, #31]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d004      	beq.n	80006e2 <CANMailman+0x122>
			misc_dataframe.data.eflags.TTempMsg3ErrorBit = true;
 80006d8:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <CANMailman+0x164>)
 80006da:	79d3      	ldrb	r3, [r2, #7]
 80006dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006e0:	71d3      	strb	r3, [r2, #7]
		}

		CTXHeader.StdId = TIRE_TEMP_MSG4_ID;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <CANMailman+0x160>)
 80006e4:	f240 7214 	movw	r2, #1812	@ 0x714
 80006e8:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (&hcan1, &CTXHeader, ttemp_dataframes[3].array);
 80006ea:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <CANMailman+0x184>)
 80006ec:	490c      	ldr	r1, [pc, #48]	@ (8000720 <CANMailman+0x160>)
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <CANMailman+0x168>)
 80006f0:	f7ff ff02 	bl	80004f8 <CANTransmitMinion>
 80006f4:	4603      	mov	r3, r0
 80006f6:	77fb      	strb	r3, [r7, #31]
		if (txstatus != HAL_OK) {
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d004      	beq.n	8000708 <CANMailman+0x148>
			misc_dataframe.data.eflags.TTempMsg4ErrorBit = true;
 80006fe:	4a09      	ldr	r2, [pc, #36]	@ (8000724 <CANMailman+0x164>)
 8000700:	79d3      	ldrb	r3, [r2, #7]
 8000702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000706:	71d3      	strb	r3, [r2, #7]
		}

		ms_since_ttemp_broadcast = HAL_GetTick();
 8000708:	f000 ffae 	bl	8001668 <HAL_GetTick>
 800070c:	4603      	mov	r3, r0
 800070e:	4a09      	ldr	r2, [pc, #36]	@ (8000734 <CANMailman+0x174>)
 8000710:	6013      	str	r3, [r2, #0]
	}

	/**** END SEND TIRE TEMP DATA ****/
}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bdb0      	pop	{r4, r5, r7, pc}
 800071a:	bf00      	nop
 800071c:	20000310 	.word	0x20000310
 8000720:	2000031c 	.word	0x2000031c
 8000724:	200002f0 	.word	0x200002f0
 8000728:	2000008c 	.word	0x2000008c
 800072c:	20000314 	.word	0x20000314
 8000730:	200002c8 	.word	0x200002c8
 8000734:	20000318 	.word	0x20000318
 8000738:	200002d0 	.word	0x200002d0
 800073c:	200002d8 	.word	0x200002d8
 8000740:	200002e0 	.word	0x200002e0
 8000744:	200002e8 	.word	0x200002e8

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 ff22 	bl	8001596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f86d 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 fa8f 	bl	8000c78 <MX_GPIO_Init>
  MX_ADC1_Init();
 800075a:	f000 f8bb 	bl	80008d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800075e:	f000 f9d1 	bl	8000b04 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000762:	f000 f91b 	bl	800099c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000766:	f000 f94f 	bl	8000a08 <MX_I2C1_Init>
  MX_SPI1_Init();
 800076a:	f000 f98d 	bl	8000a88 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800076e:	f000 fa1d 	bl	8000bac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000772:	f000 fa4d 	bl	8000c10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	//  HAL_ADC_Start(&hadc1);
	/* INITIALIZE CAN PARAMETERS */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 1;                       // value between 0 to 13 for JUST Master Mode (CAN1)
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;   // for filtering Identifiers
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 800077e:	2301      	movs	r3, #1
 8000780:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = (0x541) << 5;          // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000782:	f64a 0320 	movw	r3, #43040	@ 0xa820
 8000786:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x00;                   // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x00;              // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x00;               // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;  // specify FIFO0 or FIFO1
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = CAN_FILTER_DISABLE; // Enable filtering
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]

	CTXHeader.IDE = CAN_ID_STD;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <main+0xb4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
	CTXHeader.RTR = CAN_RTR_DATA;
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <main+0xb4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
	CTXHeader.DLC = 8;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <main+0xb4>)
 80007aa:	2208      	movs	r2, #8
 80007ac:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4813      	ldr	r0, [pc, #76]	@ (8000800 <main+0xb8>)
 80007b4:	f002 f907 	bl	80029c6 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <main+0xb8>)
 80007ba:	f002 f9ce 	bl	8002b5a <HAL_CAN_Start>
		//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

		//		spamCan();

		//read the sensors
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &misc_dataframe);
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <main+0xbc>)
 80007c0:	4911      	ldr	r1, [pc, #68]	@ (8000808 <main+0xc0>)
 80007c2:	4812      	ldr	r0, [pc, #72]	@ (800080c <main+0xc4>)
 80007c4:	f000 fac2 	bl	8000d4c <readLinearPotentiometer>
		readBrakeTemp(&ms_since_btemp_read, &misc_dataframe);
 80007c8:	490e      	ldr	r1, [pc, #56]	@ (8000804 <main+0xbc>)
 80007ca:	4811      	ldr	r0, [pc, #68]	@ (8000810 <main+0xc8>)
 80007cc:	f000 fae2 	bl	8000d94 <readBrakeTemp>
		readTireTemp(&ms_since_ttemp_read, ttemp_dataframes);
 80007d0:	4910      	ldr	r1, [pc, #64]	@ (8000814 <main+0xcc>)
 80007d2:	4811      	ldr	r0, [pc, #68]	@ (8000818 <main+0xd0>)
 80007d4:	f000 faf7 	bl	8000dc6 <readTireTemp>
		readStrainGauges(&hspi1, &ms_since_strain_read, &sg_dataframe);
 80007d8:	4a10      	ldr	r2, [pc, #64]	@ (800081c <main+0xd4>)
 80007da:	4911      	ldr	r1, [pc, #68]	@ (8000820 <main+0xd8>)
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <main+0xdc>)
 80007de:	f000 fb68 	bl	8000eb2 <readStrainGauges>
		readWheelSpeed(&ms_since_whs_read, &misc_dataframe);
 80007e2:	4908      	ldr	r1, [pc, #32]	@ (8000804 <main+0xbc>)
 80007e4:	4810      	ldr	r0, [pc, #64]	@ (8000828 <main+0xe0>)
 80007e6:	f000 fb87 	bl	8000ef8 <readWheelSpeed>
		readBoardTemp(&hspi1, &ms_since_boardtemp_read, &misc_dataframe);
 80007ea:	4a06      	ldr	r2, [pc, #24]	@ (8000804 <main+0xbc>)
 80007ec:	490f      	ldr	r1, [pc, #60]	@ (800082c <main+0xe4>)
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <main+0xdc>)
 80007f0:	f000 fbe4 	bl	8000fbc <readBoardTemp>


		//send out the sensors
		CANMailman();
 80007f4:	f7ff fee4 	bl	80005c0 <CANMailman>
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &misc_dataframe);
 80007f8:	bf00      	nop
 80007fa:	e7e0      	b.n	80007be <main+0x76>
 80007fc:	2000031c 	.word	0x2000031c
 8000800:	2000008c 	.word	0x2000008c
 8000804:	200002f0 	.word	0x200002f0
 8000808:	200002f8 	.word	0x200002f8
 800080c:	20000028 	.word	0x20000028
 8000810:	20000304 	.word	0x20000304
 8000814:	200002d0 	.word	0x200002d0
 8000818:	20000300 	.word	0x20000300
 800081c:	200002c8 	.word	0x200002c8
 8000820:	200002fc 	.word	0x200002fc
 8000824:	20000108 	.word	0x20000108
 8000828:	20000308 	.word	0x20000308
 800082c:	2000030c 	.word	0x2000030c

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b096      	sub	sp, #88	@ 0x58
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2244      	movs	r2, #68	@ 0x44
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f005 f8ca 	bl	80059d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000852:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000856:	f002 ff19 	bl	800368c <HAL_PWREx_ControlVoltageScaling>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000860:	f000 fa6e 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800086c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086e:	2310      	movs	r3, #16
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800087e:	230a      	movs	r3, #10
 8000880:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000882:	2307      	movs	r3, #7
 8000884:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4618      	mov	r0, r3
 8000894:	f002 ff50 	bl	8003738 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800089e:	f000 fa4f 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	2104      	movs	r1, #4
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fb50 	bl	8003f60 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008c6:	f000 fa3b 	bl	8000d40 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3758      	adds	r7, #88	@ 0x58
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
 80008e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ea:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <MX_ADC1_Init+0xbc>)
 80008ec:	4a29      	ldr	r2, [pc, #164]	@ (8000994 <MX_ADC1_Init+0xc0>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f0:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <MX_ADC1_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f6:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <MX_ADC1_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fc:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <MX_ADC1_Init+0xbc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000902:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_ADC1_Init+0xbc>)
 800090a:	2204      	movs	r2, #4
 800090c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800090e:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000914:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800091a:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_ADC1_Init+0xbc>)
 800091c:	2201      	movs	r2, #1
 800091e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_ADC1_Init+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_ADC1_Init+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094a:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_ADC1_Init+0xbc>)
 800094c:	f001 f860 	bl	8001a10 <HAL_ADC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000956:	f000 f9f3 	bl	8000d40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_ADC1_Init+0xc4>)
 800095c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095e:	2306      	movs	r3, #6
 8000960:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000966:	237f      	movs	r3, #127	@ 0x7f
 8000968:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800096a:	2304      	movs	r3, #4
 800096c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_ADC1_Init+0xbc>)
 8000978:	f001 fa2e 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000982:	f000 f9dd 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000028 	.word	0x20000028
 8000994:	50040000 	.word	0x50040000
 8000998:	19200040 	.word	0x19200040

0800099c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009a2:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <MX_CAN1_Init+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009a8:	220a      	movs	r2, #10
 80009aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009b2:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009ba:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80009be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80009c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009e0:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <MX_CAN1_Init+0x64>)
 80009ee:	f001 feef 	bl	80027d0 <HAL_CAN_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009f8:	f000 f9a2 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	40006400 	.word	0x40006400

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <MX_I2C1_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <MX_I2C1_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a44:	f002 fce2 	bl	800340c <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 f977 	bl	8000d40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a56:	f002 fd74 	bl	8003542 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 f96e 	bl	8000d40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_I2C1_Init+0x74>)
 8000a68:	f002 fdb6 	bl	80035d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 f965 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000b4 	.word	0x200000b4
 8000a80:	40005400 	.word	0x40005400
 8000a84:	10d19ce4 	.word	0x10d19ce4

08000a88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <MX_SPI1_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000a94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000aa2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000aa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ab6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000abe:	2228      	movs	r2, #40	@ 0x28
 8000ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_SPI1_Init+0x74>)
 8000ae8:	f003 ff46 	bl	8004978 <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 f925 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000108 	.word	0x20000108
 8000b00:	40013000 	.word	0x40013000

08000b04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b22:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b24:	4a20      	ldr	r2, [pc, #128]	@ (8000ba8 <MX_TIM1_Init+0xa4>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4e:	4815      	ldr	r0, [pc, #84]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b50:	f003 ffb5 	bl	8004abe <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b5a:	f000 f8f1 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b6c:	f003 fffe 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b76:	f000 f8e3 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b8c:	f004 f9c2 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b96:	f000 f8d3 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000016c 	.word	0x2000016c
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bb2:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <MX_USART1_UART_Init+0x60>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_USART1_UART_Init+0x5c>)
 8000bf6:	f004 fe88 	bl	800590a <HAL_RS485Ex_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 f89e 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200001b8 	.word	0x200001b8
 8000c0c:	40013800 	.word	0x40013800

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_UART_MspInit(&huart2);
 8000c14:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c16:	f000 fb83 	bl	8001320 <HAL_UART_MspInit>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c1c:	4a15      	ldr	r2, [pc, #84]	@ (8000c74 <MX_USART2_UART_Init+0x64>)
 8000c1e:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c22:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c26:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_USART2_UART_Init+0x60>)
 8000c5c:	f004 f9c0 	bl	8004fe0 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c66:	f000 f86b 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000240 	.word	0x20000240
 8000c74:	40004400 	.word	0x40004400

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	4a29      	ldr	r2, [pc, #164]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9a:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a23      	ldr	r2, [pc, #140]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <MX_GPIO_Init+0xc0>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_FAULT_GPIO_Port, GEN_FAULT_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <MX_GPIO_Init+0xc4>)
 8000cdc:	f002 fb7e 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f002 f9ef 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_FAULT_Pin */
  GPIO_InitStruct.Pin = GEN_FAULT_Pin;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEN_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480a      	ldr	r0, [pc, #40]	@ (8000d3c <MX_GPIO_Init+0xc4>)
 8000d12:	f002 f9e1 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 8000d16:	2310      	movs	r3, #16
 8000d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_GPIO_Init+0xc4>)
 8000d2a:	f002 f9d5 	bl	80030d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <readLinearPotentiometer>:
 *      Author: antho
 */

#include "sensor_read_helpers.h"

void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS,  MISC_DATAFRAME *dataframe) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	uint32_t ADC_Read[1];
	uint32_t ADC_BUFFER = 1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
	//		HAL_ADC_PollForConversion(&hadc1, 100);
	//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

	HAL_ADC_Start_DMA(hadc, ADC_Read, ADC_BUFFER);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	4619      	mov	r1, r3
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 ff95 	bl	8001c94 <HAL_ADC_Start_DMA>
	if(HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD){
 8000d6a:	f000 fc7d 	bl	8001668 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b15      	cmp	r3, #21
 8000d78:	d908      	bls.n	8000d8c <readLinearPotentiometer+0x40>
		dataframe->data.shockTravel = ADC_Read[0];
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	809a      	strh	r2, [r3, #4]

		*lastReadMS = HAL_GetTick();
 8000d82:	f000 fc71 	bl	8001668 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	601a      	str	r2, [r3, #0]
	}

	//todo: convert counts to travel
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <readBrakeTemp>:

void readBrakeTemp(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > BRAKE_TEMP_SAMPLE_PERIOD){
 8000d9e:	f000 fc63 	bl	8001668 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b65      	cmp	r3, #101	@ 0x65
 8000dac:	d907      	bls.n	8000dbe <readBrakeTemp+0x2a>
		dataframe->data.brakeTemp = 0;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2200      	movs	r2, #0
 8000db2:	805a      	strh	r2, [r3, #2]
		//todo: actual brake temp sensor read code
		*lastReadMS = HAL_GetTick();
 8000db4:	f000 fc58 	bl	8001668 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
	}

	//todo: convert to deg C
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <readTireTemp>:

void readTireTemp(uint32_t *lastReadMS, TTEMP_DATAFRAME *dataframes) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > TIRE_TEMP_SAMPLE_PERIOD){
 8000dd0:	f000 fc4a 	bl	8001668 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8000de0:	d363      	bcc.n	8000eaa <readTireTemp+0xe4>
		for(int i = 0; i < 4; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e058      	b.n	8000e9a <readTireTemp+0xd4>
			dataframes[i].data.pix0 = 1 + (4*i);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	440b      	add	r3, r1
 8000df8:	3201      	adds	r2, #1
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix1 = 2 + (4*i);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3202      	adds	r2, #2
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	705a      	strb	r2, [r3, #1]
			dataframes[i].data.pix2 = 3 + (4*i);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	440b      	add	r3, r1
 8000e24:	3203      	adds	r2, #3
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	709a      	strb	r2, [r3, #2]
			dataframes[i].data.pix3 = 4 + (4*i);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	440b      	add	r3, r1
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	70da      	strb	r2, [r3, #3]
			dataframes[i].data.pix4 = 5 + (4*i);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3205      	adds	r2, #5
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	711a      	strb	r2, [r3, #4]
			dataframes[i].data.pix5 = 6 + (4*i);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	6839      	ldr	r1, [r7, #0]
 8000e62:	440b      	add	r3, r1
 8000e64:	3206      	adds	r2, #6
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	715a      	strb	r2, [r3, #5]
			dataframes[i].data.pix6 = 7 + (4*i);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	440b      	add	r3, r1
 8000e7a:	3207      	adds	r2, #7
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	719a      	strb	r2, [r3, #6]
			dataframes[i].data.pix7 = 8 + (4*i);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3302      	adds	r3, #2
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	440b      	add	r3, r1
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	71da      	strb	r2, [r3, #7]
		for(int i = 0; i < 4; i++) {
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	dda3      	ble.n	8000de8 <readTireTemp+0x22>
		}


		//todo: actual tire temp sensor read code
		*lastReadMS = HAL_GetTick();
 8000ea0:	f000 fbe2 	bl	8001668 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <readStrainGauges>:
void readStrainGauges(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, SG_DATAFRAME *dataframe) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8000ebe:	f000 fbd3 	bl	8001668 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d910      	bls.n	8000ef0 <readStrainGauges+0x3e>
		dataframe->data.SG0 = 0;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	801a      	strh	r2, [r3, #0]
		dataframe->data.SG1 = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	805a      	strh	r2, [r3, #2]
		dataframe->data.SG2 = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	809a      	strh	r2, [r3, #4]
		dataframe->data.SG3 = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	80da      	strh	r2, [r3, #6]

		//todo: actual strain gauge sensor read code
		//todo: convert counts to newtons
		*lastReadMS = HAL_GetTick();
 8000ee6:	f000 fbbf 	bl	8001668 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <readWheelSpeed>:

void readWheelSpeed(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > WHEEL_SPEED_SAMPLE_PERIOD){
 8000f02:	f000 fbb1 	bl	8001668 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b0b      	cmp	r3, #11
 8000f10:	d94b      	bls.n	8000faa <readWheelSpeed+0xb2>

		uint8_t prevWHSLogicLevel = GPIO_PIN_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	75fb      	strb	r3, [r7, #23]
		uint8_t edges = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	75bb      	strb	r3, [r7, #22]
		uint8_t readBeginMS = HAL_GetTick(); //possilbly a good idea to lower tick period to like 10us or sth
 8000f1a:	f000 fba5 	bl	8001668 <HAL_GetTick>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e015      	b.n	8000f54 <readWheelSpeed+0x5c>

			/* if whs pin is logic high and prev_whs_logic_level is opposite, add one to edges */

			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != prevWHSLogicLevel) {
 8000f28:	2110      	movs	r1, #16
 8000f2a:	4822      	ldr	r0, [pc, #136]	@ (8000fb4 <readWheelSpeed+0xbc>)
 8000f2c:	f002 fa3e 	bl	80033ac <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d009      	beq.n	8000f4e <readWheelSpeed+0x56>
				edges++;
 8000f3a:	7dbb      	ldrb	r3, [r7, #22]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	75bb      	strb	r3, [r7, #22]
				prevWHSLogicLevel = !prevWHSLogicLevel;
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3301      	adds	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f5a:	dbe5      	blt.n	8000f28 <readWheelSpeed+0x30>
			}
		}

		uint8_t readEndMS = HAL_GetTick();
 8000f5c:	f000 fb84 	bl	8001668 <HAL_GetTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73bb      	strb	r3, [r7, #14]
		//convert to rpm
		/*
		 * edges/msec * 1/(edges/rotation) * msec/sec = rotations/msec
		 * 1/(edges/rotation) * msec/sec = 1/24 * 1/1000 =
		 */
		dataframe->data.wheelRPM = ( ((float)(edges)) / ((float)(readEndMS)-(float)(readBeginMS)) ) * (float)(1/24000);
 8000f64:	7dbb      	ldrb	r3, [r7, #22]
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000fb8 <readWheelSpeed+0xc0>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f96:	ee17 3a90 	vmov	r3, s15
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	801a      	strh	r2, [r3, #0]


		*lastReadMS = HAL_GetTick();
 8000fa0:	f000 fb62 	bl	8001668 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
	}
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	00000000 	.word	0x00000000

08000fbc <readBoardTemp>:

void readBoardTemp(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8000fc8:	f000 fb4e 	bl	8001668 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d907      	bls.n	8000fe8 <readBoardTemp+0x2c>
		dataframe->data.boardTemp = 0;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	719a      	strb	r2, [r3, #6]


		//todo: use ads1118, same chip as the shits, to read board temp
		//todo: convert counts to deg.C
		*lastReadMS = HAL_GetTick();
 8000fde:	f000 fb43 	bl	8001668 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	601a      	str	r2, [r3, #0]
	}
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_MspInit+0x44>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <HAL_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6613      	str	r3, [r2, #96]	@ 0x60
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <HAL_MspInit+0x44>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_MspInit+0x44>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <HAL_MspInit+0x44>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	6593      	str	r3, [r2, #88]	@ 0x58
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b09e      	sub	sp, #120	@ 0x78
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2254      	movs	r2, #84	@ 0x54
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f004 fcbd 	bl	80059d8 <memset>
  if(hadc->Instance==ADC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <HAL_ADC_MspInit+0xc0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d143      	bne.n	80010f0 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001068:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800106c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800106e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001072:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800107c:	2308      	movs	r3, #8
 800107e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001080:	2307      	movs	r3, #7
 8001082:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800108c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4618      	mov	r0, r3
 8001098:	f003 f986 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80010a2:	f7ff fe4d 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_ADC_MspInit+0xc4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <HAL_ADC_MspInit+0xc4>)
 80010ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_ADC_MspInit+0xc4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_ADC_MspInit+0xc4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_ADC_MspInit+0xc4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_ADC_MspInit+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010d6:	2302      	movs	r3, #2
 80010d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010da:	230b      	movs	r3, #11
 80010dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f001 fff4 	bl	80030d8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010f0:	bf00      	nop
 80010f2:	3778      	adds	r7, #120	@ 0x78
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	50040000 	.word	0x50040000
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a21      	ldr	r2, [pc, #132]	@ (80011a4 <HAL_CAN_MspInit+0xa4>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d13b      	bne.n	800119a <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <HAL_CAN_MspInit+0xa8>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	4a20      	ldr	r2, [pc, #128]	@ (80011a8 <HAL_CAN_MspInit+0xa8>)
 8001128:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800112c:	6593      	str	r3, [r2, #88]	@ 0x58
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <HAL_CAN_MspInit+0xa8>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <HAL_CAN_MspInit+0xa8>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <HAL_CAN_MspInit+0xa8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_CAN_MspInit+0xa8>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001152:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001164:	2309      	movs	r3, #9
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001172:	f001 ffb1 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001188:	2309      	movs	r3, #9
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f001 ff9f 	bl	80030d8 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40006400 	.word	0x40006400
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09e      	sub	sp, #120	@ 0x78
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	2254      	movs	r2, #84	@ 0x54
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f004 fc03 	bl	80059d8 <memset>
  if(hi2c->Instance==I2C1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <HAL_I2C_MspInit+0xa4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d135      	bne.n	8001248 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011dc:	2340      	movs	r3, #64	@ 0x40
 80011de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 f8dd 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011f4:	f7ff fda4 	bl	8000d40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_I2C_MspInit+0xa8>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <HAL_I2C_MspInit+0xa8>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001204:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <HAL_I2C_MspInit+0xa8>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001210:	23c0      	movs	r3, #192	@ 0xc0
 8001212:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001214:	2312      	movs	r3, #18
 8001216:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001220:	2304      	movs	r3, #4
 8001222:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001228:	4619      	mov	r1, r3
 800122a:	480b      	ldr	r0, [pc, #44]	@ (8001258 <HAL_I2C_MspInit+0xac>)
 800122c:	f001 ff54 	bl	80030d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_I2C_MspInit+0xa8>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <HAL_I2C_MspInit+0xa8>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_I2C_MspInit+0xa8>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001248:	bf00      	nop
 800124a:	3778      	adds	r7, #120	@ 0x78
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40005400 	.word	0x40005400
 8001254:	40021000 	.word	0x40021000
 8001258:	48000400 	.word	0x48000400

0800125c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_SPI_MspInit+0x7c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d128      	bne.n	80012d0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <HAL_SPI_MspInit+0x80>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001282:	4a16      	ldr	r2, [pc, #88]	@ (80012dc <HAL_SPI_MspInit+0x80>)
 8001284:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001288:	6613      	str	r3, [r2, #96]	@ 0x60
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_SPI_MspInit+0x80>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_SPI_MspInit+0x80>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <HAL_SPI_MspInit+0x80>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_SPI_MspInit+0x80>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ae:	23f0      	movs	r3, #240	@ 0xf0
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012be:	2305      	movs	r3, #5
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012cc:	f001 ff04 	bl	80030d8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013000 	.word	0x40013000
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_TIM_Base_MspInit+0x38>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10b      	bne.n	800130a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_TIM_Base_MspInit+0x3c>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_TIM_Base_MspInit+0x3c>)
 80012f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <HAL_TIM_Base_MspInit+0x3c>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40012c00 	.word	0x40012c00
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a2      	sub	sp, #136	@ 0x88
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	2254      	movs	r2, #84	@ 0x54
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f004 fb49 	bl	80059d8 <memset>
  if(huart->Instance==USART1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a59      	ldr	r2, [pc, #356]	@ (80014b0 <HAL_UART_MspInit+0x190>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d158      	bne.n	8001402 <HAL_UART_MspInit+0xe2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001350:	2301      	movs	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001354:	2300      	movs	r3, #0
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4618      	mov	r0, r3
 800135e:	f003 f823 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001368:	f7ff fcea 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800136c:	4b51      	ldr	r3, [pc, #324]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001370:	4a50      	ldr	r2, [pc, #320]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 8001372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001376:	6613      	str	r3, [r2, #96]	@ 0x60
 8001378:	4b4e      	ldr	r3, [pc, #312]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 800137a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	4a4a      	ldr	r2, [pc, #296]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001390:	4b48      	ldr	r3, [pc, #288]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b45      	ldr	r3, [pc, #276]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a0:	4a44      	ldr	r2, [pc, #272]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a8:	4b42      	ldr	r3, [pc, #264]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB3 (JTDO-TRACESWO)     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013b8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c8:	2307      	movs	r3, #7
 80013ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d8:	f001 fe7e 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013dc:	2308      	movs	r3, #8
 80013de:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ee:	2307      	movs	r3, #7
 80013f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013f8:	4619      	mov	r1, r3
 80013fa:	482f      	ldr	r0, [pc, #188]	@ (80014b8 <HAL_UART_MspInit+0x198>)
 80013fc:	f001 fe6c 	bl	80030d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001400:	e051      	b.n	80014a6 <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2d      	ldr	r2, [pc, #180]	@ (80014bc <HAL_UART_MspInit+0x19c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d14c      	bne.n	80014a6 <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001410:	2300      	movs	r3, #0
 8001412:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f002 ffc5 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8001424:	f7ff fc8c 	bl	8000d40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142c:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 800142e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001432:	6593      	str	r3, [r2, #88]	@ 0x58
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_UART_MspInit+0x194>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001458:	2304      	movs	r3, #4
 800145a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146a:	2307      	movs	r3, #7
 800146c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147a:	f001 fe2d 	bl	80030d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001482:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001492:	2303      	movs	r3, #3
 8001494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a2:	f001 fe19 	bl	80030d8 <HAL_GPIO_Init>
}
 80014a6:	bf00      	nop
 80014a8:	3788      	adds	r7, #136	@ 0x88
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40021000 	.word	0x40021000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	40004400 	.word	0x40004400

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f893 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800157c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001548:	f7ff ffea 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	@ (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	@ (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f004 fa39 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001576:	f7ff f8e7 	bl	8000748 <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001588:	08005aa0 	.word	0x08005aa0
  ldr r2, =_sbss
 800158c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001590:	20000338 	.word	0x20000338

08001594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_IRQHandler>

08001596 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f001 fcd5 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f80e 	bl	80015c8 <HAL_InitTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	e001      	b.n	80015bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b8:	f7ff fd1a 	bl	8000ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015d4:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <HAL_InitTick+0x6c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d023      	beq.n	8001624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_InitTick+0x70>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <HAL_InitTick+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fcd3 	bl	8002f9e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d809      	bhi.n	8001618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f001 fcab 	bl	8002f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001610:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_InitTick+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e007      	b.n	8001628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e004      	b.n	8001628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e001      	b.n	8001628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008
 8001664:	20000334 	.word	0x20000334

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000334 	.word	0x20000334

08001680 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3360      	adds	r3, #96	@ 0x60
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <LL_ADC_SetOffset+0x44>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	4313      	orrs	r3, r2
 8001718:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	03fff000 	.word	0x03fff000

08001730 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3360      	adds	r3, #96	@ 0x60
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3360      	adds	r3, #96	@ 0x60
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3330      	adds	r3, #48	@ 0x30
 80017c8:	461a      	mov	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	4413      	add	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	211f      	movs	r1, #31
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	0e9b      	lsrs	r3, r3, #26
 80017f0:	f003 011f 	and.w	r1, r3, #31
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3314      	adds	r3, #20
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	0e5b      	lsrs	r3, r3, #25
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0d1b      	lsrs	r3, r3, #20
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2107      	movs	r1, #7
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	401a      	ands	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	0d1b      	lsrs	r3, r3, #20
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0318 	and.w	r3, r3, #24
 800188a:	4908      	ldr	r1, [pc, #32]	@ (80018ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800188c:	40d9      	lsrs	r1, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	400b      	ands	r3, r1
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	431a      	orrs	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	0007ffff 	.word	0x0007ffff

080018b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6093      	str	r3, [r2, #8]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e8:	d101      	bne.n	80018ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800190c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001910:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001938:	d101      	bne.n	800193e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800195c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <LL_ADC_IsEnabled+0x18>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_ADC_IsEnabled+0x1a>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019ae:	f043 0204 	orr.w	r2, r3, #4
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d101      	bne.n	80019da <LL_ADC_REG_IsConversionOngoing+0x18>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d101      	bne.n	8001a00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e126      	b.n	8001c78 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fafd 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff3f 	bl	80018d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff25 	bl	80018b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff5a 	bl	8001924 <LL_ADC_IsInternalRegulatorEnabled>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d115      	bne.n	8001aa2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff3e 	bl	80018fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a80:	4b7f      	ldr	r3, [pc, #508]	@ (8001c80 <HAL_ADC_Init+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	099b      	lsrs	r3, r3, #6
 8001a86:	4a7f      	ldr	r2, [pc, #508]	@ (8001c84 <HAL_ADC_Init+0x274>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a94:	e002      	b.n	8001a9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f9      	bne.n	8001a96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff3c 	bl	8001924 <LL_ADC_IsInternalRegulatorEnabled>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10d      	bne.n	8001ace <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff75 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001ad8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80bf 	bne.w	8001c66 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80bb 	bne.w	8001c66 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001af8:	f043 0202 	orr.w	r2, r3, #2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff35 	bl	8001974 <LL_ADC_IsEnabled>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b10:	485d      	ldr	r0, [pc, #372]	@ (8001c88 <HAL_ADC_Init+0x278>)
 8001b12:	f7ff ff2f 	bl	8001974 <LL_ADC_IsEnabled>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4619      	mov	r1, r3
 8001b22:	485a      	ldr	r0, [pc, #360]	@ (8001c8c <HAL_ADC_Init+0x27c>)
 8001b24:	f7ff fdac 	bl	8001680 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7e5b      	ldrb	r3, [r3, #25]
 8001b2c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b32:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b38:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b3e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b46:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	045b      	lsls	r3, r3, #17
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d009      	beq.n	8001b80 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b42      	ldr	r3, [pc, #264]	@ (8001c90 <HAL_ADC_Init+0x280>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff25 	bl	80019e8 <LL_ADC_INJ_IsConversionOngoing>
 8001b9e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d13d      	bne.n	8001c22 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d13a      	bne.n	8001c22 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bb8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bc8:	f023 0302 	bic.w	r3, r3, #2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	69b9      	ldr	r1, [r7, #24]
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d118      	bne.n	8001c12 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bf6:	4311      	orrs	r1, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c02:	430a      	orrs	r2, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	e007      	b.n	8001c22 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d10c      	bne.n	8001c44 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	f023 010f 	bic.w	r1, r3, #15
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	1e5a      	subs	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c42:	e007      	b.n	8001c54 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020f 	bic.w	r2, r2, #15
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c58:	f023 0303 	bic.w	r3, r3, #3
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c64:	e007      	b.n	8001c76 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6a:	f043 0210 	orr.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000000 	.word	0x20000000
 8001c84:	053e2d63 	.word	0x053e2d63
 8001c88:	50040000 	.word	0x50040000
 8001c8c:	50040300 	.word	0x50040300
 8001c90:	fff0c007 	.word	0xfff0c007

08001c94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fe8c 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d167      	bne.n	8001d80 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Start_DMA+0x2a>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e063      	b.n	8001d86 <HAL_ADC_Start_DMA+0xf2>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fc68 	bl	800259c <ADC_Enable>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d14f      	bne.n	8001d76 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	f023 0206 	bic.w	r2, r3, #6
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d02:	e002      	b.n	8001d0a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <HAL_ADC_Start_DMA+0xfc>)
 8001d10:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <HAL_ADC_Start_DMA+0x100>)
 8001d18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_ADC_Start_DMA+0x104>)
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	221c      	movs	r2, #28
 8001d28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0210 	orr.w	r2, r2, #16
 8001d40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3340      	adds	r3, #64	@ 0x40
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f001 f928 	bl	8002fb6 <HAL_DMA_Start_IT>
 8001d66:	4603      	mov	r3, r0
 8001d68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe13 	bl	800199a <LL_ADC_REG_StartConversion>
 8001d74:	e006      	b.n	8001d84 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001d7e:	e001      	b.n	8001d84 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
 8001d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	080026a9 	.word	0x080026a9
 8001d94:	08002781 	.word	0x08002781
 8001d98:	0800279d 	.word	0x0800279d

08001d9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b6      	sub	sp, #216	@ 0xd8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x22>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e3bb      	b.n	8002572 <HAL_ADC_ConfigChannel+0x79a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fddb 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 83a0 	bne.w	8002554 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d824      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	3b02      	subs	r3, #2
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d81b      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0x8e>
 8001e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e34 <HAL_ADC_ConfigChannel+0x5c>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e4d 	.word	0x08001e4d
 8001e3c:	08001e55 	.word	0x08001e55
 8001e40:	08001e5d 	.word	0x08001e5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e44:	230c      	movs	r3, #12
 8001e46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e4a:	e010      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e4c:	2312      	movs	r3, #18
 8001e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e52:	e00c      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e54:	2318      	movs	r3, #24
 8001e56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e5a:	e008      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e64:	e003      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e66:	2306      	movs	r3, #6
 8001e68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e7c:	f7ff fc9c 	bl	80017b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fd9c 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fda8 	bl	80019e8 <LL_ADC_INJ_IsConversionOngoing>
 8001e98:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 81a4 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 819f 	bne.w	80021ee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f7ff fca7 	bl	8001810 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00a      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6919      	ldr	r1, [r3, #16]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ef4:	f7ff fbf8 	bl	80016e8 <LL_ADC_SetOffset>
 8001ef8:	e179      	b.n	80021ee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fc15 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x14e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fc0a 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	e01e      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x18c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fbff 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e004      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1a4>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	e018      	b.n	8001fae <HAL_ADC_ConfigChannel+0x1d6>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001f90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e004      	b.n	8001fae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d106      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fbce 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fbb2 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x214>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fba7 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	0e9b      	lsrs	r3, r3, #26
 8001fe6:	f003 021f 	and.w	r2, r3, #31
 8001fea:	e01e      	b.n	800202a <HAL_ADC_ConfigChannel+0x252>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fb9c 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800200a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800200e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e004      	b.n	8002028 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800201e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x26a>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	e018      	b.n	8002074 <HAL_ADC_ConfigChannel+0x29c>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002056:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800205a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800205e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002066:	2320      	movs	r3, #32
 8002068:	e004      	b.n	8002074 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800206a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fb6b 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2102      	movs	r1, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fb4f 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x2da>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2102      	movs	r1, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fb44 	bl	8001730 <LL_ADC_GetOffsetChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	e01e      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x318>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2102      	movs	r1, #2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fb39 	bl	8001730 <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80020d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80020d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e004      	b.n	80020ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80020e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x330>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	e014      	b.n	8002132 <HAL_ADC_ConfigChannel+0x35a>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002116:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800211c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e004      	b.n	8002132 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002128:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002132:	429a      	cmp	r2, r3
 8002134:	d106      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fb0c 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2103      	movs	r1, #3
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff faf0 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x398>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2103      	movs	r1, #3
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fae5 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	f003 021f 	and.w	r2, r3, #31
 800216e:	e017      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x3c8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2103      	movs	r1, #3
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fada 	bl	8001730 <LL_ADC_GetOffsetChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800218a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800218c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e003      	b.n	800219e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x3e0>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	e011      	b.n	80021dc <HAL_ADC_ConfigChannel+0x404>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80021c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80021ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021dc:	429a      	cmp	r2, r3
 80021de:	d106      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	2103      	movs	r1, #3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fab7 	bl	800175c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fbbe 	bl	8001974 <LL_ADC_IsEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 8140 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	461a      	mov	r2, r3
 800220e:	f7ff fb2b 	bl	8001868 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4a8f      	ldr	r2, [pc, #572]	@ (8002454 <HAL_ADC_ConfigChannel+0x67c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f040 8131 	bne.w	8002480 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x46e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	3301      	adds	r3, #1
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b09      	cmp	r3, #9
 800223c:	bf94      	ite	ls
 800223e:	2301      	movls	r3, #1
 8002240:	2300      	movhi	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e019      	b.n	800227a <HAL_ADC_ConfigChannel+0x4a2>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002256:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e003      	b.n	800226a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b09      	cmp	r3, #9
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227a:	2b00      	cmp	r3, #0
 800227c:	d079      	beq.n	8002372 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_ADC_ConfigChannel+0x4c2>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	3301      	adds	r3, #1
 8002292:	069b      	lsls	r3, r3, #26
 8002294:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002298:	e015      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x4ee>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80022a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80022ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80022b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	069b      	lsls	r3, r3, #26
 80022c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x50e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	e017      	b.n	8002316 <HAL_ADC_ConfigChannel+0x53e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80022f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80022f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e003      	b.n	800230a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	ea42 0103 	orr.w	r1, r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x564>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	3301      	adds	r3, #1
 800232e:	f003 021f 	and.w	r2, r3, #31
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	e018      	b.n	800236e <HAL_ADC_ConfigChannel+0x596>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e003      	b.n	8002360 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236e:	430b      	orrs	r3, r1
 8002370:	e081      	b.n	8002476 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_ADC_ConfigChannel+0x5b6>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	3301      	adds	r3, #1
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238c:	e015      	b.n	80023ba <HAL_ADC_ConfigChannel+0x5e2>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e003      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80023aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	069b      	lsls	r3, r3, #26
 80023b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_ADC_ConfigChannel+0x602>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	e017      	b.n	800240a <HAL_ADC_ConfigChannel+0x632>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	61bb      	str	r3, [r7, #24]
  return result;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e003      	b.n	80023fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	ea42 0103 	orr.w	r1, r2, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x65e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	3301      	adds	r3, #1
 8002422:	f003 021f 	and.w	r2, r3, #31
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	3b1e      	subs	r3, #30
 800242e:	051b      	lsls	r3, r3, #20
 8002430:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002434:	e01e      	b.n	8002474 <HAL_ADC_ConfigChannel+0x69c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	60fb      	str	r3, [r7, #12]
  return result;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d104      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e006      	b.n	8002460 <HAL_ADC_ConfigChannel+0x688>
 8002452:	bf00      	nop
 8002454:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	3b1e      	subs	r3, #30
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247a:	4619      	mov	r1, r3
 800247c:	f7ff f9c8 	bl	8001810 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_ADC_ConfigChannel+0x7a4>)
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d06c      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248c:	483c      	ldr	r0, [pc, #240]	@ (8002580 <HAL_ADC_ConfigChannel+0x7a8>)
 800248e:	f7ff f91d 	bl	80016cc <LL_ADC_GetCommonPathInternalCh>
 8002492:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3a      	ldr	r2, [pc, #232]	@ (8002584 <HAL_ADC_ConfigChannel+0x7ac>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d127      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d121      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a35      	ldr	r2, [pc, #212]	@ (8002588 <HAL_ADC_ConfigChannel+0x7b0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d157      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024be:	4619      	mov	r1, r3
 80024c0:	482f      	ldr	r0, [pc, #188]	@ (8002580 <HAL_ADC_ConfigChannel+0x7a8>)
 80024c2:	f7ff f8f0 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c6:	4b31      	ldr	r3, [pc, #196]	@ (800258c <HAL_ADC_ConfigChannel+0x7b4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	4a30      	ldr	r2, [pc, #192]	@ (8002590 <HAL_ADC_ConfigChannel+0x7b8>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ee:	e03a      	b.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <HAL_ADC_ConfigChannel+0x7bc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d113      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1f      	ldr	r2, [pc, #124]	@ (8002588 <HAL_ADC_ConfigChannel+0x7b0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d12a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002514:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002518:	4619      	mov	r1, r3
 800251a:	4819      	ldr	r0, [pc, #100]	@ (8002580 <HAL_ADC_ConfigChannel+0x7a8>)
 800251c:	f7ff f8c3 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002520:	e021      	b.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_ADC_ConfigChannel+0x7c0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d11c      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800252c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d116      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <HAL_ADC_ConfigChannel+0x7b0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d111      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002546:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800254a:	4619      	mov	r1, r3
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <HAL_ADC_ConfigChannel+0x7a8>)
 800254e:	f7ff f8aa 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
 8002552:	e008      	b.n	8002566 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800256e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002572:	4618      	mov	r0, r3
 8002574:	37d8      	adds	r7, #216	@ 0xd8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	80080000 	.word	0x80080000
 8002580:	50040300 	.word	0x50040300
 8002584:	c7520000 	.word	0xc7520000
 8002588:	50040000 	.word	0x50040000
 800258c:	20000000 	.word	0x20000000
 8002590:	053e2d63 	.word	0x053e2d63
 8002594:	cb840000 	.word	0xcb840000
 8002598:	80000001 	.word	0x80000001

0800259c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff f9e1 	bl	8001974 <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d169      	bne.n	800268c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	4b36      	ldr	r3, [pc, #216]	@ (8002698 <ADC_Enable+0xfc>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e055      	b.n	800268e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f9b0 	bl	800194c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025ec:	482b      	ldr	r0, [pc, #172]	@ (800269c <ADC_Enable+0x100>)
 80025ee:	f7ff f86d 	bl	80016cc <LL_ADC_GetCommonPathInternalCh>
 80025f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025fc:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <ADC_Enable+0x104>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <ADC_Enable+0x108>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002616:	e002      	b.n	800261e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3b01      	subs	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002624:	f7ff f820 	bl	8001668 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800262a:	e028      	b.n	800267e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f99f 	bl	8001974 <LL_ADC_IsEnabled>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d104      	bne.n	8002646 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff f983 	bl	800194c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002646:	f7ff f80f 	bl	8001668 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d914      	bls.n	800267e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00d      	beq.n	800267e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d1cf      	bne.n	800262c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	8000003f 	.word	0x8000003f
 800269c:	50040300 	.word	0x50040300
 80026a0:	20000000 	.word	0x20000000
 80026a4:	053e2d63 	.word	0x053e2d63

080026a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d14b      	bne.n	800275a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d021      	beq.n	8002720 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f856 	bl	8001792 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d032      	beq.n	8002752 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d12b      	bne.n	8002752 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11f      	bne.n	8002752 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54
 800271e:	e018      	b.n	8002752 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d111      	bne.n	8002752 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002732:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fb22 	bl	8001d9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002758:	e00e      	b.n	8002778 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff fb2c 	bl	8001dc4 <HAL_ADC_ErrorCallback>
}
 800276c:	e004      	b.n	8002778 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fb0e 	bl	8001db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f043 0204 	orr.w	r2, r3, #4
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff fafe 	bl	8001dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0ed      	b.n	80029be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fc86 	bl	8001100 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002804:	f7fe ff30 	bl	8001668 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800280a:	e012      	b.n	8002832 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800280c:	f7fe ff2c 	bl	8001668 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b0a      	cmp	r3, #10
 8002818:	d90b      	bls.n	8002832 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2205      	movs	r2, #5
 800282a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0c5      	b.n	80029be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0e5      	beq.n	800280c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0202 	bic.w	r2, r2, #2
 800284e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002850:	f7fe ff0a 	bl	8001668 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002856:	e012      	b.n	800287e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002858:	f7fe ff06 	bl	8001668 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b0a      	cmp	r3, #10
 8002864:	d90b      	bls.n	800287e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2205      	movs	r2, #5
 8002876:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e09f      	b.n	80029be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d108      	bne.n	80028a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e007      	b.n	80028b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7e5b      	ldrb	r3, [r3, #25]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e007      	b.n	80028e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7e9b      	ldrb	r3, [r3, #26]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d108      	bne.n	80028fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e007      	b.n	800290a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0220 	bic.w	r2, r2, #32
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7edb      	ldrb	r3, [r3, #27]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d108      	bne.n	8002924 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0210 	bic.w	r2, r2, #16
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e007      	b.n	8002934 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0210 	orr.w	r2, r2, #16
 8002932:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7f1b      	ldrb	r3, [r3, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d108      	bne.n	800294e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0208 	orr.w	r2, r2, #8
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e007      	b.n	800295e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7f5b      	ldrb	r3, [r3, #29]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d108      	bne.n	8002978 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0204 	orr.w	r2, r2, #4
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e007      	b.n	8002988 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	ea42 0103 	orr.w	r1, r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029dc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d003      	beq.n	80029ec <HAL_CAN_ConfigFilter+0x26>
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f040 80aa 	bne.w	8002b40 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2201      	movs	r2, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d123      	bne.n	8002a6e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	401a      	ands	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3248      	adds	r2, #72	@ 0x48
 8002a4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a64:	6979      	ldr	r1, [r7, #20]
 8002a66:	3348      	adds	r3, #72	@ 0x48
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d122      	bne.n	8002abc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3248      	adds	r2, #72	@ 0x48
 8002a9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ab0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ab2:	6979      	ldr	r1, [r7, #20]
 8002ab4:	3348      	adds	r3, #72	@ 0x48
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002ad6:	e007      	b.n	8002ae8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002b02:	e007      	b.n	8002b14 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b32:	f023 0201 	bic.w	r2, r3, #1
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e006      	b.n	8002b4e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d12e      	bne.n	8002bcc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b86:	f7fe fd6f 	bl	8001668 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b8c:	e012      	b.n	8002bb4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b8e:	f7fe fd6b 	bl	8001668 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b0a      	cmp	r3, #10
 8002b9a:	d90b      	bls.n	8002bb4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2205      	movs	r2, #5
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e012      	b.n	8002bda <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e5      	bne.n	8002b8e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e006      	b.n	8002bda <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b089      	sub	sp, #36	@ 0x24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d003      	beq.n	8002c0e <HAL_CAN_AddTxMessage+0x2c>
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	f040 80ad 	bne.w	8002d68 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8095 	beq.w	8002d58 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	0e1b      	lsrs	r3, r3, #24
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c54:	68f9      	ldr	r1, [r7, #12]
 8002c56:	6809      	ldr	r1, [r1, #0]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	440b      	add	r3, r1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e00f      	b.n	8002c86 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c70:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c7a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3318      	adds	r3, #24
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	440b      	add	r3, r1
 8002c84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3318      	adds	r3, #24
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	440b      	add	r3, r1
 8002c96:	3304      	adds	r3, #4
 8002c98:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	7d1b      	ldrb	r3, [r3, #20]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d111      	bne.n	8002cc6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3318      	adds	r3, #24
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	4413      	add	r3, r2
 8002cae:	3304      	adds	r3, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	6811      	ldr	r1, [r2, #0]
 8002cb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3318      	adds	r3, #24
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3307      	adds	r3, #7
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	061a      	lsls	r2, r3, #24
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3306      	adds	r3, #6
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3305      	adds	r3, #5
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	3204      	adds	r2, #4
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	4610      	mov	r0, r2
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6811      	ldr	r1, [r2, #0]
 8002cee:	ea43 0200 	orr.w	r2, r3, r0
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002cfc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3303      	adds	r3, #3
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	061a      	lsls	r2, r3, #24
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3301      	adds	r3, #1
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	4610      	mov	r0, r2
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	6811      	ldr	r1, [r2, #0]
 8002d24:	ea43 0200 	orr.w	r2, r3, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002d32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	4413      	add	r3, r2
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6811      	ldr	r1, [r2, #0]
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3318      	adds	r3, #24
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	440b      	add	r3, r1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e00e      	b.n	8002d76 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e006      	b.n	8002d76 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d94:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d96:	7afb      	ldrb	r3, [r7, #11]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d002      	beq.n	8002da2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d11d      	bne.n	8002dde <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3301      	adds	r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60d3      	str	r3, [r2, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <__NVIC_GetPriorityGrouping+0x18>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f003 0307 	and.w	r3, r3, #7
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db0a      	blt.n	8002e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	490c      	ldr	r1, [pc, #48]	@ (8002e9c <__NVIC_SetPriority+0x4c>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e78:	e00a      	b.n	8002e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4908      	ldr	r1, [pc, #32]	@ (8002ea0 <__NVIC_SetPriority+0x50>)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3b04      	subs	r3, #4
 8002e88:	0112      	lsls	r2, r2, #4
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	761a      	strb	r2, [r3, #24]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000e100 	.word	0xe000e100
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf28      	it	cs
 8002ec2:	2304      	movcs	r3, #4
 8002ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d902      	bls.n	8002ed4 <NVIC_EncodePriority+0x30>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b03      	subs	r3, #3
 8002ed2:	e000      	b.n	8002ed6 <NVIC_EncodePriority+0x32>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43d9      	mvns	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	4313      	orrs	r3, r2
         );
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3724      	adds	r7, #36	@ 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f1c:	d301      	bcc.n	8002f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00f      	b.n	8002f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <SysTick_Config+0x40>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f7ff ff8e 	bl	8002e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <SysTick_Config+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3a:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <SysTick_Config+0x40>)
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000e010 	.word	0xe000e010

08002f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff47 	bl	8002dec <__NVIC_SetPriorityGrouping>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f78:	f7ff ff5c 	bl	8002e34 <__NVIC_GetPriorityGrouping>
 8002f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff8e 	bl	8002ea4 <NVIC_EncodePriority>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff5d 	bl	8002e50 <__NVIC_SetPriority>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffb0 	bl	8002f0c <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Start_IT+0x20>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e04b      	b.n	800306e <HAL_DMA_Start_IT+0xb8>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d13a      	bne.n	8003060 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f831 	bl	8003076 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 020e 	orr.w	r2, r2, #14
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e00f      	b.n	800304e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0204 	bic.w	r2, r2, #4
 800303c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 020a 	orr.w	r2, r2, #10
 800304c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e005      	b.n	800306c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003068:	2302      	movs	r3, #2
 800306a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003088:	f003 021c 	and.w	r2, r3, #28
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d108      	bne.n	80030ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030b8:	e007      	b.n	80030ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	60da      	str	r2, [r3, #12]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e148      	b.n	800337a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 813a 	beq.w	8003374 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d005      	beq.n	8003118 <HAL_GPIO_Init+0x40>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d130      	bne.n	800317a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800314e:	2201      	movs	r2, #1
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f003 0201 	and.w	r2, r3, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b03      	cmp	r3, #3
 8003184:	d017      	beq.n	80031b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d123      	bne.n	800320a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	6939      	ldr	r1, [r7, #16]
 8003206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0203 	and.w	r2, r3, #3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8094 	beq.w	8003374 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324c:	4b52      	ldr	r3, [pc, #328]	@ (8003398 <HAL_GPIO_Init+0x2c0>)
 800324e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003250:	4a51      	ldr	r2, [pc, #324]	@ (8003398 <HAL_GPIO_Init+0x2c0>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6613      	str	r3, [r2, #96]	@ 0x60
 8003258:	4b4f      	ldr	r3, [pc, #316]	@ (8003398 <HAL_GPIO_Init+0x2c0>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003264:	4a4d      	ldr	r2, [pc, #308]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800328e:	d00d      	beq.n	80032ac <HAL_GPIO_Init+0x1d4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a43      	ldr	r2, [pc, #268]	@ (80033a0 <HAL_GPIO_Init+0x2c8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <HAL_GPIO_Init+0x1d0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a42      	ldr	r2, [pc, #264]	@ (80033a4 <HAL_GPIO_Init+0x2cc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_GPIO_Init+0x1cc>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e004      	b.n	80032ae <HAL_GPIO_Init+0x1d6>
 80032a4:	2307      	movs	r3, #7
 80032a6:	e002      	b.n	80032ae <HAL_GPIO_Init+0x1d6>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_GPIO_Init+0x1d6>
 80032ac:	2300      	movs	r3, #0
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	4093      	lsls	r3, r2
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032be:	4937      	ldr	r1, [pc, #220]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032cc:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032f0:	4a2d      	ldr	r2, [pc, #180]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032f6:	4b2c      	ldr	r3, [pc, #176]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800331a:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003320:	4b21      	ldr	r3, [pc, #132]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003344:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800334a:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800336e:	4a0e      	ldr	r2, [pc, #56]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f aeaf 	bne.w	80030e8 <HAL_GPIO_Init+0x10>
  }
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40021000 	.word	0x40021000
 800339c:	40010000 	.word	0x40010000
 80033a0:	48000400 	.word	0x48000400
 80033a4:	48000800 	.word	0x48000800
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e001      	b.n	80033ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e08d      	b.n	800353a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd feba 	bl	80011ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800345c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e006      	b.n	8003494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d108      	bne.n	80034ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	e007      	b.n	80034be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69d9      	ldr	r1, [r3, #28]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	d138      	bne.n	80035ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003562:	2302      	movs	r3, #2
 8003564:	e032      	b.n	80035cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2224      	movs	r2, #36	@ 0x24
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003594:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d139      	bne.n	8003662 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e033      	b.n	8003664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800362a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e000      	b.n	8003664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <HAL_PWREx_GetVoltageRange+0x18>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40007000 	.word	0x40007000

0800368c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369a:	d130      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800369c:	4b23      	ldr	r3, [pc, #140]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a8:	d038      	beq.n	800371c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036aa:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036b2:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2232      	movs	r2, #50	@ 0x32
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0c9b      	lsrs	r3, r3, #18
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d0:	e002      	b.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d8:	4b14      	ldr	r3, [pc, #80]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e4:	d102      	bne.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f2      	bne.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ec:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f8:	d110      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e00f      	b.n	800371e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370a:	d007      	beq.n	800371c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800370c:	4b07      	ldr	r3, [pc, #28]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003714:	4a05      	ldr	r2, [pc, #20]	@ (800372c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800371a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40007000 	.word	0x40007000
 8003730:	20000000 	.word	0x20000000
 8003734:	431bde83 	.word	0x431bde83

08003738 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f000 bc02 	b.w	8003f50 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374c:	4b96      	ldr	r3, [pc, #600]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003756:	4b94      	ldr	r3, [pc, #592]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80e4 	beq.w	8003936 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_RCC_OscConfig+0x4c>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	f040 808b 	bne.w	8003892 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b01      	cmp	r3, #1
 8003780:	f040 8087 	bne.w	8003892 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003784:	4b88      	ldr	r3, [pc, #544]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_OscConfig+0x64>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e3d9      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	4b81      	ldr	r3, [pc, #516]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_RCC_OscConfig+0x7e>
 80037ac:	4b7e      	ldr	r3, [pc, #504]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b4:	e005      	b.n	80037c2 <HAL_RCC_OscConfig+0x8a>
 80037b6:	4b7c      	ldr	r3, [pc, #496]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d223      	bcs.n	800380e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fd8c 	bl	80042e8 <RCC_SetFlashLatencyFromMSIRange>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e3ba      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037da:	4b73      	ldr	r3, [pc, #460]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a72      	ldr	r2, [pc, #456]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b70      	ldr	r3, [pc, #448]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	496d      	ldr	r1, [pc, #436]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f8:	4b6b      	ldr	r3, [pc, #428]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	4968      	ldr	r1, [pc, #416]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
 800380c:	e025      	b.n	800385a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380e:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b63      	ldr	r3, [pc, #396]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4960      	ldr	r1, [pc, #384]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800382c:	4b5e      	ldr	r3, [pc, #376]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	495b      	ldr	r1, [pc, #364]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fd4c 	bl	80042e8 <RCC_SetFlashLatencyFromMSIRange>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e37a      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800385a:	f000 fc81 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800385e:	4602      	mov	r2, r0
 8003860:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	4950      	ldr	r1, [pc, #320]	@ (80039ac <HAL_RCC_OscConfig+0x274>)
 800386c:	5ccb      	ldrb	r3, [r1, r3]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a4e      	ldr	r2, [pc, #312]	@ (80039b0 <HAL_RCC_OscConfig+0x278>)
 8003878:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800387a:	4b4e      	ldr	r3, [pc, #312]	@ (80039b4 <HAL_RCC_OscConfig+0x27c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fea2 	bl	80015c8 <HAL_InitTick>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d052      	beq.n	8003934 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	e35e      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d032      	beq.n	8003900 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800389a:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a42      	ldr	r2, [pc, #264]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fedf 	bl	8001668 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ae:	f7fd fedb 	bl	8001668 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e347      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c0:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038cc:	4b36      	ldr	r3, [pc, #216]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a35      	ldr	r2, [pc, #212]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b33      	ldr	r3, [pc, #204]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4930      	ldr	r1, [pc, #192]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ea:	4b2f      	ldr	r3, [pc, #188]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	492b      	ldr	r1, [pc, #172]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	604b      	str	r3, [r1, #4]
 80038fe:	e01a      	b.n	8003936 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003900:	4b29      	ldr	r3, [pc, #164]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800390c:	f7fd feac 	bl	8001668 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003914:	f7fd fea8 	bl	8001668 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e314      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003926:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x1dc>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d073      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d005      	beq.n	8003954 <HAL_RCC_OscConfig+0x21c>
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	d10e      	bne.n	800396c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d10b      	bne.n	800396c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d063      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2f0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d15f      	bne.n	8003a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e2f1      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d106      	bne.n	8003984 <HAL_RCC_OscConfig+0x24c>
 8003976:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a0b      	ldr	r2, [pc, #44]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e025      	b.n	80039d0 <HAL_RCC_OscConfig+0x298>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800398c:	d114      	bne.n	80039b8 <HAL_RCC_OscConfig+0x280>
 800398e:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a05      	ldr	r2, [pc, #20]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a02      	ldr	r2, [pc, #8]	@ (80039a8 <HAL_RCC_OscConfig+0x270>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e013      	b.n	80039d0 <HAL_RCC_OscConfig+0x298>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08005a48 	.word	0x08005a48
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004
 80039b8:	4ba0      	ldr	r3, [pc, #640]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a9f      	ldr	r2, [pc, #636]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b9d      	ldr	r3, [pc, #628]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a9c      	ldr	r2, [pc, #624]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fe46 	bl	8001668 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fd fe42 	bl	8001668 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	@ 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e2ae      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f2:	4b92      	ldr	r3, [pc, #584]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2a8>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fe32 	bl	8001668 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fd fe2e 	bl	8001668 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e29a      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1a:	4b88      	ldr	r3, [pc, #544]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2d0>
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d060      	beq.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_OscConfig+0x310>
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d119      	bne.n	8003a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d116      	bne.n	8003a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a48:	4b7c      	ldr	r3, [pc, #496]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_OscConfig+0x328>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e277      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b76      	ldr	r3, [pc, #472]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	4973      	ldr	r1, [pc, #460]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a74:	e040      	b.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d023      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6e      	ldr	r2, [pc, #440]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fd fded 	bl	8001668 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fd fde9 	bl	8001668 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e255      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa4:	4b65      	ldr	r3, [pc, #404]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b62      	ldr	r3, [pc, #392]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	495f      	ldr	r1, [pc, #380]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	e018      	b.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a5c      	ldr	r2, [pc, #368]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fdc9 	bl	8001668 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fd fdc5 	bl	8001668 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e231      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aec:	4b53      	ldr	r3, [pc, #332]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d03c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b12:	4a4a      	ldr	r2, [pc, #296]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fd fda4 	bl	8001668 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b24:	f7fd fda0 	bl	8001668 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e20c      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b36:	4b41      	ldr	r3, [pc, #260]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ef      	beq.n	8003b24 <HAL_RCC_OscConfig+0x3ec>
 8003b44:	e01b      	b.n	8003b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b46:	4b3d      	ldr	r3, [pc, #244]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fd fd87 	bl	8001668 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fd fd83 	bl	8001668 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1ef      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b70:	4b32      	ldr	r3, [pc, #200]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ef      	bne.n	8003b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80a6 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b90:	4b2a      	ldr	r3, [pc, #168]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b27      	ldr	r3, [pc, #156]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	4a26      	ldr	r2, [pc, #152]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ba8:	4b24      	ldr	r3, [pc, #144]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb8:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d118      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fd4a 	bl	8001668 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fd fd46 	bl	8001668 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1b2      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bea:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <HAL_RCC_OscConfig+0x508>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCC_OscConfig+0x4d8>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c0e:	e029      	b.n	8003c64 <HAL_RCC_OscConfig+0x52c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d115      	bne.n	8003c44 <HAL_RCC_OscConfig+0x50c>
 8003c18:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	4a07      	ldr	r2, [pc, #28]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	4a03      	ldr	r2, [pc, #12]	@ (8003c3c <HAL_RCC_OscConfig+0x504>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c38:	e014      	b.n	8003c64 <HAL_RCC_OscConfig+0x52c>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40007000 	.word	0x40007000
 8003c44:	4b9a      	ldr	r3, [pc, #616]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	4a99      	ldr	r2, [pc, #612]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c54:	4b96      	ldr	r3, [pc, #600]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a95      	ldr	r2, [pc, #596]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d016      	beq.n	8003c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fcfc 	bl	8001668 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fd fcf8 	bl	8001668 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e162      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8a:	4b89      	ldr	r3, [pc, #548]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ed      	beq.n	8003c74 <HAL_RCC_OscConfig+0x53c>
 8003c98:	e015      	b.n	8003cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fce5 	bl	8001668 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fd fce1 	bl	8001668 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e14b      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ed      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b78      	ldr	r3, [pc, #480]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	4a77      	ldr	r2, [pc, #476]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d03c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cec:	4b70      	ldr	r3, [pc, #448]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd fcb4 	bl	8001668 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d04:	f7fd fcb0 	bl	8001668 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e11c      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d16:	4b66      	ldr	r3, [pc, #408]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCC_OscConfig+0x5cc>
 8003d24:	e01b      	b.n	8003d5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d26:	4b62      	ldr	r3, [pc, #392]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d2c:	4a60      	ldr	r2, [pc, #384]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fd fc97 	bl	8001668 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d3e:	f7fd fc93 	bl	8001668 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e0ff      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d50:	4b57      	ldr	r3, [pc, #348]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ef      	bne.n	8003d3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80f3 	beq.w	8003f4e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f040 80c9 	bne.w	8003f04 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d72:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0203 	and.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d12c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	3b01      	subs	r3, #1
 8003d92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d123      	bne.n	8003de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d11b      	bne.n	8003de0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d113      	bne.n	8003de0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d109      	bne.n	8003de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d06b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d062      	beq.n	8003eac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003de6:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0ac      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003df6:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003dfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e02:	f7fd fc31 	bl	8001668 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7fd fc2d 	bl	8001668 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e099      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e28:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_RCC_OscConfig+0x77c>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e4a:	0852      	lsrs	r2, r2, #1
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	0552      	lsls	r2, r2, #21
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e56:	0852      	lsrs	r2, r2, #1
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0652      	lsls	r2, r2, #25
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e62:	06d2      	lsls	r2, r2, #27
 8003e64:	430a      	orrs	r2, r1
 8003e66:	4912      	ldr	r1, [pc, #72]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e6c:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0f      	ldr	r2, [pc, #60]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e78:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e84:	f7fd fbf0 	bl	8001668 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd fbec 	bl	8001668 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e058      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9e:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <HAL_RCC_OscConfig+0x778>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eaa:	e050      	b.n	8003f4e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e04f      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb8:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d144      	bne.n	8003f4e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ece:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ed0:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a20      	ldr	r2, [pc, #128]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003edc:	f7fd fbc4 	bl	8001668 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd fbc0 	bl	8001668 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e02c      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef6:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x7ac>
 8003f02:	e024      	b.n	8003f4e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d01f      	beq.n	8003f4a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003f10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fba7 	bl	8001668 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd fba3 	bl	8001668 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e00f      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f30:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	4905      	ldr	r1, [pc, #20]	@ (8003f58 <HAL_RCC_OscConfig+0x820>)
 8003f42:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_RCC_OscConfig+0x824>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
 8003f48:	e001      	b.n	8003f4e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	feeefffc 	.word	0xfeeefffc

08003f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0e7      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b75      	ldr	r3, [pc, #468]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d910      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b72      	ldr	r3, [pc, #456]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 0207 	bic.w	r2, r3, #7
 8003f8a:	4970      	ldr	r1, [pc, #448]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b6e      	ldr	r3, [pc, #440]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0cf      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	4b66      	ldr	r3, [pc, #408]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d908      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b63      	ldr	r3, [pc, #396]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4960      	ldr	r1, [pc, #384]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d04c      	beq.n	8004078 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d121      	bne.n	8004036 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e0a6      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffe:	4b54      	ldr	r3, [pc, #336]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d115      	bne.n	8004036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e09a      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004016:	4b4e      	ldr	r3, [pc, #312]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e08e      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004026:	4b4a      	ldr	r3, [pc, #296]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e086      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4943      	ldr	r1, [pc, #268]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004048:	f7fd fb0e 	bl	8001668 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fd fb0a 	bl	8001668 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e06e      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b3a      	ldr	r3, [pc, #232]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d010      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4b31      	ldr	r3, [pc, #196]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004090:	429a      	cmp	r2, r3
 8004092:	d208      	bcs.n	80040a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004094:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	492b      	ldr	r1, [pc, #172]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a6:	4b29      	ldr	r3, [pc, #164]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d210      	bcs.n	80040d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b4:	4b25      	ldr	r3, [pc, #148]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f023 0207 	bic.w	r2, r3, #7
 80040bc:	4923      	ldr	r1, [pc, #140]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c4:	4b21      	ldr	r3, [pc, #132]	@ (800414c <HAL_RCC_ClockConfig+0x1ec>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e036      	b.n	8004144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4918      	ldr	r1, [pc, #96]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004100:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4910      	ldr	r1, [pc, #64]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004114:	f000 f824 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <HAL_RCC_ClockConfig+0x1f0>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	490b      	ldr	r1, [pc, #44]	@ (8004154 <HAL_RCC_ClockConfig+0x1f4>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
 8004130:	4a09      	ldr	r2, [pc, #36]	@ (8004158 <HAL_RCC_ClockConfig+0x1f8>)
 8004132:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004134:	4b09      	ldr	r3, [pc, #36]	@ (800415c <HAL_RCC_ClockConfig+0x1fc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fd fa45 	bl	80015c8 <HAL_InitTick>
 800413e:	4603      	mov	r3, r0
 8004140:	72fb      	strb	r3, [r7, #11]

  return status;
 8004142:	7afb      	ldrb	r3, [r7, #11]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40022000 	.word	0x40022000
 8004150:	40021000 	.word	0x40021000
 8004154:	08005a48 	.word	0x08005a48
 8004158:	20000000 	.word	0x20000000
 800415c:	20000004 	.word	0x20000004

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	@ 0x24
 8004164:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416e:	4b3e      	ldr	r3, [pc, #248]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004178:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x34>
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d121      	bne.n	80041d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d11e      	bne.n	80041d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004194:	4b34      	ldr	r3, [pc, #208]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041a0:	4b31      	ldr	r3, [pc, #196]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e005      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041bc:	4a2b      	ldr	r2, [pc, #172]	@ (800426c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d102      	bne.n	80041de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041d8:	4b25      	ldr	r3, [pc, #148]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x110>)
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e004      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041e4:	4b23      	ldr	r3, [pc, #140]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x114>)
 80041e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d134      	bne.n	8004258 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0xa6>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d003      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0xac>
 8004204:	e005      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004206:	4b1a      	ldr	r3, [pc, #104]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x110>)
 8004208:	617b      	str	r3, [r7, #20]
      break;
 800420a:	e005      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800420c:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x114>)
 800420e:	617b      	str	r3, [r7, #20]
      break;
 8004210:	e002      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	617b      	str	r3, [r7, #20]
      break;
 8004216:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004218:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	3301      	adds	r3, #1
 8004224:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004226:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	fb03 f202 	mul.w	r2, r3, r2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800423e:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x108>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	0e5b      	lsrs	r3, r3, #25
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	3301      	adds	r3, #1
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004258:	69bb      	ldr	r3, [r7, #24]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3724      	adds	r7, #36	@ 0x24
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	08005a60 	.word	0x08005a60
 8004270:	00f42400 	.word	0x00f42400
 8004274:	007a1200 	.word	0x007a1200

08004278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800427c:	4b03      	ldr	r3, [pc, #12]	@ (800428c <HAL_RCC_GetHCLKFreq+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000000 	.word	0x20000000

08004290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004294:	f7ff fff0 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4904      	ldr	r1, [pc, #16]	@ (80042b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08005a58 	.word	0x08005a58

080042bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042c0:	f7ff ffda 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0adb      	lsrs	r3, r3, #11
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4904      	ldr	r1, [pc, #16]	@ (80042e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000
 80042e4:	08005a58 	.word	0x08005a58

080042e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042f4:	4b2a      	ldr	r3, [pc, #168]	@ (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004300:	f7ff f9b6 	bl	8003670 <HAL_PWREx_GetVoltageRange>
 8004304:	6178      	str	r0, [r7, #20]
 8004306:	e014      	b.n	8004332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	4b25      	ldr	r3, [pc, #148]	@ (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430c:	4a24      	ldr	r2, [pc, #144]	@ (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004312:	6593      	str	r3, [r2, #88]	@ 0x58
 8004314:	4b22      	ldr	r3, [pc, #136]	@ (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004320:	f7ff f9a6 	bl	8003670 <HAL_PWREx_GetVoltageRange>
 8004324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b1e      	ldr	r3, [pc, #120]	@ (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	4a1d      	ldr	r2, [pc, #116]	@ (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004338:	d10b      	bne.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b80      	cmp	r3, #128	@ 0x80
 800433e:	d919      	bls.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2ba0      	cmp	r3, #160	@ 0xa0
 8004344:	d902      	bls.n	800434c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004346:	2302      	movs	r3, #2
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e013      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800434c:	2301      	movs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e010      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b80      	cmp	r3, #128	@ 0x80
 8004356:	d902      	bls.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004358:	2303      	movs	r3, #3
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e00a      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b80      	cmp	r3, #128	@ 0x80
 8004362:	d102      	bne.n	800436a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004364:	2302      	movs	r3, #2
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	e004      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b70      	cmp	r3, #112	@ 0x70
 800436e:	d101      	bne.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004370:	2301      	movs	r3, #1
 8004372:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004374:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 0207 	bic.w	r2, r3, #7
 800437c:	4909      	ldr	r1, [pc, #36]	@ (80043a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004384:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	429a      	cmp	r2, r3
 8004390:	d001      	beq.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40022000 	.word	0x40022000

080043a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043b0:	2300      	movs	r3, #0
 80043b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043b4:	2300      	movs	r3, #0
 80043b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d031      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043cc:	d01a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043d2:	d814      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043dc:	d10f      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043de:	4b5d      	ldr	r3, [pc, #372]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ea:	e00c      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f9ce 	bl	8004794 <RCCEx_PLLSAI1_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	74fb      	strb	r3, [r7, #19]
      break;
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800440c:	4b51      	ldr	r3, [pc, #324]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	494e      	ldr	r1, [pc, #312]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004422:	e001      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 809e 	beq.w	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800443a:	4b46      	ldr	r3, [pc, #280]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00d      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004450:	4b40      	ldr	r3, [pc, #256]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	4a3f      	ldr	r2, [pc, #252]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445a:	6593      	str	r3, [r2, #88]	@ 0x58
 800445c:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004468:	2301      	movs	r3, #1
 800446a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446c:	4b3a      	ldr	r3, [pc, #232]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a39      	ldr	r2, [pc, #228]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004476:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004478:	f7fd f8f6 	bl	8001668 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800447e:	e009      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004480:	f7fd f8f2 	bl	8001668 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d902      	bls.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	74fb      	strb	r3, [r7, #19]
        break;
 8004492:	e005      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004494:	4b30      	ldr	r3, [pc, #192]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ef      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d15a      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01e      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d019      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044c2:	4b24      	ldr	r3, [pc, #144]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ce:	4b21      	ldr	r3, [pc, #132]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044de:	4b1d      	ldr	r3, [pc, #116]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ee:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d016      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd f8b2 	bl	8001668 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004506:	e00b      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fd f8ae 	bl	8001668 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d902      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	74fb      	strb	r3, [r7, #19]
            break;
 800451e:	e006      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ec      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004534:	4b07      	ldr	r3, [pc, #28]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004542:	4904      	ldr	r1, [pc, #16]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800454a:	e009      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004560:	7c7b      	ldrb	r3, [r7, #17]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b8a      	ldr	r3, [pc, #552]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	4a89      	ldr	r2, [pc, #548]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800457e:	4b84      	ldr	r3, [pc, #528]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	f023 0203 	bic.w	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4980      	ldr	r1, [pc, #512]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	f023 020c 	bic.w	r2, r3, #12
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	4978      	ldr	r1, [pc, #480]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c2:	4b73      	ldr	r3, [pc, #460]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d0:	496f      	ldr	r1, [pc, #444]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f2:	4967      	ldr	r1, [pc, #412]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004606:	4b62      	ldr	r3, [pc, #392]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	495e      	ldr	r1, [pc, #376]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004628:	4b59      	ldr	r3, [pc, #356]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	4956      	ldr	r1, [pc, #344]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800464a:	4b51      	ldr	r3, [pc, #324]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	494d      	ldr	r1, [pc, #308]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d028      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800466c:	4b48      	ldr	r3, [pc, #288]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	4945      	ldr	r1, [pc, #276]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800468a:	d106      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b40      	ldr	r3, [pc, #256]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a3f      	ldr	r2, [pc, #252]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004696:	60d3      	str	r3, [r2, #12]
 8004698:	e011      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046a2:	d10c      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f872 	bl	8004794 <RCCEx_PLLSAI1_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d028      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046ca:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d8:	492d      	ldr	r1, [pc, #180]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e8:	d106      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ea:	4b29      	ldr	r3, [pc, #164]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	4a28      	ldr	r2, [pc, #160]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046f4:	60d3      	str	r3, [r2, #12]
 80046f6:	e011      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004700:	d10c      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3304      	adds	r3, #4
 8004706:	2101      	movs	r1, #1
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f843 	bl	8004794 <RCCEx_PLLSAI1_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01c      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004736:	4916      	ldr	r1, [pc, #88]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004746:	d10c      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	2102      	movs	r1, #2
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f820 	bl	8004794 <RCCEx_PLLSAI1_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800476e:	4b08      	ldr	r3, [pc, #32]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004774:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477c:	4904      	ldr	r1, [pc, #16]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004784:	7cbb      	ldrb	r3, [r7, #18]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047a2:	4b74      	ldr	r3, [pc, #464]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d018      	beq.n	80047e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ae:	4b71      	ldr	r3, [pc, #452]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d10d      	bne.n	80047da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
       ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047c6:	4b6b      	ldr	r3, [pc, #428]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
       ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d047      	beq.n	800486a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e044      	b.n	800486a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d018      	beq.n	800481a <RCCEx_PLLSAI1_Config+0x86>
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d825      	bhi.n	8004838 <RCCEx_PLLSAI1_Config+0xa4>
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d002      	beq.n	80047f6 <RCCEx_PLLSAI1_Config+0x62>
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d009      	beq.n	8004808 <RCCEx_PLLSAI1_Config+0x74>
 80047f4:	e020      	b.n	8004838 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11d      	bne.n	800483e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004806:	e01a      	b.n	800483e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004808:	4b5a      	ldr	r3, [pc, #360]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004818:	e013      	b.n	8004842 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800481a:	4b56      	ldr	r3, [pc, #344]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004826:	4b53      	ldr	r3, [pc, #332]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004836:	e006      	b.n	8004846 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      break;
 800483c:	e004      	b.n	8004848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004846:	bf00      	nop
    }

    if(status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800484e:	4b49      	ldr	r3, [pc, #292]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	430b      	orrs	r3, r1
 8004864:	4943      	ldr	r1, [pc, #268]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004866:	4313      	orrs	r3, r2
 8004868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d17c      	bne.n	800496a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004870:	4b40      	ldr	r3, [pc, #256]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a3f      	ldr	r2, [pc, #252]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004876:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800487a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487c:	f7fc fef4 	bl	8001668 <HAL_GetTick>
 8004880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004882:	e009      	b.n	8004898 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004884:	f7fc fef0 	bl	8001668 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d902      	bls.n	8004898 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	73fb      	strb	r3, [r7, #15]
        break;
 8004896:	e005      	b.n	80048a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004898:	4b36      	ldr	r3, [pc, #216]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ef      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d15f      	bne.n	800496a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d110      	bne.n	80048d2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b0:	4b30      	ldr	r3, [pc, #192]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80048b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	0211      	lsls	r1, r2, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68d2      	ldr	r2, [r2, #12]
 80048c6:	06d2      	lsls	r2, r2, #27
 80048c8:	430a      	orrs	r2, r1
 80048ca:	492a      	ldr	r1, [pc, #168]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]
 80048d0:	e027      	b.n	8004922 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d112      	bne.n	80048fe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d8:	4b26      	ldr	r3, [pc, #152]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80048e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6892      	ldr	r2, [r2, #8]
 80048e8:	0211      	lsls	r1, r2, #8
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6912      	ldr	r2, [r2, #16]
 80048ee:	0852      	lsrs	r2, r2, #1
 80048f0:	3a01      	subs	r2, #1
 80048f2:	0552      	lsls	r2, r2, #21
 80048f4:	430a      	orrs	r2, r1
 80048f6:	491f      	ldr	r1, [pc, #124]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]
 80048fc:	e011      	b.n	8004922 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004906:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	0211      	lsls	r1, r2, #8
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6952      	ldr	r2, [r2, #20]
 8004914:	0852      	lsrs	r2, r2, #1
 8004916:	3a01      	subs	r2, #1
 8004918:	0652      	lsls	r2, r2, #25
 800491a:	430a      	orrs	r2, r1
 800491c:	4915      	ldr	r1, [pc, #84]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004922:	4b14      	ldr	r3, [pc, #80]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a13      	ldr	r2, [pc, #76]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800492c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fc fe9b 	bl	8001668 <HAL_GetTick>
 8004932:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004934:	e009      	b.n	800494a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004936:	f7fc fe97 	bl	8001668 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d902      	bls.n	800494a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	73fb      	strb	r3, [r7, #15]
          break;
 8004948:	e005      	b.n	8004956 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800494a:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ef      	beq.n	8004936 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	4903      	ldr	r1, [pc, #12]	@ (8004974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004966:	4313      	orrs	r3, r2
 8004968:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e095      	b.n	8004ab6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800499a:	d009      	beq.n	80049b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]
 80049a2:	e005      	b.n	80049b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc fc46 	bl	800125c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049f0:	d902      	bls.n	80049f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e002      	b.n	80049fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a06:	d007      	beq.n	8004a18 <HAL_SPI_Init+0xa0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5a:	ea42 0103 	orr.w	r1, r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	f003 0204 	and.w	r2, r3, #4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e049      	b.n	8004b64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc fbfb 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f000 f8ff 	bl	8004d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_TIM_ConfigClockSource+0x1c>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e0b6      	b.n	8004cf6 <HAL_TIM_ConfigClockSource+0x18a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc4:	d03e      	beq.n	8004c44 <HAL_TIM_ConfigClockSource+0xd8>
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bca:	f200 8087 	bhi.w	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd2:	f000 8086 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x176>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bda:	d87f      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004bdc:	2b70      	cmp	r3, #112	@ 0x70
 8004bde:	d01a      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0xaa>
 8004be0:	2b70      	cmp	r3, #112	@ 0x70
 8004be2:	d87b      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004be4:	2b60      	cmp	r3, #96	@ 0x60
 8004be6:	d050      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x11e>
 8004be8:	2b60      	cmp	r3, #96	@ 0x60
 8004bea:	d877      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004bec:	2b50      	cmp	r3, #80	@ 0x50
 8004bee:	d03c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xfe>
 8004bf0:	2b50      	cmp	r3, #80	@ 0x50
 8004bf2:	d873      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d058      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x13e>
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d86f      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b30      	cmp	r3, #48	@ 0x30
 8004bfe:	d064      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15e>
 8004c00:	2b30      	cmp	r3, #48	@ 0x30
 8004c02:	d86b      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d060      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15e>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d867      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d05c      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15e>
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d05a      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15e>
 8004c14:	e062      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c26:	f000 f955 	bl	8004ed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	609a      	str	r2, [r3, #8]
      break;
 8004c42:	e04f      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c54:	f000 f93e 	bl	8004ed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c66:	609a      	str	r2, [r3, #8]
      break;
 8004c68:	e03c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 f8b2 	bl	8004de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2150      	movs	r1, #80	@ 0x50
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f90b 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004c88:	e02c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 f8d1 	bl	8004e3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2160      	movs	r1, #96	@ 0x60
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f8fb 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e01c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 f892 	bl	8004de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2140      	movs	r1, #64	@ 0x40
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f8eb 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e00c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 f8e2 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004cda:	e003      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e000      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <TIM_Base_SetConfig+0xd4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0x20>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1e:	d108      	bne.n	8004d32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a27      	ldr	r2, [pc, #156]	@ (8004dd4 <TIM_Base_SetConfig+0xd4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00b      	beq.n	8004d52 <TIM_Base_SetConfig+0x52>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d40:	d007      	beq.n	8004d52 <TIM_Base_SetConfig+0x52>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a24      	ldr	r2, [pc, #144]	@ (8004dd8 <TIM_Base_SetConfig+0xd8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d003      	beq.n	8004d52 <TIM_Base_SetConfig+0x52>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a23      	ldr	r2, [pc, #140]	@ (8004ddc <TIM_Base_SetConfig+0xdc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d108      	bne.n	8004d64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a12      	ldr	r2, [pc, #72]	@ (8004dd4 <TIM_Base_SetConfig+0xd4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0xa0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <TIM_Base_SetConfig+0xd8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0xa0>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a10      	ldr	r2, [pc, #64]	@ (8004ddc <TIM_Base_SetConfig+0xdc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d103      	bne.n	8004da8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	611a      	str	r2, [r3, #16]
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400

08004de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f023 0201 	bic.w	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 030a 	bic.w	r3, r3, #10
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f023 0210 	bic.w	r2, r3, #16
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	031b      	lsls	r3, r3, #12
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f043 0307 	orr.w	r3, r3, #7
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	609a      	str	r2, [r3, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e04f      	b.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a21      	ldr	r2, [pc, #132]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d108      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a10      	ldr	r2, [pc, #64]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10c      	bne.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40012c00 	.word	0x40012c00
 8004fdc:	40014000 	.word	0x40014000

08004fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e040      	b.n	8005074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fc f98c 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	@ 0x24
 800500c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa54 	bl	80054d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f825 	bl	800507c <UART_SetConfig>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e01b      	b.n	8005074 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800504a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800505a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fad3 	bl	8005618 <UART_CheckIdleState>
 8005072:	4603      	mov	r3, r0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800507c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005080:	b08a      	sub	sp, #40	@ 0x28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	431a      	orrs	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4bb4      	ldr	r3, [pc, #720]	@ (800537c <UART_SetConfig+0x300>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4aa9      	ldr	r2, [pc, #676]	@ (8005380 <UART_SetConfig+0x304>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e4:	4313      	orrs	r3, r2
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f8:	430a      	orrs	r2, r1
 80050fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4aa0      	ldr	r2, [pc, #640]	@ (8005384 <UART_SetConfig+0x308>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d126      	bne.n	8005154 <UART_SetConfig+0xd8>
 8005106:	4ba0      	ldr	r3, [pc, #640]	@ (8005388 <UART_SetConfig+0x30c>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b03      	cmp	r3, #3
 8005112:	d81b      	bhi.n	800514c <UART_SetConfig+0xd0>
 8005114:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <UART_SetConfig+0xa0>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005135 	.word	0x08005135
 8005128:	08005145 	.word	0x08005145
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e080      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005134:	2302      	movs	r3, #2
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e07c      	b.n	8005236 <UART_SetConfig+0x1ba>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005142:	e078      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514a:	e074      	b.n	8005236 <UART_SetConfig+0x1ba>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005152:	e070      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a8c      	ldr	r2, [pc, #560]	@ (800538c <UART_SetConfig+0x310>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d138      	bne.n	80051d0 <UART_SetConfig+0x154>
 800515e:	4b8a      	ldr	r3, [pc, #552]	@ (8005388 <UART_SetConfig+0x30c>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d82d      	bhi.n	80051c8 <UART_SetConfig+0x14c>
 800516c:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <UART_SetConfig+0xf8>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	080051a9 	.word	0x080051a9
 8005178:	080051c9 	.word	0x080051c9
 800517c:	080051c9 	.word	0x080051c9
 8005180:	080051c9 	.word	0x080051c9
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080051c9 	.word	0x080051c9
 800518c:	080051c9 	.word	0x080051c9
 8005190:	080051c9 	.word	0x080051c9
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051c9 	.word	0x080051c9
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051c1 	.word	0x080051c1
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ae:	e042      	b.n	8005236 <UART_SetConfig+0x1ba>
 80051b0:	2302      	movs	r3, #2
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b6:	e03e      	b.n	8005236 <UART_SetConfig+0x1ba>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051be:	e03a      	b.n	8005236 <UART_SetConfig+0x1ba>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c6:	e036      	b.n	8005236 <UART_SetConfig+0x1ba>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ce:	e032      	b.n	8005236 <UART_SetConfig+0x1ba>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005380 <UART_SetConfig+0x304>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d12a      	bne.n	8005230 <UART_SetConfig+0x1b4>
 80051da:	4b6b      	ldr	r3, [pc, #428]	@ (8005388 <UART_SetConfig+0x30c>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051e8:	d01a      	beq.n	8005220 <UART_SetConfig+0x1a4>
 80051ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051ee:	d81b      	bhi.n	8005228 <UART_SetConfig+0x1ac>
 80051f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f4:	d00c      	beq.n	8005210 <UART_SetConfig+0x194>
 80051f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051fa:	d815      	bhi.n	8005228 <UART_SetConfig+0x1ac>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <UART_SetConfig+0x18c>
 8005200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005204:	d008      	beq.n	8005218 <UART_SetConfig+0x19c>
 8005206:	e00f      	b.n	8005228 <UART_SetConfig+0x1ac>
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800520e:	e012      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005210:	2302      	movs	r3, #2
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005216:	e00e      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521e:	e00a      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005226:	e006      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522e:	e002      	b.n	8005236 <UART_SetConfig+0x1ba>
 8005230:	2310      	movs	r3, #16
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a51      	ldr	r2, [pc, #324]	@ (8005380 <UART_SetConfig+0x304>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d17a      	bne.n	8005336 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005244:	2b08      	cmp	r3, #8
 8005246:	d824      	bhi.n	8005292 <UART_SetConfig+0x216>
 8005248:	a201      	add	r2, pc, #4	@ (adr r2, 8005250 <UART_SetConfig+0x1d4>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005275 	.word	0x08005275
 8005254:	08005293 	.word	0x08005293
 8005258:	0800527d 	.word	0x0800527d
 800525c:	08005293 	.word	0x08005293
 8005260:	08005283 	.word	0x08005283
 8005264:	08005293 	.word	0x08005293
 8005268:	08005293 	.word	0x08005293
 800526c:	08005293 	.word	0x08005293
 8005270:	0800528b 	.word	0x0800528b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005274:	f7ff f80c 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8005278:	61f8      	str	r0, [r7, #28]
        break;
 800527a:	e010      	b.n	800529e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800527c:	4b44      	ldr	r3, [pc, #272]	@ (8005390 <UART_SetConfig+0x314>)
 800527e:	61fb      	str	r3, [r7, #28]
        break;
 8005280:	e00d      	b.n	800529e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7fe ff6d 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8005286:	61f8      	str	r0, [r7, #28]
        break;
 8005288:	e009      	b.n	800529e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528e:	61fb      	str	r3, [r7, #28]
        break;
 8005290:	e005      	b.n	800529e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800529c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8107 	beq.w	80054b4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d305      	bcc.n	80052c2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d903      	bls.n	80052ca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052c8:	e0f4      	b.n	80054b4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2200      	movs	r2, #0
 80052ce:	461c      	mov	r4, r3
 80052d0:	4615      	mov	r5, r2
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	022b      	lsls	r3, r5, #8
 80052dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052e0:	0222      	lsls	r2, r4, #8
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	6849      	ldr	r1, [r1, #4]
 80052e6:	0849      	lsrs	r1, r1, #1
 80052e8:	2000      	movs	r0, #0
 80052ea:	4688      	mov	r8, r1
 80052ec:	4681      	mov	r9, r0
 80052ee:	eb12 0a08 	adds.w	sl, r2, r8
 80052f2:	eb43 0b09 	adc.w	fp, r3, r9
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005304:	4650      	mov	r0, sl
 8005306:	4659      	mov	r1, fp
 8005308:	f7fa ff60 	bl	80001cc <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4613      	mov	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800531a:	d308      	bcc.n	800532e <UART_SetConfig+0x2b2>
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005322:	d204      	bcs.n	800532e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e0c2      	b.n	80054b4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005334:	e0be      	b.n	80054b4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800533e:	d16a      	bne.n	8005416 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005344:	2b08      	cmp	r3, #8
 8005346:	d834      	bhi.n	80053b2 <UART_SetConfig+0x336>
 8005348:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x2d4>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005375 	.word	0x08005375
 8005354:	08005395 	.word	0x08005395
 8005358:	0800539d 	.word	0x0800539d
 800535c:	080053b3 	.word	0x080053b3
 8005360:	080053a3 	.word	0x080053a3
 8005364:	080053b3 	.word	0x080053b3
 8005368:	080053b3 	.word	0x080053b3
 800536c:	080053b3 	.word	0x080053b3
 8005370:	080053ab 	.word	0x080053ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fe ff8c 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8005378:	61f8      	str	r0, [r7, #28]
        break;
 800537a:	e020      	b.n	80053be <UART_SetConfig+0x342>
 800537c:	efff69f3 	.word	0xefff69f3
 8005380:	40008000 	.word	0x40008000
 8005384:	40013800 	.word	0x40013800
 8005388:	40021000 	.word	0x40021000
 800538c:	40004400 	.word	0x40004400
 8005390:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005394:	f7fe ff92 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8005398:	61f8      	str	r0, [r7, #28]
        break;
 800539a:	e010      	b.n	80053be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800539c:	4b4c      	ldr	r3, [pc, #304]	@ (80054d0 <UART_SetConfig+0x454>)
 800539e:	61fb      	str	r3, [r7, #28]
        break;
 80053a0:	e00d      	b.n	80053be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a2:	f7fe fedd 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 80053a6:	61f8      	str	r0, [r7, #28]
        break;
 80053a8:	e009      	b.n	80053be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ae:	61fb      	str	r3, [r7, #28]
        break;
 80053b0:	e005      	b.n	80053be <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d077      	beq.n	80054b4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005a      	lsls	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	441a      	add	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b0f      	cmp	r3, #15
 80053de:	d916      	bls.n	800540e <UART_SetConfig+0x392>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e6:	d212      	bcs.n	800540e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f023 030f 	bic.w	r3, r3, #15
 80053f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	8afb      	ldrh	r3, [r7, #22]
 8005400:	4313      	orrs	r3, r2
 8005402:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	8afa      	ldrh	r2, [r7, #22]
 800540a:	60da      	str	r2, [r3, #12]
 800540c:	e052      	b.n	80054b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005414:	e04e      	b.n	80054b4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005416:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800541a:	2b08      	cmp	r3, #8
 800541c:	d827      	bhi.n	800546e <UART_SetConfig+0x3f2>
 800541e:	a201      	add	r2, pc, #4	@ (adr r2, 8005424 <UART_SetConfig+0x3a8>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	0800546f 	.word	0x0800546f
 8005434:	0800545f 	.word	0x0800545f
 8005438:	0800546f 	.word	0x0800546f
 800543c:	0800546f 	.word	0x0800546f
 8005440:	0800546f 	.word	0x0800546f
 8005444:	08005467 	.word	0x08005467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fe ff22 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 800544c:	61f8      	str	r0, [r7, #28]
        break;
 800544e:	e014      	b.n	800547a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005450:	f7fe ff34 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8005454:	61f8      	str	r0, [r7, #28]
        break;
 8005456:	e010      	b.n	800547a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005458:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <UART_SetConfig+0x454>)
 800545a:	61fb      	str	r3, [r7, #28]
        break;
 800545c:	e00d      	b.n	800547a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545e:	f7fe fe7f 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8005462:	61f8      	str	r0, [r7, #28]
        break;
 8005464:	e009      	b.n	800547a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800546a:	61fb      	str	r3, [r7, #28]
        break;
 800546c:	e005      	b.n	800547a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005478:	bf00      	nop
    }

    if (pclk != 0U)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d019      	beq.n	80054b4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	085a      	lsrs	r2, r3, #1
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	441a      	add	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d909      	bls.n	80054ae <UART_SetConfig+0x432>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a0:	d205      	bcs.n	80054ae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	e002      	b.n	80054b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3728      	adds	r7, #40	@ 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ce:	bf00      	nop
 80054d0:	00f42400 	.word	0x00f42400

080054d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01a      	beq.n	80055ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d2:	d10a      	bne.n	80055ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b098      	sub	sp, #96	@ 0x60
 800561c:	af02      	add	r7, sp, #8
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005628:	f7fc f81e 	bl	8001668 <HAL_GetTick>
 800562c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b08      	cmp	r3, #8
 800563a:	d12e      	bne.n	800569a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005644:	2200      	movs	r2, #0
 8005646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f88c 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d021      	beq.n	800569a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800566a:	653b      	str	r3, [r7, #80]	@ 0x50
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005674:	647b      	str	r3, [r7, #68]	@ 0x44
 8005676:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800567a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e6      	bne.n	8005656 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e062      	b.n	8005760 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d149      	bne.n	800573c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f856 	bl	8005768 <UART_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d03c      	beq.n	800573c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	623b      	str	r3, [r7, #32]
   return(result);
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e6      	bne.n	80056c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3308      	adds	r3, #8
 80056fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	60fb      	str	r3, [r7, #12]
   return(result);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005714:	61fa      	str	r2, [r7, #28]
 8005716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	617b      	str	r3, [r7, #20]
   return(result);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e5      	bne.n	80056f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e011      	b.n	8005760 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3758      	adds	r7, #88	@ 0x58
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005778:	e04f      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d04b      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005782:	f7fb ff71 	bl	8001668 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <UART_WaitOnFlagUntilTimeout+0x30>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e04e      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d037      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b80      	cmp	r3, #128	@ 0x80
 80057ae:	d034      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b40      	cmp	r3, #64	@ 0x40
 80057b4:	d031      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d110      	bne.n	80057e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2208      	movs	r2, #8
 80057ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f838 	bl	8005842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2208      	movs	r2, #8
 80057d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e029      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f4:	d111      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f81e 	bl	8005842 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e00f      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	429a      	cmp	r2, r3
 8005836:	d0a0      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005842:	b480      	push	{r7}
 8005844:	b095      	sub	sp, #84	@ 0x54
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800585e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005868:	643b      	str	r3, [r7, #64]	@ 0x40
 800586a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800586e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	61fb      	str	r3, [r7, #28]
   return(result);
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800589c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e5      	bne.n	800587c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d118      	bne.n	80058ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f023 0310 	bic.w	r3, r3, #16
 80058cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6979      	ldr	r1, [r7, #20]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	613b      	str	r3, [r7, #16]
   return(result);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e6      	bne.n	80058b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058fe:	bf00      	nop
 8005900:	3754      	adds	r7, #84	@ 0x54
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e056      	b.n	80059d0 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7fb fcf4 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2224      	movs	r2, #36	@ 0x24
 800593c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff fdbc 	bl	80054d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f7ff fb8d 	bl	800507c <UART_SetConfig>
 8005962:	4603      	mov	r3, r0
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e031      	b.n	80059d0 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800597a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	055b      	lsls	r3, r3, #21
 8005994:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80059aa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	6979      	ldr	r1, [r7, #20]
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fe25 	bl	8005618 <UART_CheckIdleState>
 80059ce:	4603      	mov	r3, r0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <memset>:
 80059d8:	4402      	add	r2, r0
 80059da:	4603      	mov	r3, r0
 80059dc:	4293      	cmp	r3, r2
 80059de:	d100      	bne.n	80059e2 <memset+0xa>
 80059e0:	4770      	bx	lr
 80059e2:	f803 1b01 	strb.w	r1, [r3], #1
 80059e6:	e7f9      	b.n	80059dc <memset+0x4>

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	@ (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 f818 	bl	8005a30 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08005a98 	.word	0x08005a98
 8005a24:	08005a98 	.word	0x08005a98
 8005a28:	08005a98 	.word	0x08005a98
 8005a2c:	08005a9c 	.word	0x08005a9c

08005a30 <_init>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr

08005a3c <_fini>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr
