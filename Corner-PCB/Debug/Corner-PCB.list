
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009128  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080092b8  080092b8  0000a2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009674  08009674  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009674  08009674  0000a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800967c  0800967c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009680  08009680  0000a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009684  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  200001d4  08009858  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08009858  0000b65c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b207  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003458  00000000  00000000  0002640b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00029868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001300  00000000  00000000  0002b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252de  00000000  00000000  0002c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d275  00000000  00000000  00051696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3d83  00000000  00000000  0006e90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015268e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007864  00000000  00000000  001526d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00159f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092a0 	.word	0x080092a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080092a0 	.word	0x080092a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <CANTransmitMinion>:
#include "can.h"
#include "dataframes.h"



HAL_StatusTypeDef CANTransmitMinion (CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef TXStatusOut = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	77fb      	strb	r3, [r7, #31]
	//	printf("sending ID ");
	//	printf((uint32_t)(header->StdId));
	int i = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
	uint32_t mailbox = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000eec:	e012      	b.n	8000f14 <CANTransmitMinion+0x40>
		while(HAL_CAN_GetTxMailboxesFreeLevel(canport) < 1) {
 8000eee:	bf00      	nop
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f002 ff2f 	bl	8003d54 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f9      	beq.n	8000ef0 <CANTransmitMinion+0x1c>
					//wait until a new mailbox gets freed up
		//			printf("\n\rwaiting\n\r");
				}
		TXStatusOut = HAL_CAN_AddTxMessage(canport, header, dataArray, &mailbox);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f002 fe55 	bl	8003bb4 <HAL_CAN_AddTxMessage>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	77fb      	strb	r3, [r7, #31]

		i++;
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	dc02      	bgt.n	8000f20 <CANTransmitMinion+0x4c>
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1e6      	bne.n	8000eee <CANTransmitMinion+0x1a>
//	if (TXStatusOut != HAL_OK) {
//		mailbox = 0;
//
//	}
	//	printf("\n\r");
	return TXStatusOut;
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <clearEflagsHelper>:

void clearEflagsHelper(CORNER_CAN_CONTEXT *CANCONTEXT) {
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	CANCONTEXT->misc_dataframe.data.eflags.ADCErrorBit = 0;
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.BrakeTempErrorBit = 0;
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f46:	f023 0302 	bic.w	r3, r3, #2
 8000f4a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = 0;
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f54:	f023 0308 	bic.w	r3, r3, #8
 8000f58:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = 0;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f62:	f023 0304 	bic.w	r3, r3, #4
 8000f66:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = 0;
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f70:	f023 0310 	bic.w	r3, r3, #16
 8000f74:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = 0;
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f7e:	f023 0320 	bic.w	r3, r3, #32
 8000f82:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = 0;
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f90:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = 0;
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f9e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b

}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <CANMailman>:

void CANMailman(CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, CORNER_CAN_CONTEXT *CANCONTEXT) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	clearEflagsHelper(CANCONTEXT);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb5 	bl	8000f2a <clearEflagsHelper>
	HAL_StatusTypeDef txstatus;
	/*** BEGIN SEND MISC MESSAGE (btemp, whs, board temp, error flags, shock travel) */

	if (HAL_GetTick() - CANCONTEXT->ms_since_miscmsg_broadcast > MISC_DATA_TRANSMISSION_PERIOD) {
 8000fc0:	f001 f9b2 	bl	8002328 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b15      	cmp	r3, #21
 8000fce:	d923      	bls.n	8001018 <CANMailman+0x6a>
		header->StdId = MISC_DATA_ID;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f240 7215 	movw	r2, #1813	@ 0x715
 8000fd6:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion(canport, header, CANCONTEXT->misc_dataframe.array);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3334      	adds	r3, #52	@ 0x34
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff77 	bl	8000ed4 <CANTransmitMinion>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d007      	beq.n	8001000 <CANMailman+0x52>
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = true;
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8000ffe:	e006      	b.n	800100e <CANMailman+0x60>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = false;
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8001006:	f023 0304 	bic.w	r3, r3, #4
 800100a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_miscmsg_broadcast = HAL_GetTick();
 800100e:	f001 f98b 	bl	8002328 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	631a      	str	r2, [r3, #48]	@ 0x30




	/**** BEGIN SEND STRAIN GAUGE DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_strain_broadcast > STRAIN_GAUGE_TRANSMISSION_PERIOD) {
 8001018:	f001 f986 	bl	8002328 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d923      	bls.n	8001070 <CANMailman+0xc2>
		header->StdId = STRAIN_GAUGE_ID;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 800102e:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->straingauge_dataframe.array);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3304      	adds	r3, #4
 8001034:	461a      	mov	r2, r3
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f7ff ff4b 	bl	8000ed4 <CANTransmitMinion>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d007      	beq.n	8001058 <CANMailman+0xaa>
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = true;
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8001056:	e006      	b.n	8001066 <CANMailman+0xb8>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = false;
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800105e:	f023 0308 	bic.w	r3, r3, #8
 8001062:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_strain_broadcast = HAL_GetTick();
 8001066:	f001 f95f 	bl	8002328 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	601a      	str	r2, [r3, #0]
	/**** END SEND STRAIN GAUGE DATA ****/



	/**** BEGIN SEND TIRE TEMP DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_ttemp_broadcast > TIRE_TEMP_TRANSMISSION_PERIOD) {
 8001070:	f001 f95a 	bl	8002328 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8001080:	f0c0 8081 	bcc.w	8001186 <CANMailman+0x1d8>
		//		CTXHeader.IDE = CAN_ID_STD;
		//		CTXHeader.RTR = CAN_RTR_DATA;
		//		CTXHeader.DLC = 8;
		//		ms_since_ttemp_broadcast = HAL_GetTick();

		header->StdId = TIRE_TEMP_MSG1_ID;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f240 7211 	movw	r2, #1809	@ 0x711
 800108a:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[0].array);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3310      	adds	r3, #16
 8001090:	461a      	mov	r2, r3
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff ff1d 	bl	8000ed4 <CANTransmitMinion>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <CANMailman+0x106>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = true;
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 80010b2:	e006      	b.n	80010c2 <CANMailman+0x114>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = false;
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80010ba:	f023 0310 	bic.w	r3, r3, #16
 80010be:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG2_ID;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f240 7212 	movw	r2, #1810	@ 0x712
 80010c8:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[1].array);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3318      	adds	r3, #24
 80010ce:	461a      	mov	r2, r3
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff fefe 	bl	8000ed4 <CANTransmitMinion>
 80010d8:	4603      	mov	r3, r0
 80010da:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <CANMailman+0x144>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = true;
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 80010f0:	e006      	b.n	8001100 <CANMailman+0x152>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = false;
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80010f8:	f023 0320 	bic.w	r3, r3, #32
 80010fc:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG3_ID;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f240 7213 	movw	r2, #1811	@ 0x713
 8001106:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[2].array);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3320      	adds	r3, #32
 800110c:	461a      	mov	r2, r3
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff fedf 	bl	8000ed4 <CANTransmitMinion>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <CANMailman+0x182>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = true;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8001126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800112a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 800112e:	e006      	b.n	800113e <CANMailman+0x190>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = false;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8001136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800113a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG4_ID;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	f240 7214 	movw	r2, #1812	@ 0x714
 8001144:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[3].array);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3328      	adds	r3, #40	@ 0x28
 800114a:	461a      	mov	r2, r3
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff fec0 	bl	8000ed4 <CANTransmitMinion>
 8001154:	4603      	mov	r3, r0
 8001156:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <CANMailman+0x1c0>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = true;
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8001164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001168:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 800116c:	e006      	b.n	800117c <CANMailman+0x1ce>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = false;
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8001174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001178:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_ttemp_broadcast = HAL_GetTick();
 800117c:	f001 f8d4 	bl	8002328 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60da      	str	r2, [r3, #12]
	}

	/**** END SEND TIRE TEMP DATA ****/
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <sendBrakeTempData>:
#include "ct1000n.h"

// MASTER QUERY: DEVICE ID, FUNCTION CODE, REGISTER ADDR (2 BYTES), # OF POINTS TO READ (2 BYTES), CRC (2 BYTES)
// CONFIRM WE GET THE CORRECT ADDRESS

HAL_StatusTypeDef sendBrakeTempData(uint8_t* data, UART_HandleTypeDef *uartPort) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(MAX485_EN_PORT, MAX485_EN_PIN, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <sendBrakeTempData+0x44>)
 80011a0:	f003 f876 	bl	8004290 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef out = HAL_UART_Transmit(uartPort, data, 8, HAL_MAX_DELAY);
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	2208      	movs	r2, #8
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f004 febf 	bl	8005f30 <HAL_UART_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(MAX485_EN_PORT, MAX485_EN_PIN, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2108      	movs	r1, #8
 80011ba:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <sendBrakeTempData+0x44>)
 80011bc:	f003 f868 	bl	8004290 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c4:	f001 f8bc 	bl	8002340 <HAL_Delay>

	return out;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	48000400 	.word	0x48000400

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f001 f83b 	bl	8002256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f852 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e4:	f000 fa9c 	bl	8001720 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011e8:	f000 f8a0 	bl	800132c <MX_ADC1_Init>
  MX_TIM1_Init();
 80011ec:	f000 f9e0 	bl	80015b0 <MX_TIM1_Init>
  MX_CAN1_Init();
 80011f0:	f000 f900 	bl	80013f4 <MX_CAN1_Init>
  MX_I2C1_Init();
 80011f4:	f000 f95e 	bl	80014b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011f8:	f000 f99c 	bl	8001534 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011fc:	f000 fa2c 	bl	8001658 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001200:	f000 fa5c 	bl	80016bc <MX_USART2_UART_Init>
		//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

		//		spamCan();

		//read the sensors
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8001204:	4a11      	ldr	r2, [pc, #68]	@ (800124c <main+0x74>)
 8001206:	4912      	ldr	r1, [pc, #72]	@ (8001250 <main+0x78>)
 8001208:	4812      	ldr	r0, [pc, #72]	@ (8001254 <main+0x7c>)
 800120a:	f000 fb05 	bl	8001818 <readLinearPotentiometer>
		readBrakeTemp(&ms_since_btemp_read, &(CANCONTEXT.misc_dataframe), &huart1);
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <main+0x80>)
 8001210:	490e      	ldr	r1, [pc, #56]	@ (800124c <main+0x74>)
 8001212:	4812      	ldr	r0, [pc, #72]	@ (800125c <main+0x84>)
 8001214:	f000 fb3e 	bl	8001894 <readBrakeTemp>
		readTireTemp(&ms_since_ttemp_read, (CANCONTEXT.ttemp_dataframes));
 8001218:	4911      	ldr	r1, [pc, #68]	@ (8001260 <main+0x88>)
 800121a:	4812      	ldr	r0, [pc, #72]	@ (8001264 <main+0x8c>)
 800121c:	f000 fb6b 	bl	80018f6 <readTireTemp>
		readStrainGauges(&hspi1, &ms_since_strain_read, &(CANCONTEXT.straingauge_dataframe));
 8001220:	4a11      	ldr	r2, [pc, #68]	@ (8001268 <main+0x90>)
 8001222:	4912      	ldr	r1, [pc, #72]	@ (800126c <main+0x94>)
 8001224:	4812      	ldr	r0, [pc, #72]	@ (8001270 <main+0x98>)
 8001226:	f000 fbdc 	bl	80019e2 <readStrainGauges>
		readWheelSpeed(&ms_since_whs_read, &(CANCONTEXT.misc_dataframe));
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <main+0x74>)
 800122c:	4811      	ldr	r0, [pc, #68]	@ (8001274 <main+0x9c>)
 800122e:	f000 fbfb 	bl	8001a28 <readWheelSpeed>
		readBoardTemp(&hspi1, &ms_since_boardtemp_read, &(CANCONTEXT.misc_dataframe));
 8001232:	4a06      	ldr	r2, [pc, #24]	@ (800124c <main+0x74>)
 8001234:	4910      	ldr	r1, [pc, #64]	@ (8001278 <main+0xa0>)
 8001236:	480e      	ldr	r0, [pc, #56]	@ (8001270 <main+0x98>)
 8001238:	f000 fc5a 	bl	8001af0 <readBoardTemp>


		//send out the sensors
		CANMailman(&hcan1, &CTXHeader, &CANCONTEXT);
 800123c:	4a0f      	ldr	r2, [pc, #60]	@ (800127c <main+0xa4>)
 800123e:	4910      	ldr	r1, [pc, #64]	@ (8001280 <main+0xa8>)
 8001240:	4810      	ldr	r0, [pc, #64]	@ (8001284 <main+0xac>)
 8001242:	f7ff feb4 	bl	8000fae <CANMailman>
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8001246:	bf00      	nop
 8001248:	e7dc      	b.n	8001204 <main+0x2c>
 800124a:	bf00      	nop
 800124c:	200004c4 	.word	0x200004c4
 8001250:	200004cc 	.word	0x200004cc
 8001254:	200001f0 	.word	0x200001f0
 8001258:	20000380 	.word	0x20000380
 800125c:	200004d8 	.word	0x200004d8
 8001260:	200004a0 	.word	0x200004a0
 8001264:	200004d4 	.word	0x200004d4
 8001268:	20000494 	.word	0x20000494
 800126c:	200004d0 	.word	0x200004d0
 8001270:	200002d0 	.word	0x200002d0
 8001274:	200004dc 	.word	0x200004dc
 8001278:	200004e0 	.word	0x200004e0
 800127c:	20000490 	.word	0x20000490
 8001280:	200004e4 	.word	0x200004e4
 8001284:	20000254 	.word	0x20000254

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b096      	sub	sp, #88	@ 0x58
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2244      	movs	r2, #68	@ 0x44
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f006 f8dd 	bl	8007456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012ae:	f003 f947 	bl	8004540 <HAL_PWREx_ControlVoltageScaling>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012b8:	f000 faa8 	bl	800180c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c6:	2310      	movs	r3, #16
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ce:	2302      	movs	r3, #2
 80012d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012d6:	230a      	movs	r3, #10
 80012d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012da:	2307      	movs	r3, #7
 80012dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012de:	2302      	movs	r3, #2
 80012e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f97e 	bl	80045ec <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012f6:	f000 fa89 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2303      	movs	r3, #3
 8001300:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800130e:	463b      	mov	r3, r7
 8001310:	2104      	movs	r1, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fd7e 	bl	8004e14 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800131e:	f000 fa75 	bl	800180c <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3758      	adds	r7, #88	@ 0x58
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001344:	4a29      	ldr	r2, [pc, #164]	@ (80013ec <MX_ADC1_Init+0xc0>)
 8001346:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001360:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001362:	2204      	movs	r2, #4
 8001364:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001366:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001368:	2200      	movs	r2, #0
 800136a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001374:	2201      	movs	r2, #1
 8001376:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a2:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 80013a4:	f001 fa06 	bl	80027b4 <HAL_ADC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80013ae:	f000 fa2d 	bl	800180c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_ADC1_Init+0xc4>)
 80013b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b6:	2306      	movs	r3, #6
 80013b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013be:	237f      	movs	r3, #127	@ 0x7f
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c2:	2304      	movs	r3, #4
 80013c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <MX_ADC1_Init+0xbc>)
 80013d0:	f001 fc64 	bl	8002c9c <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013da:	f000 fa17 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001f0 	.word	0x200001f0
 80013ec:	50040000 	.word	0x50040000
 80013f0:	19200040 	.word	0x19200040

080013f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013fa:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 80013fc:	4a2b      	ldr	r2, [pc, #172]	@ (80014ac <MX_CAN1_Init+0xb8>)
 80013fe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001400:	4b29      	ldr	r3, [pc, #164]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001402:	220a      	movs	r2, #10
 8001404:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001406:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001414:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001418:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 800141c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001420:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001424:	2200      	movs	r2, #0
 8001426:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 800142a:	2200      	movs	r2, #0
 800142c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001430:	2200      	movs	r2, #0
 8001432:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001436:	2200      	movs	r2, #0
 8001438:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800143a:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 800143c:	2200      	movs	r2, #0
 800143e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001442:	2200      	movs	r2, #0
 8001444:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001446:	4818      	ldr	r0, [pc, #96]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001448:	f002 f9ab 	bl	80037a2 <HAL_CAN_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001452:	f000 f9db 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* INITIALIZE CAN PARAMETERS */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 1;                       // value between 0 to 13 for JUST Master Mode (CAN1)
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;   // for filtering Identifiers
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 800145e:	2301      	movs	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = (0x541) << 5;          // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 8001462:	f64a 0320 	movw	r3, #43040	@ 0xa820
 8001466:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x00;                   // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x00;              // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x00;               // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;  // specify FIFO0 or FIFO1
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = CAN_FILTER_DISABLE; // Enable filtering
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]

	CTXHeader.IDE = CAN_ID_STD;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_CAN1_Init+0xbc>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
	CTXHeader.RTR = CAN_RTR_DATA;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MX_CAN1_Init+0xbc>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
	CTXHeader.DLC = 8;
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_CAN1_Init+0xbc>)
 800148a:	2208      	movs	r2, #8
 800148c:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 8001494:	f002 fa80 	bl	8003998 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_CAN1_Init+0xb4>)
 800149a:	f002 fb47 	bl	8003b2c <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	@ 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000254 	.word	0x20000254
 80014ac:	40006400 	.word	0x40006400
 80014b0:	200004e4 	.word	0x200004e4

080014b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	@ (800152c <MX_I2C1_Init+0x78>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001530 <MX_I2C1_Init+0x7c>)
 80014c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ee:	480e      	ldr	r0, [pc, #56]	@ (8001528 <MX_I2C1_Init+0x74>)
 80014f0:	f002 fee6 	bl	80042c0 <HAL_I2C_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fa:	f000 f987 	bl	800180c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4809      	ldr	r0, [pc, #36]	@ (8001528 <MX_I2C1_Init+0x74>)
 8001502:	f002 ff78 	bl	80043f6 <HAL_I2CEx_ConfigAnalogFilter>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800150c:	f000 f97e 	bl	800180c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001510:	2100      	movs	r1, #0
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_I2C1_Init+0x74>)
 8001514:	f002 ffba 	bl	800448c <HAL_I2CEx_ConfigDigitalFilter>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800151e:	f000 f975 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000027c 	.word	0x2000027c
 800152c:	40005400 	.word	0x40005400
 8001530:	10d19ce4 	.word	0x10d19ce4

08001534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001538:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <MX_SPI1_Init+0x74>)
 800153a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <MX_SPI1_Init+0x78>)
 800153c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001540:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_SPI1_Init+0x74>)
 800154e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001552:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_SPI1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001562:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001566:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_SPI1_Init+0x74>)
 800156a:	2228      	movs	r2, #40	@ 0x28
 800156c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001582:	2207      	movs	r2, #7
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_SPI1_Init+0x74>)
 800158e:	2208      	movs	r2, #8
 8001590:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_SPI1_Init+0x74>)
 8001594:	f004 f94a 	bl	800582c <HAL_SPI_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800159e:	f000 f935 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002d0 	.word	0x200002d0
 80015ac:	40013000 	.word	0x40013000

080015b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ce:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015d0:	4a20      	ldr	r2, [pc, #128]	@ (8001654 <MX_TIM1_Init+0xa4>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015d6:	2204      	movs	r2, #4
 80015d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015fa:	4815      	ldr	r0, [pc, #84]	@ (8001650 <MX_TIM1_Init+0xa0>)
 80015fc:	f004 f9b9 	bl	8005972 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001606:	f000 f901 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4619      	mov	r1, r3
 8001616:	480e      	ldr	r0, [pc, #56]	@ (8001650 <MX_TIM1_Init+0xa0>)
 8001618:	f004 fa02 	bl	8005a20 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001622:	f000 f8f3 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	@ (8001650 <MX_TIM1_Init+0xa0>)
 8001638:	f004 fbc6 	bl	8005dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001642:	f000 f8e3 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000334 	.word	0x20000334
 8001654:	40012c00 	.word	0x40012c00

08001658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 800165e:	4a16      	ldr	r2, [pc, #88]	@ (80016b8 <MX_USART1_UART_Init+0x60>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 8001664:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800169a:	2300      	movs	r3, #0
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_USART1_UART_Init+0x5c>)
 80016a2:	f005 f916 	bl	80068d2 <HAL_RS485Ex_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 f8ae 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000380 	.word	0x20000380
 80016b8:	40013800 	.word	0x40013800

080016bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_UART_MspInit(&huart2);
 80016c0:	4815      	ldr	r0, [pc, #84]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016c2:	f000 fbc7 	bl	8001e54 <HAL_UART_MspInit>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <MX_USART2_UART_Init+0x60>)
 80016ca:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016ce:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016e8:	220c      	movs	r2, #12
 80016ea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 8001706:	f004 fbc5 	bl	8005e94 <HAL_UART_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f87c 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000408 	.word	0x20000408
 800171c:	40004400 	.word	0x40004400

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a29      	ldr	r2, [pc, #164]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4a1d      	ldr	r2, [pc, #116]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_FAULT_GPIO_Port, GEN_FAULT_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	2101      	movs	r1, #1
 8001782:	4818      	ldr	r0, [pc, #96]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 8001784:	f002 fd84 	bl	8004290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001788:	2308      	movs	r3, #8
 800178a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179e:	f002 fbf5 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_FAULT_Pin */
  GPIO_InitStruct.Pin = GEN_FAULT_Pin;
 80017a2:	2301      	movs	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEN_FAULT_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	480a      	ldr	r0, [pc, #40]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 80017ba:	f002 fbe7 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 80017be:	2310      	movs	r3, #16
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_GPIO_Init+0xc4>)
 80017d2:	f002 fbdb 	bl	8003f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400

080017e8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the LPUART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80017f0:	1d39      	adds	r1, r7, #4
 80017f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017f6:	2201      	movs	r2, #1
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <__io_putchar+0x20>)
 80017fa:	f004 fb99 	bl	8005f30 <HAL_UART_Transmit>

	return ch;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000408 	.word	0x20000408

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <readLinearPotentiometer>:

#include "sensor_read_helpers.h"
#include <stdio.h>


void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
	if (HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD) {
 8001824:	f000 fd80 	bl	8002328 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b15      	cmp	r3, #21
 8001832:	d928      	bls.n	8001886 <readLinearPotentiometer+0x6e>

		HAL_ADC_Start(hadc);
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f001 f8ff 	bl	8002a38 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 800183a:	210a      	movs	r1, #10
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f001 f991 	bl	8002b64 <HAL_ADC_PollForConversion>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11b      	bne.n	8001880 <readLinearPotentiometer+0x68>
			uint32_t adc_val = HAL_ADC_GetValue(hadc);
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f001 fa1a 	bl	8002c82 <HAL_ADC_GetValue>
 800184e:	6178      	str	r0, [r7, #20]
			HAL_ADC_Stop(hadc);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f001 f954 	bl	8002afe <HAL_ADC_Stop>

			uint16_t scaled_travel = (uint16_t)((adc_val * 65535UL) / 4095);
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4613      	mov	r3, r2
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	1a9a      	subs	r2, r3, r2
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <readLinearPotentiometer+0x78>)
 8001860:	fba3 1302 	umull	r1, r3, r3, r2
 8001864:	1ad2      	subs	r2, r2, r3
 8001866:	0852      	lsrs	r2, r2, #1
 8001868:	4413      	add	r3, r2
 800186a:	0adb      	lsrs	r3, r3, #11
 800186c:	827b      	strh	r3, [r7, #18]
			dataframe->data.shockTravel = scaled_travel;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8a7a      	ldrh	r2, [r7, #18]
 8001872:	809a      	strh	r2, [r3, #4]

			*lastReadMS = HAL_GetTick();
 8001874:	f000 fd58 	bl	8002328 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	601a      	str	r2, [r3, #0]
		} else {
			HAL_ADC_Stop(hadc);
		}
	}
}
 800187e:	e002      	b.n	8001886 <readLinearPotentiometer+0x6e>
			HAL_ADC_Stop(hadc);
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f001 f93c 	bl	8002afe <HAL_ADC_Stop>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	00100101 	.word	0x00100101

08001894 <readBrakeTemp>:

void readBrakeTemp(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe, UART_HandleTypeDef *uartPort) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	uint8_t txData[8];

	if(HAL_GetTick() - *lastReadMS > BRAKE_TEMP_SAMPLE_PERIOD){
 80018a0:	f000 fd42 	bl	8002328 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80018ae:	d91e      	bls.n	80018ee <readBrakeTemp+0x5a>
		//send data
//		for (int i = 1; i < 200; i++) {
			txData[0] = 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	743b      	strb	r3, [r7, #16]
			txData[1] = 0x03;
 80018b4:	2303      	movs	r3, #3
 80018b6:	747b      	strb	r3, [r7, #17]
			txData[2] = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	74bb      	strb	r3, [r7, #18]
			txData[3] = 0x02;
 80018bc:	2302      	movs	r3, #2
 80018be:	74fb      	strb	r3, [r7, #19]
			txData[4] = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	753b      	strb	r3, [r7, #20]
			txData[5] = 0x01;
 80018c4:	2301      	movs	r3, #1
 80018c6:	757b      	strb	r3, [r7, #21]
//			uint16_t crc = computeCRC16(txData, 6);
			txData[6] = 0xFF;
 80018c8:	23ff      	movs	r3, #255	@ 0xff
 80018ca:	75bb      	strb	r3, [r7, #22]
			txData[7] = 0xFF;
 80018cc:	23ff      	movs	r3, #255	@ 0xff
 80018ce:	75fb      	strb	r3, [r7, #23]



			dataframe->data.brakeTemp = sendBrakeTempData(txData, uartPort);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fc5a 	bl	8001190 <sendBrakeTempData>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	805a      	strh	r2, [r3, #2]
			//todo: actual brake temp sensor read code
			*lastReadMS = HAL_GetTick();
 80018e4:	f000 fd20 	bl	8002328 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	601a      	str	r2, [r3, #0]
//		}
	}

	//todo: convert to deg C
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <readTireTemp>:

void readTireTemp(uint32_t *lastReadMS, TTEMP_DATAFRAME *dataframes) {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > TIRE_TEMP_SAMPLE_PERIOD){
 8001900:	f000 fd12 	bl	8002328 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8001910:	d363      	bcc.n	80019da <readTireTemp+0xe4>
		for(int i = 0; i < 4; i++) {
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e058      	b.n	80019ca <readTireTemp+0xd4>
			dataframes[i].data.pix0 = 1 + (4*i);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	b2da      	uxtb	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	6839      	ldr	r1, [r7, #0]
 8001926:	440b      	add	r3, r1
 8001928:	3201      	adds	r2, #1
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix1 = 2 + (4*i);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	b2da      	uxtb	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	440b      	add	r3, r1
 800193e:	3202      	adds	r2, #2
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	705a      	strb	r2, [r3, #1]
			dataframes[i].data.pix2 = 3 + (4*i);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	440b      	add	r3, r1
 8001954:	3203      	adds	r2, #3
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	709a      	strb	r2, [r3, #2]
			dataframes[i].data.pix3 = 4 + (4*i);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	440b      	add	r3, r1
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	70da      	strb	r2, [r3, #3]
			dataframes[i].data.pix4 = 5 + (4*i);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	b2da      	uxtb	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	440b      	add	r3, r1
 800197e:	3205      	adds	r2, #5
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	711a      	strb	r2, [r3, #4]
			dataframes[i].data.pix5 = 6 + (4*i);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	b2da      	uxtb	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	440b      	add	r3, r1
 8001994:	3206      	adds	r2, #6
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	715a      	strb	r2, [r3, #5]
			dataframes[i].data.pix6 = 7 + (4*i);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	440b      	add	r3, r1
 80019aa:	3207      	adds	r2, #7
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	719a      	strb	r2, [r3, #6]
			dataframes[i].data.pix7 = 8 + (4*i);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3302      	adds	r3, #2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	440b      	add	r3, r1
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	71da      	strb	r2, [r3, #7]
		for(int i = 0; i < 4; i++) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	dda3      	ble.n	8001918 <readTireTemp+0x22>
		}


		//todo: actual tire temp sensor read code
		*lastReadMS = HAL_GetTick();
 80019d0:	f000 fcaa 	bl	8002328 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
	}
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <readStrainGauges>:
void readStrainGauges(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, SG_DATAFRAME *dataframe) {
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 80019ee:	f000 fc9b 	bl	8002328 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d910      	bls.n	8001a20 <readStrainGauges+0x3e>
		dataframe->data.SG0 = 0;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	801a      	strh	r2, [r3, #0]
		dataframe->data.SG1 = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	805a      	strh	r2, [r3, #2]
		dataframe->data.SG2 = 0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	809a      	strh	r2, [r3, #4]
		dataframe->data.SG3 = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	80da      	strh	r2, [r3, #6]

		//todo: actual strain gauge sensor read code
		//todo: convert counts to newtons
		*lastReadMS = HAL_GetTick();
 8001a16:	f000 fc87 	bl	8002328 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	601a      	str	r2, [r3, #0]
	}
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <readWheelSpeed>:

void readWheelSpeed(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
    static uint32_t edgeCount = 0;
    static uint32_t sampleStartTime = 0;
    static uint8_t prevLevel = 0;
    const uint32_t sampleWindowMS = 200;
 8001a32:	23c8      	movs	r3, #200	@ 0xc8
 8001a34:	61fb      	str	r3, [r7, #28]
    const uint32_t edgesPerRev = 24;
 8001a36:	2318      	movs	r3, #24
 8001a38:	61bb      	str	r3, [r7, #24]

    uint32_t now = HAL_GetTick();
 8001a3a:	f000 fc75 	bl	8002328 <HAL_GetTick>
 8001a3e:	6178      	str	r0, [r7, #20]

    if ((now - sampleStartTime) >= sampleWindowMS) {
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <readWheelSpeed+0xb4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d82c      	bhi.n	8001aa8 <readWheelSpeed+0x80>
        float rotations = (float)edgeCount / (float)edgesPerRev;
 8001a4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <readWheelSpeed+0xb8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a68:	edc7 7a04 	vstr	s15, [r7, #16]
        float rpm = rotations * (60000.0f / sampleWindowMS);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a76:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001ae4 <readWheelSpeed+0xbc>
 8001a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a86:	edc7 7a03 	vstr	s15, [r7, #12]

        dataframe->data.wheelRPM = (uint16_t)rpm;
 8001a8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a92:	ee17 3a90 	vmov	r3, s15
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	801a      	strh	r2, [r3, #0]

        edgeCount = 0;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <readWheelSpeed+0xb8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
        sampleStartTime = now;
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <readWheelSpeed+0xb4>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	6013      	str	r3, [r2, #0]
    }

    uint8_t currentLevel = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	480f      	ldr	r0, [pc, #60]	@ (8001ae8 <readWheelSpeed+0xc0>)
 8001aac:	f002 fbd8 	bl	8004260 <HAL_GPIO_ReadPin>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	72fb      	strb	r3, [r7, #11]
    if (currentLevel != prevLevel) {
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <readWheelSpeed+0xc4>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	7afa      	ldrb	r2, [r7, #11]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d007      	beq.n	8001ace <readWheelSpeed+0xa6>
        edgeCount++;
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <readWheelSpeed+0xb8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a06      	ldr	r2, [pc, #24]	@ (8001ae0 <readWheelSpeed+0xb8>)
 8001ac6:	6013      	str	r3, [r2, #0]
        prevLevel = currentLevel;
 8001ac8:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <readWheelSpeed+0xc4>)
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	7013      	strb	r3, [r2, #0]
    }

    *lastReadMS = now;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200004fc 	.word	0x200004fc
 8001ae0:	20000500 	.word	0x20000500
 8001ae4:	476a6000 	.word	0x476a6000
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	20000504 	.word	0x20000504

08001af0 <readBoardTemp>:




void readBoardTemp(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8001afc:	f000 fc14 	bl	8002328 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d907      	bls.n	8001b1c <readBoardTemp+0x2c>
		dataframe->data.boardTemp = 0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	719a      	strb	r2, [r3, #6]


		//todo: use ads1118, same chip as the shits, to read board temp
		//todo: convert counts to deg.C
		*lastReadMS = HAL_GetTick();
 8001b12:	f000 fc09 	bl	8002328 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	601a      	str	r2, [r3, #0]
	}
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09e      	sub	sp, #120	@ 0x78
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	2254      	movs	r2, #84	@ 0x54
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 fc62 	bl	8007456 <memset>
  if(hadc->Instance==ADC1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a25      	ldr	r2, [pc, #148]	@ (8001c2c <HAL_ADC_MspInit+0xc0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d143      	bne.n	8001c24 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ba0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ba2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001bc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fb46 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001bd6:	f7ff fe19 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_ADC_MspInit+0xc4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a14      	ldr	r2, [pc, #80]	@ (8001c30 <HAL_ADC_MspInit+0xc4>)
 8001be0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_ADC_MspInit+0xc4>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_ADC_MspInit+0xc4>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_ADC_MspInit+0xc4>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_ADC_MspInit+0xc4>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c20:	f002 f9b4 	bl	8003f8c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c24:	bf00      	nop
 8001c26:	3778      	adds	r7, #120	@ 0x78
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	50040000 	.word	0x50040000
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <HAL_CAN_MspInit+0xa4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d13b      	bne.n	8001cce <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <HAL_CAN_MspInit+0xa8>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	4a20      	ldr	r2, [pc, #128]	@ (8001cdc <HAL_CAN_MspInit+0xa8>)
 8001c5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <HAL_CAN_MspInit+0xa8>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <HAL_CAN_MspInit+0xa8>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c72:	4a1a      	ldr	r2, [pc, #104]	@ (8001cdc <HAL_CAN_MspInit+0xa8>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7a:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <HAL_CAN_MspInit+0xa8>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c98:	2309      	movs	r3, #9
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca6:	f002 f971 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cbc:	2309      	movs	r3, #9
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cca:	f002 f95f 	bl	8003f8c <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40006400 	.word	0x40006400
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09e      	sub	sp, #120	@ 0x78
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	2254      	movs	r2, #84	@ 0x54
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 fba8 	bl	8007456 <memset>
  if(hi2c->Instance==I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <HAL_I2C_MspInit+0xa4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d135      	bne.n	8001d7c <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d10:	2340      	movs	r3, #64	@ 0x40
 8001d12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fa9d 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d28:	f7ff fd70 	bl	800180c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <HAL_I2C_MspInit+0xa8>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d30:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <HAL_I2C_MspInit+0xa8>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <HAL_I2C_MspInit+0xa8>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d44:	23c0      	movs	r3, #192	@ 0xc0
 8001d46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d48:	2312      	movs	r3, #18
 8001d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d54:	2304      	movs	r3, #4
 8001d56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <HAL_I2C_MspInit+0xac>)
 8001d60:	f002 f914 	bl	8003f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_I2C_MspInit+0xa8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_I2C_MspInit+0xa8>)
 8001d6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_I2C_MspInit+0xa8>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3778      	adds	r7, #120	@ 0x78
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40005400 	.word	0x40005400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000400 	.word	0x48000400

08001d90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <HAL_SPI_MspInit+0x7c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d128      	bne.n	8001e04 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db6:	4a16      	ldr	r2, [pc, #88]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23f0      	movs	r3, #240	@ 0xf0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df2:	2305      	movs	r3, #5
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e00:	f002 f8c4 	bl	8003f8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	@ 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013000 	.word	0x40013000
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_TIM_Base_MspInit+0x38>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10b      	bne.n	8001e3e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <HAL_TIM_Base_MspInit+0x3c>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <HAL_TIM_Base_MspInit+0x3c>)
 8001e2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <HAL_TIM_Base_MspInit+0x3c>)
 8001e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40012c00 	.word	0x40012c00
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0a2      	sub	sp, #136	@ 0x88
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	2254      	movs	r2, #84	@ 0x54
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f005 faee 	bl	8007456 <memset>
  if(huart->Instance==USART1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a59      	ldr	r2, [pc, #356]	@ (8001fe4 <HAL_UART_MspInit+0x190>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d158      	bne.n	8001f36 <HAL_UART_MspInit+0xe2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 f9e3 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e9c:	f7ff fcb6 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea0:	4b51      	ldr	r3, [pc, #324]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea4:	4a50      	ldr	r2, [pc, #320]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eac:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec4:	4b48      	ldr	r3, [pc, #288]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	4b45      	ldr	r3, [pc, #276]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed4:	4a44      	ldr	r2, [pc, #272]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001edc:	4b42      	ldr	r3, [pc, #264]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB3 (JTDO-TRACESWO)     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ee8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001eec:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001efc:	2307      	movs	r3, #7
 8001efe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0c:	f002 f83e 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f10:	2308      	movs	r3, #8
 8001f12:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f22:	2307      	movs	r3, #7
 8001f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	482f      	ldr	r0, [pc, #188]	@ (8001fec <HAL_UART_MspInit+0x198>)
 8001f30:	f002 f82c 	bl	8003f8c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f34:	e051      	b.n	8001fda <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <HAL_UART_MspInit+0x19c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d14c      	bne.n	8001fda <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f985 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_UART_MspInit+0x108>
      Error_Handler();
 8001f58:	f7ff fc58 	bl	800180c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5c:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f68:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_UART_MspInit+0x194>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fae:	f001 ffed 	bl	8003f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fb6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd6:	f001 ffd9 	bl	8003f8c <HAL_GPIO_Init>
}
 8001fda:	bf00      	nop
 8001fdc:	3788      	adds	r7, #136	@ 0x88
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	40004400 	.word	0x40004400

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <MemManage_Handler+0x4>

0800200c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <UsageFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204a:	f000 f959 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}

08002052 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  return 1;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_kill>:

int _kill(int pid, int sig)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206c:	f005 fa46 	bl	80074fc <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	2216      	movs	r2, #22
 8002074:	601a      	str	r2, [r3, #0]
  return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_exit>:

void _exit (int status)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208a:	f04f 31ff 	mov.w	r1, #4294967295
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffe7 	bl	8002062 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <_exit+0x12>

08002098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020aa:	f3af 8000 	nop.w
 80020ae:	4601      	mov	r1, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf0      	blt.n	80020aa <_read+0x12>
  }

  return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e009      	b.n	80020f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fb7b 	bl	80017e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf1      	blt.n	80020e4 <_write+0x12>
  }
  return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_close>:

int _close(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002132:	605a      	str	r2, [r3, #4]
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_isatty>:

int _isatty(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f005 f9aa 	bl	80074fc <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000c000 	.word	0x2000c000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	20000508 	.word	0x20000508
 80021dc:	20000660 	.word	0x20000660

080021e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <SystemInit+0x20>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <SystemInit+0x20>)
 80021ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800223c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002208:	f7ff ffea 	bl	80021e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800220c:	480c      	ldr	r0, [pc, #48]	@ (8002240 <LoopForever+0x6>)
  ldr r1, =_edata
 800220e:	490d      	ldr	r1, [pc, #52]	@ (8002244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <LoopForever+0xe>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002224:	4c0a      	ldr	r4, [pc, #40]	@ (8002250 <LoopForever+0x16>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002232:	f005 f969 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002236:	f7fe ffcf 	bl	80011d8 <main>

0800223a <LoopForever>:

LoopForever:
    b LoopForever
 800223a:	e7fe      	b.n	800223a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800223c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002244:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002248:	08009684 	.word	0x08009684
  ldr r2, =_sbss
 800224c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002250:	2000065c 	.word	0x2000065c

08002254 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_IRQHandler>

08002256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f001 fe5f 	bl	8003f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f80e 	bl	8002288 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e001      	b.n	800227c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002278:	f7ff fc54 	bl	8001b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800227c:	79fb      	ldrb	r3, [r7, #7]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002294:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_InitTick+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800229c:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <HAL_InitTick+0x70>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_InitTick+0x6c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 fe5d 	bl	8003f72 <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d809      	bhi.n	80022d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f001 fe35 	bl	8003f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d0:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_InitTick+0x74>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e007      	b.n	80022e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e004      	b.n	80022e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e001      	b.n	80022e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008
 8002324:	2000050c 	.word	0x2000050c

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	2000050c 	.word	0x2000050c

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008

08002388 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3360      	adds	r3, #96	@ 0x60
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <LL_ADC_SetOffset+0x44>)
 8002412:	4013      	ands	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	4313      	orrs	r3, r2
 8002420:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	03fff000 	.word	0x03fff000

08002438 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3360      	adds	r3, #96	@ 0x60
 8002446:	461a      	mov	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3360      	adds	r3, #96	@ 0x60
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	431a      	orrs	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3330      	adds	r3, #48	@ 0x30
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	4413      	add	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	211f      	movs	r1, #31
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 011f 	and.w	r1, r3, #31
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3314      	adds	r3, #20
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0e5b      	lsrs	r3, r3, #25
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	0d1b      	lsrs	r3, r3, #20
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2107      	movs	r1, #7
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	401a      	ands	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0d1b      	lsrs	r3, r3, #20
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	43db      	mvns	r3, r3
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0318 	and.w	r3, r3, #24
 8002592:	4908      	ldr	r1, [pc, #32]	@ (80025b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002594:	40d9      	lsrs	r1, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	400b      	ands	r3, r1
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	431a      	orrs	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	0007ffff 	.word	0x0007ffff

080025b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6093      	str	r3, [r2, #8]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002614:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002618:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002640:	d101      	bne.n	8002646 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002664:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800268c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <LL_ADC_IsEnabled+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_IsEnabled+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d101      	bne.n	80026e2 <LL_ADC_IsDisableOngoing+0x18>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <LL_ADC_IsDisableOngoing+0x1a>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002700:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d101      	bne.n	8002758 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002776:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e126      	b.n	8002a1c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff f9c5 	bl	8001b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fef1 	bl	80025dc <LL_ADC_IsDeepPowerDownEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fed7 	bl	80025b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff0c 	bl	800262c <LL_ADC_IsInternalRegulatorEnabled>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fef0 	bl	8002604 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002824:	4b7f      	ldr	r3, [pc, #508]	@ (8002a24 <HAL_ADC_Init+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a28 <HAL_ADC_Init+0x274>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002838:	e002      	b.n	8002840 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3b01      	subs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff feee 	bl	800262c <LL_ADC_IsInternalRegulatorEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff62 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 800287c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 80bf 	bne.w	8002a0a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 80bb 	bne.w	8002a0a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800289c:	f043 0202 	orr.w	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fefb 	bl	80026a4 <LL_ADC_IsEnabled>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b4:	485d      	ldr	r0, [pc, #372]	@ (8002a2c <HAL_ADC_Init+0x278>)
 80028b6:	f7ff fef5 	bl	80026a4 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4619      	mov	r1, r3
 80028c6:	485a      	ldr	r0, [pc, #360]	@ (8002a30 <HAL_ADC_Init+0x27c>)
 80028c8:	f7ff fd5e 	bl	8002388 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7e5b      	ldrb	r3, [r3, #25]
 80028d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	3b01      	subs	r3, #1
 8002900:	045b      	lsls	r3, r3, #17
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002914:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	4b42      	ldr	r3, [pc, #264]	@ (8002a34 <HAL_ADC_Init+0x280>)
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	430b      	orrs	r3, r1
 8002936:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff26 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 8002942:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d13d      	bne.n	80029c6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d13a      	bne.n	80029c6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002954:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800295c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800296c:	f023 0302 	bic.w	r3, r3, #2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	430b      	orrs	r3, r1
 8002978:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002980:	2b01      	cmp	r3, #1
 8002982:	d118      	bne.n	80029b6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029a6:	430a      	orrs	r2, r1
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	611a      	str	r2, [r3, #16]
 80029b4:	e007      	b.n	80029c6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10c      	bne.n	80029e8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	f023 010f 	bic.w	r1, r3, #15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80029e6:	e007      	b.n	80029f8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 020f 	bic.w	r2, r2, #15
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	f023 0303 	bic.w	r3, r3, #3
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a08:	e007      	b.n	8002a1a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000000 	.word	0x20000000
 8002a28:	053e2d63 	.word	0x053e2d63
 8002a2c:	50040000 	.word	0x50040000
 8002a30:	50040300 	.word	0x50040300
 8002a34:	fff0c007 	.word	0xfff0c007

08002a38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fe7b 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d14f      	bne.n	8002af0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_Start+0x26>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e04b      	b.n	8002af6 <HAL_ADC_Start+0xbe>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fdb6 	bl	80035d8 <ADC_Enable>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d137      	bne.n	8002ae6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f023 0206 	bic.w	r2, r3, #6
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	221c      	movs	r2, #28
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ad2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fe06 	bl	80026f0 <LL_ADC_REG_StartConversion>
 8002ae4:	e006      	b.n	8002af4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002aee:	e001      	b.n	8002af4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
 8002af2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_Stop+0x16>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e023      	b.n	8002b5c <HAL_ADC_Stop+0x5e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fc9e 	bl	8003460 <ADC_ConversionStop>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d111      	bne.n	8002b52 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fdd8 	bl	80036e4 <ADC_Disable>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d102      	bne.n	8002b7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b76:	2308      	movs	r3, #8
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e010      	b.n	8002b9e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b9e:	f7ff fbc3 	bl	8002328 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ba4:	e021      	b.n	8002bea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d01d      	beq.n	8002bea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002bae:	f7ff fbbb 	bl	8002328 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <HAL_ADC_PollForConversion+0x60>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d112      	bne.n	8002bea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	f043 0204 	orr.w	r2, r3, #4
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e047      	b.n	8002c7a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0d6      	beq.n	8002ba6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fc46 	bl	800249a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01c      	beq.n	8002c4e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e5b      	ldrb	r3, [r3, #25]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d118      	bne.n	8002c4e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d111      	bne.n	8002c4e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d104      	bne.n	8002c66 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2208      	movs	r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e008      	b.n	8002c78 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	220c      	movs	r2, #12
 8002c76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0b6      	sub	sp, #216	@ 0xd8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x22>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e3bb      	b.n	8003436 <HAL_ADC_ConfigChannel+0x79a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fd38 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 83a0 	bne.w	8003418 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d824      	bhi.n	8002d32 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	3b02      	subs	r3, #2
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d81b      	bhi.n	8002d2a <HAL_ADC_ConfigChannel+0x8e>
 8002cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <HAL_ADC_ConfigChannel+0x5c>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d11 	.word	0x08002d11
 8002d00:	08002d19 	.word	0x08002d19
 8002d04:	08002d21 	.word	0x08002d21
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d08:	230c      	movs	r3, #12
 8002d0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d0e:	e010      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d10:	2312      	movs	r3, #18
 8002d12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d16:	e00c      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d18:	2318      	movs	r3, #24
 8002d1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d1e:	e008      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d28:	e003      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d30:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d40:	f7ff fbbe 	bl	80024c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fcf9 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 8002d4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fd19 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 8002d5c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 81a4 	bne.w	80030b2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 819f 	bne.w	80030b2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f7ff fbc9 	bl	8002518 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d00a      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6919      	ldr	r1, [r3, #16]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db8:	f7ff fb1a 	bl	80023f0 <LL_ADC_SetOffset>
 8002dbc:	e179      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fb37 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x14e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fb2c 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002de0:	4603      	mov	r3, r0
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	e01e      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x18c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fb21 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e004      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x1a4>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	e018      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x1d6>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e004      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002e68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff faf0 	bl	8002464 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fad4 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x214>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fac9 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	f003 021f 	and.w	r2, r3, #31
 8002eae:	e01e      	b.n	8002eee <HAL_ADC_ConfigChannel+0x252>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fabe 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002ede:	2320      	movs	r3, #32
 8002ee0:	e004      	b.n	8002eec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x26a>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	e018      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x29c>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e004      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d106      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fa8d 	bl	8002464 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fa71 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x2da>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2102      	movs	r1, #2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fa66 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	e01e      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x318>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fa5b 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e004      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x330>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0e9b      	lsrs	r3, r3, #26
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	e014      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x35a>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002fda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002fe8:	2320      	movs	r3, #32
 8002fea:	e004      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d106      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fa2e 	bl	8002464 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2103      	movs	r1, #3
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fa12 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8003014:	4603      	mov	r3, r0
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x398>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2103      	movs	r1, #3
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fa07 	bl	8002438 <LL_ADC_GetOffsetChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	f003 021f 	and.w	r2, r3, #31
 8003032:	e017      	b.n	8003064 <HAL_ADC_ConfigChannel+0x3c8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2103      	movs	r1, #3
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f9fc 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800304c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800304e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800305a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_ADC_ConfigChannel+0x3e0>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	e011      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x404>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800308a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800308c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800308e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003094:	2320      	movs	r3, #32
 8003096:	e003      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d106      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2103      	movs	r1, #3
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f9d9 	bl	8002464 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff faf4 	bl	80026a4 <LL_ADC_IsEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 8140 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	461a      	mov	r2, r3
 80030d2:	f7ff fa4d 	bl	8002570 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a8f      	ldr	r2, [pc, #572]	@ (8003318 <HAL_ADC_ConfigChannel+0x67c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	f040 8131 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <HAL_ADC_ConfigChannel+0x46e>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	0e9b      	lsrs	r3, r3, #26
 80030f8:	3301      	adds	r3, #1
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2b09      	cmp	r3, #9
 8003100:	bf94      	ite	ls
 8003102:	2301      	movls	r3, #1
 8003104:	2300      	movhi	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e019      	b.n	800313e <HAL_ADC_ConfigChannel+0x4a2>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800311c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003122:	2320      	movs	r3, #32
 8003124:	e003      	b.n	800312e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2b09      	cmp	r3, #9
 8003136:	bf94      	ite	ls
 8003138:	2301      	movls	r3, #1
 800313a:	2300      	movhi	r3, #0
 800313c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313e:	2b00      	cmp	r3, #0
 8003140:	d079      	beq.n	8003236 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <HAL_ADC_ConfigChannel+0x4c2>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	3301      	adds	r3, #1
 8003156:	069b      	lsls	r3, r3, #26
 8003158:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800315c:	e015      	b.n	800318a <HAL_ADC_ConfigChannel+0x4ee>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800316c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e003      	b.n	8003182 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800317a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3301      	adds	r3, #1
 8003184:	069b      	lsls	r3, r3, #26
 8003186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x50e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	3301      	adds	r3, #1
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	e017      	b.n	80031da <HAL_ADC_ConfigChannel+0x53e>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80031b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80031bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80031c2:	2320      	movs	r3, #32
 80031c4:	e003      	b.n	80031ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80031c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	ea42 0103 	orr.w	r1, r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x564>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 021f 	and.w	r2, r3, #31
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	051b      	lsls	r3, r3, #20
 80031fe:	e018      	b.n	8003232 <HAL_ADC_ConfigChannel+0x596>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e003      	b.n	8003224 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800321c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f003 021f 	and.w	r2, r3, #31
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003232:	430b      	orrs	r3, r1
 8003234:	e081      	b.n	800333a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x5b6>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	3301      	adds	r3, #1
 800324a:	069b      	lsls	r3, r3, #26
 800324c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003250:	e015      	b.n	800327e <HAL_ADC_ConfigChannel+0x5e2>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e003      	b.n	8003276 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3301      	adds	r3, #1
 8003278:	069b      	lsls	r3, r3, #26
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_ADC_ConfigChannel+0x602>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	0e9b      	lsrs	r3, r3, #26
 8003290:	3301      	adds	r3, #1
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	e017      	b.n	80032ce <HAL_ADC_ConfigChannel+0x632>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	61bb      	str	r3, [r7, #24]
  return result;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80032b6:	2320      	movs	r3, #32
 80032b8:	e003      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	ea42 0103 	orr.w	r1, r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x65e>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 021f 	and.w	r2, r3, #31
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	3b1e      	subs	r3, #30
 80032f2:	051b      	lsls	r3, r3, #20
 80032f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032f8:	e01e      	b.n	8003338 <HAL_ADC_ConfigChannel+0x69c>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	60fb      	str	r3, [r7, #12]
  return result;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d104      	bne.n	800331c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003312:	2320      	movs	r3, #32
 8003314:	e006      	b.n	8003324 <HAL_ADC_ConfigChannel+0x688>
 8003316:	bf00      	nop
 8003318:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	3301      	adds	r3, #1
 8003326:	f003 021f 	and.w	r2, r3, #31
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	3b1e      	subs	r3, #30
 8003332:	051b      	lsls	r3, r3, #20
 8003334:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003338:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333e:	4619      	mov	r1, r3
 8003340:	f7ff f8ea 	bl	8002518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b3d      	ldr	r3, [pc, #244]	@ (8003440 <HAL_ADC_ConfigChannel+0x7a4>)
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d06c      	beq.n	800342a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003350:	483c      	ldr	r0, [pc, #240]	@ (8003444 <HAL_ADC_ConfigChannel+0x7a8>)
 8003352:	f7ff f83f 	bl	80023d4 <LL_ADC_GetCommonPathInternalCh>
 8003356:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a3a      	ldr	r2, [pc, #232]	@ (8003448 <HAL_ADC_ConfigChannel+0x7ac>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d127      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003368:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d121      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a35      	ldr	r2, [pc, #212]	@ (800344c <HAL_ADC_ConfigChannel+0x7b0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d157      	bne.n	800342a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800337a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800337e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003382:	4619      	mov	r1, r3
 8003384:	482f      	ldr	r0, [pc, #188]	@ (8003444 <HAL_ADC_ConfigChannel+0x7a8>)
 8003386:	f7ff f812 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800338a:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_ADC_ConfigChannel+0x7b4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	4a30      	ldr	r2, [pc, #192]	@ (8003454 <HAL_ADC_ConfigChannel+0x7b8>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033a4:	e002      	b.n	80033ac <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f9      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b2:	e03a      	b.n	800342a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a27      	ldr	r2, [pc, #156]	@ (8003458 <HAL_ADC_ConfigChannel+0x7bc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d113      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1f      	ldr	r2, [pc, #124]	@ (800344c <HAL_ADC_ConfigChannel+0x7b0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d12a      	bne.n	800342a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033dc:	4619      	mov	r1, r3
 80033de:	4819      	ldr	r0, [pc, #100]	@ (8003444 <HAL_ADC_ConfigChannel+0x7a8>)
 80033e0:	f7fe ffe5 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033e4:	e021      	b.n	800342a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <HAL_ADC_ConfigChannel+0x7c0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d11c      	bne.n	800342a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d116      	bne.n	800342a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a12      	ldr	r2, [pc, #72]	@ (800344c <HAL_ADC_ConfigChannel+0x7b0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d111      	bne.n	800342a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800340a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800340e:	4619      	mov	r1, r3
 8003410:	480c      	ldr	r0, [pc, #48]	@ (8003444 <HAL_ADC_ConfigChannel+0x7a8>)
 8003412:	f7fe ffcc 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
 8003416:	e008      	b.n	800342a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003432:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003436:	4618      	mov	r0, r3
 8003438:	37d8      	adds	r7, #216	@ 0xd8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	80080000 	.word	0x80080000
 8003444:	50040300 	.word	0x50040300
 8003448:	c7520000 	.word	0xc7520000
 800344c:	50040000 	.word	0x50040000
 8003450:	20000000 	.word	0x20000000
 8003454:	053e2d63 	.word	0x053e2d63
 8003458:	cb840000 	.word	0xcb840000
 800345c:	80000001 	.word	0x80000001

08003460 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff f962 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 800347c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f983 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 8003488:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d103      	bne.n	8003498 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8098 	beq.w	80035c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d02a      	beq.n	80034fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7e5b      	ldrb	r3, [r3, #25]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d126      	bne.n	80034fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7e1b      	ldrb	r3, [r3, #24]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d122      	bne.n	80034fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034ba:	e014      	b.n	80034e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4a45      	ldr	r2, [pc, #276]	@ (80035d4 <ADC_ConversionStop+0x174>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d90d      	bls.n	80034e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e074      	b.n	80035ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f0:	2b40      	cmp	r3, #64	@ 0x40
 80034f2:	d1e3      	bne.n	80034bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2240      	movs	r2, #64	@ 0x40
 80034fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d014      	beq.n	800352c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f91a 	bl	8002740 <LL_ADC_REG_IsConversionOngoing>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff f8d7 	bl	80026ca <LL_ADC_IsDisableOngoing>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff f8f6 	bl	8002718 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d014      	beq.n	800355c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff f929 	bl	800278e <LL_ADC_INJ_IsConversionOngoing>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f8bf 	bl	80026ca <LL_ADC_IsDisableOngoing>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff f905 	bl	8002766 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d005      	beq.n	800356e <ADC_ConversionStop+0x10e>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d105      	bne.n	8003574 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003568:	230c      	movs	r3, #12
 800356a:	617b      	str	r3, [r7, #20]
        break;
 800356c:	e005      	b.n	800357a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800356e:	2308      	movs	r3, #8
 8003570:	617b      	str	r3, [r7, #20]
        break;
 8003572:	e002      	b.n	800357a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003574:	2304      	movs	r3, #4
 8003576:	617b      	str	r3, [r7, #20]
        break;
 8003578:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800357a:	f7fe fed5 	bl	8002328 <HAL_GetTick>
 800357e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003580:	e01b      	b.n	80035ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003582:	f7fe fed1 	bl	8002328 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b05      	cmp	r3, #5
 800358e:	d914      	bls.n	80035ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e007      	b.n	80035ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1dc      	bne.n	8003582 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	a33fffff 	.word	0xa33fffff

080035d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff f85b 	bl	80026a4 <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d169      	bne.n	80036c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <ADC_Enable+0xfc>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003606:	f043 0210 	orr.w	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e055      	b.n	80036ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff f816 	bl	8002654 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003628:	482b      	ldr	r0, [pc, #172]	@ (80036d8 <ADC_Enable+0x100>)
 800362a:	f7fe fed3 	bl	80023d4 <LL_ADC_GetCommonPathInternalCh>
 800362e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <ADC_Enable+0x104>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	4a28      	ldr	r2, [pc, #160]	@ (80036e0 <ADC_Enable+0x108>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003652:	e002      	b.n	800365a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3b01      	subs	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f9      	bne.n	8003654 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003660:	f7fe fe62 	bl	8002328 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003666:	e028      	b.n	80036ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f819 	bl	80026a4 <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d104      	bne.n	8003682 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fe ffe9 	bl	8002654 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003682:	f7fe fe51 	bl	8002328 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d914      	bls.n	80036ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d00d      	beq.n	80036ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e007      	b.n	80036ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d1cf      	bne.n	8003668 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	8000003f 	.word	0x8000003f
 80036d8:	50040300 	.word	0x50040300
 80036dc:	20000000 	.word	0x20000000
 80036e0:	053e2d63 	.word	0x053e2d63

080036e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe ffea 	bl	80026ca <LL_ADC_IsDisableOngoing>
 80036f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe ffd1 	bl	80026a4 <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d047      	beq.n	8003798 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d144      	bne.n	8003798 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 030d 	and.w	r3, r3, #13
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10c      	bne.n	8003736 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe ffab 	bl	800267c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2203      	movs	r2, #3
 800372c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800372e:	f7fe fdfb 	bl	8002328 <HAL_GetTick>
 8003732:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003734:	e029      	b.n	800378a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	f043 0210 	orr.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e023      	b.n	800379a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003752:	f7fe fde9 	bl	8002328 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d914      	bls.n	800378a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003772:	f043 0210 	orr.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e007      	b.n	800379a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1dc      	bne.n	8003752 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0ed      	b.n	8003990 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fe fa37 	bl	8001c34 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d6:	f7fe fda7 	bl	8002328 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037dc:	e012      	b.n	8003804 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037de:	f7fe fda3 	bl	8002328 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b0a      	cmp	r3, #10
 80037ea:	d90b      	bls.n	8003804 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2205      	movs	r2, #5
 80037fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0c5      	b.n	8003990 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0e5      	beq.n	80037de <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0202 	bic.w	r2, r2, #2
 8003820:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003822:	f7fe fd81 	bl	8002328 <HAL_GetTick>
 8003826:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003828:	e012      	b.n	8003850 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800382a:	f7fe fd7d 	bl	8002328 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b0a      	cmp	r3, #10
 8003836:	d90b      	bls.n	8003850 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2205      	movs	r2, #5
 8003848:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e09f      	b.n	8003990 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e5      	bne.n	800382a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7e1b      	ldrb	r3, [r3, #24]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e007      	b.n	8003888 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003886:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7e5b      	ldrb	r3, [r3, #25]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d108      	bne.n	80038a2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e007      	b.n	80038b2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7e9b      	ldrb	r3, [r3, #26]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d108      	bne.n	80038cc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e007      	b.n	80038dc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0220 	bic.w	r2, r2, #32
 80038da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7edb      	ldrb	r3, [r3, #27]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d108      	bne.n	80038f6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0210 	bic.w	r2, r2, #16
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	e007      	b.n	8003906 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0210 	orr.w	r2, r2, #16
 8003904:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7f1b      	ldrb	r3, [r3, #28]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d108      	bne.n	8003920 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0208 	orr.w	r2, r2, #8
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e007      	b.n	8003930 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0208 	bic.w	r2, r2, #8
 800392e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7f5b      	ldrb	r3, [r3, #29]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d108      	bne.n	800394a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0204 	orr.w	r2, r2, #4
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e007      	b.n	800395a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0204 	bic.w	r2, r2, #4
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	ea42 0103 	orr.w	r1, r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	1e5a      	subs	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d003      	beq.n	80039be <HAL_CAN_ConfigFilter+0x26>
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	f040 80aa 	bne.w	8003b12 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2201      	movs	r2, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	401a      	ands	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d123      	bne.n	8003a40 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a1a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3248      	adds	r2, #72	@ 0x48
 8003a20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a36:	6979      	ldr	r1, [r7, #20]
 8003a38:	3348      	adds	r3, #72	@ 0x48
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	440b      	add	r3, r1
 8003a3e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d122      	bne.n	8003a8e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	3248      	adds	r2, #72	@ 0x48
 8003a6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	3348      	adds	r3, #72	@ 0x48
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003aa8:	e007      	b.n	8003aba <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	401a      	ands	r2, r3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003ad4:	e007      	b.n	8003ae6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003b04:	f023 0201 	bic.w	r2, r3, #1
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e006      	b.n	8003b20 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d12e      	bne.n	8003b9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b58:	f7fe fbe6 	bl	8002328 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b5e:	e012      	b.n	8003b86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b60:	f7fe fbe2 	bl	8002328 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d90b      	bls.n	8003b86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2205      	movs	r2, #5
 8003b7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e012      	b.n	8003bac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e5      	bne.n	8003b60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e006      	b.n	8003bac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	@ 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d003      	beq.n	8003be0 <HAL_CAN_AddTxMessage+0x2c>
 8003bd8:	7ffb      	ldrb	r3, [r7, #31]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	f040 80ad 	bne.w	8003d3a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8095 	beq.w	8003d2a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	0e1b      	lsrs	r3, r3, #24
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	6809      	ldr	r1, [r1, #0]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	440b      	add	r3, r1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e00f      	b.n	8003c58 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c42:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c4c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3318      	adds	r3, #24
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	440b      	add	r3, r1
 8003c56:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6819      	ldr	r1, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3318      	adds	r3, #24
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	440b      	add	r3, r1
 8003c68:	3304      	adds	r3, #4
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	7d1b      	ldrb	r3, [r3, #20]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d111      	bne.n	8003c98 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4413      	add	r3, r2
 8003c80:	3304      	adds	r3, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6811      	ldr	r1, [r2, #0]
 8003c88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3318      	adds	r3, #24
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	440b      	add	r3, r1
 8003c94:	3304      	adds	r3, #4
 8003c96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3307      	adds	r3, #7
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	061a      	lsls	r2, r3, #24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3306      	adds	r3, #6
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3305      	adds	r3, #5
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	3204      	adds	r2, #4
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	4610      	mov	r0, r2
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	6811      	ldr	r1, [r2, #0]
 8003cc0:	ea43 0200 	orr.w	r2, r3, r0
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	440b      	add	r3, r1
 8003cca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003cce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3303      	adds	r3, #3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	061a      	lsls	r2, r3, #24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3302      	adds	r3, #2
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	4313      	orrs	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6811      	ldr	r1, [r2, #0]
 8003cf6:	ea43 0200 	orr.w	r2, r3, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	440b      	add	r3, r1
 8003d00:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003d04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3318      	adds	r3, #24
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	4413      	add	r3, r2
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	6811      	ldr	r1, [r2, #0]
 8003d18:	f043 0201 	orr.w	r2, r3, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3318      	adds	r3, #24
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	440b      	add	r3, r1
 8003d24:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e00e      	b.n	8003d48 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e006      	b.n	8003d48 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3724      	adds	r7, #36	@ 0x24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d66:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d68:	7afb      	ldrb	r3, [r7, #11]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d002      	beq.n	8003d74 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11d      	bne.n	8003db0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3301      	adds	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3301      	adds	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003db0:	68fb      	ldr	r3, [r7, #12]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60d3      	str	r3, [r2, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	@ (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	@ (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	@ 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef0:	d301      	bcc.n	8003ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00f      	b.n	8003f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f20 <SysTick_Config+0x40>)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efe:	210f      	movs	r1, #15
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	f7ff ff8e 	bl	8003e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <SysTick_Config+0x40>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0e:	4b04      	ldr	r3, [pc, #16]	@ (8003f20 <SysTick_Config+0x40>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	e000e010 	.word	0xe000e010

08003f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ff47 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	4603      	mov	r3, r0
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f4c:	f7ff ff5c 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f7ff ff8e 	bl	8003e78 <NVIC_EncodePriority>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff5d 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff ffb0 	bl	8003ee0 <SysTick_Config>
 8003f80:	4603      	mov	r3, r0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9a:	e148      	b.n	800422e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 813a 	beq.w	8004228 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d005      	beq.n	8003fcc <HAL_GPIO_Init+0x40>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d130      	bne.n	800402e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004002:	2201      	movs	r2, #1
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 0201 	and.w	r2, r3, #1
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b03      	cmp	r3, #3
 8004038:	d017      	beq.n	800406a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d123      	bne.n	80040be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	08da      	lsrs	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3208      	adds	r2, #8
 800407e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	220f      	movs	r2, #15
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	08da      	lsrs	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3208      	adds	r2, #8
 80040b8:	6939      	ldr	r1, [r7, #16]
 80040ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	2203      	movs	r2, #3
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 0203 	and.w	r2, r3, #3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8094 	beq.w	8004228 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004100:	4b52      	ldr	r3, [pc, #328]	@ (800424c <HAL_GPIO_Init+0x2c0>)
 8004102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004104:	4a51      	ldr	r2, [pc, #324]	@ (800424c <HAL_GPIO_Init+0x2c0>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6613      	str	r3, [r2, #96]	@ 0x60
 800410c:	4b4f      	ldr	r3, [pc, #316]	@ (800424c <HAL_GPIO_Init+0x2c0>)
 800410e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004118:	4a4d      	ldr	r2, [pc, #308]	@ (8004250 <HAL_GPIO_Init+0x2c4>)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	220f      	movs	r2, #15
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004142:	d00d      	beq.n	8004160 <HAL_GPIO_Init+0x1d4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a43      	ldr	r2, [pc, #268]	@ (8004254 <HAL_GPIO_Init+0x2c8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <HAL_GPIO_Init+0x1d0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a42      	ldr	r2, [pc, #264]	@ (8004258 <HAL_GPIO_Init+0x2cc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <HAL_GPIO_Init+0x1cc>
 8004154:	2302      	movs	r3, #2
 8004156:	e004      	b.n	8004162 <HAL_GPIO_Init+0x1d6>
 8004158:	2307      	movs	r3, #7
 800415a:	e002      	b.n	8004162 <HAL_GPIO_Init+0x1d6>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_GPIO_Init+0x1d6>
 8004160:	2300      	movs	r3, #0
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	f002 0203 	and.w	r2, r2, #3
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	4093      	lsls	r3, r2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004172:	4937      	ldr	r1, [pc, #220]	@ (8004250 <HAL_GPIO_Init+0x2c4>)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004180:	4b36      	ldr	r3, [pc, #216]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041a4:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041aa:	4b2c      	ldr	r3, [pc, #176]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ce:	4a23      	ldr	r2, [pc, #140]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041d4:	4b21      	ldr	r3, [pc, #132]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041f8:	4a18      	ldr	r2, [pc, #96]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041fe:	4b17      	ldr	r3, [pc, #92]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004222:	4a0e      	ldr	r2, [pc, #56]	@ (800425c <HAL_GPIO_Init+0x2d0>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3301      	adds	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	f47f aeaf 	bne.w	8003f9c <HAL_GPIO_Init+0x10>
  }
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40021000 	.word	0x40021000
 8004250:	40010000 	.word	0x40010000
 8004254:	48000400 	.word	0x48000400
 8004258:	48000800 	.word	0x48000800
 800425c:	40010400 	.word	0x40010400

08004260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	887b      	ldrh	r3, [r7, #2]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	e001      	b.n	8004282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
 800429c:	4613      	mov	r3, r2
 800429e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042a0:	787b      	ldrb	r3, [r7, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042ac:	e002      	b.n	80042b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e08d      	b.n	80043ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd fcfa 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	@ 0x24
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e006      	b.n	8004348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d108      	bne.n	8004362 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800435e:	605a      	str	r2, [r3, #4]
 8004360:	e007      	b.n	8004372 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69d9      	ldr	r1, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b20      	cmp	r3, #32
 800440a:	d138      	bne.n	800447e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004416:	2302      	movs	r3, #2
 8004418:	e032      	b.n	8004480 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2224      	movs	r2, #36	@ 0x24
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004448:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
  }
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d139      	bne.n	8004516 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e033      	b.n	8004518 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	@ 0x24
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
  }
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004528:	4b04      	ldr	r3, [pc, #16]	@ (800453c <HAL_PWREx_GetVoltageRange+0x18>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004530:	4618      	mov	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40007000 	.word	0x40007000

08004540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800454e:	d130      	bne.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004550:	4b23      	ldr	r3, [pc, #140]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800455c:	d038      	beq.n	80045d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800455e:	4b20      	ldr	r3, [pc, #128]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004566:	4a1e      	ldr	r2, [pc, #120]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004568:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800456e:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2232      	movs	r2, #50	@ 0x32
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	4a1b      	ldr	r2, [pc, #108]	@ (80045e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0c9b      	lsrs	r3, r3, #18
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004584:	e002      	b.n	800458c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b01      	subs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004598:	d102      	bne.n	80045a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f2      	bne.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045a0:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ac:	d110      	bne.n	80045d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e00f      	b.n	80045d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045be:	d007      	beq.n	80045d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045c0:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045c8:	4a05      	ldr	r2, [pc, #20]	@ (80045e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40007000 	.word	0x40007000
 80045e4:	20000000 	.word	0x20000000
 80045e8:	431bde83 	.word	0x431bde83

080045ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f000 bc02 	b.w	8004e04 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004600:	4b96      	ldr	r3, [pc, #600]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 030c 	and.w	r3, r3, #12
 8004608:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800460a:	4b94      	ldr	r3, [pc, #592]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80e4 	beq.w	80047ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_RCC_OscConfig+0x4c>
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b0c      	cmp	r3, #12
 800462c:	f040 808b 	bne.w	8004746 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b01      	cmp	r3, #1
 8004634:	f040 8087 	bne.w	8004746 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004638:	4b88      	ldr	r3, [pc, #544]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_OscConfig+0x64>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e3d9      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1a      	ldr	r2, [r3, #32]
 8004654:	4b81      	ldr	r3, [pc, #516]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_RCC_OscConfig+0x7e>
 8004660:	4b7e      	ldr	r3, [pc, #504]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004668:	e005      	b.n	8004676 <HAL_RCC_OscConfig+0x8a>
 800466a:	4b7c      	ldr	r3, [pc, #496]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800466c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004676:	4293      	cmp	r3, r2
 8004678:	d223      	bcs.n	80046c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fd8c 	bl	800519c <RCC_SetFlashLatencyFromMSIRange>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e3ba      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800468e:	4b73      	ldr	r3, [pc, #460]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a72      	ldr	r2, [pc, #456]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b70      	ldr	r3, [pc, #448]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	496d      	ldr	r1, [pc, #436]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ac:	4b6b      	ldr	r3, [pc, #428]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	4968      	ldr	r1, [pc, #416]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
 80046c0:	e025      	b.n	800470e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c2:	4b66      	ldr	r3, [pc, #408]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a65      	ldr	r2, [pc, #404]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046c8:	f043 0308 	orr.w	r3, r3, #8
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b63      	ldr	r3, [pc, #396]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4960      	ldr	r1, [pc, #384]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e0:	4b5e      	ldr	r3, [pc, #376]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	495b      	ldr	r1, [pc, #364]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fd4c 	bl	800519c <RCC_SetFlashLatencyFromMSIRange>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e37a      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800470e:	f000 fc81 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8004712:	4602      	mov	r2, r0
 8004714:	4b51      	ldr	r3, [pc, #324]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	4950      	ldr	r1, [pc, #320]	@ (8004860 <HAL_RCC_OscConfig+0x274>)
 8004720:	5ccb      	ldrb	r3, [r1, r3]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	4a4e      	ldr	r2, [pc, #312]	@ (8004864 <HAL_RCC_OscConfig+0x278>)
 800472c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800472e:	4b4e      	ldr	r3, [pc, #312]	@ (8004868 <HAL_RCC_OscConfig+0x27c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd fda8 	bl	8002288 <HAL_InitTick>
 8004738:	4603      	mov	r3, r0
 800473a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d052      	beq.n	80047e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	e35e      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d032      	beq.n	80047b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800474e:	4b43      	ldr	r3, [pc, #268]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a42      	ldr	r2, [pc, #264]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800475a:	f7fd fde5 	bl	8002328 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004762:	f7fd fde1 	bl	8002328 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e347      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004774:	4b39      	ldr	r3, [pc, #228]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004780:	4b36      	ldr	r3, [pc, #216]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a35      	ldr	r2, [pc, #212]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004786:	f043 0308 	orr.w	r3, r3, #8
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b33      	ldr	r3, [pc, #204]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4930      	ldr	r1, [pc, #192]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800479e:	4b2f      	ldr	r3, [pc, #188]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	492b      	ldr	r1, [pc, #172]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
 80047b2:	e01a      	b.n	80047ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047b4:	4b29      	ldr	r3, [pc, #164]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a28      	ldr	r2, [pc, #160]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047c0:	f7fd fdb2 	bl	8002328 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c8:	f7fd fdae 	bl	8002328 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e314      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047da:	4b20      	ldr	r3, [pc, #128]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x1dc>
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d073      	beq.n	80048de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x21c>
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d10e      	bne.n	8004820 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d10b      	bne.n	8004820 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	4b14      	ldr	r3, [pc, #80]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d063      	beq.n	80048dc <HAL_RCC_OscConfig+0x2f0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d15f      	bne.n	80048dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e2f1      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x24c>
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a0b      	ldr	r2, [pc, #44]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e025      	b.n	8004884 <HAL_RCC_OscConfig+0x298>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004840:	d114      	bne.n	800486c <HAL_RCC_OscConfig+0x280>
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a05      	ldr	r2, [pc, #20]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4b03      	ldr	r3, [pc, #12]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a02      	ldr	r2, [pc, #8]	@ (800485c <HAL_RCC_OscConfig+0x270>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e013      	b.n	8004884 <HAL_RCC_OscConfig+0x298>
 800485c:	40021000 	.word	0x40021000
 8004860:	080092b8 	.word	0x080092b8
 8004864:	20000000 	.word	0x20000000
 8004868:	20000004 	.word	0x20000004
 800486c:	4ba0      	ldr	r3, [pc, #640]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a9f      	ldr	r2, [pc, #636]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b9d      	ldr	r3, [pc, #628]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a9c      	ldr	r2, [pc, #624]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fd fd4c 	bl	8002328 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7fd fd48 	bl	8002328 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	@ 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e2ae      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a6:	4b92      	ldr	r3, [pc, #584]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x2a8>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd fd38 	bl	8002328 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd fd34 	bl	8002328 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	@ 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e29a      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ce:	4b88      	ldr	r3, [pc, #544]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x2d0>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d060      	beq.n	80049ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_OscConfig+0x310>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d119      	bne.n	800492a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d116      	bne.n	800492a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	4b7c      	ldr	r3, [pc, #496]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_OscConfig+0x328>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e277      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	4973      	ldr	r1, [pc, #460]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004928:	e040      	b.n	80049ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d023      	beq.n	800497a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004932:	4b6f      	ldr	r3, [pc, #444]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6e      	ldr	r2, [pc, #440]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fd fcf3 	bl	8002328 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004946:	f7fd fcef 	bl	8002328 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e255      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004958:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004964:	4b62      	ldr	r3, [pc, #392]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	495f      	ldr	r1, [pc, #380]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
 8004978:	e018      	b.n	80049ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800497a:	4b5d      	ldr	r3, [pc, #372]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5c      	ldr	r2, [pc, #368]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004986:	f7fd fccf 	bl	8002328 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800498e:	f7fd fccb 	bl	8002328 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e231      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a0:	4b53      	ldr	r3, [pc, #332]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f0      	bne.n	800498e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d03c      	beq.n	8004a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01c      	beq.n	80049fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c0:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c6:	4a4a      	ldr	r2, [pc, #296]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd fcaa 	bl	8002328 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fd fca6 	bl	8002328 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e20c      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ea:	4b41      	ldr	r3, [pc, #260]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <HAL_RCC_OscConfig+0x3ec>
 80049f8:	e01b      	b.n	8004a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fa:	4b3d      	ldr	r3, [pc, #244]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 80049fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a00:	4a3b      	ldr	r2, [pc, #236]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0a:	f7fd fc8d 	bl	8002328 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fd fc89 	bl	8002328 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e1ef      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a24:	4b32      	ldr	r3, [pc, #200]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ef      	bne.n	8004a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80a6 	beq.w	8004b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a40:	2300      	movs	r3, #0
 8004a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a44:	4b2a      	ldr	r3, [pc, #168]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10d      	bne.n	8004a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a50:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	4a26      	ldr	r2, [pc, #152]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a5c:	4b24      	ldr	r3, [pc, #144]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a6c:	4b21      	ldr	r3, [pc, #132]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d118      	bne.n	8004aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a78:	4b1e      	ldr	r3, [pc, #120]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a84:	f7fd fc50 	bl	8002328 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8c:	f7fd fc4c 	bl	8002328 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e1b2      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <HAL_RCC_OscConfig+0x508>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d108      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4d8>
 8004ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac2:	e029      	b.n	8004b18 <HAL_RCC_OscConfig+0x52c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d115      	bne.n	8004af8 <HAL_RCC_OscConfig+0x50c>
 8004acc:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad2:	4a07      	ldr	r2, [pc, #28]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae2:	4a03      	ldr	r2, [pc, #12]	@ (8004af0 <HAL_RCC_OscConfig+0x504>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aec:	e014      	b.n	8004b18 <HAL_RCC_OscConfig+0x52c>
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40007000 	.word	0x40007000
 8004af8:	4b9a      	ldr	r3, [pc, #616]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	4a99      	ldr	r2, [pc, #612]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b08:	4b96      	ldr	r3, [pc, #600]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0e:	4a95      	ldr	r2, [pc, #596]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004b10:	f023 0304 	bic.w	r3, r3, #4
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fd fc02 	bl	8002328 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fd fbfe 	bl	8002328 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e162      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3e:	4b89      	ldr	r3, [pc, #548]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ed      	beq.n	8004b28 <HAL_RCC_OscConfig+0x53c>
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fd fbeb 	bl	8002328 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fd fbe7 	bl	8002328 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e14b      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b6c:	4b7d      	ldr	r3, [pc, #500]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1ed      	bne.n	8004b56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b7a:	7ffb      	ldrb	r3, [r7, #31]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b80:	4b78      	ldr	r3, [pc, #480]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b84:	4a77      	ldr	r2, [pc, #476]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d03c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01c      	beq.n	8004bda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ba0:	4b70      	ldr	r3, [pc, #448]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fd fbba 	bl	8002328 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb8:	f7fd fbb6 	bl	8002328 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e11c      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bca:	4b66      	ldr	r3, [pc, #408]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x5cc>
 8004bd8:	e01b      	b.n	8004c12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bda:	4b62      	ldr	r3, [pc, #392]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004be0:	4a60      	ldr	r2, [pc, #384]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fd fb9d 	bl	8002328 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf2:	f7fd fb99 	bl	8002328 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e0ff      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c04:	4b57      	ldr	r3, [pc, #348]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1ef      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80f3 	beq.w	8004e02 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	f040 80c9 	bne.w	8004db8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c26:	4b4f      	ldr	r3, [pc, #316]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f003 0203 	and.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d12c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c44:	3b01      	subs	r3, #1
 8004c46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d123      	bne.n	8004c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d11b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d113      	bne.n	8004c94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d109      	bne.n	8004c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d06b      	beq.n	8004d6c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d062      	beq.n	8004d60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c9a:	4b32      	ldr	r3, [pc, #200]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0ac      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004caa:	4b2e      	ldr	r3, [pc, #184]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2d      	ldr	r2, [pc, #180]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cb4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb6:	f7fd fb37 	bl	8002328 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fd fb33 	bl	8002328 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e099      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd0:	4b24      	ldr	r3, [pc, #144]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cdc:	4b21      	ldr	r3, [pc, #132]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	4b21      	ldr	r3, [pc, #132]	@ (8004d68 <HAL_RCC_OscConfig+0x77c>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cf6:	0212      	lsls	r2, r2, #8
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cfe:	0852      	lsrs	r2, r2, #1
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0552      	lsls	r2, r2, #21
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0652      	lsls	r2, r2, #25
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d16:	06d2      	lsls	r2, r2, #27
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	4912      	ldr	r1, [pc, #72]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d20:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0f      	ldr	r2, [pc, #60]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d38:	f7fd faf6 	bl	8002328 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fd faf2 	bl	8002328 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e058      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	4b04      	ldr	r3, [pc, #16]	@ (8004d64 <HAL_RCC_OscConfig+0x778>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d5e:	e050      	b.n	8004e02 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e04f      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
 8004d64:	40021000 	.word	0x40021000
 8004d68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6c:	4b27      	ldr	r3, [pc, #156]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d144      	bne.n	8004e02 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d78:	4b24      	ldr	r3, [pc, #144]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d84:	4b21      	ldr	r3, [pc, #132]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a20      	ldr	r2, [pc, #128]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d90:	f7fd faca 	bl	8002328 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fd fac6 	bl	8002328 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e02c      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004daa:	4b18      	ldr	r3, [pc, #96]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x7ac>
 8004db6:	e024      	b.n	8004e02 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d01f      	beq.n	8004dfe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b13      	ldr	r3, [pc, #76]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004dc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fd faad 	bl	8002328 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fd faa9 	bl	8002328 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e00f      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	4b09      	ldr	r3, [pc, #36]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	4905      	ldr	r1, [pc, #20]	@ (8004e0c <HAL_RCC_OscConfig+0x820>)
 8004df6:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <HAL_RCC_OscConfig+0x824>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
 8004dfc:	e001      	b.n	8004e02 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	feeefffc 	.word	0xfeeefffc

08004e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0e7      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e28:	4b75      	ldr	r3, [pc, #468]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d910      	bls.n	8004e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e36:	4b72      	ldr	r3, [pc, #456]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 0207 	bic.w	r2, r3, #7
 8004e3e:	4970      	ldr	r1, [pc, #448]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b6e      	ldr	r3, [pc, #440]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0cf      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	4b66      	ldr	r3, [pc, #408]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d908      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b63      	ldr	r3, [pc, #396]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4960      	ldr	r1, [pc, #384]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d04c      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d121      	bne.n	8004eea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0a6      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb2:	4b54      	ldr	r3, [pc, #336]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d115      	bne.n	8004eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e09a      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eca:	4b4e      	ldr	r3, [pc, #312]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e08e      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eda:	4b4a      	ldr	r3, [pc, #296]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e086      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eea:	4b46      	ldr	r3, [pc, #280]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 0203 	bic.w	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4943      	ldr	r1, [pc, #268]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efc:	f7fd fa14 	bl	8002328 <HAL_GetTick>
 8004f00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f04:	f7fd fa10 	bl	8002328 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e06e      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 020c 	and.w	r2, r3, #12
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d1eb      	bne.n	8004f04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	4b31      	ldr	r3, [pc, #196]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d208      	bcs.n	8004f5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b2e      	ldr	r3, [pc, #184]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	492b      	ldr	r1, [pc, #172]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5a:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d210      	bcs.n	8004f8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f68:	4b25      	ldr	r3, [pc, #148]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 0207 	bic.w	r2, r3, #7
 8004f70:	4923      	ldr	r1, [pc, #140]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f78:	4b21      	ldr	r3, [pc, #132]	@ (8005000 <HAL_RCC_ClockConfig+0x1ec>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d001      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e036      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f96:	4b1b      	ldr	r3, [pc, #108]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4918      	ldr	r1, [pc, #96]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fb4:	4b13      	ldr	r3, [pc, #76]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4910      	ldr	r1, [pc, #64]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fc8:	f000 f824 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	490b      	ldr	r1, [pc, #44]	@ (8005008 <HAL_RCC_ClockConfig+0x1f4>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe4:	4a09      	ldr	r2, [pc, #36]	@ (800500c <HAL_RCC_ClockConfig+0x1f8>)
 8004fe6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fe8:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <HAL_RCC_ClockConfig+0x1fc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fd f94b 	bl	8002288 <HAL_InitTick>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40022000 	.word	0x40022000
 8005004:	40021000 	.word	0x40021000
 8005008:	080092b8 	.word	0x080092b8
 800500c:	20000000 	.word	0x20000000
 8005010:	20000004 	.word	0x20000004

08005014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	@ 0x24
 8005018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005022:	4b3e      	ldr	r3, [pc, #248]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800502c:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x34>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d121      	bne.n	8005086 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d11e      	bne.n	8005086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005048:	4b34      	ldr	r3, [pc, #208]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d107      	bne.n	8005064 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005054:	4b31      	ldr	r3, [pc, #196]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e005      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005064:	4b2d      	ldr	r3, [pc, #180]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005070:	4a2b      	ldr	r2, [pc, #172]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005078:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10d      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005084:	e00a      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d102      	bne.n	8005092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800508c:	4b25      	ldr	r3, [pc, #148]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x110>)
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e004      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d101      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005098:	4b23      	ldr	r3, [pc, #140]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x114>)
 800509a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d134      	bne.n	800510c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050a2:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <HAL_RCC_GetSysClockFreq+0xa6>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d003      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0xac>
 80050b8:	e005      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x110>)
 80050bc:	617b      	str	r3, [r7, #20]
      break;
 80050be:	e005      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050c0:	4b19      	ldr	r3, [pc, #100]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x114>)
 80050c2:	617b      	str	r3, [r7, #20]
      break;
 80050c4:	e002      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	617b      	str	r3, [r7, #20]
      break;
 80050ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050cc:	4b13      	ldr	r3, [pc, #76]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	3301      	adds	r3, #1
 80050d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050da:	4b10      	ldr	r3, [pc, #64]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	fb03 f202 	mul.w	r2, r3, r2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f2:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <HAL_RCC_GetSysClockFreq+0x108>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	0e5b      	lsrs	r3, r3, #25
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	3301      	adds	r3, #1
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800510c:	69bb      	ldr	r3, [r7, #24]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3724      	adds	r7, #36	@ 0x24
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	080092d0 	.word	0x080092d0
 8005124:	00f42400 	.word	0x00f42400
 8005128:	007a1200 	.word	0x007a1200

0800512c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005130:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <HAL_RCC_GetHCLKFreq+0x14>)
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000000 	.word	0x20000000

08005144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005148:	f7ff fff0 	bl	800512c <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b06      	ldr	r3, [pc, #24]	@ (8005168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4904      	ldr	r1, [pc, #16]	@ (800516c <HAL_RCC_GetPCLK1Freq+0x28>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000
 800516c:	080092c8 	.word	0x080092c8

08005170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005174:	f7ff ffda 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8005178:	4602      	mov	r2, r0
 800517a:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	0adb      	lsrs	r3, r3, #11
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	4904      	ldr	r1, [pc, #16]	@ (8005198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005186:	5ccb      	ldrb	r3, [r1, r3]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005190:	4618      	mov	r0, r3
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40021000 	.word	0x40021000
 8005198:	080092c8 	.word	0x080092c8

0800519c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051b4:	f7ff f9b6 	bl	8004524 <HAL_PWREx_GetVoltageRange>
 80051b8:	6178      	str	r0, [r7, #20]
 80051ba:	e014      	b.n	80051e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051bc:	4b25      	ldr	r3, [pc, #148]	@ (8005254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c0:	4a24      	ldr	r2, [pc, #144]	@ (8005254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c8:	4b22      	ldr	r3, [pc, #136]	@ (8005254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051d4:	f7ff f9a6 	bl	8004524 <HAL_PWREx_GetVoltageRange>
 80051d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051da:	4b1e      	ldr	r3, [pc, #120]	@ (8005254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051de:	4a1d      	ldr	r2, [pc, #116]	@ (8005254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ec:	d10b      	bne.n	8005206 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b80      	cmp	r3, #128	@ 0x80
 80051f2:	d919      	bls.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80051f8:	d902      	bls.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051fa:	2302      	movs	r3, #2
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	e013      	b.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005200:	2301      	movs	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	e010      	b.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b80      	cmp	r3, #128	@ 0x80
 800520a:	d902      	bls.n	8005212 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800520c:	2303      	movs	r3, #3
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	e00a      	b.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b80      	cmp	r3, #128	@ 0x80
 8005216:	d102      	bne.n	800521e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005218:	2302      	movs	r3, #2
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	e004      	b.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b70      	cmp	r3, #112	@ 0x70
 8005222:	d101      	bne.n	8005228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005224:	2301      	movs	r3, #1
 8005226:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005228:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 0207 	bic.w	r2, r3, #7
 8005230:	4909      	ldr	r1, [pc, #36]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005238:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d001      	beq.n	800524a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	40022000 	.word	0x40022000

0800525c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005264:	2300      	movs	r3, #0
 8005266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005268:	2300      	movs	r3, #0
 800526a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005274:	2b00      	cmp	r3, #0
 8005276:	d031      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005280:	d01a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005282:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005286:	d814      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800528c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005290:	d10f      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005292:	4b5d      	ldr	r3, [pc, #372]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	4a5c      	ldr	r2, [pc, #368]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800529e:	e00c      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f9ce 	bl	8005648 <RCCEx_PLLSAI1_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052b0:	e003      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	74fb      	strb	r3, [r7, #19]
      break;
 80052b6:	e000      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80052b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ba:	7cfb      	ldrb	r3, [r7, #19]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052c0:	4b51      	ldr	r3, [pc, #324]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	494e      	ldr	r1, [pc, #312]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052d6:	e001      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 809e 	beq.w	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052ee:	4b46      	ldr	r3, [pc, #280]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005304:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	4a3f      	ldr	r2, [pc, #252]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800530a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005310:	4b3d      	ldr	r3, [pc, #244]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531c:	2301      	movs	r3, #1
 800531e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005320:	4b3a      	ldr	r3, [pc, #232]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a39      	ldr	r2, [pc, #228]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800532a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800532c:	f7fc fffc 	bl	8002328 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005332:	e009      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005334:	f7fc fff8 	bl	8002328 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d902      	bls.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	74fb      	strb	r3, [r7, #19]
        break;
 8005346:	e005      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005348:	4b30      	ldr	r3, [pc, #192]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ef      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d15a      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800535a:	4b2b      	ldr	r3, [pc, #172]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005364:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01e      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	429a      	cmp	r2, r3
 8005374:	d019      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005376:	4b24      	ldr	r3, [pc, #144]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005380:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005382:	4b21      	ldr	r3, [pc, #132]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005388:	4a1f      	ldr	r2, [pc, #124]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800538a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005392:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005398:	4a1b      	ldr	r2, [pc, #108]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800539a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053a2:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d016      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fc ffb8 	bl	8002328 <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ba:	e00b      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053bc:	f7fc ffb4 	bl	8002328 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d902      	bls.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	74fb      	strb	r3, [r7, #19]
            break;
 80053d2:	e006      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ec      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053e8:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f6:	4904      	ldr	r1, [pc, #16]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053fe:	e009      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005406:	bf00      	nop
 8005408:	40021000 	.word	0x40021000
 800540c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005414:	7c7b      	ldrb	r3, [r7, #17]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d105      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541a:	4b8a      	ldr	r3, [pc, #552]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541e:	4a89      	ldr	r2, [pc, #548]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005424:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005432:	4b84      	ldr	r3, [pc, #528]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005438:	f023 0203 	bic.w	r2, r3, #3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	4980      	ldr	r1, [pc, #512]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005454:	4b7b      	ldr	r3, [pc, #492]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545a:	f023 020c 	bic.w	r2, r3, #12
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	4978      	ldr	r1, [pc, #480]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005476:	4b73      	ldr	r3, [pc, #460]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	496f      	ldr	r1, [pc, #444]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005498:	4b6a      	ldr	r3, [pc, #424]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a6:	4967      	ldr	r1, [pc, #412]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ba:	4b62      	ldr	r3, [pc, #392]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	495e      	ldr	r1, [pc, #376]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054dc:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	4956      	ldr	r1, [pc, #344]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054fe:	4b51      	ldr	r3, [pc, #324]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005504:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550c:	494d      	ldr	r1, [pc, #308]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d028      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005520:	4b48      	ldr	r3, [pc, #288]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	4945      	ldr	r1, [pc, #276]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800553e:	d106      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005540:	4b40      	ldr	r3, [pc, #256]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a3f      	ldr	r2, [pc, #252]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554a:	60d3      	str	r3, [r2, #12]
 800554c:	e011      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005556:	d10c      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	2101      	movs	r1, #1
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f872 	bl	8005648 <RCCEx_PLLSAI1_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d028      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800557e:	4b31      	ldr	r3, [pc, #196]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558c:	492d      	ldr	r1, [pc, #180]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800559c:	d106      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559e:	4b29      	ldr	r3, [pc, #164]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	4a28      	ldr	r2, [pc, #160]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055a8:	60d3      	str	r3, [r2, #12]
 80055aa:	e011      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2101      	movs	r1, #1
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f843 	bl	8005648 <RCCEx_PLLSAI1_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01c      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055dc:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ea:	4916      	ldr	r1, [pc, #88]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055fa:	d10c      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	2102      	movs	r1, #2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f820 	bl	8005648 <RCCEx_PLLSAI1_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005612:	7cfb      	ldrb	r3, [r7, #19]
 8005614:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005622:	4b08      	ldr	r3, [pc, #32]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005628:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005630:	4904      	ldr	r1, [pc, #16]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005638:	7cbb      	ldrb	r3, [r7, #18]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000

08005648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005656:	4b74      	ldr	r3, [pc, #464]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d018      	beq.n	8005694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005662:	4b71      	ldr	r3, [pc, #452]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0203 	and.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d10d      	bne.n	800568e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
       ||
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800567a:	4b6b      	ldr	r3, [pc, #428]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
       ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d047      	beq.n	800571e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
 8005692:	e044      	b.n	800571e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d018      	beq.n	80056ce <RCCEx_PLLSAI1_Config+0x86>
 800569c:	2b03      	cmp	r3, #3
 800569e:	d825      	bhi.n	80056ec <RCCEx_PLLSAI1_Config+0xa4>
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d002      	beq.n	80056aa <RCCEx_PLLSAI1_Config+0x62>
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d009      	beq.n	80056bc <RCCEx_PLLSAI1_Config+0x74>
 80056a8:	e020      	b.n	80056ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d11d      	bne.n	80056f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ba:	e01a      	b.n	80056f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d116      	bne.n	80056f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056cc:	e013      	b.n	80056f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ce:	4b56      	ldr	r3, [pc, #344]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056da:	4b53      	ldr	r3, [pc, #332]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ea:	e006      	b.n	80056fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e004      	b.n	80056fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056f2:	bf00      	nop
 80056f4:	e002      	b.n	80056fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10d      	bne.n	800571e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005702:	4b49      	ldr	r3, [pc, #292]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	3b01      	subs	r3, #1
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	430b      	orrs	r3, r1
 8005718:	4943      	ldr	r1, [pc, #268]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 800571a:	4313      	orrs	r3, r2
 800571c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d17c      	bne.n	800581e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005724:	4b40      	ldr	r3, [pc, #256]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a3f      	ldr	r2, [pc, #252]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 800572a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800572e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fc fdfa 	bl	8002328 <HAL_GetTick>
 8005734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005736:	e009      	b.n	800574c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005738:	f7fc fdf6 	bl	8002328 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d902      	bls.n	800574c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	73fb      	strb	r3, [r7, #15]
        break;
 800574a:	e005      	b.n	8005758 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800574c:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ef      	bne.n	8005738 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d15f      	bne.n	800581e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d110      	bne.n	8005786 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005764:	4b30      	ldr	r3, [pc, #192]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800576c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	0211      	lsls	r1, r2, #8
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	06d2      	lsls	r2, r2, #27
 800577c:	430a      	orrs	r2, r1
 800577e:	492a      	ldr	r1, [pc, #168]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]
 8005784:	e027      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d112      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800578c:	4b26      	ldr	r3, [pc, #152]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005794:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	0211      	lsls	r1, r2, #8
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6912      	ldr	r2, [r2, #16]
 80057a2:	0852      	lsrs	r2, r2, #1
 80057a4:	3a01      	subs	r2, #1
 80057a6:	0552      	lsls	r2, r2, #21
 80057a8:	430a      	orrs	r2, r1
 80057aa:	491f      	ldr	r1, [pc, #124]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]
 80057b0:	e011      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	0211      	lsls	r1, r2, #8
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6952      	ldr	r2, [r2, #20]
 80057c8:	0852      	lsrs	r2, r2, #1
 80057ca:	3a01      	subs	r2, #1
 80057cc:	0652      	lsls	r2, r2, #25
 80057ce:	430a      	orrs	r2, r1
 80057d0:	4915      	ldr	r1, [pc, #84]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057d6:	4b14      	ldr	r3, [pc, #80]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a13      	ldr	r2, [pc, #76]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fc fda1 	bl	8002328 <HAL_GetTick>
 80057e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e8:	e009      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ea:	f7fc fd9d 	bl	8002328 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d902      	bls.n	80057fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	73fb      	strb	r3, [r7, #15]
          break;
 80057fc:	e005      	b.n	800580a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0ef      	beq.n	80057ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	4903      	ldr	r1, [pc, #12]	@ (8005828 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581a:	4313      	orrs	r3, r2
 800581c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40021000 	.word	0x40021000

0800582c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e095      	b.n	800596a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
 8005856:	e005      	b.n	8005864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc fa86 	bl	8001d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800589a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058a4:	d902      	bls.n	80058ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_Init+0xa0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	f003 0204 	and.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e049      	b.n	8005a18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fc fa3b 	bl	8001e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f000 f8ff 	bl	8005bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIM_ConfigClockSource+0x1c>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e0b6      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x18a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a78:	d03e      	beq.n	8005af8 <HAL_TIM_ConfigClockSource+0xd8>
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7e:	f200 8087 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a86:	f000 8086 	beq.w	8005b96 <HAL_TIM_ConfigClockSource+0x176>
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8e:	d87f      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005a90:	2b70      	cmp	r3, #112	@ 0x70
 8005a92:	d01a      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0xaa>
 8005a94:	2b70      	cmp	r3, #112	@ 0x70
 8005a96:	d87b      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005a98:	2b60      	cmp	r3, #96	@ 0x60
 8005a9a:	d050      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x11e>
 8005a9c:	2b60      	cmp	r3, #96	@ 0x60
 8005a9e:	d877      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005aa0:	2b50      	cmp	r3, #80	@ 0x50
 8005aa2:	d03c      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0xfe>
 8005aa4:	2b50      	cmp	r3, #80	@ 0x50
 8005aa6:	d873      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d058      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x13e>
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	d86f      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005ab0:	2b30      	cmp	r3, #48	@ 0x30
 8005ab2:	d064      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15e>
 8005ab4:	2b30      	cmp	r3, #48	@ 0x30
 8005ab6:	d86b      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d060      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15e>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d867      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05c      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15e>
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d05a      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15e>
 8005ac8:	e062      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ada:	f000 f955 	bl	8005d88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	609a      	str	r2, [r3, #8]
      break;
 8005af6:	e04f      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b08:	f000 f93e 	bl	8005d88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b1a:	609a      	str	r2, [r3, #8]
      break;
 8005b1c:	e03c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f000 f8b2 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2150      	movs	r1, #80	@ 0x50
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f90b 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e02c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 f8d1 	bl	8005cf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2160      	movs	r1, #96	@ 0x60
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f8fb 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e01c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 f892 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2140      	movs	r1, #64	@ 0x40
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f8eb 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e00c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f000 f8e2 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 8005b8e:	e003      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      break;
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a30      	ldr	r2, [pc, #192]	@ (8005c88 <TIM_Base_SetConfig+0xd4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x20>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a27      	ldr	r2, [pc, #156]	@ (8005c88 <TIM_Base_SetConfig+0xd4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_Base_SetConfig+0x52>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf4:	d007      	beq.n	8005c06 <TIM_Base_SetConfig+0x52>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a24      	ldr	r2, [pc, #144]	@ (8005c8c <TIM_Base_SetConfig+0xd8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_Base_SetConfig+0x52>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a23      	ldr	r2, [pc, #140]	@ (8005c90 <TIM_Base_SetConfig+0xdc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d108      	bne.n	8005c18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a12      	ldr	r2, [pc, #72]	@ (8005c88 <TIM_Base_SetConfig+0xd4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0xa0>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a11      	ldr	r2, [pc, #68]	@ (8005c8c <TIM_Base_SetConfig+0xd8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0xa0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a10      	ldr	r2, [pc, #64]	@ (8005c90 <TIM_Base_SetConfig+0xdc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f023 0201 	bic.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	611a      	str	r2, [r3, #16]
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400

08005c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 030a 	bic.w	r3, r3, #10
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b087      	sub	sp, #28
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f023 0210 	bic.w	r2, r3, #16
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f043 0307 	orr.w	r3, r3, #7
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e04f      	b.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a21      	ldr	r2, [pc, #132]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d108      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a14      	ldr	r2, [pc, #80]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e48:	d004      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a10      	ldr	r2, [pc, #64]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10c      	bne.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40014000 	.word	0x40014000

08005e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e040      	b.n	8005f28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fb ffcc 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	@ 0x24
 8005ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fade 	bl	800649c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f8af 	bl	8006044 <UART_SetConfig>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e01b      	b.n	8005f28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005efe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fb5d 	bl	80065e0 <UART_CheckIdleState>
 8005f26:	4603      	mov	r3, r0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d177      	bne.n	8006038 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_UART_Transmit+0x24>
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e070      	b.n	800603a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2221      	movs	r2, #33	@ 0x21
 8005f64:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f66:	f7fc f9df 	bl	8002328 <HAL_GetTick>
 8005f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	88fa      	ldrh	r2, [r7, #6]
 8005f70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f84:	d108      	bne.n	8005f98 <HAL_UART_Transmit+0x68>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d104      	bne.n	8005f98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	e003      	b.n	8005fa0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fa0:	e02f      	b.n	8006002 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2180      	movs	r1, #128	@ 0x80
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fbbf 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e03b      	b.n	800603a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	881a      	ldrh	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	3302      	adds	r3, #2
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e007      	b.n	8005ff0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1c9      	bne.n	8005fa2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2140      	movs	r1, #64	@ 0x40
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fb89 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e005      	b.n	800603a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006048:	b08a      	sub	sp, #40	@ 0x28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	431a      	orrs	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	4313      	orrs	r3, r2
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4bb4      	ldr	r3, [pc, #720]	@ (8006344 <UART_SetConfig+0x300>)
 8006074:	4013      	ands	r3, r2
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800607c:	430b      	orrs	r3, r1
 800607e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4aa9      	ldr	r2, [pc, #676]	@ (8006348 <UART_SetConfig+0x304>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ac:	4313      	orrs	r3, r2
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4aa0      	ldr	r2, [pc, #640]	@ (800634c <UART_SetConfig+0x308>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d126      	bne.n	800611c <UART_SetConfig+0xd8>
 80060ce:	4ba0      	ldr	r3, [pc, #640]	@ (8006350 <UART_SetConfig+0x30c>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d81b      	bhi.n	8006114 <UART_SetConfig+0xd0>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0xa0>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	08006105 	.word	0x08006105
 80060ec:	080060fd 	.word	0x080060fd
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060fa:	e080      	b.n	80061fe <UART_SetConfig+0x1ba>
 80060fc:	2302      	movs	r3, #2
 80060fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006102:	e07c      	b.n	80061fe <UART_SetConfig+0x1ba>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610a:	e078      	b.n	80061fe <UART_SetConfig+0x1ba>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006112:	e074      	b.n	80061fe <UART_SetConfig+0x1ba>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611a:	e070      	b.n	80061fe <UART_SetConfig+0x1ba>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a8c      	ldr	r2, [pc, #560]	@ (8006354 <UART_SetConfig+0x310>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d138      	bne.n	8006198 <UART_SetConfig+0x154>
 8006126:	4b8a      	ldr	r3, [pc, #552]	@ (8006350 <UART_SetConfig+0x30c>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d82d      	bhi.n	8006190 <UART_SetConfig+0x14c>
 8006134:	a201      	add	r2, pc, #4	@ (adr r2, 800613c <UART_SetConfig+0xf8>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	08006171 	.word	0x08006171
 8006140:	08006191 	.word	0x08006191
 8006144:	08006191 	.word	0x08006191
 8006148:	08006191 	.word	0x08006191
 800614c:	08006181 	.word	0x08006181
 8006150:	08006191 	.word	0x08006191
 8006154:	08006191 	.word	0x08006191
 8006158:	08006191 	.word	0x08006191
 800615c:	08006179 	.word	0x08006179
 8006160:	08006191 	.word	0x08006191
 8006164:	08006191 	.word	0x08006191
 8006168:	08006191 	.word	0x08006191
 800616c:	08006189 	.word	0x08006189
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006176:	e042      	b.n	80061fe <UART_SetConfig+0x1ba>
 8006178:	2302      	movs	r3, #2
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617e:	e03e      	b.n	80061fe <UART_SetConfig+0x1ba>
 8006180:	2304      	movs	r3, #4
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006186:	e03a      	b.n	80061fe <UART_SetConfig+0x1ba>
 8006188:	2308      	movs	r3, #8
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800618e:	e036      	b.n	80061fe <UART_SetConfig+0x1ba>
 8006190:	2310      	movs	r3, #16
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006196:	e032      	b.n	80061fe <UART_SetConfig+0x1ba>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a6a      	ldr	r2, [pc, #424]	@ (8006348 <UART_SetConfig+0x304>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d12a      	bne.n	80061f8 <UART_SetConfig+0x1b4>
 80061a2:	4b6b      	ldr	r3, [pc, #428]	@ (8006350 <UART_SetConfig+0x30c>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061b0:	d01a      	beq.n	80061e8 <UART_SetConfig+0x1a4>
 80061b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061b6:	d81b      	bhi.n	80061f0 <UART_SetConfig+0x1ac>
 80061b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061bc:	d00c      	beq.n	80061d8 <UART_SetConfig+0x194>
 80061be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c2:	d815      	bhi.n	80061f0 <UART_SetConfig+0x1ac>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <UART_SetConfig+0x18c>
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061cc:	d008      	beq.n	80061e0 <UART_SetConfig+0x19c>
 80061ce:	e00f      	b.n	80061f0 <UART_SetConfig+0x1ac>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d6:	e012      	b.n	80061fe <UART_SetConfig+0x1ba>
 80061d8:	2302      	movs	r3, #2
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061de:	e00e      	b.n	80061fe <UART_SetConfig+0x1ba>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e6:	e00a      	b.n	80061fe <UART_SetConfig+0x1ba>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ee:	e006      	b.n	80061fe <UART_SetConfig+0x1ba>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f6:	e002      	b.n	80061fe <UART_SetConfig+0x1ba>
 80061f8:	2310      	movs	r3, #16
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a51      	ldr	r2, [pc, #324]	@ (8006348 <UART_SetConfig+0x304>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d17a      	bne.n	80062fe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800620c:	2b08      	cmp	r3, #8
 800620e:	d824      	bhi.n	800625a <UART_SetConfig+0x216>
 8006210:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <UART_SetConfig+0x1d4>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	0800623d 	.word	0x0800623d
 800621c:	0800625b 	.word	0x0800625b
 8006220:	08006245 	.word	0x08006245
 8006224:	0800625b 	.word	0x0800625b
 8006228:	0800624b 	.word	0x0800624b
 800622c:	0800625b 	.word	0x0800625b
 8006230:	0800625b 	.word	0x0800625b
 8006234:	0800625b 	.word	0x0800625b
 8006238:	08006253 	.word	0x08006253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800623c:	f7fe ff82 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8006240:	61f8      	str	r0, [r7, #28]
        break;
 8006242:	e010      	b.n	8006266 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006244:	4b44      	ldr	r3, [pc, #272]	@ (8006358 <UART_SetConfig+0x314>)
 8006246:	61fb      	str	r3, [r7, #28]
        break;
 8006248:	e00d      	b.n	8006266 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624a:	f7fe fee3 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 800624e:	61f8      	str	r0, [r7, #28]
        break;
 8006250:	e009      	b.n	8006266 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006256:	61fb      	str	r3, [r7, #28]
        break;
 8006258:	e005      	b.n	8006266 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8107 	beq.w	800647c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	4413      	add	r3, r2
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	429a      	cmp	r2, r3
 800627c:	d305      	bcc.n	800628a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	429a      	cmp	r2, r3
 8006288:	d903      	bls.n	8006292 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006290:	e0f4      	b.n	800647c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2200      	movs	r2, #0
 8006296:	461c      	mov	r4, r3
 8006298:	4615      	mov	r5, r2
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	022b      	lsls	r3, r5, #8
 80062a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062a8:	0222      	lsls	r2, r4, #8
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	6849      	ldr	r1, [r1, #4]
 80062ae:	0849      	lsrs	r1, r1, #1
 80062b0:	2000      	movs	r0, #0
 80062b2:	4688      	mov	r8, r1
 80062b4:	4681      	mov	r9, r0
 80062b6:	eb12 0a08 	adds.w	sl, r2, r8
 80062ba:	eb43 0b09 	adc.w	fp, r3, r9
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062cc:	4650      	mov	r0, sl
 80062ce:	4659      	mov	r1, fp
 80062d0:	f7fa fc6a 	bl	8000ba8 <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4613      	mov	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e2:	d308      	bcc.n	80062f6 <UART_SetConfig+0x2b2>
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ea:	d204      	bcs.n	80062f6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	e0c2      	b.n	800647c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062fc:	e0be      	b.n	800647c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006306:	d16a      	bne.n	80063de <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006308:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800630c:	2b08      	cmp	r3, #8
 800630e:	d834      	bhi.n	800637a <UART_SetConfig+0x336>
 8006310:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <UART_SetConfig+0x2d4>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800633d 	.word	0x0800633d
 800631c:	0800635d 	.word	0x0800635d
 8006320:	08006365 	.word	0x08006365
 8006324:	0800637b 	.word	0x0800637b
 8006328:	0800636b 	.word	0x0800636b
 800632c:	0800637b 	.word	0x0800637b
 8006330:	0800637b 	.word	0x0800637b
 8006334:	0800637b 	.word	0x0800637b
 8006338:	08006373 	.word	0x08006373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800633c:	f7fe ff02 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8006340:	61f8      	str	r0, [r7, #28]
        break;
 8006342:	e020      	b.n	8006386 <UART_SetConfig+0x342>
 8006344:	efff69f3 	.word	0xefff69f3
 8006348:	40008000 	.word	0x40008000
 800634c:	40013800 	.word	0x40013800
 8006350:	40021000 	.word	0x40021000
 8006354:	40004400 	.word	0x40004400
 8006358:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800635c:	f7fe ff08 	bl	8005170 <HAL_RCC_GetPCLK2Freq>
 8006360:	61f8      	str	r0, [r7, #28]
        break;
 8006362:	e010      	b.n	8006386 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006364:	4b4c      	ldr	r3, [pc, #304]	@ (8006498 <UART_SetConfig+0x454>)
 8006366:	61fb      	str	r3, [r7, #28]
        break;
 8006368:	e00d      	b.n	8006386 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800636a:	f7fe fe53 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 800636e:	61f8      	str	r0, [r7, #28]
        break;
 8006370:	e009      	b.n	8006386 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006376:	61fb      	str	r3, [r7, #28]
        break;
 8006378:	e005      	b.n	8006386 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d077      	beq.n	800647c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	005a      	lsls	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	441a      	add	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b0f      	cmp	r3, #15
 80063a6:	d916      	bls.n	80063d6 <UART_SetConfig+0x392>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ae:	d212      	bcs.n	80063d6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f023 030f 	bic.w	r3, r3, #15
 80063b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	8afb      	ldrh	r3, [r7, #22]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	8afa      	ldrh	r2, [r7, #22]
 80063d2:	60da      	str	r2, [r3, #12]
 80063d4:	e052      	b.n	800647c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063dc:	e04e      	b.n	800647c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d827      	bhi.n	8006436 <UART_SetConfig+0x3f2>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <UART_SetConfig+0x3a8>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006421 	.word	0x08006421
 80063f8:	08006437 	.word	0x08006437
 80063fc:	08006427 	.word	0x08006427
 8006400:	08006437 	.word	0x08006437
 8006404:	08006437 	.word	0x08006437
 8006408:	08006437 	.word	0x08006437
 800640c:	0800642f 	.word	0x0800642f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006410:	f7fe fe98 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8006414:	61f8      	str	r0, [r7, #28]
        break;
 8006416:	e014      	b.n	8006442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006418:	f7fe feaa 	bl	8005170 <HAL_RCC_GetPCLK2Freq>
 800641c:	61f8      	str	r0, [r7, #28]
        break;
 800641e:	e010      	b.n	8006442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006420:	4b1d      	ldr	r3, [pc, #116]	@ (8006498 <UART_SetConfig+0x454>)
 8006422:	61fb      	str	r3, [r7, #28]
        break;
 8006424:	e00d      	b.n	8006442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006426:	f7fe fdf5 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 800642a:	61f8      	str	r0, [r7, #28]
        break;
 800642c:	e009      	b.n	8006442 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006432:	61fb      	str	r3, [r7, #28]
        break;
 8006434:	e005      	b.n	8006442 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006440:	bf00      	nop
    }

    if (pclk != 0U)
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d019      	beq.n	800647c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	085a      	lsrs	r2, r3, #1
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	441a      	add	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
 800645a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	d909      	bls.n	8006476 <UART_SetConfig+0x432>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006468:	d205      	bcs.n	8006476 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60da      	str	r2, [r3, #12]
 8006474:	e002      	b.n	800647c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006488:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800648c:	4618      	mov	r0, r3
 800648e:	3728      	adds	r7, #40	@ 0x28
 8006490:	46bd      	mov	sp, r7
 8006492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006496:	bf00      	nop
 8006498:	00f42400 	.word	0x00f42400

0800649c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800659a:	d10a      	bne.n	80065b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b098      	sub	sp, #96	@ 0x60
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f0:	f7fb fe9a 	bl	8002328 <HAL_GetTick>
 80065f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b08      	cmp	r3, #8
 8006602:	d12e      	bne.n	8006662 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f88c 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d021      	beq.n	8006662 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800662c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006632:	653b      	str	r3, [r7, #80]	@ 0x50
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800663c:	647b      	str	r3, [r7, #68]	@ 0x44
 800663e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800664a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e062      	b.n	8006728 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d149      	bne.n	8006704 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006670:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006678:	2200      	movs	r2, #0
 800667a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f856 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d03c      	beq.n	8006704 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	623b      	str	r3, [r7, #32]
   return(result);
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e6      	bne.n	800668a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066dc:	61fa      	str	r2, [r7, #28]
 80066de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	617b      	str	r3, [r7, #20]
   return(result);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e011      	b.n	8006728 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3758      	adds	r7, #88	@ 0x58
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006740:	e04f      	b.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d04b      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fb fded 	bl	8002328 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <UART_WaitOnFlagUntilTimeout+0x30>
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e04e      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	d037      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b80      	cmp	r3, #128	@ 0x80
 8006776:	d034      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b40      	cmp	r3, #64	@ 0x40
 800677c:	d031      	beq.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b08      	cmp	r3, #8
 800678a:	d110      	bne.n	80067ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f838 	bl	800680a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2208      	movs	r2, #8
 800679e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e029      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067bc:	d111      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f81e 	bl	800680a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e00f      	b.n	8006802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d0a0      	beq.n	8006742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800680a:	b480      	push	{r7}
 800680c:	b095      	sub	sp, #84	@ 0x54
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006830:	643b      	str	r3, [r7, #64]	@ 0x40
 8006832:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006836:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e6      	bne.n	8006812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3308      	adds	r3, #8
 800684a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	61fb      	str	r3, [r7, #28]
   return(result);
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006864:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800686a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e5      	bne.n	8006844 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687c:	2b01      	cmp	r3, #1
 800687e:	d118      	bne.n	80068b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	60bb      	str	r3, [r7, #8]
   return(result);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f023 0310 	bic.w	r3, r3, #16
 8006894:	647b      	str	r3, [r7, #68]	@ 0x44
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6979      	ldr	r1, [r7, #20]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	613b      	str	r3, [r7, #16]
   return(result);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e6      	bne.n	8006880 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068c6:	bf00      	nop
 80068c8:	3754      	adds	r7, #84	@ 0x54
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e056      	b.n	8006998 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7fb faaa 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2224      	movs	r2, #36	@ 0x24
 8006904:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fdbc 	bl	800649c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff fb8d 	bl	8006044 <UART_SetConfig>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e031      	b.n	8006998 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006942:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	430a      	orrs	r2, r1
 8006956:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	055b      	lsls	r3, r3, #21
 800695c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8006972:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	430b      	orrs	r3, r1
 800697e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fe25 	bl	80065e0 <UART_CheckIdleState>
 8006996:	4603      	mov	r3, r0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <__cvt>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	ec57 6b10 	vmov	r6, r7, d0
 80069a8:	2f00      	cmp	r7, #0
 80069aa:	460c      	mov	r4, r1
 80069ac:	4619      	mov	r1, r3
 80069ae:	463b      	mov	r3, r7
 80069b0:	bfbb      	ittet	lt
 80069b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80069b6:	461f      	movlt	r7, r3
 80069b8:	2300      	movge	r3, #0
 80069ba:	232d      	movlt	r3, #45	@ 0x2d
 80069bc:	700b      	strb	r3, [r1, #0]
 80069be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80069c4:	4691      	mov	r9, r2
 80069c6:	f023 0820 	bic.w	r8, r3, #32
 80069ca:	bfbc      	itt	lt
 80069cc:	4632      	movlt	r2, r6
 80069ce:	4616      	movlt	r6, r2
 80069d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069d4:	d005      	beq.n	80069e2 <__cvt+0x42>
 80069d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069da:	d100      	bne.n	80069de <__cvt+0x3e>
 80069dc:	3401      	adds	r4, #1
 80069de:	2102      	movs	r1, #2
 80069e0:	e000      	b.n	80069e4 <__cvt+0x44>
 80069e2:	2103      	movs	r1, #3
 80069e4:	ab03      	add	r3, sp, #12
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	ab02      	add	r3, sp, #8
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	ec47 6b10 	vmov	d0, r6, r7
 80069f0:	4653      	mov	r3, sl
 80069f2:	4622      	mov	r2, r4
 80069f4:	f000 fe38 	bl	8007668 <_dtoa_r>
 80069f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069fc:	4605      	mov	r5, r0
 80069fe:	d119      	bne.n	8006a34 <__cvt+0x94>
 8006a00:	f019 0f01 	tst.w	r9, #1
 8006a04:	d00e      	beq.n	8006a24 <__cvt+0x84>
 8006a06:	eb00 0904 	add.w	r9, r0, r4
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4630      	mov	r0, r6
 8006a10:	4639      	mov	r1, r7
 8006a12:	f7fa f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a16:	b108      	cbz	r0, 8006a1c <__cvt+0x7c>
 8006a18:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a1c:	2230      	movs	r2, #48	@ 0x30
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	454b      	cmp	r3, r9
 8006a22:	d31e      	bcc.n	8006a62 <__cvt+0xc2>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a28:	1b5b      	subs	r3, r3, r5
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	b004      	add	sp, #16
 8006a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a38:	eb00 0904 	add.w	r9, r0, r4
 8006a3c:	d1e5      	bne.n	8006a0a <__cvt+0x6a>
 8006a3e:	7803      	ldrb	r3, [r0, #0]
 8006a40:	2b30      	cmp	r3, #48	@ 0x30
 8006a42:	d10a      	bne.n	8006a5a <__cvt+0xba>
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	4630      	mov	r0, r6
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	f7fa f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a50:	b918      	cbnz	r0, 8006a5a <__cvt+0xba>
 8006a52:	f1c4 0401 	rsb	r4, r4, #1
 8006a56:	f8ca 4000 	str.w	r4, [sl]
 8006a5a:	f8da 3000 	ldr.w	r3, [sl]
 8006a5e:	4499      	add	r9, r3
 8006a60:	e7d3      	b.n	8006a0a <__cvt+0x6a>
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	9103      	str	r1, [sp, #12]
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e7d9      	b.n	8006a1e <__cvt+0x7e>

08006a6a <__exponent>:
 8006a6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	bfba      	itte	lt
 8006a70:	4249      	neglt	r1, r1
 8006a72:	232d      	movlt	r3, #45	@ 0x2d
 8006a74:	232b      	movge	r3, #43	@ 0x2b
 8006a76:	2909      	cmp	r1, #9
 8006a78:	7002      	strb	r2, [r0, #0]
 8006a7a:	7043      	strb	r3, [r0, #1]
 8006a7c:	dd29      	ble.n	8006ad2 <__exponent+0x68>
 8006a7e:	f10d 0307 	add.w	r3, sp, #7
 8006a82:	461d      	mov	r5, r3
 8006a84:	270a      	movs	r7, #10
 8006a86:	461a      	mov	r2, r3
 8006a88:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a8c:	fb07 1416 	mls	r4, r7, r6, r1
 8006a90:	3430      	adds	r4, #48	@ 0x30
 8006a92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a96:	460c      	mov	r4, r1
 8006a98:	2c63      	cmp	r4, #99	@ 0x63
 8006a9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	dcf1      	bgt.n	8006a86 <__exponent+0x1c>
 8006aa2:	3130      	adds	r1, #48	@ 0x30
 8006aa4:	1e94      	subs	r4, r2, #2
 8006aa6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006aaa:	1c41      	adds	r1, r0, #1
 8006aac:	4623      	mov	r3, r4
 8006aae:	42ab      	cmp	r3, r5
 8006ab0:	d30a      	bcc.n	8006ac8 <__exponent+0x5e>
 8006ab2:	f10d 0309 	add.w	r3, sp, #9
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	42ac      	cmp	r4, r5
 8006aba:	bf88      	it	hi
 8006abc:	2300      	movhi	r3, #0
 8006abe:	3302      	adds	r3, #2
 8006ac0:	4403      	add	r3, r0
 8006ac2:	1a18      	subs	r0, r3, r0
 8006ac4:	b003      	add	sp, #12
 8006ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006acc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ad0:	e7ed      	b.n	8006aae <__exponent+0x44>
 8006ad2:	2330      	movs	r3, #48	@ 0x30
 8006ad4:	3130      	adds	r1, #48	@ 0x30
 8006ad6:	7083      	strb	r3, [r0, #2]
 8006ad8:	70c1      	strb	r1, [r0, #3]
 8006ada:	1d03      	adds	r3, r0, #4
 8006adc:	e7f1      	b.n	8006ac2 <__exponent+0x58>
	...

08006ae0 <_printf_float>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	b08d      	sub	sp, #52	@ 0x34
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006aec:	4616      	mov	r6, r2
 8006aee:	461f      	mov	r7, r3
 8006af0:	4605      	mov	r5, r0
 8006af2:	f000 fcb9 	bl	8007468 <_localeconv_r>
 8006af6:	6803      	ldr	r3, [r0, #0]
 8006af8:	9304      	str	r3, [sp, #16]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7f9 fbb8 	bl	8000270 <strlen>
 8006b00:	2300      	movs	r3, #0
 8006b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b04:	f8d8 3000 	ldr.w	r3, [r8]
 8006b08:	9005      	str	r0, [sp, #20]
 8006b0a:	3307      	adds	r3, #7
 8006b0c:	f023 0307 	bic.w	r3, r3, #7
 8006b10:	f103 0208 	add.w	r2, r3, #8
 8006b14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b18:	f8d4 b000 	ldr.w	fp, [r4]
 8006b1c:	f8c8 2000 	str.w	r2, [r8]
 8006b20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b36:	4b9c      	ldr	r3, [pc, #624]	@ (8006da8 <_printf_float+0x2c8>)
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	f7f9 fff6 	bl	8000b2c <__aeabi_dcmpun>
 8006b40:	bb70      	cbnz	r0, 8006ba0 <_printf_float+0xc0>
 8006b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b46:	4b98      	ldr	r3, [pc, #608]	@ (8006da8 <_printf_float+0x2c8>)
 8006b48:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4c:	f7f9 ffd0 	bl	8000af0 <__aeabi_dcmple>
 8006b50:	bb30      	cbnz	r0, 8006ba0 <_printf_float+0xc0>
 8006b52:	2200      	movs	r2, #0
 8006b54:	2300      	movs	r3, #0
 8006b56:	4640      	mov	r0, r8
 8006b58:	4649      	mov	r1, r9
 8006b5a:	f7f9 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8006b5e:	b110      	cbz	r0, 8006b66 <_printf_float+0x86>
 8006b60:	232d      	movs	r3, #45	@ 0x2d
 8006b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b66:	4a91      	ldr	r2, [pc, #580]	@ (8006dac <_printf_float+0x2cc>)
 8006b68:	4b91      	ldr	r3, [pc, #580]	@ (8006db0 <_printf_float+0x2d0>)
 8006b6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b6e:	bf8c      	ite	hi
 8006b70:	4690      	movhi	r8, r2
 8006b72:	4698      	movls	r8, r3
 8006b74:	2303      	movs	r3, #3
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	f02b 0304 	bic.w	r3, fp, #4
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	f04f 0900 	mov.w	r9, #0
 8006b82:	9700      	str	r7, [sp, #0]
 8006b84:	4633      	mov	r3, r6
 8006b86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f9d2 	bl	8006f34 <_printf_common>
 8006b90:	3001      	adds	r0, #1
 8006b92:	f040 808d 	bne.w	8006cb0 <_printf_float+0x1d0>
 8006b96:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9a:	b00d      	add	sp, #52	@ 0x34
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	f7f9 ffc0 	bl	8000b2c <__aeabi_dcmpun>
 8006bac:	b140      	cbz	r0, 8006bc0 <_printf_float+0xe0>
 8006bae:	464b      	mov	r3, r9
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bfbc      	itt	lt
 8006bb4:	232d      	movlt	r3, #45	@ 0x2d
 8006bb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bba:	4a7e      	ldr	r2, [pc, #504]	@ (8006db4 <_printf_float+0x2d4>)
 8006bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8006db8 <_printf_float+0x2d8>)
 8006bbe:	e7d4      	b.n	8006b6a <_printf_float+0x8a>
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006bc6:	9206      	str	r2, [sp, #24]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	d13b      	bne.n	8006c44 <_printf_float+0x164>
 8006bcc:	2306      	movs	r3, #6
 8006bce:	6063      	str	r3, [r4, #4]
 8006bd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	9303      	str	r3, [sp, #12]
 8006bda:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006be0:	ab09      	add	r3, sp, #36	@ 0x24
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	6861      	ldr	r1, [r4, #4]
 8006be6:	ec49 8b10 	vmov	d0, r8, r9
 8006bea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f7ff fed6 	bl	80069a0 <__cvt>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bf8:	2b47      	cmp	r3, #71	@ 0x47
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	d129      	bne.n	8006c52 <_printf_float+0x172>
 8006bfe:	1cc8      	adds	r0, r1, #3
 8006c00:	db02      	blt.n	8006c08 <_printf_float+0x128>
 8006c02:	6863      	ldr	r3, [r4, #4]
 8006c04:	4299      	cmp	r1, r3
 8006c06:	dd41      	ble.n	8006c8c <_printf_float+0x1ac>
 8006c08:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c0c:	fa5f fa8a 	uxtb.w	sl, sl
 8006c10:	3901      	subs	r1, #1
 8006c12:	4652      	mov	r2, sl
 8006c14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c18:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c1a:	f7ff ff26 	bl	8006a6a <__exponent>
 8006c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c20:	1813      	adds	r3, r2, r0
 8006c22:	2a01      	cmp	r2, #1
 8006c24:	4681      	mov	r9, r0
 8006c26:	6123      	str	r3, [r4, #16]
 8006c28:	dc02      	bgt.n	8006c30 <_printf_float+0x150>
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	07d2      	lsls	r2, r2, #31
 8006c2e:	d501      	bpl.n	8006c34 <_printf_float+0x154>
 8006c30:	3301      	adds	r3, #1
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0a2      	beq.n	8006b82 <_printf_float+0xa2>
 8006c3c:	232d      	movs	r3, #45	@ 0x2d
 8006c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c42:	e79e      	b.n	8006b82 <_printf_float+0xa2>
 8006c44:	9a06      	ldr	r2, [sp, #24]
 8006c46:	2a47      	cmp	r2, #71	@ 0x47
 8006c48:	d1c2      	bne.n	8006bd0 <_printf_float+0xf0>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1c0      	bne.n	8006bd0 <_printf_float+0xf0>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e7bd      	b.n	8006bce <_printf_float+0xee>
 8006c52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c56:	d9db      	bls.n	8006c10 <_printf_float+0x130>
 8006c58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c5c:	d118      	bne.n	8006c90 <_printf_float+0x1b0>
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	dd0b      	ble.n	8006c7c <_printf_float+0x19c>
 8006c64:	6121      	str	r1, [r4, #16]
 8006c66:	b913      	cbnz	r3, 8006c6e <_printf_float+0x18e>
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	07d0      	lsls	r0, r2, #31
 8006c6c:	d502      	bpl.n	8006c74 <_printf_float+0x194>
 8006c6e:	3301      	adds	r3, #1
 8006c70:	440b      	add	r3, r1
 8006c72:	6123      	str	r3, [r4, #16]
 8006c74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c76:	f04f 0900 	mov.w	r9, #0
 8006c7a:	e7db      	b.n	8006c34 <_printf_float+0x154>
 8006c7c:	b913      	cbnz	r3, 8006c84 <_printf_float+0x1a4>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	07d2      	lsls	r2, r2, #31
 8006c82:	d501      	bpl.n	8006c88 <_printf_float+0x1a8>
 8006c84:	3302      	adds	r3, #2
 8006c86:	e7f4      	b.n	8006c72 <_printf_float+0x192>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e7f2      	b.n	8006c72 <_printf_float+0x192>
 8006c8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c92:	4299      	cmp	r1, r3
 8006c94:	db05      	blt.n	8006ca2 <_printf_float+0x1c2>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	6121      	str	r1, [r4, #16]
 8006c9a:	07d8      	lsls	r0, r3, #31
 8006c9c:	d5ea      	bpl.n	8006c74 <_printf_float+0x194>
 8006c9e:	1c4b      	adds	r3, r1, #1
 8006ca0:	e7e7      	b.n	8006c72 <_printf_float+0x192>
 8006ca2:	2900      	cmp	r1, #0
 8006ca4:	bfd4      	ite	le
 8006ca6:	f1c1 0202 	rsble	r2, r1, #2
 8006caa:	2201      	movgt	r2, #1
 8006cac:	4413      	add	r3, r2
 8006cae:	e7e0      	b.n	8006c72 <_printf_float+0x192>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	055a      	lsls	r2, r3, #21
 8006cb4:	d407      	bmi.n	8006cc6 <_printf_float+0x1e6>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	4642      	mov	r2, r8
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b8      	blx	r7
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d12b      	bne.n	8006d1c <_printf_float+0x23c>
 8006cc4:	e767      	b.n	8006b96 <_printf_float+0xb6>
 8006cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cca:	f240 80dd 	bls.w	8006e88 <_printf_float+0x3a8>
 8006cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f7f9 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d033      	beq.n	8006d46 <_printf_float+0x266>
 8006cde:	4a37      	ldr	r2, [pc, #220]	@ (8006dbc <_printf_float+0x2dc>)
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f af54 	beq.w	8006b96 <_printf_float+0xb6>
 8006cee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cf2:	4543      	cmp	r3, r8
 8006cf4:	db02      	blt.n	8006cfc <_printf_float+0x21c>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	07d8      	lsls	r0, r3, #31
 8006cfa:	d50f      	bpl.n	8006d1c <_printf_float+0x23c>
 8006cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f af45 	beq.w	8006b96 <_printf_float+0xb6>
 8006d0c:	f04f 0900 	mov.w	r9, #0
 8006d10:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d14:	f104 0a1a 	add.w	sl, r4, #26
 8006d18:	45c8      	cmp	r8, r9
 8006d1a:	dc09      	bgt.n	8006d30 <_printf_float+0x250>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	079b      	lsls	r3, r3, #30
 8006d20:	f100 8103 	bmi.w	8006f2a <_printf_float+0x44a>
 8006d24:	68e0      	ldr	r0, [r4, #12]
 8006d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d28:	4298      	cmp	r0, r3
 8006d2a:	bfb8      	it	lt
 8006d2c:	4618      	movlt	r0, r3
 8006d2e:	e734      	b.n	8006b9a <_printf_float+0xba>
 8006d30:	2301      	movs	r3, #1
 8006d32:	4652      	mov	r2, sl
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f af2b 	beq.w	8006b96 <_printf_float+0xb6>
 8006d40:	f109 0901 	add.w	r9, r9, #1
 8006d44:	e7e8      	b.n	8006d18 <_printf_float+0x238>
 8006d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dc39      	bgt.n	8006dc0 <_printf_float+0x2e0>
 8006d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dbc <_printf_float+0x2dc>)
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4631      	mov	r1, r6
 8006d52:	4628      	mov	r0, r5
 8006d54:	47b8      	blx	r7
 8006d56:	3001      	adds	r0, #1
 8006d58:	f43f af1d 	beq.w	8006b96 <_printf_float+0xb6>
 8006d5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d60:	ea59 0303 	orrs.w	r3, r9, r3
 8006d64:	d102      	bne.n	8006d6c <_printf_float+0x28c>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	07d9      	lsls	r1, r3, #31
 8006d6a:	d5d7      	bpl.n	8006d1c <_printf_float+0x23c>
 8006d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d70:	4631      	mov	r1, r6
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	f43f af0d 	beq.w	8006b96 <_printf_float+0xb6>
 8006d7c:	f04f 0a00 	mov.w	sl, #0
 8006d80:	f104 0b1a 	add.w	fp, r4, #26
 8006d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d86:	425b      	negs	r3, r3
 8006d88:	4553      	cmp	r3, sl
 8006d8a:	dc01      	bgt.n	8006d90 <_printf_float+0x2b0>
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	e793      	b.n	8006cb8 <_printf_float+0x1d8>
 8006d90:	2301      	movs	r3, #1
 8006d92:	465a      	mov	r2, fp
 8006d94:	4631      	mov	r1, r6
 8006d96:	4628      	mov	r0, r5
 8006d98:	47b8      	blx	r7
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	f43f aefb 	beq.w	8006b96 <_printf_float+0xb6>
 8006da0:	f10a 0a01 	add.w	sl, sl, #1
 8006da4:	e7ee      	b.n	8006d84 <_printf_float+0x2a4>
 8006da6:	bf00      	nop
 8006da8:	7fefffff 	.word	0x7fefffff
 8006dac:	08009304 	.word	0x08009304
 8006db0:	08009300 	.word	0x08009300
 8006db4:	0800930c 	.word	0x0800930c
 8006db8:	08009308 	.word	0x08009308
 8006dbc:	08009310 	.word	0x08009310
 8006dc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006dc6:	4553      	cmp	r3, sl
 8006dc8:	bfa8      	it	ge
 8006dca:	4653      	movge	r3, sl
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	4699      	mov	r9, r3
 8006dd0:	dc36      	bgt.n	8006e40 <_printf_float+0x360>
 8006dd2:	f04f 0b00 	mov.w	fp, #0
 8006dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dda:	f104 021a 	add.w	r2, r4, #26
 8006dde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006de0:	9306      	str	r3, [sp, #24]
 8006de2:	eba3 0309 	sub.w	r3, r3, r9
 8006de6:	455b      	cmp	r3, fp
 8006de8:	dc31      	bgt.n	8006e4e <_printf_float+0x36e>
 8006dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dec:	459a      	cmp	sl, r3
 8006dee:	dc3a      	bgt.n	8006e66 <_printf_float+0x386>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	07da      	lsls	r2, r3, #31
 8006df4:	d437      	bmi.n	8006e66 <_printf_float+0x386>
 8006df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df8:	ebaa 0903 	sub.w	r9, sl, r3
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	ebaa 0303 	sub.w	r3, sl, r3
 8006e02:	4599      	cmp	r9, r3
 8006e04:	bfa8      	it	ge
 8006e06:	4699      	movge	r9, r3
 8006e08:	f1b9 0f00 	cmp.w	r9, #0
 8006e0c:	dc33      	bgt.n	8006e76 <_printf_float+0x396>
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e16:	f104 0b1a 	add.w	fp, r4, #26
 8006e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e20:	eba3 0309 	sub.w	r3, r3, r9
 8006e24:	4543      	cmp	r3, r8
 8006e26:	f77f af79 	ble.w	8006d1c <_printf_float+0x23c>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	465a      	mov	r2, fp
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b8      	blx	r7
 8006e34:	3001      	adds	r0, #1
 8006e36:	f43f aeae 	beq.w	8006b96 <_printf_float+0xb6>
 8006e3a:	f108 0801 	add.w	r8, r8, #1
 8006e3e:	e7ec      	b.n	8006e1a <_printf_float+0x33a>
 8006e40:	4642      	mov	r2, r8
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d1c2      	bne.n	8006dd2 <_printf_float+0x2f2>
 8006e4c:	e6a3      	b.n	8006b96 <_printf_float+0xb6>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	9206      	str	r2, [sp, #24]
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f43f ae9c 	beq.w	8006b96 <_printf_float+0xb6>
 8006e5e:	9a06      	ldr	r2, [sp, #24]
 8006e60:	f10b 0b01 	add.w	fp, fp, #1
 8006e64:	e7bb      	b.n	8006dde <_printf_float+0x2fe>
 8006e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	d1c0      	bne.n	8006df6 <_printf_float+0x316>
 8006e74:	e68f      	b.n	8006b96 <_printf_float+0xb6>
 8006e76:	9a06      	ldr	r2, [sp, #24]
 8006e78:	464b      	mov	r3, r9
 8006e7a:	4442      	add	r2, r8
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	d1c3      	bne.n	8006e0e <_printf_float+0x32e>
 8006e86:	e686      	b.n	8006b96 <_printf_float+0xb6>
 8006e88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e8c:	f1ba 0f01 	cmp.w	sl, #1
 8006e90:	dc01      	bgt.n	8006e96 <_printf_float+0x3b6>
 8006e92:	07db      	lsls	r3, r3, #31
 8006e94:	d536      	bpl.n	8006f04 <_printf_float+0x424>
 8006e96:	2301      	movs	r3, #1
 8006e98:	4642      	mov	r2, r8
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f ae78 	beq.w	8006b96 <_printf_float+0xb6>
 8006ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae70 	beq.w	8006b96 <_printf_float+0xb6>
 8006eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ec2:	f7f9 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ec6:	b9c0      	cbnz	r0, 8006efa <_printf_float+0x41a>
 8006ec8:	4653      	mov	r3, sl
 8006eca:	f108 0201 	add.w	r2, r8, #1
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d10c      	bne.n	8006ef2 <_printf_float+0x412>
 8006ed8:	e65d      	b.n	8006b96 <_printf_float+0xb6>
 8006eda:	2301      	movs	r3, #1
 8006edc:	465a      	mov	r2, fp
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f43f ae56 	beq.w	8006b96 <_printf_float+0xb6>
 8006eea:	f108 0801 	add.w	r8, r8, #1
 8006eee:	45d0      	cmp	r8, sl
 8006ef0:	dbf3      	blt.n	8006eda <_printf_float+0x3fa>
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ef8:	e6df      	b.n	8006cba <_printf_float+0x1da>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	f104 0b1a 	add.w	fp, r4, #26
 8006f02:	e7f4      	b.n	8006eee <_printf_float+0x40e>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4642      	mov	r2, r8
 8006f08:	e7e1      	b.n	8006ece <_printf_float+0x3ee>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	464a      	mov	r2, r9
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f ae3e 	beq.w	8006b96 <_printf_float+0xb6>
 8006f1a:	f108 0801 	add.w	r8, r8, #1
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f22:	1a5b      	subs	r3, r3, r1
 8006f24:	4543      	cmp	r3, r8
 8006f26:	dcf0      	bgt.n	8006f0a <_printf_float+0x42a>
 8006f28:	e6fc      	b.n	8006d24 <_printf_float+0x244>
 8006f2a:	f04f 0800 	mov.w	r8, #0
 8006f2e:	f104 0919 	add.w	r9, r4, #25
 8006f32:	e7f4      	b.n	8006f1e <_printf_float+0x43e>

08006f34 <_printf_common>:
 8006f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	4616      	mov	r6, r2
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	690b      	ldr	r3, [r1, #16]
 8006f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bfb8      	it	lt
 8006f48:	4613      	movlt	r3, r2
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f50:	4607      	mov	r7, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	b10a      	cbz	r2, 8006f5a <_printf_common+0x26>
 8006f56:	3301      	adds	r3, #1
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	0699      	lsls	r1, r3, #26
 8006f5e:	bf42      	ittt	mi
 8006f60:	6833      	ldrmi	r3, [r6, #0]
 8006f62:	3302      	addmi	r3, #2
 8006f64:	6033      	strmi	r3, [r6, #0]
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	f015 0506 	ands.w	r5, r5, #6
 8006f6c:	d106      	bne.n	8006f7c <_printf_common+0x48>
 8006f6e:	f104 0a19 	add.w	sl, r4, #25
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	6832      	ldr	r2, [r6, #0]
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	dc26      	bgt.n	8006fca <_printf_common+0x96>
 8006f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	3b00      	subs	r3, #0
 8006f84:	bf18      	it	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	0692      	lsls	r2, r2, #26
 8006f8a:	d42b      	bmi.n	8006fe4 <_printf_common+0xb0>
 8006f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f90:	4641      	mov	r1, r8
 8006f92:	4638      	mov	r0, r7
 8006f94:	47c8      	blx	r9
 8006f96:	3001      	adds	r0, #1
 8006f98:	d01e      	beq.n	8006fd8 <_printf_common+0xa4>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	6922      	ldr	r2, [r4, #16]
 8006f9e:	f003 0306 	and.w	r3, r3, #6
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	bf02      	ittt	eq
 8006fa6:	68e5      	ldreq	r5, [r4, #12]
 8006fa8:	6833      	ldreq	r3, [r6, #0]
 8006faa:	1aed      	subeq	r5, r5, r3
 8006fac:	68a3      	ldr	r3, [r4, #8]
 8006fae:	bf0c      	ite	eq
 8006fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fb4:	2500      	movne	r5, #0
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	bfc4      	itt	gt
 8006fba:	1a9b      	subgt	r3, r3, r2
 8006fbc:	18ed      	addgt	r5, r5, r3
 8006fbe:	2600      	movs	r6, #0
 8006fc0:	341a      	adds	r4, #26
 8006fc2:	42b5      	cmp	r5, r6
 8006fc4:	d11a      	bne.n	8006ffc <_printf_common+0xc8>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e008      	b.n	8006fdc <_printf_common+0xa8>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4652      	mov	r2, sl
 8006fce:	4641      	mov	r1, r8
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	47c8      	blx	r9
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d103      	bne.n	8006fe0 <_printf_common+0xac>
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	e7c6      	b.n	8006f72 <_printf_common+0x3e>
 8006fe4:	18e1      	adds	r1, r4, r3
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	2030      	movs	r0, #48	@ 0x30
 8006fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fee:	4422      	add	r2, r4
 8006ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	e7c7      	b.n	8006f8c <_printf_common+0x58>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4622      	mov	r2, r4
 8007000:	4641      	mov	r1, r8
 8007002:	4638      	mov	r0, r7
 8007004:	47c8      	blx	r9
 8007006:	3001      	adds	r0, #1
 8007008:	d0e6      	beq.n	8006fd8 <_printf_common+0xa4>
 800700a:	3601      	adds	r6, #1
 800700c:	e7d9      	b.n	8006fc2 <_printf_common+0x8e>
	...

08007010 <_printf_i>:
 8007010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007014:	7e0f      	ldrb	r7, [r1, #24]
 8007016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007018:	2f78      	cmp	r7, #120	@ 0x78
 800701a:	4691      	mov	r9, r2
 800701c:	4680      	mov	r8, r0
 800701e:	460c      	mov	r4, r1
 8007020:	469a      	mov	sl, r3
 8007022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007026:	d807      	bhi.n	8007038 <_printf_i+0x28>
 8007028:	2f62      	cmp	r7, #98	@ 0x62
 800702a:	d80a      	bhi.n	8007042 <_printf_i+0x32>
 800702c:	2f00      	cmp	r7, #0
 800702e:	f000 80d1 	beq.w	80071d4 <_printf_i+0x1c4>
 8007032:	2f58      	cmp	r7, #88	@ 0x58
 8007034:	f000 80b8 	beq.w	80071a8 <_printf_i+0x198>
 8007038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800703c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007040:	e03a      	b.n	80070b8 <_printf_i+0xa8>
 8007042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007046:	2b15      	cmp	r3, #21
 8007048:	d8f6      	bhi.n	8007038 <_printf_i+0x28>
 800704a:	a101      	add	r1, pc, #4	@ (adr r1, 8007050 <_printf_i+0x40>)
 800704c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007050:	080070a9 	.word	0x080070a9
 8007054:	080070bd 	.word	0x080070bd
 8007058:	08007039 	.word	0x08007039
 800705c:	08007039 	.word	0x08007039
 8007060:	08007039 	.word	0x08007039
 8007064:	08007039 	.word	0x08007039
 8007068:	080070bd 	.word	0x080070bd
 800706c:	08007039 	.word	0x08007039
 8007070:	08007039 	.word	0x08007039
 8007074:	08007039 	.word	0x08007039
 8007078:	08007039 	.word	0x08007039
 800707c:	080071bb 	.word	0x080071bb
 8007080:	080070e7 	.word	0x080070e7
 8007084:	08007175 	.word	0x08007175
 8007088:	08007039 	.word	0x08007039
 800708c:	08007039 	.word	0x08007039
 8007090:	080071dd 	.word	0x080071dd
 8007094:	08007039 	.word	0x08007039
 8007098:	080070e7 	.word	0x080070e7
 800709c:	08007039 	.word	0x08007039
 80070a0:	08007039 	.word	0x08007039
 80070a4:	0800717d 	.word	0x0800717d
 80070a8:	6833      	ldr	r3, [r6, #0]
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6032      	str	r2, [r6, #0]
 80070b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070b8:	2301      	movs	r3, #1
 80070ba:	e09c      	b.n	80071f6 <_printf_i+0x1e6>
 80070bc:	6833      	ldr	r3, [r6, #0]
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	6031      	str	r1, [r6, #0]
 80070c4:	0606      	lsls	r6, r0, #24
 80070c6:	d501      	bpl.n	80070cc <_printf_i+0xbc>
 80070c8:	681d      	ldr	r5, [r3, #0]
 80070ca:	e003      	b.n	80070d4 <_printf_i+0xc4>
 80070cc:	0645      	lsls	r5, r0, #25
 80070ce:	d5fb      	bpl.n	80070c8 <_printf_i+0xb8>
 80070d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	da03      	bge.n	80070e0 <_printf_i+0xd0>
 80070d8:	232d      	movs	r3, #45	@ 0x2d
 80070da:	426d      	negs	r5, r5
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070e0:	4858      	ldr	r0, [pc, #352]	@ (8007244 <_printf_i+0x234>)
 80070e2:	230a      	movs	r3, #10
 80070e4:	e011      	b.n	800710a <_printf_i+0xfa>
 80070e6:	6821      	ldr	r1, [r4, #0]
 80070e8:	6833      	ldr	r3, [r6, #0]
 80070ea:	0608      	lsls	r0, r1, #24
 80070ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80070f0:	d402      	bmi.n	80070f8 <_printf_i+0xe8>
 80070f2:	0649      	lsls	r1, r1, #25
 80070f4:	bf48      	it	mi
 80070f6:	b2ad      	uxthmi	r5, r5
 80070f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80070fa:	4852      	ldr	r0, [pc, #328]	@ (8007244 <_printf_i+0x234>)
 80070fc:	6033      	str	r3, [r6, #0]
 80070fe:	bf14      	ite	ne
 8007100:	230a      	movne	r3, #10
 8007102:	2308      	moveq	r3, #8
 8007104:	2100      	movs	r1, #0
 8007106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800710a:	6866      	ldr	r6, [r4, #4]
 800710c:	60a6      	str	r6, [r4, #8]
 800710e:	2e00      	cmp	r6, #0
 8007110:	db05      	blt.n	800711e <_printf_i+0x10e>
 8007112:	6821      	ldr	r1, [r4, #0]
 8007114:	432e      	orrs	r6, r5
 8007116:	f021 0104 	bic.w	r1, r1, #4
 800711a:	6021      	str	r1, [r4, #0]
 800711c:	d04b      	beq.n	80071b6 <_printf_i+0x1a6>
 800711e:	4616      	mov	r6, r2
 8007120:	fbb5 f1f3 	udiv	r1, r5, r3
 8007124:	fb03 5711 	mls	r7, r3, r1, r5
 8007128:	5dc7      	ldrb	r7, [r0, r7]
 800712a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800712e:	462f      	mov	r7, r5
 8007130:	42bb      	cmp	r3, r7
 8007132:	460d      	mov	r5, r1
 8007134:	d9f4      	bls.n	8007120 <_printf_i+0x110>
 8007136:	2b08      	cmp	r3, #8
 8007138:	d10b      	bne.n	8007152 <_printf_i+0x142>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	07df      	lsls	r7, r3, #31
 800713e:	d508      	bpl.n	8007152 <_printf_i+0x142>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	6861      	ldr	r1, [r4, #4]
 8007144:	4299      	cmp	r1, r3
 8007146:	bfde      	ittt	le
 8007148:	2330      	movle	r3, #48	@ 0x30
 800714a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800714e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007152:	1b92      	subs	r2, r2, r6
 8007154:	6122      	str	r2, [r4, #16]
 8007156:	f8cd a000 	str.w	sl, [sp]
 800715a:	464b      	mov	r3, r9
 800715c:	aa03      	add	r2, sp, #12
 800715e:	4621      	mov	r1, r4
 8007160:	4640      	mov	r0, r8
 8007162:	f7ff fee7 	bl	8006f34 <_printf_common>
 8007166:	3001      	adds	r0, #1
 8007168:	d14a      	bne.n	8007200 <_printf_i+0x1f0>
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
 800716e:	b004      	add	sp, #16
 8007170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	f043 0320 	orr.w	r3, r3, #32
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	4832      	ldr	r0, [pc, #200]	@ (8007248 <_printf_i+0x238>)
 800717e:	2778      	movs	r7, #120	@ 0x78
 8007180:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	6831      	ldr	r1, [r6, #0]
 8007188:	061f      	lsls	r7, r3, #24
 800718a:	f851 5b04 	ldr.w	r5, [r1], #4
 800718e:	d402      	bmi.n	8007196 <_printf_i+0x186>
 8007190:	065f      	lsls	r7, r3, #25
 8007192:	bf48      	it	mi
 8007194:	b2ad      	uxthmi	r5, r5
 8007196:	6031      	str	r1, [r6, #0]
 8007198:	07d9      	lsls	r1, r3, #31
 800719a:	bf44      	itt	mi
 800719c:	f043 0320 	orrmi.w	r3, r3, #32
 80071a0:	6023      	strmi	r3, [r4, #0]
 80071a2:	b11d      	cbz	r5, 80071ac <_printf_i+0x19c>
 80071a4:	2310      	movs	r3, #16
 80071a6:	e7ad      	b.n	8007104 <_printf_i+0xf4>
 80071a8:	4826      	ldr	r0, [pc, #152]	@ (8007244 <_printf_i+0x234>)
 80071aa:	e7e9      	b.n	8007180 <_printf_i+0x170>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	f023 0320 	bic.w	r3, r3, #32
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	e7f6      	b.n	80071a4 <_printf_i+0x194>
 80071b6:	4616      	mov	r6, r2
 80071b8:	e7bd      	b.n	8007136 <_printf_i+0x126>
 80071ba:	6833      	ldr	r3, [r6, #0]
 80071bc:	6825      	ldr	r5, [r4, #0]
 80071be:	6961      	ldr	r1, [r4, #20]
 80071c0:	1d18      	adds	r0, r3, #4
 80071c2:	6030      	str	r0, [r6, #0]
 80071c4:	062e      	lsls	r6, r5, #24
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	d501      	bpl.n	80071ce <_printf_i+0x1be>
 80071ca:	6019      	str	r1, [r3, #0]
 80071cc:	e002      	b.n	80071d4 <_printf_i+0x1c4>
 80071ce:	0668      	lsls	r0, r5, #25
 80071d0:	d5fb      	bpl.n	80071ca <_printf_i+0x1ba>
 80071d2:	8019      	strh	r1, [r3, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	4616      	mov	r6, r2
 80071da:	e7bc      	b.n	8007156 <_printf_i+0x146>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	6032      	str	r2, [r6, #0]
 80071e2:	681e      	ldr	r6, [r3, #0]
 80071e4:	6862      	ldr	r2, [r4, #4]
 80071e6:	2100      	movs	r1, #0
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7f8 fff1 	bl	80001d0 <memchr>
 80071ee:	b108      	cbz	r0, 80071f4 <_printf_i+0x1e4>
 80071f0:	1b80      	subs	r0, r0, r6
 80071f2:	6060      	str	r0, [r4, #4]
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	2300      	movs	r3, #0
 80071fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071fe:	e7aa      	b.n	8007156 <_printf_i+0x146>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	4632      	mov	r2, r6
 8007204:	4649      	mov	r1, r9
 8007206:	4640      	mov	r0, r8
 8007208:	47d0      	blx	sl
 800720a:	3001      	adds	r0, #1
 800720c:	d0ad      	beq.n	800716a <_printf_i+0x15a>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	079b      	lsls	r3, r3, #30
 8007212:	d413      	bmi.n	800723c <_printf_i+0x22c>
 8007214:	68e0      	ldr	r0, [r4, #12]
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	4298      	cmp	r0, r3
 800721a:	bfb8      	it	lt
 800721c:	4618      	movlt	r0, r3
 800721e:	e7a6      	b.n	800716e <_printf_i+0x15e>
 8007220:	2301      	movs	r3, #1
 8007222:	4632      	mov	r2, r6
 8007224:	4649      	mov	r1, r9
 8007226:	4640      	mov	r0, r8
 8007228:	47d0      	blx	sl
 800722a:	3001      	adds	r0, #1
 800722c:	d09d      	beq.n	800716a <_printf_i+0x15a>
 800722e:	3501      	adds	r5, #1
 8007230:	68e3      	ldr	r3, [r4, #12]
 8007232:	9903      	ldr	r1, [sp, #12]
 8007234:	1a5b      	subs	r3, r3, r1
 8007236:	42ab      	cmp	r3, r5
 8007238:	dcf2      	bgt.n	8007220 <_printf_i+0x210>
 800723a:	e7eb      	b.n	8007214 <_printf_i+0x204>
 800723c:	2500      	movs	r5, #0
 800723e:	f104 0619 	add.w	r6, r4, #25
 8007242:	e7f5      	b.n	8007230 <_printf_i+0x220>
 8007244:	08009312 	.word	0x08009312
 8007248:	08009323 	.word	0x08009323

0800724c <std>:
 800724c:	2300      	movs	r3, #0
 800724e:	b510      	push	{r4, lr}
 8007250:	4604      	mov	r4, r0
 8007252:	e9c0 3300 	strd	r3, r3, [r0]
 8007256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800725a:	6083      	str	r3, [r0, #8]
 800725c:	8181      	strh	r1, [r0, #12]
 800725e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007260:	81c2      	strh	r2, [r0, #14]
 8007262:	6183      	str	r3, [r0, #24]
 8007264:	4619      	mov	r1, r3
 8007266:	2208      	movs	r2, #8
 8007268:	305c      	adds	r0, #92	@ 0x5c
 800726a:	f000 f8f4 	bl	8007456 <memset>
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <std+0x58>)
 8007270:	6263      	str	r3, [r4, #36]	@ 0x24
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <std+0x5c>)
 8007274:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <std+0x60>)
 8007278:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800727a:	4b0d      	ldr	r3, [pc, #52]	@ (80072b0 <std+0x64>)
 800727c:	6323      	str	r3, [r4, #48]	@ 0x30
 800727e:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <std+0x68>)
 8007280:	6224      	str	r4, [r4, #32]
 8007282:	429c      	cmp	r4, r3
 8007284:	d006      	beq.n	8007294 <std+0x48>
 8007286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800728a:	4294      	cmp	r4, r2
 800728c:	d002      	beq.n	8007294 <std+0x48>
 800728e:	33d0      	adds	r3, #208	@ 0xd0
 8007290:	429c      	cmp	r4, r3
 8007292:	d105      	bne.n	80072a0 <std+0x54>
 8007294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f000 b958 	b.w	8007550 <__retarget_lock_init_recursive>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	080073d1 	.word	0x080073d1
 80072a8:	080073f3 	.word	0x080073f3
 80072ac:	0800742b 	.word	0x0800742b
 80072b0:	0800744f 	.word	0x0800744f
 80072b4:	20000510 	.word	0x20000510

080072b8 <stdio_exit_handler>:
 80072b8:	4a02      	ldr	r2, [pc, #8]	@ (80072c4 <stdio_exit_handler+0xc>)
 80072ba:	4903      	ldr	r1, [pc, #12]	@ (80072c8 <stdio_exit_handler+0x10>)
 80072bc:	4803      	ldr	r0, [pc, #12]	@ (80072cc <stdio_exit_handler+0x14>)
 80072be:	f000 b869 	b.w	8007394 <_fwalk_sglue>
 80072c2:	bf00      	nop
 80072c4:	2000000c 	.word	0x2000000c
 80072c8:	08008c05 	.word	0x08008c05
 80072cc:	2000001c 	.word	0x2000001c

080072d0 <cleanup_stdio>:
 80072d0:	6841      	ldr	r1, [r0, #4]
 80072d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007304 <cleanup_stdio+0x34>)
 80072d4:	4299      	cmp	r1, r3
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	d001      	beq.n	80072e0 <cleanup_stdio+0x10>
 80072dc:	f001 fc92 	bl	8008c04 <_fflush_r>
 80072e0:	68a1      	ldr	r1, [r4, #8]
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <cleanup_stdio+0x38>)
 80072e4:	4299      	cmp	r1, r3
 80072e6:	d002      	beq.n	80072ee <cleanup_stdio+0x1e>
 80072e8:	4620      	mov	r0, r4
 80072ea:	f001 fc8b 	bl	8008c04 <_fflush_r>
 80072ee:	68e1      	ldr	r1, [r4, #12]
 80072f0:	4b06      	ldr	r3, [pc, #24]	@ (800730c <cleanup_stdio+0x3c>)
 80072f2:	4299      	cmp	r1, r3
 80072f4:	d004      	beq.n	8007300 <cleanup_stdio+0x30>
 80072f6:	4620      	mov	r0, r4
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	f001 bc82 	b.w	8008c04 <_fflush_r>
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	20000510 	.word	0x20000510
 8007308:	20000578 	.word	0x20000578
 800730c:	200005e0 	.word	0x200005e0

08007310 <global_stdio_init.part.0>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <global_stdio_init.part.0+0x30>)
 8007314:	4c0b      	ldr	r4, [pc, #44]	@ (8007344 <global_stdio_init.part.0+0x34>)
 8007316:	4a0c      	ldr	r2, [pc, #48]	@ (8007348 <global_stdio_init.part.0+0x38>)
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	4620      	mov	r0, r4
 800731c:	2200      	movs	r2, #0
 800731e:	2104      	movs	r1, #4
 8007320:	f7ff ff94 	bl	800724c <std>
 8007324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007328:	2201      	movs	r2, #1
 800732a:	2109      	movs	r1, #9
 800732c:	f7ff ff8e 	bl	800724c <std>
 8007330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007334:	2202      	movs	r2, #2
 8007336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800733a:	2112      	movs	r1, #18
 800733c:	f7ff bf86 	b.w	800724c <std>
 8007340:	20000648 	.word	0x20000648
 8007344:	20000510 	.word	0x20000510
 8007348:	080072b9 	.word	0x080072b9

0800734c <__sfp_lock_acquire>:
 800734c:	4801      	ldr	r0, [pc, #4]	@ (8007354 <__sfp_lock_acquire+0x8>)
 800734e:	f000 b900 	b.w	8007552 <__retarget_lock_acquire_recursive>
 8007352:	bf00      	nop
 8007354:	20000651 	.word	0x20000651

08007358 <__sfp_lock_release>:
 8007358:	4801      	ldr	r0, [pc, #4]	@ (8007360 <__sfp_lock_release+0x8>)
 800735a:	f000 b8fb 	b.w	8007554 <__retarget_lock_release_recursive>
 800735e:	bf00      	nop
 8007360:	20000651 	.word	0x20000651

08007364 <__sinit>:
 8007364:	b510      	push	{r4, lr}
 8007366:	4604      	mov	r4, r0
 8007368:	f7ff fff0 	bl	800734c <__sfp_lock_acquire>
 800736c:	6a23      	ldr	r3, [r4, #32]
 800736e:	b11b      	cbz	r3, 8007378 <__sinit+0x14>
 8007370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007374:	f7ff bff0 	b.w	8007358 <__sfp_lock_release>
 8007378:	4b04      	ldr	r3, [pc, #16]	@ (800738c <__sinit+0x28>)
 800737a:	6223      	str	r3, [r4, #32]
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <__sinit+0x2c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f5      	bne.n	8007370 <__sinit+0xc>
 8007384:	f7ff ffc4 	bl	8007310 <global_stdio_init.part.0>
 8007388:	e7f2      	b.n	8007370 <__sinit+0xc>
 800738a:	bf00      	nop
 800738c:	080072d1 	.word	0x080072d1
 8007390:	20000648 	.word	0x20000648

08007394 <_fwalk_sglue>:
 8007394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007398:	4607      	mov	r7, r0
 800739a:	4688      	mov	r8, r1
 800739c:	4614      	mov	r4, r2
 800739e:	2600      	movs	r6, #0
 80073a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a4:	f1b9 0901 	subs.w	r9, r9, #1
 80073a8:	d505      	bpl.n	80073b6 <_fwalk_sglue+0x22>
 80073aa:	6824      	ldr	r4, [r4, #0]
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	d1f7      	bne.n	80073a0 <_fwalk_sglue+0xc>
 80073b0:	4630      	mov	r0, r6
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d907      	bls.n	80073cc <_fwalk_sglue+0x38>
 80073bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c0:	3301      	adds	r3, #1
 80073c2:	d003      	beq.n	80073cc <_fwalk_sglue+0x38>
 80073c4:	4629      	mov	r1, r5
 80073c6:	4638      	mov	r0, r7
 80073c8:	47c0      	blx	r8
 80073ca:	4306      	orrs	r6, r0
 80073cc:	3568      	adds	r5, #104	@ 0x68
 80073ce:	e7e9      	b.n	80073a4 <_fwalk_sglue+0x10>

080073d0 <__sread>:
 80073d0:	b510      	push	{r4, lr}
 80073d2:	460c      	mov	r4, r1
 80073d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d8:	f000 f86c 	bl	80074b4 <_read_r>
 80073dc:	2800      	cmp	r0, #0
 80073de:	bfab      	itete	ge
 80073e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073e2:	89a3      	ldrhlt	r3, [r4, #12]
 80073e4:	181b      	addge	r3, r3, r0
 80073e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073ea:	bfac      	ite	ge
 80073ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073ee:	81a3      	strhlt	r3, [r4, #12]
 80073f0:	bd10      	pop	{r4, pc}

080073f2 <__swrite>:
 80073f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f6:	461f      	mov	r7, r3
 80073f8:	898b      	ldrh	r3, [r1, #12]
 80073fa:	05db      	lsls	r3, r3, #23
 80073fc:	4605      	mov	r5, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	4616      	mov	r6, r2
 8007402:	d505      	bpl.n	8007410 <__swrite+0x1e>
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	2302      	movs	r3, #2
 800740a:	2200      	movs	r2, #0
 800740c:	f000 f840 	bl	8007490 <_lseek_r>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	4632      	mov	r2, r6
 800741e:	463b      	mov	r3, r7
 8007420:	4628      	mov	r0, r5
 8007422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	f000 b857 	b.w	80074d8 <_write_r>

0800742a <__sseek>:
 800742a:	b510      	push	{r4, lr}
 800742c:	460c      	mov	r4, r1
 800742e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007432:	f000 f82d 	bl	8007490 <_lseek_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	bf15      	itete	ne
 800743c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800743e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007446:	81a3      	strheq	r3, [r4, #12]
 8007448:	bf18      	it	ne
 800744a:	81a3      	strhne	r3, [r4, #12]
 800744c:	bd10      	pop	{r4, pc}

0800744e <__sclose>:
 800744e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007452:	f000 b80d 	b.w	8007470 <_close_r>

08007456 <memset>:
 8007456:	4402      	add	r2, r0
 8007458:	4603      	mov	r3, r0
 800745a:	4293      	cmp	r3, r2
 800745c:	d100      	bne.n	8007460 <memset+0xa>
 800745e:	4770      	bx	lr
 8007460:	f803 1b01 	strb.w	r1, [r3], #1
 8007464:	e7f9      	b.n	800745a <memset+0x4>
	...

08007468 <_localeconv_r>:
 8007468:	4800      	ldr	r0, [pc, #0]	@ (800746c <_localeconv_r+0x4>)
 800746a:	4770      	bx	lr
 800746c:	20000158 	.word	0x20000158

08007470 <_close_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	@ (800748c <_close_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7fa fe45 	bl	800210a <_close>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_close_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_close_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	2000064c 	.word	0x2000064c

08007490 <_lseek_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	@ (80074b0 <_lseek_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fa fe5a 	bl	8002158 <_lseek>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_lseek_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_lseek_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	2000064c 	.word	0x2000064c

080074b4 <_read_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	@ (80074d4 <_read_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7fa fde8 	bl	8002098 <_read>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_read_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_read_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	2000064c 	.word	0x2000064c

080074d8 <_write_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d07      	ldr	r5, [pc, #28]	@ (80074f8 <_write_r+0x20>)
 80074dc:	4604      	mov	r4, r0
 80074de:	4608      	mov	r0, r1
 80074e0:	4611      	mov	r1, r2
 80074e2:	2200      	movs	r2, #0
 80074e4:	602a      	str	r2, [r5, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f7fa fdf3 	bl	80020d2 <_write>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_write_r+0x1e>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_write_r+0x1e>
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	2000064c 	.word	0x2000064c

080074fc <__errno>:
 80074fc:	4b01      	ldr	r3, [pc, #4]	@ (8007504 <__errno+0x8>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000018 	.word	0x20000018

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4d0d      	ldr	r5, [pc, #52]	@ (8007540 <__libc_init_array+0x38>)
 800750c:	4c0d      	ldr	r4, [pc, #52]	@ (8007544 <__libc_init_array+0x3c>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	2600      	movs	r6, #0
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	4d0b      	ldr	r5, [pc, #44]	@ (8007548 <__libc_init_array+0x40>)
 800751a:	4c0c      	ldr	r4, [pc, #48]	@ (800754c <__libc_init_array+0x44>)
 800751c:	f001 fec0 	bl	80092a0 <_init>
 8007520:	1b64      	subs	r4, r4, r5
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	2600      	movs	r6, #0
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	0800967c 	.word	0x0800967c
 8007544:	0800967c 	.word	0x0800967c
 8007548:	0800967c 	.word	0x0800967c
 800754c:	08009680 	.word	0x08009680

08007550 <__retarget_lock_init_recursive>:
 8007550:	4770      	bx	lr

08007552 <__retarget_lock_acquire_recursive>:
 8007552:	4770      	bx	lr

08007554 <__retarget_lock_release_recursive>:
 8007554:	4770      	bx	lr

08007556 <quorem>:
 8007556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	6903      	ldr	r3, [r0, #16]
 800755c:	690c      	ldr	r4, [r1, #16]
 800755e:	42a3      	cmp	r3, r4
 8007560:	4607      	mov	r7, r0
 8007562:	db7e      	blt.n	8007662 <quorem+0x10c>
 8007564:	3c01      	subs	r4, #1
 8007566:	f101 0814 	add.w	r8, r1, #20
 800756a:	00a3      	lsls	r3, r4, #2
 800756c:	f100 0514 	add.w	r5, r0, #20
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800757c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007580:	3301      	adds	r3, #1
 8007582:	429a      	cmp	r2, r3
 8007584:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007588:	fbb2 f6f3 	udiv	r6, r2, r3
 800758c:	d32e      	bcc.n	80075ec <quorem+0x96>
 800758e:	f04f 0a00 	mov.w	sl, #0
 8007592:	46c4      	mov	ip, r8
 8007594:	46ae      	mov	lr, r5
 8007596:	46d3      	mov	fp, sl
 8007598:	f85c 3b04 	ldr.w	r3, [ip], #4
 800759c:	b298      	uxth	r0, r3
 800759e:	fb06 a000 	mla	r0, r6, r0, sl
 80075a2:	0c02      	lsrs	r2, r0, #16
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	fb06 2303 	mla	r3, r6, r3, r2
 80075aa:	f8de 2000 	ldr.w	r2, [lr]
 80075ae:	b280      	uxth	r0, r0
 80075b0:	b292      	uxth	r2, r2
 80075b2:	1a12      	subs	r2, r2, r0
 80075b4:	445a      	add	r2, fp
 80075b6:	f8de 0000 	ldr.w	r0, [lr]
 80075ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80075c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80075c8:	b292      	uxth	r2, r2
 80075ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075ce:	45e1      	cmp	r9, ip
 80075d0:	f84e 2b04 	str.w	r2, [lr], #4
 80075d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80075d8:	d2de      	bcs.n	8007598 <quorem+0x42>
 80075da:	9b00      	ldr	r3, [sp, #0]
 80075dc:	58eb      	ldr	r3, [r5, r3]
 80075de:	b92b      	cbnz	r3, 80075ec <quorem+0x96>
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	3b04      	subs	r3, #4
 80075e4:	429d      	cmp	r5, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	d32f      	bcc.n	800764a <quorem+0xf4>
 80075ea:	613c      	str	r4, [r7, #16]
 80075ec:	4638      	mov	r0, r7
 80075ee:	f001 f97d 	bl	80088ec <__mcmp>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	db25      	blt.n	8007642 <quorem+0xec>
 80075f6:	4629      	mov	r1, r5
 80075f8:	2000      	movs	r0, #0
 80075fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80075fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007602:	fa1f fe82 	uxth.w	lr, r2
 8007606:	fa1f f38c 	uxth.w	r3, ip
 800760a:	eba3 030e 	sub.w	r3, r3, lr
 800760e:	4403      	add	r3, r0
 8007610:	0c12      	lsrs	r2, r2, #16
 8007612:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007616:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007620:	45c1      	cmp	r9, r8
 8007622:	f841 3b04 	str.w	r3, [r1], #4
 8007626:	ea4f 4022 	mov.w	r0, r2, asr #16
 800762a:	d2e6      	bcs.n	80075fa <quorem+0xa4>
 800762c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007634:	b922      	cbnz	r2, 8007640 <quorem+0xea>
 8007636:	3b04      	subs	r3, #4
 8007638:	429d      	cmp	r5, r3
 800763a:	461a      	mov	r2, r3
 800763c:	d30b      	bcc.n	8007656 <quorem+0x100>
 800763e:	613c      	str	r4, [r7, #16]
 8007640:	3601      	adds	r6, #1
 8007642:	4630      	mov	r0, r6
 8007644:	b003      	add	sp, #12
 8007646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	3b04      	subs	r3, #4
 800764e:	2a00      	cmp	r2, #0
 8007650:	d1cb      	bne.n	80075ea <quorem+0x94>
 8007652:	3c01      	subs	r4, #1
 8007654:	e7c6      	b.n	80075e4 <quorem+0x8e>
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	3b04      	subs	r3, #4
 800765a:	2a00      	cmp	r2, #0
 800765c:	d1ef      	bne.n	800763e <quorem+0xe8>
 800765e:	3c01      	subs	r4, #1
 8007660:	e7ea      	b.n	8007638 <quorem+0xe2>
 8007662:	2000      	movs	r0, #0
 8007664:	e7ee      	b.n	8007644 <quorem+0xee>
	...

08007668 <_dtoa_r>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	69c7      	ldr	r7, [r0, #28]
 800766e:	b097      	sub	sp, #92	@ 0x5c
 8007670:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007674:	ec55 4b10 	vmov	r4, r5, d0
 8007678:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800767a:	9107      	str	r1, [sp, #28]
 800767c:	4681      	mov	r9, r0
 800767e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007680:	9311      	str	r3, [sp, #68]	@ 0x44
 8007682:	b97f      	cbnz	r7, 80076a4 <_dtoa_r+0x3c>
 8007684:	2010      	movs	r0, #16
 8007686:	f000 fe09 	bl	800829c <malloc>
 800768a:	4602      	mov	r2, r0
 800768c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007690:	b920      	cbnz	r0, 800769c <_dtoa_r+0x34>
 8007692:	4ba9      	ldr	r3, [pc, #676]	@ (8007938 <_dtoa_r+0x2d0>)
 8007694:	21ef      	movs	r1, #239	@ 0xef
 8007696:	48a9      	ldr	r0, [pc, #676]	@ (800793c <_dtoa_r+0x2d4>)
 8007698:	f001 fafa 	bl	8008c90 <__assert_func>
 800769c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076a0:	6007      	str	r7, [r0, #0]
 80076a2:	60c7      	str	r7, [r0, #12]
 80076a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076a8:	6819      	ldr	r1, [r3, #0]
 80076aa:	b159      	cbz	r1, 80076c4 <_dtoa_r+0x5c>
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	604a      	str	r2, [r1, #4]
 80076b0:	2301      	movs	r3, #1
 80076b2:	4093      	lsls	r3, r2
 80076b4:	608b      	str	r3, [r1, #8]
 80076b6:	4648      	mov	r0, r9
 80076b8:	f000 fee6 	bl	8008488 <_Bfree>
 80076bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	1e2b      	subs	r3, r5, #0
 80076c6:	bfb9      	ittee	lt
 80076c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80076cc:	9305      	strlt	r3, [sp, #20]
 80076ce:	2300      	movge	r3, #0
 80076d0:	6033      	strge	r3, [r6, #0]
 80076d2:	9f05      	ldr	r7, [sp, #20]
 80076d4:	4b9a      	ldr	r3, [pc, #616]	@ (8007940 <_dtoa_r+0x2d8>)
 80076d6:	bfbc      	itt	lt
 80076d8:	2201      	movlt	r2, #1
 80076da:	6032      	strlt	r2, [r6, #0]
 80076dc:	43bb      	bics	r3, r7
 80076de:	d112      	bne.n	8007706 <_dtoa_r+0x9e>
 80076e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80076e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076ec:	4323      	orrs	r3, r4
 80076ee:	f000 855a 	beq.w	80081a6 <_dtoa_r+0xb3e>
 80076f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007954 <_dtoa_r+0x2ec>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 855c 	beq.w	80081b6 <_dtoa_r+0xb4e>
 80076fe:	f10a 0303 	add.w	r3, sl, #3
 8007702:	f000 bd56 	b.w	80081b2 <_dtoa_r+0xb4a>
 8007706:	ed9d 7b04 	vldr	d7, [sp, #16]
 800770a:	2200      	movs	r2, #0
 800770c:	ec51 0b17 	vmov	r0, r1, d7
 8007710:	2300      	movs	r3, #0
 8007712:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007716:	f7f9 f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800771a:	4680      	mov	r8, r0
 800771c:	b158      	cbz	r0, 8007736 <_dtoa_r+0xce>
 800771e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007720:	2301      	movs	r3, #1
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007726:	b113      	cbz	r3, 800772e <_dtoa_r+0xc6>
 8007728:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800772a:	4b86      	ldr	r3, [pc, #536]	@ (8007944 <_dtoa_r+0x2dc>)
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007958 <_dtoa_r+0x2f0>
 8007732:	f000 bd40 	b.w	80081b6 <_dtoa_r+0xb4e>
 8007736:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800773a:	aa14      	add	r2, sp, #80	@ 0x50
 800773c:	a915      	add	r1, sp, #84	@ 0x54
 800773e:	4648      	mov	r0, r9
 8007740:	f001 f984 	bl	8008a4c <__d2b>
 8007744:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007748:	9002      	str	r0, [sp, #8]
 800774a:	2e00      	cmp	r6, #0
 800774c:	d078      	beq.n	8007840 <_dtoa_r+0x1d8>
 800774e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007750:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800775c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007760:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007764:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007768:	4619      	mov	r1, r3
 800776a:	2200      	movs	r2, #0
 800776c:	4b76      	ldr	r3, [pc, #472]	@ (8007948 <_dtoa_r+0x2e0>)
 800776e:	f7f8 fd8b 	bl	8000288 <__aeabi_dsub>
 8007772:	a36b      	add	r3, pc, #428	@ (adr r3, 8007920 <_dtoa_r+0x2b8>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 ff3e 	bl	80005f8 <__aeabi_dmul>
 800777c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007928 <_dtoa_r+0x2c0>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f7f8 fd83 	bl	800028c <__adddf3>
 8007786:	4604      	mov	r4, r0
 8007788:	4630      	mov	r0, r6
 800778a:	460d      	mov	r5, r1
 800778c:	f7f8 feca 	bl	8000524 <__aeabi_i2d>
 8007790:	a367      	add	r3, pc, #412	@ (adr r3, 8007930 <_dtoa_r+0x2c8>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 ff2f 	bl	80005f8 <__aeabi_dmul>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f8 fd73 	bl	800028c <__adddf3>
 80077a6:	4604      	mov	r4, r0
 80077a8:	460d      	mov	r5, r1
 80077aa:	f7f9 f9d5 	bl	8000b58 <__aeabi_d2iz>
 80077ae:	2200      	movs	r2, #0
 80077b0:	4607      	mov	r7, r0
 80077b2:	2300      	movs	r3, #0
 80077b4:	4620      	mov	r0, r4
 80077b6:	4629      	mov	r1, r5
 80077b8:	f7f9 f990 	bl	8000adc <__aeabi_dcmplt>
 80077bc:	b140      	cbz	r0, 80077d0 <_dtoa_r+0x168>
 80077be:	4638      	mov	r0, r7
 80077c0:	f7f8 feb0 	bl	8000524 <__aeabi_i2d>
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	f7f9 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80077cc:	b900      	cbnz	r0, 80077d0 <_dtoa_r+0x168>
 80077ce:	3f01      	subs	r7, #1
 80077d0:	2f16      	cmp	r7, #22
 80077d2:	d852      	bhi.n	800787a <_dtoa_r+0x212>
 80077d4:	4b5d      	ldr	r3, [pc, #372]	@ (800794c <_dtoa_r+0x2e4>)
 80077d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80077e2:	f7f9 f97b 	bl	8000adc <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d049      	beq.n	800787e <_dtoa_r+0x216>
 80077ea:	3f01      	subs	r7, #1
 80077ec:	2300      	movs	r3, #0
 80077ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80077f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077f2:	1b9b      	subs	r3, r3, r6
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	bf45      	ittet	mi
 80077f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80077fc:	9300      	strmi	r3, [sp, #0]
 80077fe:	2300      	movpl	r3, #0
 8007800:	2300      	movmi	r3, #0
 8007802:	9206      	str	r2, [sp, #24]
 8007804:	bf54      	ite	pl
 8007806:	9300      	strpl	r3, [sp, #0]
 8007808:	9306      	strmi	r3, [sp, #24]
 800780a:	2f00      	cmp	r7, #0
 800780c:	db39      	blt.n	8007882 <_dtoa_r+0x21a>
 800780e:	9b06      	ldr	r3, [sp, #24]
 8007810:	970d      	str	r7, [sp, #52]	@ 0x34
 8007812:	443b      	add	r3, r7
 8007814:	9306      	str	r3, [sp, #24]
 8007816:	2300      	movs	r3, #0
 8007818:	9308      	str	r3, [sp, #32]
 800781a:	9b07      	ldr	r3, [sp, #28]
 800781c:	2b09      	cmp	r3, #9
 800781e:	d863      	bhi.n	80078e8 <_dtoa_r+0x280>
 8007820:	2b05      	cmp	r3, #5
 8007822:	bfc4      	itt	gt
 8007824:	3b04      	subgt	r3, #4
 8007826:	9307      	strgt	r3, [sp, #28]
 8007828:	9b07      	ldr	r3, [sp, #28]
 800782a:	f1a3 0302 	sub.w	r3, r3, #2
 800782e:	bfcc      	ite	gt
 8007830:	2400      	movgt	r4, #0
 8007832:	2401      	movle	r4, #1
 8007834:	2b03      	cmp	r3, #3
 8007836:	d863      	bhi.n	8007900 <_dtoa_r+0x298>
 8007838:	e8df f003 	tbb	[pc, r3]
 800783c:	2b375452 	.word	0x2b375452
 8007840:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007844:	441e      	add	r6, r3
 8007846:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800784a:	2b20      	cmp	r3, #32
 800784c:	bfc1      	itttt	gt
 800784e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007852:	409f      	lslgt	r7, r3
 8007854:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007858:	fa24 f303 	lsrgt.w	r3, r4, r3
 800785c:	bfd6      	itet	le
 800785e:	f1c3 0320 	rsble	r3, r3, #32
 8007862:	ea47 0003 	orrgt.w	r0, r7, r3
 8007866:	fa04 f003 	lslle.w	r0, r4, r3
 800786a:	f7f8 fe4b 	bl	8000504 <__aeabi_ui2d>
 800786e:	2201      	movs	r2, #1
 8007870:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007874:	3e01      	subs	r6, #1
 8007876:	9212      	str	r2, [sp, #72]	@ 0x48
 8007878:	e776      	b.n	8007768 <_dtoa_r+0x100>
 800787a:	2301      	movs	r3, #1
 800787c:	e7b7      	b.n	80077ee <_dtoa_r+0x186>
 800787e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007880:	e7b6      	b.n	80077f0 <_dtoa_r+0x188>
 8007882:	9b00      	ldr	r3, [sp, #0]
 8007884:	1bdb      	subs	r3, r3, r7
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	427b      	negs	r3, r7
 800788a:	9308      	str	r3, [sp, #32]
 800788c:	2300      	movs	r3, #0
 800788e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007890:	e7c3      	b.n	800781a <_dtoa_r+0x1b2>
 8007892:	2301      	movs	r3, #1
 8007894:	9309      	str	r3, [sp, #36]	@ 0x24
 8007896:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007898:	eb07 0b03 	add.w	fp, r7, r3
 800789c:	f10b 0301 	add.w	r3, fp, #1
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	bfb8      	it	lt
 80078a6:	2301      	movlt	r3, #1
 80078a8:	e006      	b.n	80078b8 <_dtoa_r+0x250>
 80078aa:	2301      	movs	r3, #1
 80078ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dd28      	ble.n	8007906 <_dtoa_r+0x29e>
 80078b4:	469b      	mov	fp, r3
 80078b6:	9303      	str	r3, [sp, #12]
 80078b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80078bc:	2100      	movs	r1, #0
 80078be:	2204      	movs	r2, #4
 80078c0:	f102 0514 	add.w	r5, r2, #20
 80078c4:	429d      	cmp	r5, r3
 80078c6:	d926      	bls.n	8007916 <_dtoa_r+0x2ae>
 80078c8:	6041      	str	r1, [r0, #4]
 80078ca:	4648      	mov	r0, r9
 80078cc:	f000 fd9c 	bl	8008408 <_Balloc>
 80078d0:	4682      	mov	sl, r0
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d142      	bne.n	800795c <_dtoa_r+0x2f4>
 80078d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007950 <_dtoa_r+0x2e8>)
 80078d8:	4602      	mov	r2, r0
 80078da:	f240 11af 	movw	r1, #431	@ 0x1af
 80078de:	e6da      	b.n	8007696 <_dtoa_r+0x2e>
 80078e0:	2300      	movs	r3, #0
 80078e2:	e7e3      	b.n	80078ac <_dtoa_r+0x244>
 80078e4:	2300      	movs	r3, #0
 80078e6:	e7d5      	b.n	8007894 <_dtoa_r+0x22c>
 80078e8:	2401      	movs	r4, #1
 80078ea:	2300      	movs	r3, #0
 80078ec:	9307      	str	r3, [sp, #28]
 80078ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80078f0:	f04f 3bff 	mov.w	fp, #4294967295
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80078fa:	2312      	movs	r3, #18
 80078fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80078fe:	e7db      	b.n	80078b8 <_dtoa_r+0x250>
 8007900:	2301      	movs	r3, #1
 8007902:	9309      	str	r3, [sp, #36]	@ 0x24
 8007904:	e7f4      	b.n	80078f0 <_dtoa_r+0x288>
 8007906:	f04f 0b01 	mov.w	fp, #1
 800790a:	f8cd b00c 	str.w	fp, [sp, #12]
 800790e:	465b      	mov	r3, fp
 8007910:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007914:	e7d0      	b.n	80078b8 <_dtoa_r+0x250>
 8007916:	3101      	adds	r1, #1
 8007918:	0052      	lsls	r2, r2, #1
 800791a:	e7d1      	b.n	80078c0 <_dtoa_r+0x258>
 800791c:	f3af 8000 	nop.w
 8007920:	636f4361 	.word	0x636f4361
 8007924:	3fd287a7 	.word	0x3fd287a7
 8007928:	8b60c8b3 	.word	0x8b60c8b3
 800792c:	3fc68a28 	.word	0x3fc68a28
 8007930:	509f79fb 	.word	0x509f79fb
 8007934:	3fd34413 	.word	0x3fd34413
 8007938:	08009341 	.word	0x08009341
 800793c:	08009358 	.word	0x08009358
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	08009311 	.word	0x08009311
 8007948:	3ff80000 	.word	0x3ff80000
 800794c:	080094a8 	.word	0x080094a8
 8007950:	080093b0 	.word	0x080093b0
 8007954:	0800933d 	.word	0x0800933d
 8007958:	08009310 	.word	0x08009310
 800795c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007960:	6018      	str	r0, [r3, #0]
 8007962:	9b03      	ldr	r3, [sp, #12]
 8007964:	2b0e      	cmp	r3, #14
 8007966:	f200 80a1 	bhi.w	8007aac <_dtoa_r+0x444>
 800796a:	2c00      	cmp	r4, #0
 800796c:	f000 809e 	beq.w	8007aac <_dtoa_r+0x444>
 8007970:	2f00      	cmp	r7, #0
 8007972:	dd33      	ble.n	80079dc <_dtoa_r+0x374>
 8007974:	4b9c      	ldr	r3, [pc, #624]	@ (8007be8 <_dtoa_r+0x580>)
 8007976:	f007 020f 	and.w	r2, r7, #15
 800797a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800797e:	ed93 7b00 	vldr	d7, [r3]
 8007982:	05f8      	lsls	r0, r7, #23
 8007984:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007988:	ea4f 1427 	mov.w	r4, r7, asr #4
 800798c:	d516      	bpl.n	80079bc <_dtoa_r+0x354>
 800798e:	4b97      	ldr	r3, [pc, #604]	@ (8007bec <_dtoa_r+0x584>)
 8007990:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007994:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007998:	f7f8 ff58 	bl	800084c <__aeabi_ddiv>
 800799c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079a0:	f004 040f 	and.w	r4, r4, #15
 80079a4:	2603      	movs	r6, #3
 80079a6:	4d91      	ldr	r5, [pc, #580]	@ (8007bec <_dtoa_r+0x584>)
 80079a8:	b954      	cbnz	r4, 80079c0 <_dtoa_r+0x358>
 80079aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80079ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079b2:	f7f8 ff4b 	bl	800084c <__aeabi_ddiv>
 80079b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079ba:	e028      	b.n	8007a0e <_dtoa_r+0x3a6>
 80079bc:	2602      	movs	r6, #2
 80079be:	e7f2      	b.n	80079a6 <_dtoa_r+0x33e>
 80079c0:	07e1      	lsls	r1, r4, #31
 80079c2:	d508      	bpl.n	80079d6 <_dtoa_r+0x36e>
 80079c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80079c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079cc:	f7f8 fe14 	bl	80005f8 <__aeabi_dmul>
 80079d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80079d4:	3601      	adds	r6, #1
 80079d6:	1064      	asrs	r4, r4, #1
 80079d8:	3508      	adds	r5, #8
 80079da:	e7e5      	b.n	80079a8 <_dtoa_r+0x340>
 80079dc:	f000 80af 	beq.w	8007b3e <_dtoa_r+0x4d6>
 80079e0:	427c      	negs	r4, r7
 80079e2:	4b81      	ldr	r3, [pc, #516]	@ (8007be8 <_dtoa_r+0x580>)
 80079e4:	4d81      	ldr	r5, [pc, #516]	@ (8007bec <_dtoa_r+0x584>)
 80079e6:	f004 020f 	and.w	r2, r4, #15
 80079ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80079f6:	f7f8 fdff 	bl	80005f8 <__aeabi_dmul>
 80079fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079fe:	1124      	asrs	r4, r4, #4
 8007a00:	2300      	movs	r3, #0
 8007a02:	2602      	movs	r6, #2
 8007a04:	2c00      	cmp	r4, #0
 8007a06:	f040 808f 	bne.w	8007b28 <_dtoa_r+0x4c0>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1d3      	bne.n	80079b6 <_dtoa_r+0x34e>
 8007a0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8094 	beq.w	8007b42 <_dtoa_r+0x4da>
 8007a1a:	4b75      	ldr	r3, [pc, #468]	@ (8007bf0 <_dtoa_r+0x588>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f9 f85b 	bl	8000adc <__aeabi_dcmplt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f000 808b 	beq.w	8007b42 <_dtoa_r+0x4da>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8087 	beq.w	8007b42 <_dtoa_r+0x4da>
 8007a34:	f1bb 0f00 	cmp.w	fp, #0
 8007a38:	dd34      	ble.n	8007aa4 <_dtoa_r+0x43c>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8007bf4 <_dtoa_r+0x58c>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f8 fdd9 	bl	80005f8 <__aeabi_dmul>
 8007a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a4a:	f107 38ff 	add.w	r8, r7, #4294967295
 8007a4e:	3601      	adds	r6, #1
 8007a50:	465c      	mov	r4, fp
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7f8 fd66 	bl	8000524 <__aeabi_i2d>
 8007a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a5c:	f7f8 fdcc 	bl	80005f8 <__aeabi_dmul>
 8007a60:	4b65      	ldr	r3, [pc, #404]	@ (8007bf8 <_dtoa_r+0x590>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	f7f8 fc12 	bl	800028c <__adddf3>
 8007a68:	4605      	mov	r5, r0
 8007a6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a6e:	2c00      	cmp	r4, #0
 8007a70:	d16a      	bne.n	8007b48 <_dtoa_r+0x4e0>
 8007a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a76:	4b61      	ldr	r3, [pc, #388]	@ (8007bfc <_dtoa_r+0x594>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f7f8 fc05 	bl	8000288 <__aeabi_dsub>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a86:	462a      	mov	r2, r5
 8007a88:	4633      	mov	r3, r6
 8007a8a:	f7f9 f845 	bl	8000b18 <__aeabi_dcmpgt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f040 8298 	bne.w	8007fc4 <_dtoa_r+0x95c>
 8007a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a98:	462a      	mov	r2, r5
 8007a9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a9e:	f7f9 f81d 	bl	8000adc <__aeabi_dcmplt>
 8007aa2:	bb38      	cbnz	r0, 8007af4 <_dtoa_r+0x48c>
 8007aa4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007aa8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007aac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f2c0 8157 	blt.w	8007d62 <_dtoa_r+0x6fa>
 8007ab4:	2f0e      	cmp	r7, #14
 8007ab6:	f300 8154 	bgt.w	8007d62 <_dtoa_r+0x6fa>
 8007aba:	4b4b      	ldr	r3, [pc, #300]	@ (8007be8 <_dtoa_r+0x580>)
 8007abc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ac0:	ed93 7b00 	vldr	d7, [r3]
 8007ac4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	ed8d 7b00 	vstr	d7, [sp]
 8007acc:	f280 80e5 	bge.w	8007c9a <_dtoa_r+0x632>
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f300 80e1 	bgt.w	8007c9a <_dtoa_r+0x632>
 8007ad8:	d10c      	bne.n	8007af4 <_dtoa_r+0x48c>
 8007ada:	4b48      	ldr	r3, [pc, #288]	@ (8007bfc <_dtoa_r+0x594>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	ec51 0b17 	vmov	r0, r1, d7
 8007ae2:	f7f8 fd89 	bl	80005f8 <__aeabi_dmul>
 8007ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aea:	f7f9 f80b 	bl	8000b04 <__aeabi_dcmpge>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f000 8266 	beq.w	8007fc0 <_dtoa_r+0x958>
 8007af4:	2400      	movs	r4, #0
 8007af6:	4625      	mov	r5, r4
 8007af8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007afa:	4656      	mov	r6, sl
 8007afc:	ea6f 0803 	mvn.w	r8, r3
 8007b00:	2700      	movs	r7, #0
 8007b02:	4621      	mov	r1, r4
 8007b04:	4648      	mov	r0, r9
 8007b06:	f000 fcbf 	bl	8008488 <_Bfree>
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	f000 80bd 	beq.w	8007c8a <_dtoa_r+0x622>
 8007b10:	b12f      	cbz	r7, 8007b1e <_dtoa_r+0x4b6>
 8007b12:	42af      	cmp	r7, r5
 8007b14:	d003      	beq.n	8007b1e <_dtoa_r+0x4b6>
 8007b16:	4639      	mov	r1, r7
 8007b18:	4648      	mov	r0, r9
 8007b1a:	f000 fcb5 	bl	8008488 <_Bfree>
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4648      	mov	r0, r9
 8007b22:	f000 fcb1 	bl	8008488 <_Bfree>
 8007b26:	e0b0      	b.n	8007c8a <_dtoa_r+0x622>
 8007b28:	07e2      	lsls	r2, r4, #31
 8007b2a:	d505      	bpl.n	8007b38 <_dtoa_r+0x4d0>
 8007b2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	3601      	adds	r6, #1
 8007b36:	2301      	movs	r3, #1
 8007b38:	1064      	asrs	r4, r4, #1
 8007b3a:	3508      	adds	r5, #8
 8007b3c:	e762      	b.n	8007a04 <_dtoa_r+0x39c>
 8007b3e:	2602      	movs	r6, #2
 8007b40:	e765      	b.n	8007a0e <_dtoa_r+0x3a6>
 8007b42:	9c03      	ldr	r4, [sp, #12]
 8007b44:	46b8      	mov	r8, r7
 8007b46:	e784      	b.n	8007a52 <_dtoa_r+0x3ea>
 8007b48:	4b27      	ldr	r3, [pc, #156]	@ (8007be8 <_dtoa_r+0x580>)
 8007b4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b54:	4454      	add	r4, sl
 8007b56:	2900      	cmp	r1, #0
 8007b58:	d054      	beq.n	8007c04 <_dtoa_r+0x59c>
 8007b5a:	4929      	ldr	r1, [pc, #164]	@ (8007c00 <_dtoa_r+0x598>)
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f7f8 fe75 	bl	800084c <__aeabi_ddiv>
 8007b62:	4633      	mov	r3, r6
 8007b64:	462a      	mov	r2, r5
 8007b66:	f7f8 fb8f 	bl	8000288 <__aeabi_dsub>
 8007b6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b6e:	4656      	mov	r6, sl
 8007b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b74:	f7f8 fff0 	bl	8000b58 <__aeabi_d2iz>
 8007b78:	4605      	mov	r5, r0
 8007b7a:	f7f8 fcd3 	bl	8000524 <__aeabi_i2d>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b86:	f7f8 fb7f 	bl	8000288 <__aeabi_dsub>
 8007b8a:	3530      	adds	r5, #48	@ 0x30
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b94:	f806 5b01 	strb.w	r5, [r6], #1
 8007b98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b9c:	f7f8 ff9e 	bl	8000adc <__aeabi_dcmplt>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d172      	bne.n	8007c8a <_dtoa_r+0x622>
 8007ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba8:	4911      	ldr	r1, [pc, #68]	@ (8007bf0 <_dtoa_r+0x588>)
 8007baa:	2000      	movs	r0, #0
 8007bac:	f7f8 fb6c 	bl	8000288 <__aeabi_dsub>
 8007bb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007bb4:	f7f8 ff92 	bl	8000adc <__aeabi_dcmplt>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f040 80b4 	bne.w	8007d26 <_dtoa_r+0x6be>
 8007bbe:	42a6      	cmp	r6, r4
 8007bc0:	f43f af70 	beq.w	8007aa4 <_dtoa_r+0x43c>
 8007bc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf4 <_dtoa_r+0x58c>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f7f8 fd14 	bl	80005f8 <__aeabi_dmul>
 8007bd0:	4b08      	ldr	r3, [pc, #32]	@ (8007bf4 <_dtoa_r+0x58c>)
 8007bd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bdc:	f7f8 fd0c 	bl	80005f8 <__aeabi_dmul>
 8007be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007be4:	e7c4      	b.n	8007b70 <_dtoa_r+0x508>
 8007be6:	bf00      	nop
 8007be8:	080094a8 	.word	0x080094a8
 8007bec:	08009480 	.word	0x08009480
 8007bf0:	3ff00000 	.word	0x3ff00000
 8007bf4:	40240000 	.word	0x40240000
 8007bf8:	401c0000 	.word	0x401c0000
 8007bfc:	40140000 	.word	0x40140000
 8007c00:	3fe00000 	.word	0x3fe00000
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7f8 fcf6 	bl	80005f8 <__aeabi_dmul>
 8007c0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007c12:	4656      	mov	r6, sl
 8007c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c18:	f7f8 ff9e 	bl	8000b58 <__aeabi_d2iz>
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	f7f8 fc81 	bl	8000524 <__aeabi_i2d>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2a:	f7f8 fb2d 	bl	8000288 <__aeabi_dsub>
 8007c2e:	3530      	adds	r5, #48	@ 0x30
 8007c30:	f806 5b01 	strb.w	r5, [r6], #1
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	42a6      	cmp	r6, r4
 8007c3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	d124      	bne.n	8007c8e <_dtoa_r+0x626>
 8007c44:	4baf      	ldr	r3, [pc, #700]	@ (8007f04 <_dtoa_r+0x89c>)
 8007c46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c4a:	f7f8 fb1f 	bl	800028c <__adddf3>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c56:	f7f8 ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d163      	bne.n	8007d26 <_dtoa_r+0x6be>
 8007c5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c62:	49a8      	ldr	r1, [pc, #672]	@ (8007f04 <_dtoa_r+0x89c>)
 8007c64:	2000      	movs	r0, #0
 8007c66:	f7f8 fb0f 	bl	8000288 <__aeabi_dsub>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c72:	f7f8 ff33 	bl	8000adc <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f43f af14 	beq.w	8007aa4 <_dtoa_r+0x43c>
 8007c7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007c7e:	1e73      	subs	r3, r6, #1
 8007c80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c86:	2b30      	cmp	r3, #48	@ 0x30
 8007c88:	d0f8      	beq.n	8007c7c <_dtoa_r+0x614>
 8007c8a:	4647      	mov	r7, r8
 8007c8c:	e03b      	b.n	8007d06 <_dtoa_r+0x69e>
 8007c8e:	4b9e      	ldr	r3, [pc, #632]	@ (8007f08 <_dtoa_r+0x8a0>)
 8007c90:	f7f8 fcb2 	bl	80005f8 <__aeabi_dmul>
 8007c94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c98:	e7bc      	b.n	8007c14 <_dtoa_r+0x5ac>
 8007c9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007c9e:	4656      	mov	r6, sl
 8007ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7f8 fdd0 	bl	800084c <__aeabi_ddiv>
 8007cac:	f7f8 ff54 	bl	8000b58 <__aeabi_d2iz>
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	f7f8 fc37 	bl	8000524 <__aeabi_i2d>
 8007cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cba:	f7f8 fc9d 	bl	80005f8 <__aeabi_dmul>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007cca:	f7f8 fadd 	bl	8000288 <__aeabi_dsub>
 8007cce:	f806 4b01 	strb.w	r4, [r6], #1
 8007cd2:	9d03      	ldr	r5, [sp, #12]
 8007cd4:	eba6 040a 	sub.w	r4, r6, sl
 8007cd8:	42a5      	cmp	r5, r4
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	d133      	bne.n	8007d48 <_dtoa_r+0x6e0>
 8007ce0:	f7f8 fad4 	bl	800028c <__adddf3>
 8007ce4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	f7f8 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8007cf0:	b9c0      	cbnz	r0, 8007d24 <_dtoa_r+0x6bc>
 8007cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cfe:	b110      	cbz	r0, 8007d06 <_dtoa_r+0x69e>
 8007d00:	f018 0f01 	tst.w	r8, #1
 8007d04:	d10e      	bne.n	8007d24 <_dtoa_r+0x6bc>
 8007d06:	9902      	ldr	r1, [sp, #8]
 8007d08:	4648      	mov	r0, r9
 8007d0a:	f000 fbbd 	bl	8008488 <_Bfree>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	7033      	strb	r3, [r6, #0]
 8007d12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d14:	3701      	adds	r7, #1
 8007d16:	601f      	str	r7, [r3, #0]
 8007d18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 824b 	beq.w	80081b6 <_dtoa_r+0xb4e>
 8007d20:	601e      	str	r6, [r3, #0]
 8007d22:	e248      	b.n	80081b6 <_dtoa_r+0xb4e>
 8007d24:	46b8      	mov	r8, r7
 8007d26:	4633      	mov	r3, r6
 8007d28:	461e      	mov	r6, r3
 8007d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d2e:	2a39      	cmp	r2, #57	@ 0x39
 8007d30:	d106      	bne.n	8007d40 <_dtoa_r+0x6d8>
 8007d32:	459a      	cmp	sl, r3
 8007d34:	d1f8      	bne.n	8007d28 <_dtoa_r+0x6c0>
 8007d36:	2230      	movs	r2, #48	@ 0x30
 8007d38:	f108 0801 	add.w	r8, r8, #1
 8007d3c:	f88a 2000 	strb.w	r2, [sl]
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	3201      	adds	r2, #1
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e7a0      	b.n	8007c8a <_dtoa_r+0x622>
 8007d48:	4b6f      	ldr	r3, [pc, #444]	@ (8007f08 <_dtoa_r+0x8a0>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f7f8 fc54 	bl	80005f8 <__aeabi_dmul>
 8007d50:	2200      	movs	r2, #0
 8007d52:	2300      	movs	r3, #0
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	f7f8 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d09f      	beq.n	8007ca0 <_dtoa_r+0x638>
 8007d60:	e7d1      	b.n	8007d06 <_dtoa_r+0x69e>
 8007d62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	f000 80ea 	beq.w	8007f3e <_dtoa_r+0x8d6>
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	f300 80cd 	bgt.w	8007f0c <_dtoa_r+0x8a4>
 8007d72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	f000 80c1 	beq.w	8007efc <_dtoa_r+0x894>
 8007d7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d7e:	9c08      	ldr	r4, [sp, #32]
 8007d80:	9e00      	ldr	r6, [sp, #0]
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	441a      	add	r2, r3
 8007d86:	9200      	str	r2, [sp, #0]
 8007d88:	9a06      	ldr	r2, [sp, #24]
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	441a      	add	r2, r3
 8007d8e:	4648      	mov	r0, r9
 8007d90:	9206      	str	r2, [sp, #24]
 8007d92:	f000 fc2d 	bl	80085f0 <__i2b>
 8007d96:	4605      	mov	r5, r0
 8007d98:	b166      	cbz	r6, 8007db4 <_dtoa_r+0x74c>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dd09      	ble.n	8007db4 <_dtoa_r+0x74c>
 8007da0:	42b3      	cmp	r3, r6
 8007da2:	9a00      	ldr	r2, [sp, #0]
 8007da4:	bfa8      	it	ge
 8007da6:	4633      	movge	r3, r6
 8007da8:	1ad2      	subs	r2, r2, r3
 8007daa:	9200      	str	r2, [sp, #0]
 8007dac:	9a06      	ldr	r2, [sp, #24]
 8007dae:	1af6      	subs	r6, r6, r3
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	9306      	str	r3, [sp, #24]
 8007db4:	9b08      	ldr	r3, [sp, #32]
 8007db6:	b30b      	cbz	r3, 8007dfc <_dtoa_r+0x794>
 8007db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80c6 	beq.w	8007f4c <_dtoa_r+0x8e4>
 8007dc0:	2c00      	cmp	r4, #0
 8007dc2:	f000 80c0 	beq.w	8007f46 <_dtoa_r+0x8de>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4622      	mov	r2, r4
 8007dca:	4648      	mov	r0, r9
 8007dcc:	f000 fcc8 	bl	8008760 <__pow5mult>
 8007dd0:	9a02      	ldr	r2, [sp, #8]
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	4648      	mov	r0, r9
 8007dd8:	f000 fc20 	bl	800861c <__multiply>
 8007ddc:	9902      	ldr	r1, [sp, #8]
 8007dde:	4680      	mov	r8, r0
 8007de0:	4648      	mov	r0, r9
 8007de2:	f000 fb51 	bl	8008488 <_Bfree>
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	1b1b      	subs	r3, r3, r4
 8007dea:	9308      	str	r3, [sp, #32]
 8007dec:	f000 80b1 	beq.w	8007f52 <_dtoa_r+0x8ea>
 8007df0:	9a08      	ldr	r2, [sp, #32]
 8007df2:	4641      	mov	r1, r8
 8007df4:	4648      	mov	r0, r9
 8007df6:	f000 fcb3 	bl	8008760 <__pow5mult>
 8007dfa:	9002      	str	r0, [sp, #8]
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	4648      	mov	r0, r9
 8007e00:	f000 fbf6 	bl	80085f0 <__i2b>
 8007e04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e06:	4604      	mov	r4, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 81d8 	beq.w	80081be <_dtoa_r+0xb56>
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4601      	mov	r1, r0
 8007e12:	4648      	mov	r0, r9
 8007e14:	f000 fca4 	bl	8008760 <__pow5mult>
 8007e18:	9b07      	ldr	r3, [sp, #28]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	f300 809f 	bgt.w	8007f60 <_dtoa_r+0x8f8>
 8007e22:	9b04      	ldr	r3, [sp, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f040 8097 	bne.w	8007f58 <_dtoa_r+0x8f0>
 8007e2a:	9b05      	ldr	r3, [sp, #20]
 8007e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f040 8093 	bne.w	8007f5c <_dtoa_r+0x8f4>
 8007e36:	9b05      	ldr	r3, [sp, #20]
 8007e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e3c:	0d1b      	lsrs	r3, r3, #20
 8007e3e:	051b      	lsls	r3, r3, #20
 8007e40:	b133      	cbz	r3, 8007e50 <_dtoa_r+0x7e8>
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	9b06      	ldr	r3, [sp, #24]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	9306      	str	r3, [sp, #24]
 8007e4e:	2301      	movs	r3, #1
 8007e50:	9308      	str	r3, [sp, #32]
 8007e52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 81b8 	beq.w	80081ca <_dtoa_r+0xb62>
 8007e5a:	6923      	ldr	r3, [r4, #16]
 8007e5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e60:	6918      	ldr	r0, [r3, #16]
 8007e62:	f000 fb79 	bl	8008558 <__hi0bits>
 8007e66:	f1c0 0020 	rsb	r0, r0, #32
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	4418      	add	r0, r3
 8007e6e:	f010 001f 	ands.w	r0, r0, #31
 8007e72:	f000 8082 	beq.w	8007f7a <_dtoa_r+0x912>
 8007e76:	f1c0 0320 	rsb	r3, r0, #32
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	dd73      	ble.n	8007f66 <_dtoa_r+0x8fe>
 8007e7e:	9b00      	ldr	r3, [sp, #0]
 8007e80:	f1c0 001c 	rsb	r0, r0, #28
 8007e84:	4403      	add	r3, r0
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	9b06      	ldr	r3, [sp, #24]
 8007e8a:	4403      	add	r3, r0
 8007e8c:	4406      	add	r6, r0
 8007e8e:	9306      	str	r3, [sp, #24]
 8007e90:	9b00      	ldr	r3, [sp, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dd05      	ble.n	8007ea2 <_dtoa_r+0x83a>
 8007e96:	9902      	ldr	r1, [sp, #8]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4648      	mov	r0, r9
 8007e9c:	f000 fcba 	bl	8008814 <__lshift>
 8007ea0:	9002      	str	r0, [sp, #8]
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dd05      	ble.n	8007eb4 <_dtoa_r+0x84c>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4648      	mov	r0, r9
 8007eae:	f000 fcb1 	bl	8008814 <__lshift>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d061      	beq.n	8007f7e <_dtoa_r+0x916>
 8007eba:	9802      	ldr	r0, [sp, #8]
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	f000 fd15 	bl	80088ec <__mcmp>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	da5b      	bge.n	8007f7e <_dtoa_r+0x916>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9902      	ldr	r1, [sp, #8]
 8007eca:	220a      	movs	r2, #10
 8007ecc:	4648      	mov	r0, r9
 8007ece:	f000 fafd 	bl	80084cc <__multadd>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed4:	9002      	str	r0, [sp, #8]
 8007ed6:	f107 38ff 	add.w	r8, r7, #4294967295
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8177 	beq.w	80081ce <_dtoa_r+0xb66>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	220a      	movs	r2, #10
 8007ee6:	4648      	mov	r0, r9
 8007ee8:	f000 faf0 	bl	80084cc <__multadd>
 8007eec:	f1bb 0f00 	cmp.w	fp, #0
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	dc6f      	bgt.n	8007fd4 <_dtoa_r+0x96c>
 8007ef4:	9b07      	ldr	r3, [sp, #28]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	dc49      	bgt.n	8007f8e <_dtoa_r+0x926>
 8007efa:	e06b      	b.n	8007fd4 <_dtoa_r+0x96c>
 8007efc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007efe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f02:	e73c      	b.n	8007d7e <_dtoa_r+0x716>
 8007f04:	3fe00000 	.word	0x3fe00000
 8007f08:	40240000 	.word	0x40240000
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	1e5c      	subs	r4, r3, #1
 8007f10:	9b08      	ldr	r3, [sp, #32]
 8007f12:	42a3      	cmp	r3, r4
 8007f14:	db09      	blt.n	8007f2a <_dtoa_r+0x8c2>
 8007f16:	1b1c      	subs	r4, r3, r4
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f6bf af30 	bge.w	8007d80 <_dtoa_r+0x718>
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	9a03      	ldr	r2, [sp, #12]
 8007f24:	1a9e      	subs	r6, r3, r2
 8007f26:	2300      	movs	r3, #0
 8007f28:	e72b      	b.n	8007d82 <_dtoa_r+0x71a>
 8007f2a:	9b08      	ldr	r3, [sp, #32]
 8007f2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f2e:	9408      	str	r4, [sp, #32]
 8007f30:	1ae3      	subs	r3, r4, r3
 8007f32:	441a      	add	r2, r3
 8007f34:	9e00      	ldr	r6, [sp, #0]
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	920d      	str	r2, [sp, #52]	@ 0x34
 8007f3a:	2400      	movs	r4, #0
 8007f3c:	e721      	b.n	8007d82 <_dtoa_r+0x71a>
 8007f3e:	9c08      	ldr	r4, [sp, #32]
 8007f40:	9e00      	ldr	r6, [sp, #0]
 8007f42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007f44:	e728      	b.n	8007d98 <_dtoa_r+0x730>
 8007f46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007f4a:	e751      	b.n	8007df0 <_dtoa_r+0x788>
 8007f4c:	9a08      	ldr	r2, [sp, #32]
 8007f4e:	9902      	ldr	r1, [sp, #8]
 8007f50:	e750      	b.n	8007df4 <_dtoa_r+0x78c>
 8007f52:	f8cd 8008 	str.w	r8, [sp, #8]
 8007f56:	e751      	b.n	8007dfc <_dtoa_r+0x794>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e779      	b.n	8007e50 <_dtoa_r+0x7e8>
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	e777      	b.n	8007e50 <_dtoa_r+0x7e8>
 8007f60:	2300      	movs	r3, #0
 8007f62:	9308      	str	r3, [sp, #32]
 8007f64:	e779      	b.n	8007e5a <_dtoa_r+0x7f2>
 8007f66:	d093      	beq.n	8007e90 <_dtoa_r+0x828>
 8007f68:	9a00      	ldr	r2, [sp, #0]
 8007f6a:	331c      	adds	r3, #28
 8007f6c:	441a      	add	r2, r3
 8007f6e:	9200      	str	r2, [sp, #0]
 8007f70:	9a06      	ldr	r2, [sp, #24]
 8007f72:	441a      	add	r2, r3
 8007f74:	441e      	add	r6, r3
 8007f76:	9206      	str	r2, [sp, #24]
 8007f78:	e78a      	b.n	8007e90 <_dtoa_r+0x828>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	e7f4      	b.n	8007f68 <_dtoa_r+0x900>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	46b8      	mov	r8, r7
 8007f84:	dc20      	bgt.n	8007fc8 <_dtoa_r+0x960>
 8007f86:	469b      	mov	fp, r3
 8007f88:	9b07      	ldr	r3, [sp, #28]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	dd1e      	ble.n	8007fcc <_dtoa_r+0x964>
 8007f8e:	f1bb 0f00 	cmp.w	fp, #0
 8007f92:	f47f adb1 	bne.w	8007af8 <_dtoa_r+0x490>
 8007f96:	4621      	mov	r1, r4
 8007f98:	465b      	mov	r3, fp
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	4648      	mov	r0, r9
 8007f9e:	f000 fa95 	bl	80084cc <__multadd>
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	9802      	ldr	r0, [sp, #8]
 8007fa8:	f000 fca0 	bl	80088ec <__mcmp>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f77f ada3 	ble.w	8007af8 <_dtoa_r+0x490>
 8007fb2:	4656      	mov	r6, sl
 8007fb4:	2331      	movs	r3, #49	@ 0x31
 8007fb6:	f806 3b01 	strb.w	r3, [r6], #1
 8007fba:	f108 0801 	add.w	r8, r8, #1
 8007fbe:	e59f      	b.n	8007b00 <_dtoa_r+0x498>
 8007fc0:	9c03      	ldr	r4, [sp, #12]
 8007fc2:	46b8      	mov	r8, r7
 8007fc4:	4625      	mov	r5, r4
 8007fc6:	e7f4      	b.n	8007fb2 <_dtoa_r+0x94a>
 8007fc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8101 	beq.w	80081d6 <_dtoa_r+0xb6e>
 8007fd4:	2e00      	cmp	r6, #0
 8007fd6:	dd05      	ble.n	8007fe4 <_dtoa_r+0x97c>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4632      	mov	r2, r6
 8007fdc:	4648      	mov	r0, r9
 8007fde:	f000 fc19 	bl	8008814 <__lshift>
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	9b08      	ldr	r3, [sp, #32]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d05c      	beq.n	80080a4 <_dtoa_r+0xa3c>
 8007fea:	6869      	ldr	r1, [r5, #4]
 8007fec:	4648      	mov	r0, r9
 8007fee:	f000 fa0b 	bl	8008408 <_Balloc>
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	b928      	cbnz	r0, 8008002 <_dtoa_r+0x99a>
 8007ff6:	4b82      	ldr	r3, [pc, #520]	@ (8008200 <_dtoa_r+0xb98>)
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ffe:	f7ff bb4a 	b.w	8007696 <_dtoa_r+0x2e>
 8008002:	692a      	ldr	r2, [r5, #16]
 8008004:	3202      	adds	r2, #2
 8008006:	0092      	lsls	r2, r2, #2
 8008008:	f105 010c 	add.w	r1, r5, #12
 800800c:	300c      	adds	r0, #12
 800800e:	f000 fe31 	bl	8008c74 <memcpy>
 8008012:	2201      	movs	r2, #1
 8008014:	4631      	mov	r1, r6
 8008016:	4648      	mov	r0, r9
 8008018:	f000 fbfc 	bl	8008814 <__lshift>
 800801c:	f10a 0301 	add.w	r3, sl, #1
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	eb0a 030b 	add.w	r3, sl, fp
 8008026:	9308      	str	r3, [sp, #32]
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	462f      	mov	r7, r5
 8008030:	9306      	str	r3, [sp, #24]
 8008032:	4605      	mov	r5, r0
 8008034:	9b00      	ldr	r3, [sp, #0]
 8008036:	9802      	ldr	r0, [sp, #8]
 8008038:	4621      	mov	r1, r4
 800803a:	f103 3bff 	add.w	fp, r3, #4294967295
 800803e:	f7ff fa8a 	bl	8007556 <quorem>
 8008042:	4603      	mov	r3, r0
 8008044:	3330      	adds	r3, #48	@ 0x30
 8008046:	9003      	str	r0, [sp, #12]
 8008048:	4639      	mov	r1, r7
 800804a:	9802      	ldr	r0, [sp, #8]
 800804c:	9309      	str	r3, [sp, #36]	@ 0x24
 800804e:	f000 fc4d 	bl	80088ec <__mcmp>
 8008052:	462a      	mov	r2, r5
 8008054:	9004      	str	r0, [sp, #16]
 8008056:	4621      	mov	r1, r4
 8008058:	4648      	mov	r0, r9
 800805a:	f000 fc63 	bl	8008924 <__mdiff>
 800805e:	68c2      	ldr	r2, [r0, #12]
 8008060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008062:	4606      	mov	r6, r0
 8008064:	bb02      	cbnz	r2, 80080a8 <_dtoa_r+0xa40>
 8008066:	4601      	mov	r1, r0
 8008068:	9802      	ldr	r0, [sp, #8]
 800806a:	f000 fc3f 	bl	80088ec <__mcmp>
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	4602      	mov	r2, r0
 8008072:	4631      	mov	r1, r6
 8008074:	4648      	mov	r0, r9
 8008076:	920c      	str	r2, [sp, #48]	@ 0x30
 8008078:	9309      	str	r3, [sp, #36]	@ 0x24
 800807a:	f000 fa05 	bl	8008488 <_Bfree>
 800807e:	9b07      	ldr	r3, [sp, #28]
 8008080:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008082:	9e00      	ldr	r6, [sp, #0]
 8008084:	ea42 0103 	orr.w	r1, r2, r3
 8008088:	9b06      	ldr	r3, [sp, #24]
 800808a:	4319      	orrs	r1, r3
 800808c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808e:	d10d      	bne.n	80080ac <_dtoa_r+0xa44>
 8008090:	2b39      	cmp	r3, #57	@ 0x39
 8008092:	d027      	beq.n	80080e4 <_dtoa_r+0xa7c>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	2a00      	cmp	r2, #0
 8008098:	dd01      	ble.n	800809e <_dtoa_r+0xa36>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	3331      	adds	r3, #49	@ 0x31
 800809e:	f88b 3000 	strb.w	r3, [fp]
 80080a2:	e52e      	b.n	8007b02 <_dtoa_r+0x49a>
 80080a4:	4628      	mov	r0, r5
 80080a6:	e7b9      	b.n	800801c <_dtoa_r+0x9b4>
 80080a8:	2201      	movs	r2, #1
 80080aa:	e7e2      	b.n	8008072 <_dtoa_r+0xa0a>
 80080ac:	9904      	ldr	r1, [sp, #16]
 80080ae:	2900      	cmp	r1, #0
 80080b0:	db04      	blt.n	80080bc <_dtoa_r+0xa54>
 80080b2:	9807      	ldr	r0, [sp, #28]
 80080b4:	4301      	orrs	r1, r0
 80080b6:	9806      	ldr	r0, [sp, #24]
 80080b8:	4301      	orrs	r1, r0
 80080ba:	d120      	bne.n	80080fe <_dtoa_r+0xa96>
 80080bc:	2a00      	cmp	r2, #0
 80080be:	ddee      	ble.n	800809e <_dtoa_r+0xa36>
 80080c0:	9902      	ldr	r1, [sp, #8]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	2201      	movs	r2, #1
 80080c6:	4648      	mov	r0, r9
 80080c8:	f000 fba4 	bl	8008814 <__lshift>
 80080cc:	4621      	mov	r1, r4
 80080ce:	9002      	str	r0, [sp, #8]
 80080d0:	f000 fc0c 	bl	80088ec <__mcmp>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	dc02      	bgt.n	80080e0 <_dtoa_r+0xa78>
 80080da:	d1e0      	bne.n	800809e <_dtoa_r+0xa36>
 80080dc:	07da      	lsls	r2, r3, #31
 80080de:	d5de      	bpl.n	800809e <_dtoa_r+0xa36>
 80080e0:	2b39      	cmp	r3, #57	@ 0x39
 80080e2:	d1da      	bne.n	800809a <_dtoa_r+0xa32>
 80080e4:	2339      	movs	r3, #57	@ 0x39
 80080e6:	f88b 3000 	strb.w	r3, [fp]
 80080ea:	4633      	mov	r3, r6
 80080ec:	461e      	mov	r6, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80080f4:	2a39      	cmp	r2, #57	@ 0x39
 80080f6:	d04e      	beq.n	8008196 <_dtoa_r+0xb2e>
 80080f8:	3201      	adds	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]
 80080fc:	e501      	b.n	8007b02 <_dtoa_r+0x49a>
 80080fe:	2a00      	cmp	r2, #0
 8008100:	dd03      	ble.n	800810a <_dtoa_r+0xaa2>
 8008102:	2b39      	cmp	r3, #57	@ 0x39
 8008104:	d0ee      	beq.n	80080e4 <_dtoa_r+0xa7c>
 8008106:	3301      	adds	r3, #1
 8008108:	e7c9      	b.n	800809e <_dtoa_r+0xa36>
 800810a:	9a00      	ldr	r2, [sp, #0]
 800810c:	9908      	ldr	r1, [sp, #32]
 800810e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008112:	428a      	cmp	r2, r1
 8008114:	d028      	beq.n	8008168 <_dtoa_r+0xb00>
 8008116:	9902      	ldr	r1, [sp, #8]
 8008118:	2300      	movs	r3, #0
 800811a:	220a      	movs	r2, #10
 800811c:	4648      	mov	r0, r9
 800811e:	f000 f9d5 	bl	80084cc <__multadd>
 8008122:	42af      	cmp	r7, r5
 8008124:	9002      	str	r0, [sp, #8]
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	f04f 020a 	mov.w	r2, #10
 800812e:	4639      	mov	r1, r7
 8008130:	4648      	mov	r0, r9
 8008132:	d107      	bne.n	8008144 <_dtoa_r+0xadc>
 8008134:	f000 f9ca 	bl	80084cc <__multadd>
 8008138:	4607      	mov	r7, r0
 800813a:	4605      	mov	r5, r0
 800813c:	9b00      	ldr	r3, [sp, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	e777      	b.n	8008034 <_dtoa_r+0x9cc>
 8008144:	f000 f9c2 	bl	80084cc <__multadd>
 8008148:	4629      	mov	r1, r5
 800814a:	4607      	mov	r7, r0
 800814c:	2300      	movs	r3, #0
 800814e:	220a      	movs	r2, #10
 8008150:	4648      	mov	r0, r9
 8008152:	f000 f9bb 	bl	80084cc <__multadd>
 8008156:	4605      	mov	r5, r0
 8008158:	e7f0      	b.n	800813c <_dtoa_r+0xad4>
 800815a:	f1bb 0f00 	cmp.w	fp, #0
 800815e:	bfcc      	ite	gt
 8008160:	465e      	movgt	r6, fp
 8008162:	2601      	movle	r6, #1
 8008164:	4456      	add	r6, sl
 8008166:	2700      	movs	r7, #0
 8008168:	9902      	ldr	r1, [sp, #8]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	2201      	movs	r2, #1
 800816e:	4648      	mov	r0, r9
 8008170:	f000 fb50 	bl	8008814 <__lshift>
 8008174:	4621      	mov	r1, r4
 8008176:	9002      	str	r0, [sp, #8]
 8008178:	f000 fbb8 	bl	80088ec <__mcmp>
 800817c:	2800      	cmp	r0, #0
 800817e:	dcb4      	bgt.n	80080ea <_dtoa_r+0xa82>
 8008180:	d102      	bne.n	8008188 <_dtoa_r+0xb20>
 8008182:	9b00      	ldr	r3, [sp, #0]
 8008184:	07db      	lsls	r3, r3, #31
 8008186:	d4b0      	bmi.n	80080ea <_dtoa_r+0xa82>
 8008188:	4633      	mov	r3, r6
 800818a:	461e      	mov	r6, r3
 800818c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008190:	2a30      	cmp	r2, #48	@ 0x30
 8008192:	d0fa      	beq.n	800818a <_dtoa_r+0xb22>
 8008194:	e4b5      	b.n	8007b02 <_dtoa_r+0x49a>
 8008196:	459a      	cmp	sl, r3
 8008198:	d1a8      	bne.n	80080ec <_dtoa_r+0xa84>
 800819a:	2331      	movs	r3, #49	@ 0x31
 800819c:	f108 0801 	add.w	r8, r8, #1
 80081a0:	f88a 3000 	strb.w	r3, [sl]
 80081a4:	e4ad      	b.n	8007b02 <_dtoa_r+0x49a>
 80081a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008204 <_dtoa_r+0xb9c>
 80081ac:	b11b      	cbz	r3, 80081b6 <_dtoa_r+0xb4e>
 80081ae:	f10a 0308 	add.w	r3, sl, #8
 80081b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	4650      	mov	r0, sl
 80081b8:	b017      	add	sp, #92	@ 0x5c
 80081ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081be:	9b07      	ldr	r3, [sp, #28]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	f77f ae2e 	ble.w	8007e22 <_dtoa_r+0x7ba>
 80081c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	2001      	movs	r0, #1
 80081cc:	e64d      	b.n	8007e6a <_dtoa_r+0x802>
 80081ce:	f1bb 0f00 	cmp.w	fp, #0
 80081d2:	f77f aed9 	ble.w	8007f88 <_dtoa_r+0x920>
 80081d6:	4656      	mov	r6, sl
 80081d8:	9802      	ldr	r0, [sp, #8]
 80081da:	4621      	mov	r1, r4
 80081dc:	f7ff f9bb 	bl	8007556 <quorem>
 80081e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80081e4:	f806 3b01 	strb.w	r3, [r6], #1
 80081e8:	eba6 020a 	sub.w	r2, r6, sl
 80081ec:	4593      	cmp	fp, r2
 80081ee:	ddb4      	ble.n	800815a <_dtoa_r+0xaf2>
 80081f0:	9902      	ldr	r1, [sp, #8]
 80081f2:	2300      	movs	r3, #0
 80081f4:	220a      	movs	r2, #10
 80081f6:	4648      	mov	r0, r9
 80081f8:	f000 f968 	bl	80084cc <__multadd>
 80081fc:	9002      	str	r0, [sp, #8]
 80081fe:	e7eb      	b.n	80081d8 <_dtoa_r+0xb70>
 8008200:	080093b0 	.word	0x080093b0
 8008204:	08009334 	.word	0x08009334

08008208 <_free_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4605      	mov	r5, r0
 800820c:	2900      	cmp	r1, #0
 800820e:	d041      	beq.n	8008294 <_free_r+0x8c>
 8008210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008214:	1f0c      	subs	r4, r1, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfb8      	it	lt
 800821a:	18e4      	addlt	r4, r4, r3
 800821c:	f000 f8e8 	bl	80083f0 <__malloc_lock>
 8008220:	4a1d      	ldr	r2, [pc, #116]	@ (8008298 <_free_r+0x90>)
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	b933      	cbnz	r3, 8008234 <_free_r+0x2c>
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	6014      	str	r4, [r2, #0]
 800822a:	4628      	mov	r0, r5
 800822c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008230:	f000 b8e4 	b.w	80083fc <__malloc_unlock>
 8008234:	42a3      	cmp	r3, r4
 8008236:	d908      	bls.n	800824a <_free_r+0x42>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	bf01      	itttt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	1809      	addeq	r1, r1, r0
 8008246:	6021      	streq	r1, [r4, #0]
 8008248:	e7ed      	b.n	8008226 <_free_r+0x1e>
 800824a:	461a      	mov	r2, r3
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	b10b      	cbz	r3, 8008254 <_free_r+0x4c>
 8008250:	42a3      	cmp	r3, r4
 8008252:	d9fa      	bls.n	800824a <_free_r+0x42>
 8008254:	6811      	ldr	r1, [r2, #0]
 8008256:	1850      	adds	r0, r2, r1
 8008258:	42a0      	cmp	r0, r4
 800825a:	d10b      	bne.n	8008274 <_free_r+0x6c>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	4401      	add	r1, r0
 8008260:	1850      	adds	r0, r2, r1
 8008262:	4283      	cmp	r3, r0
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	d1e0      	bne.n	800822a <_free_r+0x22>
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	6053      	str	r3, [r2, #4]
 800826e:	4408      	add	r0, r1
 8008270:	6010      	str	r0, [r2, #0]
 8008272:	e7da      	b.n	800822a <_free_r+0x22>
 8008274:	d902      	bls.n	800827c <_free_r+0x74>
 8008276:	230c      	movs	r3, #12
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	e7d6      	b.n	800822a <_free_r+0x22>
 800827c:	6820      	ldr	r0, [r4, #0]
 800827e:	1821      	adds	r1, r4, r0
 8008280:	428b      	cmp	r3, r1
 8008282:	bf04      	itt	eq
 8008284:	6819      	ldreq	r1, [r3, #0]
 8008286:	685b      	ldreq	r3, [r3, #4]
 8008288:	6063      	str	r3, [r4, #4]
 800828a:	bf04      	itt	eq
 800828c:	1809      	addeq	r1, r1, r0
 800828e:	6021      	streq	r1, [r4, #0]
 8008290:	6054      	str	r4, [r2, #4]
 8008292:	e7ca      	b.n	800822a <_free_r+0x22>
 8008294:	bd38      	pop	{r3, r4, r5, pc}
 8008296:	bf00      	nop
 8008298:	20000658 	.word	0x20000658

0800829c <malloc>:
 800829c:	4b02      	ldr	r3, [pc, #8]	@ (80082a8 <malloc+0xc>)
 800829e:	4601      	mov	r1, r0
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	f000 b825 	b.w	80082f0 <_malloc_r>
 80082a6:	bf00      	nop
 80082a8:	20000018 	.word	0x20000018

080082ac <sbrk_aligned>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	4e0f      	ldr	r6, [pc, #60]	@ (80082ec <sbrk_aligned+0x40>)
 80082b0:	460c      	mov	r4, r1
 80082b2:	6831      	ldr	r1, [r6, #0]
 80082b4:	4605      	mov	r5, r0
 80082b6:	b911      	cbnz	r1, 80082be <sbrk_aligned+0x12>
 80082b8:	f000 fccc 	bl	8008c54 <_sbrk_r>
 80082bc:	6030      	str	r0, [r6, #0]
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 fcc7 	bl	8008c54 <_sbrk_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	d103      	bne.n	80082d2 <sbrk_aligned+0x26>
 80082ca:	f04f 34ff 	mov.w	r4, #4294967295
 80082ce:	4620      	mov	r0, r4
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
 80082d2:	1cc4      	adds	r4, r0, #3
 80082d4:	f024 0403 	bic.w	r4, r4, #3
 80082d8:	42a0      	cmp	r0, r4
 80082da:	d0f8      	beq.n	80082ce <sbrk_aligned+0x22>
 80082dc:	1a21      	subs	r1, r4, r0
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 fcb8 	bl	8008c54 <_sbrk_r>
 80082e4:	3001      	adds	r0, #1
 80082e6:	d1f2      	bne.n	80082ce <sbrk_aligned+0x22>
 80082e8:	e7ef      	b.n	80082ca <sbrk_aligned+0x1e>
 80082ea:	bf00      	nop
 80082ec:	20000654 	.word	0x20000654

080082f0 <_malloc_r>:
 80082f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f4:	1ccd      	adds	r5, r1, #3
 80082f6:	f025 0503 	bic.w	r5, r5, #3
 80082fa:	3508      	adds	r5, #8
 80082fc:	2d0c      	cmp	r5, #12
 80082fe:	bf38      	it	cc
 8008300:	250c      	movcc	r5, #12
 8008302:	2d00      	cmp	r5, #0
 8008304:	4606      	mov	r6, r0
 8008306:	db01      	blt.n	800830c <_malloc_r+0x1c>
 8008308:	42a9      	cmp	r1, r5
 800830a:	d904      	bls.n	8008316 <_malloc_r+0x26>
 800830c:	230c      	movs	r3, #12
 800830e:	6033      	str	r3, [r6, #0]
 8008310:	2000      	movs	r0, #0
 8008312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083ec <_malloc_r+0xfc>
 800831a:	f000 f869 	bl	80083f0 <__malloc_lock>
 800831e:	f8d8 3000 	ldr.w	r3, [r8]
 8008322:	461c      	mov	r4, r3
 8008324:	bb44      	cbnz	r4, 8008378 <_malloc_r+0x88>
 8008326:	4629      	mov	r1, r5
 8008328:	4630      	mov	r0, r6
 800832a:	f7ff ffbf 	bl	80082ac <sbrk_aligned>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	4604      	mov	r4, r0
 8008332:	d158      	bne.n	80083e6 <_malloc_r+0xf6>
 8008334:	f8d8 4000 	ldr.w	r4, [r8]
 8008338:	4627      	mov	r7, r4
 800833a:	2f00      	cmp	r7, #0
 800833c:	d143      	bne.n	80083c6 <_malloc_r+0xd6>
 800833e:	2c00      	cmp	r4, #0
 8008340:	d04b      	beq.n	80083da <_malloc_r+0xea>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	4639      	mov	r1, r7
 8008346:	4630      	mov	r0, r6
 8008348:	eb04 0903 	add.w	r9, r4, r3
 800834c:	f000 fc82 	bl	8008c54 <_sbrk_r>
 8008350:	4581      	cmp	r9, r0
 8008352:	d142      	bne.n	80083da <_malloc_r+0xea>
 8008354:	6821      	ldr	r1, [r4, #0]
 8008356:	1a6d      	subs	r5, r5, r1
 8008358:	4629      	mov	r1, r5
 800835a:	4630      	mov	r0, r6
 800835c:	f7ff ffa6 	bl	80082ac <sbrk_aligned>
 8008360:	3001      	adds	r0, #1
 8008362:	d03a      	beq.n	80083da <_malloc_r+0xea>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	442b      	add	r3, r5
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	f8d8 3000 	ldr.w	r3, [r8]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	bb62      	cbnz	r2, 80083cc <_malloc_r+0xdc>
 8008372:	f8c8 7000 	str.w	r7, [r8]
 8008376:	e00f      	b.n	8008398 <_malloc_r+0xa8>
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	1b52      	subs	r2, r2, r5
 800837c:	d420      	bmi.n	80083c0 <_malloc_r+0xd0>
 800837e:	2a0b      	cmp	r2, #11
 8008380:	d917      	bls.n	80083b2 <_malloc_r+0xc2>
 8008382:	1961      	adds	r1, r4, r5
 8008384:	42a3      	cmp	r3, r4
 8008386:	6025      	str	r5, [r4, #0]
 8008388:	bf18      	it	ne
 800838a:	6059      	strne	r1, [r3, #4]
 800838c:	6863      	ldr	r3, [r4, #4]
 800838e:	bf08      	it	eq
 8008390:	f8c8 1000 	streq.w	r1, [r8]
 8008394:	5162      	str	r2, [r4, r5]
 8008396:	604b      	str	r3, [r1, #4]
 8008398:	4630      	mov	r0, r6
 800839a:	f000 f82f 	bl	80083fc <__malloc_unlock>
 800839e:	f104 000b 	add.w	r0, r4, #11
 80083a2:	1d23      	adds	r3, r4, #4
 80083a4:	f020 0007 	bic.w	r0, r0, #7
 80083a8:	1ac2      	subs	r2, r0, r3
 80083aa:	bf1c      	itt	ne
 80083ac:	1a1b      	subne	r3, r3, r0
 80083ae:	50a3      	strne	r3, [r4, r2]
 80083b0:	e7af      	b.n	8008312 <_malloc_r+0x22>
 80083b2:	6862      	ldr	r2, [r4, #4]
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	bf0c      	ite	eq
 80083b8:	f8c8 2000 	streq.w	r2, [r8]
 80083bc:	605a      	strne	r2, [r3, #4]
 80083be:	e7eb      	b.n	8008398 <_malloc_r+0xa8>
 80083c0:	4623      	mov	r3, r4
 80083c2:	6864      	ldr	r4, [r4, #4]
 80083c4:	e7ae      	b.n	8008324 <_malloc_r+0x34>
 80083c6:	463c      	mov	r4, r7
 80083c8:	687f      	ldr	r7, [r7, #4]
 80083ca:	e7b6      	b.n	800833a <_malloc_r+0x4a>
 80083cc:	461a      	mov	r2, r3
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	d1fb      	bne.n	80083cc <_malloc_r+0xdc>
 80083d4:	2300      	movs	r3, #0
 80083d6:	6053      	str	r3, [r2, #4]
 80083d8:	e7de      	b.n	8008398 <_malloc_r+0xa8>
 80083da:	230c      	movs	r3, #12
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	4630      	mov	r0, r6
 80083e0:	f000 f80c 	bl	80083fc <__malloc_unlock>
 80083e4:	e794      	b.n	8008310 <_malloc_r+0x20>
 80083e6:	6005      	str	r5, [r0, #0]
 80083e8:	e7d6      	b.n	8008398 <_malloc_r+0xa8>
 80083ea:	bf00      	nop
 80083ec:	20000658 	.word	0x20000658

080083f0 <__malloc_lock>:
 80083f0:	4801      	ldr	r0, [pc, #4]	@ (80083f8 <__malloc_lock+0x8>)
 80083f2:	f7ff b8ae 	b.w	8007552 <__retarget_lock_acquire_recursive>
 80083f6:	bf00      	nop
 80083f8:	20000650 	.word	0x20000650

080083fc <__malloc_unlock>:
 80083fc:	4801      	ldr	r0, [pc, #4]	@ (8008404 <__malloc_unlock+0x8>)
 80083fe:	f7ff b8a9 	b.w	8007554 <__retarget_lock_release_recursive>
 8008402:	bf00      	nop
 8008404:	20000650 	.word	0x20000650

08008408 <_Balloc>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	69c6      	ldr	r6, [r0, #28]
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	b976      	cbnz	r6, 8008430 <_Balloc+0x28>
 8008412:	2010      	movs	r0, #16
 8008414:	f7ff ff42 	bl	800829c <malloc>
 8008418:	4602      	mov	r2, r0
 800841a:	61e0      	str	r0, [r4, #28]
 800841c:	b920      	cbnz	r0, 8008428 <_Balloc+0x20>
 800841e:	4b18      	ldr	r3, [pc, #96]	@ (8008480 <_Balloc+0x78>)
 8008420:	4818      	ldr	r0, [pc, #96]	@ (8008484 <_Balloc+0x7c>)
 8008422:	216b      	movs	r1, #107	@ 0x6b
 8008424:	f000 fc34 	bl	8008c90 <__assert_func>
 8008428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800842c:	6006      	str	r6, [r0, #0]
 800842e:	60c6      	str	r6, [r0, #12]
 8008430:	69e6      	ldr	r6, [r4, #28]
 8008432:	68f3      	ldr	r3, [r6, #12]
 8008434:	b183      	cbz	r3, 8008458 <_Balloc+0x50>
 8008436:	69e3      	ldr	r3, [r4, #28]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800843e:	b9b8      	cbnz	r0, 8008470 <_Balloc+0x68>
 8008440:	2101      	movs	r1, #1
 8008442:	fa01 f605 	lsl.w	r6, r1, r5
 8008446:	1d72      	adds	r2, r6, #5
 8008448:	0092      	lsls	r2, r2, #2
 800844a:	4620      	mov	r0, r4
 800844c:	f000 fc3e 	bl	8008ccc <_calloc_r>
 8008450:	b160      	cbz	r0, 800846c <_Balloc+0x64>
 8008452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008456:	e00e      	b.n	8008476 <_Balloc+0x6e>
 8008458:	2221      	movs	r2, #33	@ 0x21
 800845a:	2104      	movs	r1, #4
 800845c:	4620      	mov	r0, r4
 800845e:	f000 fc35 	bl	8008ccc <_calloc_r>
 8008462:	69e3      	ldr	r3, [r4, #28]
 8008464:	60f0      	str	r0, [r6, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e4      	bne.n	8008436 <_Balloc+0x2e>
 800846c:	2000      	movs	r0, #0
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	6802      	ldr	r2, [r0, #0]
 8008472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008476:	2300      	movs	r3, #0
 8008478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800847c:	e7f7      	b.n	800846e <_Balloc+0x66>
 800847e:	bf00      	nop
 8008480:	08009341 	.word	0x08009341
 8008484:	080093c1 	.word	0x080093c1

08008488 <_Bfree>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	69c6      	ldr	r6, [r0, #28]
 800848c:	4605      	mov	r5, r0
 800848e:	460c      	mov	r4, r1
 8008490:	b976      	cbnz	r6, 80084b0 <_Bfree+0x28>
 8008492:	2010      	movs	r0, #16
 8008494:	f7ff ff02 	bl	800829c <malloc>
 8008498:	4602      	mov	r2, r0
 800849a:	61e8      	str	r0, [r5, #28]
 800849c:	b920      	cbnz	r0, 80084a8 <_Bfree+0x20>
 800849e:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <_Bfree+0x3c>)
 80084a0:	4809      	ldr	r0, [pc, #36]	@ (80084c8 <_Bfree+0x40>)
 80084a2:	218f      	movs	r1, #143	@ 0x8f
 80084a4:	f000 fbf4 	bl	8008c90 <__assert_func>
 80084a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084ac:	6006      	str	r6, [r0, #0]
 80084ae:	60c6      	str	r6, [r0, #12]
 80084b0:	b13c      	cbz	r4, 80084c2 <_Bfree+0x3a>
 80084b2:	69eb      	ldr	r3, [r5, #28]
 80084b4:	6862      	ldr	r2, [r4, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084bc:	6021      	str	r1, [r4, #0]
 80084be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	08009341 	.word	0x08009341
 80084c8:	080093c1 	.word	0x080093c1

080084cc <__multadd>:
 80084cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d0:	690d      	ldr	r5, [r1, #16]
 80084d2:	4607      	mov	r7, r0
 80084d4:	460c      	mov	r4, r1
 80084d6:	461e      	mov	r6, r3
 80084d8:	f101 0c14 	add.w	ip, r1, #20
 80084dc:	2000      	movs	r0, #0
 80084de:	f8dc 3000 	ldr.w	r3, [ip]
 80084e2:	b299      	uxth	r1, r3
 80084e4:	fb02 6101 	mla	r1, r2, r1, r6
 80084e8:	0c1e      	lsrs	r6, r3, #16
 80084ea:	0c0b      	lsrs	r3, r1, #16
 80084ec:	fb02 3306 	mla	r3, r2, r6, r3
 80084f0:	b289      	uxth	r1, r1
 80084f2:	3001      	adds	r0, #1
 80084f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084f8:	4285      	cmp	r5, r0
 80084fa:	f84c 1b04 	str.w	r1, [ip], #4
 80084fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008502:	dcec      	bgt.n	80084de <__multadd+0x12>
 8008504:	b30e      	cbz	r6, 800854a <__multadd+0x7e>
 8008506:	68a3      	ldr	r3, [r4, #8]
 8008508:	42ab      	cmp	r3, r5
 800850a:	dc19      	bgt.n	8008540 <__multadd+0x74>
 800850c:	6861      	ldr	r1, [r4, #4]
 800850e:	4638      	mov	r0, r7
 8008510:	3101      	adds	r1, #1
 8008512:	f7ff ff79 	bl	8008408 <_Balloc>
 8008516:	4680      	mov	r8, r0
 8008518:	b928      	cbnz	r0, 8008526 <__multadd+0x5a>
 800851a:	4602      	mov	r2, r0
 800851c:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <__multadd+0x84>)
 800851e:	480d      	ldr	r0, [pc, #52]	@ (8008554 <__multadd+0x88>)
 8008520:	21ba      	movs	r1, #186	@ 0xba
 8008522:	f000 fbb5 	bl	8008c90 <__assert_func>
 8008526:	6922      	ldr	r2, [r4, #16]
 8008528:	3202      	adds	r2, #2
 800852a:	f104 010c 	add.w	r1, r4, #12
 800852e:	0092      	lsls	r2, r2, #2
 8008530:	300c      	adds	r0, #12
 8008532:	f000 fb9f 	bl	8008c74 <memcpy>
 8008536:	4621      	mov	r1, r4
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ffa5 	bl	8008488 <_Bfree>
 800853e:	4644      	mov	r4, r8
 8008540:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008544:	3501      	adds	r5, #1
 8008546:	615e      	str	r6, [r3, #20]
 8008548:	6125      	str	r5, [r4, #16]
 800854a:	4620      	mov	r0, r4
 800854c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008550:	080093b0 	.word	0x080093b0
 8008554:	080093c1 	.word	0x080093c1

08008558 <__hi0bits>:
 8008558:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800855c:	4603      	mov	r3, r0
 800855e:	bf36      	itet	cc
 8008560:	0403      	lslcc	r3, r0, #16
 8008562:	2000      	movcs	r0, #0
 8008564:	2010      	movcc	r0, #16
 8008566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800856a:	bf3c      	itt	cc
 800856c:	021b      	lslcc	r3, r3, #8
 800856e:	3008      	addcc	r0, #8
 8008570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008574:	bf3c      	itt	cc
 8008576:	011b      	lslcc	r3, r3, #4
 8008578:	3004      	addcc	r0, #4
 800857a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857e:	bf3c      	itt	cc
 8008580:	009b      	lslcc	r3, r3, #2
 8008582:	3002      	addcc	r0, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	db05      	blt.n	8008594 <__hi0bits+0x3c>
 8008588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800858c:	f100 0001 	add.w	r0, r0, #1
 8008590:	bf08      	it	eq
 8008592:	2020      	moveq	r0, #32
 8008594:	4770      	bx	lr

08008596 <__lo0bits>:
 8008596:	6803      	ldr	r3, [r0, #0]
 8008598:	4602      	mov	r2, r0
 800859a:	f013 0007 	ands.w	r0, r3, #7
 800859e:	d00b      	beq.n	80085b8 <__lo0bits+0x22>
 80085a0:	07d9      	lsls	r1, r3, #31
 80085a2:	d421      	bmi.n	80085e8 <__lo0bits+0x52>
 80085a4:	0798      	lsls	r0, r3, #30
 80085a6:	bf49      	itett	mi
 80085a8:	085b      	lsrmi	r3, r3, #1
 80085aa:	089b      	lsrpl	r3, r3, #2
 80085ac:	2001      	movmi	r0, #1
 80085ae:	6013      	strmi	r3, [r2, #0]
 80085b0:	bf5c      	itt	pl
 80085b2:	6013      	strpl	r3, [r2, #0]
 80085b4:	2002      	movpl	r0, #2
 80085b6:	4770      	bx	lr
 80085b8:	b299      	uxth	r1, r3
 80085ba:	b909      	cbnz	r1, 80085c0 <__lo0bits+0x2a>
 80085bc:	0c1b      	lsrs	r3, r3, #16
 80085be:	2010      	movs	r0, #16
 80085c0:	b2d9      	uxtb	r1, r3
 80085c2:	b909      	cbnz	r1, 80085c8 <__lo0bits+0x32>
 80085c4:	3008      	adds	r0, #8
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	0719      	lsls	r1, r3, #28
 80085ca:	bf04      	itt	eq
 80085cc:	091b      	lsreq	r3, r3, #4
 80085ce:	3004      	addeq	r0, #4
 80085d0:	0799      	lsls	r1, r3, #30
 80085d2:	bf04      	itt	eq
 80085d4:	089b      	lsreq	r3, r3, #2
 80085d6:	3002      	addeq	r0, #2
 80085d8:	07d9      	lsls	r1, r3, #31
 80085da:	d403      	bmi.n	80085e4 <__lo0bits+0x4e>
 80085dc:	085b      	lsrs	r3, r3, #1
 80085de:	f100 0001 	add.w	r0, r0, #1
 80085e2:	d003      	beq.n	80085ec <__lo0bits+0x56>
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4770      	bx	lr
 80085e8:	2000      	movs	r0, #0
 80085ea:	4770      	bx	lr
 80085ec:	2020      	movs	r0, #32
 80085ee:	4770      	bx	lr

080085f0 <__i2b>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	460c      	mov	r4, r1
 80085f4:	2101      	movs	r1, #1
 80085f6:	f7ff ff07 	bl	8008408 <_Balloc>
 80085fa:	4602      	mov	r2, r0
 80085fc:	b928      	cbnz	r0, 800860a <__i2b+0x1a>
 80085fe:	4b05      	ldr	r3, [pc, #20]	@ (8008614 <__i2b+0x24>)
 8008600:	4805      	ldr	r0, [pc, #20]	@ (8008618 <__i2b+0x28>)
 8008602:	f240 1145 	movw	r1, #325	@ 0x145
 8008606:	f000 fb43 	bl	8008c90 <__assert_func>
 800860a:	2301      	movs	r3, #1
 800860c:	6144      	str	r4, [r0, #20]
 800860e:	6103      	str	r3, [r0, #16]
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	080093b0 	.word	0x080093b0
 8008618:	080093c1 	.word	0x080093c1

0800861c <__multiply>:
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	4617      	mov	r7, r2
 8008622:	690a      	ldr	r2, [r1, #16]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	bfa8      	it	ge
 800862a:	463b      	movge	r3, r7
 800862c:	4689      	mov	r9, r1
 800862e:	bfa4      	itt	ge
 8008630:	460f      	movge	r7, r1
 8008632:	4699      	movge	r9, r3
 8008634:	693d      	ldr	r5, [r7, #16]
 8008636:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	eb05 060a 	add.w	r6, r5, sl
 8008642:	42b3      	cmp	r3, r6
 8008644:	b085      	sub	sp, #20
 8008646:	bfb8      	it	lt
 8008648:	3101      	addlt	r1, #1
 800864a:	f7ff fedd 	bl	8008408 <_Balloc>
 800864e:	b930      	cbnz	r0, 800865e <__multiply+0x42>
 8008650:	4602      	mov	r2, r0
 8008652:	4b41      	ldr	r3, [pc, #260]	@ (8008758 <__multiply+0x13c>)
 8008654:	4841      	ldr	r0, [pc, #260]	@ (800875c <__multiply+0x140>)
 8008656:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800865a:	f000 fb19 	bl	8008c90 <__assert_func>
 800865e:	f100 0414 	add.w	r4, r0, #20
 8008662:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008666:	4623      	mov	r3, r4
 8008668:	2200      	movs	r2, #0
 800866a:	4573      	cmp	r3, lr
 800866c:	d320      	bcc.n	80086b0 <__multiply+0x94>
 800866e:	f107 0814 	add.w	r8, r7, #20
 8008672:	f109 0114 	add.w	r1, r9, #20
 8008676:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800867a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800867e:	9302      	str	r3, [sp, #8]
 8008680:	1beb      	subs	r3, r5, r7
 8008682:	3b15      	subs	r3, #21
 8008684:	f023 0303 	bic.w	r3, r3, #3
 8008688:	3304      	adds	r3, #4
 800868a:	3715      	adds	r7, #21
 800868c:	42bd      	cmp	r5, r7
 800868e:	bf38      	it	cc
 8008690:	2304      	movcc	r3, #4
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	9b02      	ldr	r3, [sp, #8]
 8008696:	9103      	str	r1, [sp, #12]
 8008698:	428b      	cmp	r3, r1
 800869a:	d80c      	bhi.n	80086b6 <__multiply+0x9a>
 800869c:	2e00      	cmp	r6, #0
 800869e:	dd03      	ble.n	80086a8 <__multiply+0x8c>
 80086a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d055      	beq.n	8008754 <__multiply+0x138>
 80086a8:	6106      	str	r6, [r0, #16]
 80086aa:	b005      	add	sp, #20
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	f843 2b04 	str.w	r2, [r3], #4
 80086b4:	e7d9      	b.n	800866a <__multiply+0x4e>
 80086b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80086ba:	f1ba 0f00 	cmp.w	sl, #0
 80086be:	d01f      	beq.n	8008700 <__multiply+0xe4>
 80086c0:	46c4      	mov	ip, r8
 80086c2:	46a1      	mov	r9, r4
 80086c4:	2700      	movs	r7, #0
 80086c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086ca:	f8d9 3000 	ldr.w	r3, [r9]
 80086ce:	fa1f fb82 	uxth.w	fp, r2
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80086d8:	443b      	add	r3, r7
 80086da:	f8d9 7000 	ldr.w	r7, [r9]
 80086de:	0c12      	lsrs	r2, r2, #16
 80086e0:	0c3f      	lsrs	r7, r7, #16
 80086e2:	fb0a 7202 	mla	r2, sl, r2, r7
 80086e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086f0:	4565      	cmp	r5, ip
 80086f2:	f849 3b04 	str.w	r3, [r9], #4
 80086f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80086fa:	d8e4      	bhi.n	80086c6 <__multiply+0xaa>
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	50e7      	str	r7, [r4, r3]
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008706:	3104      	adds	r1, #4
 8008708:	f1b9 0f00 	cmp.w	r9, #0
 800870c:	d020      	beq.n	8008750 <__multiply+0x134>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	4647      	mov	r7, r8
 8008712:	46a4      	mov	ip, r4
 8008714:	f04f 0a00 	mov.w	sl, #0
 8008718:	f8b7 b000 	ldrh.w	fp, [r7]
 800871c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008720:	fb09 220b 	mla	r2, r9, fp, r2
 8008724:	4452      	add	r2, sl
 8008726:	b29b      	uxth	r3, r3
 8008728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800872c:	f84c 3b04 	str.w	r3, [ip], #4
 8008730:	f857 3b04 	ldr.w	r3, [r7], #4
 8008734:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008738:	f8bc 3000 	ldrh.w	r3, [ip]
 800873c:	fb09 330a 	mla	r3, r9, sl, r3
 8008740:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008744:	42bd      	cmp	r5, r7
 8008746:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800874a:	d8e5      	bhi.n	8008718 <__multiply+0xfc>
 800874c:	9a01      	ldr	r2, [sp, #4]
 800874e:	50a3      	str	r3, [r4, r2]
 8008750:	3404      	adds	r4, #4
 8008752:	e79f      	b.n	8008694 <__multiply+0x78>
 8008754:	3e01      	subs	r6, #1
 8008756:	e7a1      	b.n	800869c <__multiply+0x80>
 8008758:	080093b0 	.word	0x080093b0
 800875c:	080093c1 	.word	0x080093c1

08008760 <__pow5mult>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	4615      	mov	r5, r2
 8008766:	f012 0203 	ands.w	r2, r2, #3
 800876a:	4607      	mov	r7, r0
 800876c:	460e      	mov	r6, r1
 800876e:	d007      	beq.n	8008780 <__pow5mult+0x20>
 8008770:	4c25      	ldr	r4, [pc, #148]	@ (8008808 <__pow5mult+0xa8>)
 8008772:	3a01      	subs	r2, #1
 8008774:	2300      	movs	r3, #0
 8008776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800877a:	f7ff fea7 	bl	80084cc <__multadd>
 800877e:	4606      	mov	r6, r0
 8008780:	10ad      	asrs	r5, r5, #2
 8008782:	d03d      	beq.n	8008800 <__pow5mult+0xa0>
 8008784:	69fc      	ldr	r4, [r7, #28]
 8008786:	b97c      	cbnz	r4, 80087a8 <__pow5mult+0x48>
 8008788:	2010      	movs	r0, #16
 800878a:	f7ff fd87 	bl	800829c <malloc>
 800878e:	4602      	mov	r2, r0
 8008790:	61f8      	str	r0, [r7, #28]
 8008792:	b928      	cbnz	r0, 80087a0 <__pow5mult+0x40>
 8008794:	4b1d      	ldr	r3, [pc, #116]	@ (800880c <__pow5mult+0xac>)
 8008796:	481e      	ldr	r0, [pc, #120]	@ (8008810 <__pow5mult+0xb0>)
 8008798:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800879c:	f000 fa78 	bl	8008c90 <__assert_func>
 80087a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087a4:	6004      	str	r4, [r0, #0]
 80087a6:	60c4      	str	r4, [r0, #12]
 80087a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087b0:	b94c      	cbnz	r4, 80087c6 <__pow5mult+0x66>
 80087b2:	f240 2171 	movw	r1, #625	@ 0x271
 80087b6:	4638      	mov	r0, r7
 80087b8:	f7ff ff1a 	bl	80085f0 <__i2b>
 80087bc:	2300      	movs	r3, #0
 80087be:	f8c8 0008 	str.w	r0, [r8, #8]
 80087c2:	4604      	mov	r4, r0
 80087c4:	6003      	str	r3, [r0, #0]
 80087c6:	f04f 0900 	mov.w	r9, #0
 80087ca:	07eb      	lsls	r3, r5, #31
 80087cc:	d50a      	bpl.n	80087e4 <__pow5mult+0x84>
 80087ce:	4631      	mov	r1, r6
 80087d0:	4622      	mov	r2, r4
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7ff ff22 	bl	800861c <__multiply>
 80087d8:	4631      	mov	r1, r6
 80087da:	4680      	mov	r8, r0
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff fe53 	bl	8008488 <_Bfree>
 80087e2:	4646      	mov	r6, r8
 80087e4:	106d      	asrs	r5, r5, #1
 80087e6:	d00b      	beq.n	8008800 <__pow5mult+0xa0>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	b938      	cbnz	r0, 80087fc <__pow5mult+0x9c>
 80087ec:	4622      	mov	r2, r4
 80087ee:	4621      	mov	r1, r4
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff ff13 	bl	800861c <__multiply>
 80087f6:	6020      	str	r0, [r4, #0]
 80087f8:	f8c0 9000 	str.w	r9, [r0]
 80087fc:	4604      	mov	r4, r0
 80087fe:	e7e4      	b.n	80087ca <__pow5mult+0x6a>
 8008800:	4630      	mov	r0, r6
 8008802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008806:	bf00      	nop
 8008808:	08009474 	.word	0x08009474
 800880c:	08009341 	.word	0x08009341
 8008810:	080093c1 	.word	0x080093c1

08008814 <__lshift>:
 8008814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	460c      	mov	r4, r1
 800881a:	6849      	ldr	r1, [r1, #4]
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008822:	68a3      	ldr	r3, [r4, #8]
 8008824:	4607      	mov	r7, r0
 8008826:	4691      	mov	r9, r2
 8008828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800882c:	f108 0601 	add.w	r6, r8, #1
 8008830:	42b3      	cmp	r3, r6
 8008832:	db0b      	blt.n	800884c <__lshift+0x38>
 8008834:	4638      	mov	r0, r7
 8008836:	f7ff fde7 	bl	8008408 <_Balloc>
 800883a:	4605      	mov	r5, r0
 800883c:	b948      	cbnz	r0, 8008852 <__lshift+0x3e>
 800883e:	4602      	mov	r2, r0
 8008840:	4b28      	ldr	r3, [pc, #160]	@ (80088e4 <__lshift+0xd0>)
 8008842:	4829      	ldr	r0, [pc, #164]	@ (80088e8 <__lshift+0xd4>)
 8008844:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008848:	f000 fa22 	bl	8008c90 <__assert_func>
 800884c:	3101      	adds	r1, #1
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	e7ee      	b.n	8008830 <__lshift+0x1c>
 8008852:	2300      	movs	r3, #0
 8008854:	f100 0114 	add.w	r1, r0, #20
 8008858:	f100 0210 	add.w	r2, r0, #16
 800885c:	4618      	mov	r0, r3
 800885e:	4553      	cmp	r3, sl
 8008860:	db33      	blt.n	80088ca <__lshift+0xb6>
 8008862:	6920      	ldr	r0, [r4, #16]
 8008864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008868:	f104 0314 	add.w	r3, r4, #20
 800886c:	f019 091f 	ands.w	r9, r9, #31
 8008870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008878:	d02b      	beq.n	80088d2 <__lshift+0xbe>
 800887a:	f1c9 0e20 	rsb	lr, r9, #32
 800887e:	468a      	mov	sl, r1
 8008880:	2200      	movs	r2, #0
 8008882:	6818      	ldr	r0, [r3, #0]
 8008884:	fa00 f009 	lsl.w	r0, r0, r9
 8008888:	4310      	orrs	r0, r2
 800888a:	f84a 0b04 	str.w	r0, [sl], #4
 800888e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008892:	459c      	cmp	ip, r3
 8008894:	fa22 f20e 	lsr.w	r2, r2, lr
 8008898:	d8f3      	bhi.n	8008882 <__lshift+0x6e>
 800889a:	ebac 0304 	sub.w	r3, ip, r4
 800889e:	3b15      	subs	r3, #21
 80088a0:	f023 0303 	bic.w	r3, r3, #3
 80088a4:	3304      	adds	r3, #4
 80088a6:	f104 0015 	add.w	r0, r4, #21
 80088aa:	4560      	cmp	r0, ip
 80088ac:	bf88      	it	hi
 80088ae:	2304      	movhi	r3, #4
 80088b0:	50ca      	str	r2, [r1, r3]
 80088b2:	b10a      	cbz	r2, 80088b8 <__lshift+0xa4>
 80088b4:	f108 0602 	add.w	r6, r8, #2
 80088b8:	3e01      	subs	r6, #1
 80088ba:	4638      	mov	r0, r7
 80088bc:	612e      	str	r6, [r5, #16]
 80088be:	4621      	mov	r1, r4
 80088c0:	f7ff fde2 	bl	8008488 <_Bfree>
 80088c4:	4628      	mov	r0, r5
 80088c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80088ce:	3301      	adds	r3, #1
 80088d0:	e7c5      	b.n	800885e <__lshift+0x4a>
 80088d2:	3904      	subs	r1, #4
 80088d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80088dc:	459c      	cmp	ip, r3
 80088de:	d8f9      	bhi.n	80088d4 <__lshift+0xc0>
 80088e0:	e7ea      	b.n	80088b8 <__lshift+0xa4>
 80088e2:	bf00      	nop
 80088e4:	080093b0 	.word	0x080093b0
 80088e8:	080093c1 	.word	0x080093c1

080088ec <__mcmp>:
 80088ec:	690a      	ldr	r2, [r1, #16]
 80088ee:	4603      	mov	r3, r0
 80088f0:	6900      	ldr	r0, [r0, #16]
 80088f2:	1a80      	subs	r0, r0, r2
 80088f4:	b530      	push	{r4, r5, lr}
 80088f6:	d10e      	bne.n	8008916 <__mcmp+0x2a>
 80088f8:	3314      	adds	r3, #20
 80088fa:	3114      	adds	r1, #20
 80088fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008900:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008904:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008908:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800890c:	4295      	cmp	r5, r2
 800890e:	d003      	beq.n	8008918 <__mcmp+0x2c>
 8008910:	d205      	bcs.n	800891e <__mcmp+0x32>
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	bd30      	pop	{r4, r5, pc}
 8008918:	42a3      	cmp	r3, r4
 800891a:	d3f3      	bcc.n	8008904 <__mcmp+0x18>
 800891c:	e7fb      	b.n	8008916 <__mcmp+0x2a>
 800891e:	2001      	movs	r0, #1
 8008920:	e7f9      	b.n	8008916 <__mcmp+0x2a>
	...

08008924 <__mdiff>:
 8008924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	4689      	mov	r9, r1
 800892a:	4606      	mov	r6, r0
 800892c:	4611      	mov	r1, r2
 800892e:	4648      	mov	r0, r9
 8008930:	4614      	mov	r4, r2
 8008932:	f7ff ffdb 	bl	80088ec <__mcmp>
 8008936:	1e05      	subs	r5, r0, #0
 8008938:	d112      	bne.n	8008960 <__mdiff+0x3c>
 800893a:	4629      	mov	r1, r5
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff fd63 	bl	8008408 <_Balloc>
 8008942:	4602      	mov	r2, r0
 8008944:	b928      	cbnz	r0, 8008952 <__mdiff+0x2e>
 8008946:	4b3f      	ldr	r3, [pc, #252]	@ (8008a44 <__mdiff+0x120>)
 8008948:	f240 2137 	movw	r1, #567	@ 0x237
 800894c:	483e      	ldr	r0, [pc, #248]	@ (8008a48 <__mdiff+0x124>)
 800894e:	f000 f99f 	bl	8008c90 <__assert_func>
 8008952:	2301      	movs	r3, #1
 8008954:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008958:	4610      	mov	r0, r2
 800895a:	b003      	add	sp, #12
 800895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008960:	bfbc      	itt	lt
 8008962:	464b      	movlt	r3, r9
 8008964:	46a1      	movlt	r9, r4
 8008966:	4630      	mov	r0, r6
 8008968:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800896c:	bfba      	itte	lt
 800896e:	461c      	movlt	r4, r3
 8008970:	2501      	movlt	r5, #1
 8008972:	2500      	movge	r5, #0
 8008974:	f7ff fd48 	bl	8008408 <_Balloc>
 8008978:	4602      	mov	r2, r0
 800897a:	b918      	cbnz	r0, 8008984 <__mdiff+0x60>
 800897c:	4b31      	ldr	r3, [pc, #196]	@ (8008a44 <__mdiff+0x120>)
 800897e:	f240 2145 	movw	r1, #581	@ 0x245
 8008982:	e7e3      	b.n	800894c <__mdiff+0x28>
 8008984:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008988:	6926      	ldr	r6, [r4, #16]
 800898a:	60c5      	str	r5, [r0, #12]
 800898c:	f109 0310 	add.w	r3, r9, #16
 8008990:	f109 0514 	add.w	r5, r9, #20
 8008994:	f104 0e14 	add.w	lr, r4, #20
 8008998:	f100 0b14 	add.w	fp, r0, #20
 800899c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	46d9      	mov	r9, fp
 80089a8:	f04f 0c00 	mov.w	ip, #0
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	fa1f f38a 	uxth.w	r3, sl
 80089bc:	4619      	mov	r1, r3
 80089be:	b283      	uxth	r3, r0
 80089c0:	1acb      	subs	r3, r1, r3
 80089c2:	0c00      	lsrs	r0, r0, #16
 80089c4:	4463      	add	r3, ip
 80089c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089d4:	4576      	cmp	r6, lr
 80089d6:	f849 3b04 	str.w	r3, [r9], #4
 80089da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089de:	d8e5      	bhi.n	80089ac <__mdiff+0x88>
 80089e0:	1b33      	subs	r3, r6, r4
 80089e2:	3b15      	subs	r3, #21
 80089e4:	f023 0303 	bic.w	r3, r3, #3
 80089e8:	3415      	adds	r4, #21
 80089ea:	3304      	adds	r3, #4
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	bf38      	it	cc
 80089f0:	2304      	movcc	r3, #4
 80089f2:	441d      	add	r5, r3
 80089f4:	445b      	add	r3, fp
 80089f6:	461e      	mov	r6, r3
 80089f8:	462c      	mov	r4, r5
 80089fa:	4544      	cmp	r4, r8
 80089fc:	d30e      	bcc.n	8008a1c <__mdiff+0xf8>
 80089fe:	f108 0103 	add.w	r1, r8, #3
 8008a02:	1b49      	subs	r1, r1, r5
 8008a04:	f021 0103 	bic.w	r1, r1, #3
 8008a08:	3d03      	subs	r5, #3
 8008a0a:	45a8      	cmp	r8, r5
 8008a0c:	bf38      	it	cc
 8008a0e:	2100      	movcc	r1, #0
 8008a10:	440b      	add	r3, r1
 8008a12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a16:	b191      	cbz	r1, 8008a3e <__mdiff+0x11a>
 8008a18:	6117      	str	r7, [r2, #16]
 8008a1a:	e79d      	b.n	8008958 <__mdiff+0x34>
 8008a1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a20:	46e6      	mov	lr, ip
 8008a22:	0c08      	lsrs	r0, r1, #16
 8008a24:	fa1c fc81 	uxtah	ip, ip, r1
 8008a28:	4471      	add	r1, lr
 8008a2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a2e:	b289      	uxth	r1, r1
 8008a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a34:	f846 1b04 	str.w	r1, [r6], #4
 8008a38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a3c:	e7dd      	b.n	80089fa <__mdiff+0xd6>
 8008a3e:	3f01      	subs	r7, #1
 8008a40:	e7e7      	b.n	8008a12 <__mdiff+0xee>
 8008a42:	bf00      	nop
 8008a44:	080093b0 	.word	0x080093b0
 8008a48:	080093c1 	.word	0x080093c1

08008a4c <__d2b>:
 8008a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a50:	460f      	mov	r7, r1
 8008a52:	2101      	movs	r1, #1
 8008a54:	ec59 8b10 	vmov	r8, r9, d0
 8008a58:	4616      	mov	r6, r2
 8008a5a:	f7ff fcd5 	bl	8008408 <_Balloc>
 8008a5e:	4604      	mov	r4, r0
 8008a60:	b930      	cbnz	r0, 8008a70 <__d2b+0x24>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b23      	ldr	r3, [pc, #140]	@ (8008af4 <__d2b+0xa8>)
 8008a66:	4824      	ldr	r0, [pc, #144]	@ (8008af8 <__d2b+0xac>)
 8008a68:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a6c:	f000 f910 	bl	8008c90 <__assert_func>
 8008a70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a78:	b10d      	cbz	r5, 8008a7e <__d2b+0x32>
 8008a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	f1b8 0300 	subs.w	r3, r8, #0
 8008a84:	d023      	beq.n	8008ace <__d2b+0x82>
 8008a86:	4668      	mov	r0, sp
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	f7ff fd84 	bl	8008596 <__lo0bits>
 8008a8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a92:	b1d0      	cbz	r0, 8008aca <__d2b+0x7e>
 8008a94:	f1c0 0320 	rsb	r3, r0, #32
 8008a98:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	40c2      	lsrs	r2, r0
 8008aa0:	6163      	str	r3, [r4, #20]
 8008aa2:	9201      	str	r2, [sp, #4]
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	61a3      	str	r3, [r4, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bf0c      	ite	eq
 8008aac:	2201      	moveq	r2, #1
 8008aae:	2202      	movne	r2, #2
 8008ab0:	6122      	str	r2, [r4, #16]
 8008ab2:	b1a5      	cbz	r5, 8008ade <__d2b+0x92>
 8008ab4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ab8:	4405      	add	r5, r0
 8008aba:	603d      	str	r5, [r7, #0]
 8008abc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ac0:	6030      	str	r0, [r6, #0]
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	b003      	add	sp, #12
 8008ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aca:	6161      	str	r1, [r4, #20]
 8008acc:	e7ea      	b.n	8008aa4 <__d2b+0x58>
 8008ace:	a801      	add	r0, sp, #4
 8008ad0:	f7ff fd61 	bl	8008596 <__lo0bits>
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	6163      	str	r3, [r4, #20]
 8008ad8:	3020      	adds	r0, #32
 8008ada:	2201      	movs	r2, #1
 8008adc:	e7e8      	b.n	8008ab0 <__d2b+0x64>
 8008ade:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ae2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ae6:	6038      	str	r0, [r7, #0]
 8008ae8:	6918      	ldr	r0, [r3, #16]
 8008aea:	f7ff fd35 	bl	8008558 <__hi0bits>
 8008aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008af2:	e7e5      	b.n	8008ac0 <__d2b+0x74>
 8008af4:	080093b0 	.word	0x080093b0
 8008af8:	080093c1 	.word	0x080093c1

08008afc <__sflush_r>:
 8008afc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	0716      	lsls	r6, r2, #28
 8008b06:	4605      	mov	r5, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	d454      	bmi.n	8008bb6 <__sflush_r+0xba>
 8008b0c:	684b      	ldr	r3, [r1, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dc02      	bgt.n	8008b18 <__sflush_r+0x1c>
 8008b12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	dd48      	ble.n	8008baa <__sflush_r+0xae>
 8008b18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d045      	beq.n	8008baa <__sflush_r+0xae>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b24:	682f      	ldr	r7, [r5, #0]
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	d030      	beq.n	8008b8e <__sflush_r+0x92>
 8008b2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	0759      	lsls	r1, r3, #29
 8008b32:	d505      	bpl.n	8008b40 <__sflush_r+0x44>
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b3a:	b10b      	cbz	r3, 8008b40 <__sflush_r+0x44>
 8008b3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b44:	6a21      	ldr	r1, [r4, #32]
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b0      	blx	r6
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	d106      	bne.n	8008b5e <__sflush_r+0x62>
 8008b50:	6829      	ldr	r1, [r5, #0]
 8008b52:	291d      	cmp	r1, #29
 8008b54:	d82b      	bhi.n	8008bae <__sflush_r+0xb2>
 8008b56:	4a2a      	ldr	r2, [pc, #168]	@ (8008c00 <__sflush_r+0x104>)
 8008b58:	40ca      	lsrs	r2, r1
 8008b5a:	07d6      	lsls	r6, r2, #31
 8008b5c:	d527      	bpl.n	8008bae <__sflush_r+0xb2>
 8008b5e:	2200      	movs	r2, #0
 8008b60:	6062      	str	r2, [r4, #4]
 8008b62:	04d9      	lsls	r1, r3, #19
 8008b64:	6922      	ldr	r2, [r4, #16]
 8008b66:	6022      	str	r2, [r4, #0]
 8008b68:	d504      	bpl.n	8008b74 <__sflush_r+0x78>
 8008b6a:	1c42      	adds	r2, r0, #1
 8008b6c:	d101      	bne.n	8008b72 <__sflush_r+0x76>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	b903      	cbnz	r3, 8008b74 <__sflush_r+0x78>
 8008b72:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b76:	602f      	str	r7, [r5, #0]
 8008b78:	b1b9      	cbz	r1, 8008baa <__sflush_r+0xae>
 8008b7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	d002      	beq.n	8008b88 <__sflush_r+0x8c>
 8008b82:	4628      	mov	r0, r5
 8008b84:	f7ff fb40 	bl	8008208 <_free_r>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b8c:	e00d      	b.n	8008baa <__sflush_r+0xae>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b0      	blx	r6
 8008b94:	4602      	mov	r2, r0
 8008b96:	1c50      	adds	r0, r2, #1
 8008b98:	d1c9      	bne.n	8008b2e <__sflush_r+0x32>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0c6      	beq.n	8008b2e <__sflush_r+0x32>
 8008ba0:	2b1d      	cmp	r3, #29
 8008ba2:	d001      	beq.n	8008ba8 <__sflush_r+0xac>
 8008ba4:	2b16      	cmp	r3, #22
 8008ba6:	d11e      	bne.n	8008be6 <__sflush_r+0xea>
 8008ba8:	602f      	str	r7, [r5, #0]
 8008baa:	2000      	movs	r0, #0
 8008bac:	e022      	b.n	8008bf4 <__sflush_r+0xf8>
 8008bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bb2:	b21b      	sxth	r3, r3
 8008bb4:	e01b      	b.n	8008bee <__sflush_r+0xf2>
 8008bb6:	690f      	ldr	r7, [r1, #16]
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	d0f6      	beq.n	8008baa <__sflush_r+0xae>
 8008bbc:	0793      	lsls	r3, r2, #30
 8008bbe:	680e      	ldr	r6, [r1, #0]
 8008bc0:	bf08      	it	eq
 8008bc2:	694b      	ldreq	r3, [r1, #20]
 8008bc4:	600f      	str	r7, [r1, #0]
 8008bc6:	bf18      	it	ne
 8008bc8:	2300      	movne	r3, #0
 8008bca:	eba6 0807 	sub.w	r8, r6, r7
 8008bce:	608b      	str	r3, [r1, #8]
 8008bd0:	f1b8 0f00 	cmp.w	r8, #0
 8008bd4:	dde9      	ble.n	8008baa <__sflush_r+0xae>
 8008bd6:	6a21      	ldr	r1, [r4, #32]
 8008bd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bda:	4643      	mov	r3, r8
 8008bdc:	463a      	mov	r2, r7
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b0      	blx	r6
 8008be2:	2800      	cmp	r0, #0
 8008be4:	dc08      	bgt.n	8008bf8 <__sflush_r+0xfc>
 8008be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf8:	4407      	add	r7, r0
 8008bfa:	eba8 0800 	sub.w	r8, r8, r0
 8008bfe:	e7e7      	b.n	8008bd0 <__sflush_r+0xd4>
 8008c00:	20400001 	.word	0x20400001

08008c04 <_fflush_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	690b      	ldr	r3, [r1, #16]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b913      	cbnz	r3, 8008c14 <_fflush_r+0x10>
 8008c0e:	2500      	movs	r5, #0
 8008c10:	4628      	mov	r0, r5
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	b118      	cbz	r0, 8008c1e <_fflush_r+0x1a>
 8008c16:	6a03      	ldr	r3, [r0, #32]
 8008c18:	b90b      	cbnz	r3, 8008c1e <_fflush_r+0x1a>
 8008c1a:	f7fe fba3 	bl	8007364 <__sinit>
 8008c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0f3      	beq.n	8008c0e <_fflush_r+0xa>
 8008c26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c28:	07d0      	lsls	r0, r2, #31
 8008c2a:	d404      	bmi.n	8008c36 <_fflush_r+0x32>
 8008c2c:	0599      	lsls	r1, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_fflush_r+0x32>
 8008c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c32:	f7fe fc8e 	bl	8007552 <__retarget_lock_acquire_recursive>
 8008c36:	4628      	mov	r0, r5
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f7ff ff5f 	bl	8008afc <__sflush_r>
 8008c3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c40:	07da      	lsls	r2, r3, #31
 8008c42:	4605      	mov	r5, r0
 8008c44:	d4e4      	bmi.n	8008c10 <_fflush_r+0xc>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	059b      	lsls	r3, r3, #22
 8008c4a:	d4e1      	bmi.n	8008c10 <_fflush_r+0xc>
 8008c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c4e:	f7fe fc81 	bl	8007554 <__retarget_lock_release_recursive>
 8008c52:	e7dd      	b.n	8008c10 <_fflush_r+0xc>

08008c54 <_sbrk_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d06      	ldr	r5, [pc, #24]	@ (8008c70 <_sbrk_r+0x1c>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7f9 fa88 	bl	8002174 <_sbrk>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_sbrk_r+0x1a>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_sbrk_r+0x1a>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	2000064c 	.word	0x2000064c

08008c74 <memcpy>:
 8008c74:	440a      	add	r2, r1
 8008c76:	4291      	cmp	r1, r2
 8008c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c7c:	d100      	bne.n	8008c80 <memcpy+0xc>
 8008c7e:	4770      	bx	lr
 8008c80:	b510      	push	{r4, lr}
 8008c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c8a:	4291      	cmp	r1, r2
 8008c8c:	d1f9      	bne.n	8008c82 <memcpy+0xe>
 8008c8e:	bd10      	pop	{r4, pc}

08008c90 <__assert_func>:
 8008c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c92:	4614      	mov	r4, r2
 8008c94:	461a      	mov	r2, r3
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <__assert_func+0x2c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	68d8      	ldr	r0, [r3, #12]
 8008c9e:	b14c      	cbz	r4, 8008cb4 <__assert_func+0x24>
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <__assert_func+0x30>)
 8008ca2:	9100      	str	r1, [sp, #0]
 8008ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ca8:	4906      	ldr	r1, [pc, #24]	@ (8008cc4 <__assert_func+0x34>)
 8008caa:	462b      	mov	r3, r5
 8008cac:	f000 f842 	bl	8008d34 <fiprintf>
 8008cb0:	f000 f852 	bl	8008d58 <abort>
 8008cb4:	4b04      	ldr	r3, [pc, #16]	@ (8008cc8 <__assert_func+0x38>)
 8008cb6:	461c      	mov	r4, r3
 8008cb8:	e7f3      	b.n	8008ca2 <__assert_func+0x12>
 8008cba:	bf00      	nop
 8008cbc:	20000018 	.word	0x20000018
 8008cc0:	08009424 	.word	0x08009424
 8008cc4:	08009431 	.word	0x08009431
 8008cc8:	0800945f 	.word	0x0800945f

08008ccc <_calloc_r>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	fba1 5402 	umull	r5, r4, r1, r2
 8008cd2:	b934      	cbnz	r4, 8008ce2 <_calloc_r+0x16>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7ff fb0b 	bl	80082f0 <_malloc_r>
 8008cda:	4606      	mov	r6, r0
 8008cdc:	b928      	cbnz	r0, 8008cea <_calloc_r+0x1e>
 8008cde:	4630      	mov	r0, r6
 8008ce0:	bd70      	pop	{r4, r5, r6, pc}
 8008ce2:	220c      	movs	r2, #12
 8008ce4:	6002      	str	r2, [r0, #0]
 8008ce6:	2600      	movs	r6, #0
 8008ce8:	e7f9      	b.n	8008cde <_calloc_r+0x12>
 8008cea:	462a      	mov	r2, r5
 8008cec:	4621      	mov	r1, r4
 8008cee:	f7fe fbb2 	bl	8007456 <memset>
 8008cf2:	e7f4      	b.n	8008cde <_calloc_r+0x12>

08008cf4 <__ascii_mbtowc>:
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	b901      	cbnz	r1, 8008cfa <__ascii_mbtowc+0x6>
 8008cf8:	a901      	add	r1, sp, #4
 8008cfa:	b142      	cbz	r2, 8008d0e <__ascii_mbtowc+0x1a>
 8008cfc:	b14b      	cbz	r3, 8008d12 <__ascii_mbtowc+0x1e>
 8008cfe:	7813      	ldrb	r3, [r2, #0]
 8008d00:	600b      	str	r3, [r1, #0]
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	1e10      	subs	r0, r2, #0
 8008d06:	bf18      	it	ne
 8008d08:	2001      	movne	r0, #1
 8008d0a:	b002      	add	sp, #8
 8008d0c:	4770      	bx	lr
 8008d0e:	4610      	mov	r0, r2
 8008d10:	e7fb      	b.n	8008d0a <__ascii_mbtowc+0x16>
 8008d12:	f06f 0001 	mvn.w	r0, #1
 8008d16:	e7f8      	b.n	8008d0a <__ascii_mbtowc+0x16>

08008d18 <__ascii_wctomb>:
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	b141      	cbz	r1, 8008d30 <__ascii_wctomb+0x18>
 8008d1e:	2aff      	cmp	r2, #255	@ 0xff
 8008d20:	d904      	bls.n	8008d2c <__ascii_wctomb+0x14>
 8008d22:	228a      	movs	r2, #138	@ 0x8a
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2a:	4770      	bx	lr
 8008d2c:	700a      	strb	r2, [r1, #0]
 8008d2e:	2001      	movs	r0, #1
 8008d30:	4770      	bx	lr
	...

08008d34 <fiprintf>:
 8008d34:	b40e      	push	{r1, r2, r3}
 8008d36:	b503      	push	{r0, r1, lr}
 8008d38:	4601      	mov	r1, r0
 8008d3a:	ab03      	add	r3, sp, #12
 8008d3c:	4805      	ldr	r0, [pc, #20]	@ (8008d54 <fiprintf+0x20>)
 8008d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d42:	6800      	ldr	r0, [r0, #0]
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	f000 f837 	bl	8008db8 <_vfiprintf_r>
 8008d4a:	b002      	add	sp, #8
 8008d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d50:	b003      	add	sp, #12
 8008d52:	4770      	bx	lr
 8008d54:	20000018 	.word	0x20000018

08008d58 <abort>:
 8008d58:	b508      	push	{r3, lr}
 8008d5a:	2006      	movs	r0, #6
 8008d5c:	f000 fa00 	bl	8009160 <raise>
 8008d60:	2001      	movs	r0, #1
 8008d62:	f7f9 f98e 	bl	8002082 <_exit>

08008d66 <__sfputc_r>:
 8008d66:	6893      	ldr	r3, [r2, #8]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	b410      	push	{r4}
 8008d6e:	6093      	str	r3, [r2, #8]
 8008d70:	da08      	bge.n	8008d84 <__sfputc_r+0x1e>
 8008d72:	6994      	ldr	r4, [r2, #24]
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	db01      	blt.n	8008d7c <__sfputc_r+0x16>
 8008d78:	290a      	cmp	r1, #10
 8008d7a:	d103      	bne.n	8008d84 <__sfputc_r+0x1e>
 8008d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d80:	f000 b932 	b.w	8008fe8 <__swbuf_r>
 8008d84:	6813      	ldr	r3, [r2, #0]
 8008d86:	1c58      	adds	r0, r3, #1
 8008d88:	6010      	str	r0, [r2, #0]
 8008d8a:	7019      	strb	r1, [r3, #0]
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <__sfputs_r>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	4606      	mov	r6, r0
 8008d98:	460f      	mov	r7, r1
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	18d5      	adds	r5, r2, r3
 8008d9e:	42ac      	cmp	r4, r5
 8008da0:	d101      	bne.n	8008da6 <__sfputs_r+0x12>
 8008da2:	2000      	movs	r0, #0
 8008da4:	e007      	b.n	8008db6 <__sfputs_r+0x22>
 8008da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008daa:	463a      	mov	r2, r7
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff ffda 	bl	8008d66 <__sfputc_r>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	d1f3      	bne.n	8008d9e <__sfputs_r+0xa>
 8008db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008db8 <_vfiprintf_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	b09d      	sub	sp, #116	@ 0x74
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	4698      	mov	r8, r3
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	b118      	cbz	r0, 8008dd0 <_vfiprintf_r+0x18>
 8008dc8:	6a03      	ldr	r3, [r0, #32]
 8008dca:	b90b      	cbnz	r3, 8008dd0 <_vfiprintf_r+0x18>
 8008dcc:	f7fe faca 	bl	8007364 <__sinit>
 8008dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dd2:	07d9      	lsls	r1, r3, #31
 8008dd4:	d405      	bmi.n	8008de2 <_vfiprintf_r+0x2a>
 8008dd6:	89ab      	ldrh	r3, [r5, #12]
 8008dd8:	059a      	lsls	r2, r3, #22
 8008dda:	d402      	bmi.n	8008de2 <_vfiprintf_r+0x2a>
 8008ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dde:	f7fe fbb8 	bl	8007552 <__retarget_lock_acquire_recursive>
 8008de2:	89ab      	ldrh	r3, [r5, #12]
 8008de4:	071b      	lsls	r3, r3, #28
 8008de6:	d501      	bpl.n	8008dec <_vfiprintf_r+0x34>
 8008de8:	692b      	ldr	r3, [r5, #16]
 8008dea:	b99b      	cbnz	r3, 8008e14 <_vfiprintf_r+0x5c>
 8008dec:	4629      	mov	r1, r5
 8008dee:	4630      	mov	r0, r6
 8008df0:	f000 f938 	bl	8009064 <__swsetup_r>
 8008df4:	b170      	cbz	r0, 8008e14 <_vfiprintf_r+0x5c>
 8008df6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008df8:	07dc      	lsls	r4, r3, #31
 8008dfa:	d504      	bpl.n	8008e06 <_vfiprintf_r+0x4e>
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	b01d      	add	sp, #116	@ 0x74
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	0598      	lsls	r0, r3, #22
 8008e0a:	d4f7      	bmi.n	8008dfc <_vfiprintf_r+0x44>
 8008e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e0e:	f7fe fba1 	bl	8007554 <__retarget_lock_release_recursive>
 8008e12:	e7f3      	b.n	8008dfc <_vfiprintf_r+0x44>
 8008e14:	2300      	movs	r3, #0
 8008e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e18:	2320      	movs	r3, #32
 8008e1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e22:	2330      	movs	r3, #48	@ 0x30
 8008e24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fd4 <_vfiprintf_r+0x21c>
 8008e28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e2c:	f04f 0901 	mov.w	r9, #1
 8008e30:	4623      	mov	r3, r4
 8008e32:	469a      	mov	sl, r3
 8008e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e38:	b10a      	cbz	r2, 8008e3e <_vfiprintf_r+0x86>
 8008e3a:	2a25      	cmp	r2, #37	@ 0x25
 8008e3c:	d1f9      	bne.n	8008e32 <_vfiprintf_r+0x7a>
 8008e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e42:	d00b      	beq.n	8008e5c <_vfiprintf_r+0xa4>
 8008e44:	465b      	mov	r3, fp
 8008e46:	4622      	mov	r2, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f7ff ffa2 	bl	8008d94 <__sfputs_r>
 8008e50:	3001      	adds	r0, #1
 8008e52:	f000 80a7 	beq.w	8008fa4 <_vfiprintf_r+0x1ec>
 8008e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e58:	445a      	add	r2, fp
 8008e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 809f 	beq.w	8008fa4 <_vfiprintf_r+0x1ec>
 8008e66:	2300      	movs	r3, #0
 8008e68:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e70:	f10a 0a01 	add.w	sl, sl, #1
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	9307      	str	r3, [sp, #28]
 8008e78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e7e:	4654      	mov	r4, sl
 8008e80:	2205      	movs	r2, #5
 8008e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e86:	4853      	ldr	r0, [pc, #332]	@ (8008fd4 <_vfiprintf_r+0x21c>)
 8008e88:	f7f7 f9a2 	bl	80001d0 <memchr>
 8008e8c:	9a04      	ldr	r2, [sp, #16]
 8008e8e:	b9d8      	cbnz	r0, 8008ec8 <_vfiprintf_r+0x110>
 8008e90:	06d1      	lsls	r1, r2, #27
 8008e92:	bf44      	itt	mi
 8008e94:	2320      	movmi	r3, #32
 8008e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e9a:	0713      	lsls	r3, r2, #28
 8008e9c:	bf44      	itt	mi
 8008e9e:	232b      	movmi	r3, #43	@ 0x2b
 8008ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eaa:	d015      	beq.n	8008ed8 <_vfiprintf_r+0x120>
 8008eac:	9a07      	ldr	r2, [sp, #28]
 8008eae:	4654      	mov	r4, sl
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f04f 0c0a 	mov.w	ip, #10
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ebc:	3b30      	subs	r3, #48	@ 0x30
 8008ebe:	2b09      	cmp	r3, #9
 8008ec0:	d94b      	bls.n	8008f5a <_vfiprintf_r+0x1a2>
 8008ec2:	b1b0      	cbz	r0, 8008ef2 <_vfiprintf_r+0x13a>
 8008ec4:	9207      	str	r2, [sp, #28]
 8008ec6:	e014      	b.n	8008ef2 <_vfiprintf_r+0x13a>
 8008ec8:	eba0 0308 	sub.w	r3, r0, r8
 8008ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	46a2      	mov	sl, r4
 8008ed6:	e7d2      	b.n	8008e7e <_vfiprintf_r+0xc6>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	1d19      	adds	r1, r3, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	9103      	str	r1, [sp, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bfbb      	ittet	lt
 8008ee4:	425b      	neglt	r3, r3
 8008ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eea:	9307      	strge	r3, [sp, #28]
 8008eec:	9307      	strlt	r3, [sp, #28]
 8008eee:	bfb8      	it	lt
 8008ef0:	9204      	strlt	r2, [sp, #16]
 8008ef2:	7823      	ldrb	r3, [r4, #0]
 8008ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ef6:	d10a      	bne.n	8008f0e <_vfiprintf_r+0x156>
 8008ef8:	7863      	ldrb	r3, [r4, #1]
 8008efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008efc:	d132      	bne.n	8008f64 <_vfiprintf_r+0x1ac>
 8008efe:	9b03      	ldr	r3, [sp, #12]
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	9203      	str	r2, [sp, #12]
 8008f06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f0a:	3402      	adds	r4, #2
 8008f0c:	9305      	str	r3, [sp, #20]
 8008f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fe4 <_vfiprintf_r+0x22c>
 8008f12:	7821      	ldrb	r1, [r4, #0]
 8008f14:	2203      	movs	r2, #3
 8008f16:	4650      	mov	r0, sl
 8008f18:	f7f7 f95a 	bl	80001d0 <memchr>
 8008f1c:	b138      	cbz	r0, 8008f2e <_vfiprintf_r+0x176>
 8008f1e:	9b04      	ldr	r3, [sp, #16]
 8008f20:	eba0 000a 	sub.w	r0, r0, sl
 8008f24:	2240      	movs	r2, #64	@ 0x40
 8008f26:	4082      	lsls	r2, r0
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	3401      	adds	r4, #1
 8008f2c:	9304      	str	r3, [sp, #16]
 8008f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f32:	4829      	ldr	r0, [pc, #164]	@ (8008fd8 <_vfiprintf_r+0x220>)
 8008f34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f38:	2206      	movs	r2, #6
 8008f3a:	f7f7 f949 	bl	80001d0 <memchr>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d03f      	beq.n	8008fc2 <_vfiprintf_r+0x20a>
 8008f42:	4b26      	ldr	r3, [pc, #152]	@ (8008fdc <_vfiprintf_r+0x224>)
 8008f44:	bb1b      	cbnz	r3, 8008f8e <_vfiprintf_r+0x1d6>
 8008f46:	9b03      	ldr	r3, [sp, #12]
 8008f48:	3307      	adds	r3, #7
 8008f4a:	f023 0307 	bic.w	r3, r3, #7
 8008f4e:	3308      	adds	r3, #8
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f54:	443b      	add	r3, r7
 8008f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f58:	e76a      	b.n	8008e30 <_vfiprintf_r+0x78>
 8008f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f5e:	460c      	mov	r4, r1
 8008f60:	2001      	movs	r0, #1
 8008f62:	e7a8      	b.n	8008eb6 <_vfiprintf_r+0xfe>
 8008f64:	2300      	movs	r3, #0
 8008f66:	3401      	adds	r4, #1
 8008f68:	9305      	str	r3, [sp, #20]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f04f 0c0a 	mov.w	ip, #10
 8008f70:	4620      	mov	r0, r4
 8008f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f76:	3a30      	subs	r2, #48	@ 0x30
 8008f78:	2a09      	cmp	r2, #9
 8008f7a:	d903      	bls.n	8008f84 <_vfiprintf_r+0x1cc>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0c6      	beq.n	8008f0e <_vfiprintf_r+0x156>
 8008f80:	9105      	str	r1, [sp, #20]
 8008f82:	e7c4      	b.n	8008f0e <_vfiprintf_r+0x156>
 8008f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f88:	4604      	mov	r4, r0
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e7f0      	b.n	8008f70 <_vfiprintf_r+0x1b8>
 8008f8e:	ab03      	add	r3, sp, #12
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	462a      	mov	r2, r5
 8008f94:	4b12      	ldr	r3, [pc, #72]	@ (8008fe0 <_vfiprintf_r+0x228>)
 8008f96:	a904      	add	r1, sp, #16
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7fd fda1 	bl	8006ae0 <_printf_float>
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	1c78      	adds	r0, r7, #1
 8008fa2:	d1d6      	bne.n	8008f52 <_vfiprintf_r+0x19a>
 8008fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fa6:	07d9      	lsls	r1, r3, #31
 8008fa8:	d405      	bmi.n	8008fb6 <_vfiprintf_r+0x1fe>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	059a      	lsls	r2, r3, #22
 8008fae:	d402      	bmi.n	8008fb6 <_vfiprintf_r+0x1fe>
 8008fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fb2:	f7fe facf 	bl	8007554 <__retarget_lock_release_recursive>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	065b      	lsls	r3, r3, #25
 8008fba:	f53f af1f 	bmi.w	8008dfc <_vfiprintf_r+0x44>
 8008fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fc0:	e71e      	b.n	8008e00 <_vfiprintf_r+0x48>
 8008fc2:	ab03      	add	r3, sp, #12
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	462a      	mov	r2, r5
 8008fc8:	4b05      	ldr	r3, [pc, #20]	@ (8008fe0 <_vfiprintf_r+0x228>)
 8008fca:	a904      	add	r1, sp, #16
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7fe f81f 	bl	8007010 <_printf_i>
 8008fd2:	e7e4      	b.n	8008f9e <_vfiprintf_r+0x1e6>
 8008fd4:	08009460 	.word	0x08009460
 8008fd8:	0800946a 	.word	0x0800946a
 8008fdc:	08006ae1 	.word	0x08006ae1
 8008fe0:	08008d95 	.word	0x08008d95
 8008fe4:	08009466 	.word	0x08009466

08008fe8 <__swbuf_r>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	460e      	mov	r6, r1
 8008fec:	4614      	mov	r4, r2
 8008fee:	4605      	mov	r5, r0
 8008ff0:	b118      	cbz	r0, 8008ffa <__swbuf_r+0x12>
 8008ff2:	6a03      	ldr	r3, [r0, #32]
 8008ff4:	b90b      	cbnz	r3, 8008ffa <__swbuf_r+0x12>
 8008ff6:	f7fe f9b5 	bl	8007364 <__sinit>
 8008ffa:	69a3      	ldr	r3, [r4, #24]
 8008ffc:	60a3      	str	r3, [r4, #8]
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	071a      	lsls	r2, r3, #28
 8009002:	d501      	bpl.n	8009008 <__swbuf_r+0x20>
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	b943      	cbnz	r3, 800901a <__swbuf_r+0x32>
 8009008:	4621      	mov	r1, r4
 800900a:	4628      	mov	r0, r5
 800900c:	f000 f82a 	bl	8009064 <__swsetup_r>
 8009010:	b118      	cbz	r0, 800901a <__swbuf_r+0x32>
 8009012:	f04f 37ff 	mov.w	r7, #4294967295
 8009016:	4638      	mov	r0, r7
 8009018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	6922      	ldr	r2, [r4, #16]
 800901e:	1a98      	subs	r0, r3, r2
 8009020:	6963      	ldr	r3, [r4, #20]
 8009022:	b2f6      	uxtb	r6, r6
 8009024:	4283      	cmp	r3, r0
 8009026:	4637      	mov	r7, r6
 8009028:	dc05      	bgt.n	8009036 <__swbuf_r+0x4e>
 800902a:	4621      	mov	r1, r4
 800902c:	4628      	mov	r0, r5
 800902e:	f7ff fde9 	bl	8008c04 <_fflush_r>
 8009032:	2800      	cmp	r0, #0
 8009034:	d1ed      	bne.n	8009012 <__swbuf_r+0x2a>
 8009036:	68a3      	ldr	r3, [r4, #8]
 8009038:	3b01      	subs	r3, #1
 800903a:	60a3      	str	r3, [r4, #8]
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	6022      	str	r2, [r4, #0]
 8009042:	701e      	strb	r6, [r3, #0]
 8009044:	6962      	ldr	r2, [r4, #20]
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	429a      	cmp	r2, r3
 800904a:	d004      	beq.n	8009056 <__swbuf_r+0x6e>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	07db      	lsls	r3, r3, #31
 8009050:	d5e1      	bpl.n	8009016 <__swbuf_r+0x2e>
 8009052:	2e0a      	cmp	r6, #10
 8009054:	d1df      	bne.n	8009016 <__swbuf_r+0x2e>
 8009056:	4621      	mov	r1, r4
 8009058:	4628      	mov	r0, r5
 800905a:	f7ff fdd3 	bl	8008c04 <_fflush_r>
 800905e:	2800      	cmp	r0, #0
 8009060:	d0d9      	beq.n	8009016 <__swbuf_r+0x2e>
 8009062:	e7d6      	b.n	8009012 <__swbuf_r+0x2a>

08009064 <__swsetup_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4b29      	ldr	r3, [pc, #164]	@ (800910c <__swsetup_r+0xa8>)
 8009068:	4605      	mov	r5, r0
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	460c      	mov	r4, r1
 800906e:	b118      	cbz	r0, 8009078 <__swsetup_r+0x14>
 8009070:	6a03      	ldr	r3, [r0, #32]
 8009072:	b90b      	cbnz	r3, 8009078 <__swsetup_r+0x14>
 8009074:	f7fe f976 	bl	8007364 <__sinit>
 8009078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907c:	0719      	lsls	r1, r3, #28
 800907e:	d422      	bmi.n	80090c6 <__swsetup_r+0x62>
 8009080:	06da      	lsls	r2, r3, #27
 8009082:	d407      	bmi.n	8009094 <__swsetup_r+0x30>
 8009084:	2209      	movs	r2, #9
 8009086:	602a      	str	r2, [r5, #0]
 8009088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	e033      	b.n	80090fc <__swsetup_r+0x98>
 8009094:	0758      	lsls	r0, r3, #29
 8009096:	d512      	bpl.n	80090be <__swsetup_r+0x5a>
 8009098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800909a:	b141      	cbz	r1, 80090ae <__swsetup_r+0x4a>
 800909c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090a0:	4299      	cmp	r1, r3
 80090a2:	d002      	beq.n	80090aa <__swsetup_r+0x46>
 80090a4:	4628      	mov	r0, r5
 80090a6:	f7ff f8af 	bl	8008208 <_free_r>
 80090aa:	2300      	movs	r3, #0
 80090ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	2300      	movs	r3, #0
 80090b8:	6063      	str	r3, [r4, #4]
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	f043 0308 	orr.w	r3, r3, #8
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	b94b      	cbnz	r3, 80090de <__swsetup_r+0x7a>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d4:	d003      	beq.n	80090de <__swsetup_r+0x7a>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4628      	mov	r0, r5
 80090da:	f000 f883 	bl	80091e4 <__smakebuf_r>
 80090de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e2:	f013 0201 	ands.w	r2, r3, #1
 80090e6:	d00a      	beq.n	80090fe <__swsetup_r+0x9a>
 80090e8:	2200      	movs	r2, #0
 80090ea:	60a2      	str	r2, [r4, #8]
 80090ec:	6962      	ldr	r2, [r4, #20]
 80090ee:	4252      	negs	r2, r2
 80090f0:	61a2      	str	r2, [r4, #24]
 80090f2:	6922      	ldr	r2, [r4, #16]
 80090f4:	b942      	cbnz	r2, 8009108 <__swsetup_r+0xa4>
 80090f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090fa:	d1c5      	bne.n	8009088 <__swsetup_r+0x24>
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	0799      	lsls	r1, r3, #30
 8009100:	bf58      	it	pl
 8009102:	6962      	ldrpl	r2, [r4, #20]
 8009104:	60a2      	str	r2, [r4, #8]
 8009106:	e7f4      	b.n	80090f2 <__swsetup_r+0x8e>
 8009108:	2000      	movs	r0, #0
 800910a:	e7f7      	b.n	80090fc <__swsetup_r+0x98>
 800910c:	20000018 	.word	0x20000018

08009110 <_raise_r>:
 8009110:	291f      	cmp	r1, #31
 8009112:	b538      	push	{r3, r4, r5, lr}
 8009114:	4605      	mov	r5, r0
 8009116:	460c      	mov	r4, r1
 8009118:	d904      	bls.n	8009124 <_raise_r+0x14>
 800911a:	2316      	movs	r3, #22
 800911c:	6003      	str	r3, [r0, #0]
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009126:	b112      	cbz	r2, 800912e <_raise_r+0x1e>
 8009128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800912c:	b94b      	cbnz	r3, 8009142 <_raise_r+0x32>
 800912e:	4628      	mov	r0, r5
 8009130:	f000 f830 	bl	8009194 <_getpid_r>
 8009134:	4622      	mov	r2, r4
 8009136:	4601      	mov	r1, r0
 8009138:	4628      	mov	r0, r5
 800913a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800913e:	f000 b817 	b.w	8009170 <_kill_r>
 8009142:	2b01      	cmp	r3, #1
 8009144:	d00a      	beq.n	800915c <_raise_r+0x4c>
 8009146:	1c59      	adds	r1, r3, #1
 8009148:	d103      	bne.n	8009152 <_raise_r+0x42>
 800914a:	2316      	movs	r3, #22
 800914c:	6003      	str	r3, [r0, #0]
 800914e:	2001      	movs	r0, #1
 8009150:	e7e7      	b.n	8009122 <_raise_r+0x12>
 8009152:	2100      	movs	r1, #0
 8009154:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009158:	4620      	mov	r0, r4
 800915a:	4798      	blx	r3
 800915c:	2000      	movs	r0, #0
 800915e:	e7e0      	b.n	8009122 <_raise_r+0x12>

08009160 <raise>:
 8009160:	4b02      	ldr	r3, [pc, #8]	@ (800916c <raise+0xc>)
 8009162:	4601      	mov	r1, r0
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	f7ff bfd3 	b.w	8009110 <_raise_r>
 800916a:	bf00      	nop
 800916c:	20000018 	.word	0x20000018

08009170 <_kill_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	@ (8009190 <_kill_r+0x20>)
 8009174:	2300      	movs	r3, #0
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	4611      	mov	r1, r2
 800917c:	602b      	str	r3, [r5, #0]
 800917e:	f7f8 ff70 	bl	8002062 <_kill>
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	d102      	bne.n	800918c <_kill_r+0x1c>
 8009186:	682b      	ldr	r3, [r5, #0]
 8009188:	b103      	cbz	r3, 800918c <_kill_r+0x1c>
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	bf00      	nop
 8009190:	2000064c 	.word	0x2000064c

08009194 <_getpid_r>:
 8009194:	f7f8 bf5d 	b.w	8002052 <_getpid>

08009198 <__swhatbuf_r>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a0:	2900      	cmp	r1, #0
 80091a2:	b096      	sub	sp, #88	@ 0x58
 80091a4:	4615      	mov	r5, r2
 80091a6:	461e      	mov	r6, r3
 80091a8:	da0d      	bge.n	80091c6 <__swhatbuf_r+0x2e>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091b0:	f04f 0100 	mov.w	r1, #0
 80091b4:	bf14      	ite	ne
 80091b6:	2340      	movne	r3, #64	@ 0x40
 80091b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091bc:	2000      	movs	r0, #0
 80091be:	6031      	str	r1, [r6, #0]
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	b016      	add	sp, #88	@ 0x58
 80091c4:	bd70      	pop	{r4, r5, r6, pc}
 80091c6:	466a      	mov	r2, sp
 80091c8:	f000 f848 	bl	800925c <_fstat_r>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	dbec      	blt.n	80091aa <__swhatbuf_r+0x12>
 80091d0:	9901      	ldr	r1, [sp, #4]
 80091d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091da:	4259      	negs	r1, r3
 80091dc:	4159      	adcs	r1, r3
 80091de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091e2:	e7eb      	b.n	80091bc <__swhatbuf_r+0x24>

080091e4 <__smakebuf_r>:
 80091e4:	898b      	ldrh	r3, [r1, #12]
 80091e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091e8:	079d      	lsls	r5, r3, #30
 80091ea:	4606      	mov	r6, r0
 80091ec:	460c      	mov	r4, r1
 80091ee:	d507      	bpl.n	8009200 <__smakebuf_r+0x1c>
 80091f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	2301      	movs	r3, #1
 80091fa:	6163      	str	r3, [r4, #20]
 80091fc:	b003      	add	sp, #12
 80091fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009200:	ab01      	add	r3, sp, #4
 8009202:	466a      	mov	r2, sp
 8009204:	f7ff ffc8 	bl	8009198 <__swhatbuf_r>
 8009208:	9f00      	ldr	r7, [sp, #0]
 800920a:	4605      	mov	r5, r0
 800920c:	4639      	mov	r1, r7
 800920e:	4630      	mov	r0, r6
 8009210:	f7ff f86e 	bl	80082f0 <_malloc_r>
 8009214:	b948      	cbnz	r0, 800922a <__smakebuf_r+0x46>
 8009216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921a:	059a      	lsls	r2, r3, #22
 800921c:	d4ee      	bmi.n	80091fc <__smakebuf_r+0x18>
 800921e:	f023 0303 	bic.w	r3, r3, #3
 8009222:	f043 0302 	orr.w	r3, r3, #2
 8009226:	81a3      	strh	r3, [r4, #12]
 8009228:	e7e2      	b.n	80091f0 <__smakebuf_r+0xc>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	6020      	str	r0, [r4, #0]
 800922e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	9b01      	ldr	r3, [sp, #4]
 8009236:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800923a:	b15b      	cbz	r3, 8009254 <__smakebuf_r+0x70>
 800923c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009240:	4630      	mov	r0, r6
 8009242:	f000 f81d 	bl	8009280 <_isatty_r>
 8009246:	b128      	cbz	r0, 8009254 <__smakebuf_r+0x70>
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	f023 0303 	bic.w	r3, r3, #3
 800924e:	f043 0301 	orr.w	r3, r3, #1
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	431d      	orrs	r5, r3
 8009258:	81a5      	strh	r5, [r4, #12]
 800925a:	e7cf      	b.n	80091fc <__smakebuf_r+0x18>

0800925c <_fstat_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d07      	ldr	r5, [pc, #28]	@ (800927c <_fstat_r+0x20>)
 8009260:	2300      	movs	r3, #0
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	f7f8 ff5a 	bl	8002122 <_fstat>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d102      	bne.n	8009278 <_fstat_r+0x1c>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	b103      	cbz	r3, 8009278 <_fstat_r+0x1c>
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	2000064c 	.word	0x2000064c

08009280 <_isatty_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d06      	ldr	r5, [pc, #24]	@ (800929c <_isatty_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	f7f8 ff59 	bl	8002142 <_isatty>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_isatty_r+0x1a>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_isatty_r+0x1a>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	2000064c 	.word	0x2000064c

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
