
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cdc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009e70  08009e70  0000ae70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f78  08009f78  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f78  08009f78  0000af78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f80  08009f80  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f80  08009f80  0000af80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f84  08009f84  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009f88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000299c  20000068  08009ff0  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a04  08009ff0  0000ba04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e825  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004363  00000000  00000000  000298bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014dc  00000000  00000000  0002f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026882  00000000  00000000  00030bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220ca  00000000  00000000  00057456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e57b3  00000000  00000000  00079520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ecd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e50  00000000  00000000  0015ed18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00166b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e54 	.word	0x08009e54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08009e54 	.word	0x08009e54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4c:	f000 b988 	b.w	8000f60 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	468e      	mov	lr, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	4688      	mov	r8, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d962      	bls.n	8000d44 <__udivmoddi4+0xdc>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	b14e      	cbz	r6, 8000c98 <__udivmoddi4+0x30>
 8000c84:	f1c6 0320 	rsb	r3, r6, #32
 8000c88:	fa01 f806 	lsl.w	r8, r1, r6
 8000c8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c90:	40b7      	lsls	r7, r6
 8000c92:	ea43 0808 	orr.w	r8, r3, r8
 8000c96:	40b4      	lsls	r4, r6
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f fc87 	uxth.w	ip, r7
 8000ca0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ca4:	0c23      	lsrs	r3, r4, #16
 8000ca6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fb01 f20c 	mul.w	r2, r1, ip
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cbc:	f080 80ea 	bcs.w	8000e94 <__udivmoddi4+0x22c>
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f240 80e7 	bls.w	8000e94 <__udivmoddi4+0x22c>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	443b      	add	r3, r7
 8000cca:	1a9a      	subs	r2, r3, r2
 8000ccc:	b2a3      	uxth	r3, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cda:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cde:	459c      	cmp	ip, r3
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x8e>
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ce8:	f080 80d6 	bcs.w	8000e98 <__udivmoddi4+0x230>
 8000cec:	459c      	cmp	ip, r3
 8000cee:	f240 80d3 	bls.w	8000e98 <__udivmoddi4+0x230>
 8000cf2:	443b      	add	r3, r7
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfa:	eba3 030c 	sub.w	r3, r3, ip
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11d      	cbz	r5, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40f3      	lsrs	r3, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d905      	bls.n	8000d1e <__udivmoddi4+0xb6>
 8000d12:	b10d      	cbz	r5, 8000d18 <__udivmoddi4+0xb0>
 8000d14:	e9c5 0100 	strd	r0, r1, [r5]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e7f5      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d1e:	fab3 f183 	clz	r1, r3
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d146      	bne.n	8000db4 <__udivmoddi4+0x14c>
 8000d26:	4573      	cmp	r3, lr
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0xc8>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 8105 	bhi.w	8000f3a <__udivmoddi4+0x2d2>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	4690      	mov	r8, r2
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0e5      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d3e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d42:	e7e2      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f000 8090 	beq.w	8000e6a <__udivmoddi4+0x202>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f040 80a4 	bne.w	8000e9c <__udivmoddi4+0x234>
 8000d54:	1a8a      	subs	r2, r1, r2
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	b280      	uxth	r0, r0
 8000d5e:	b2bc      	uxth	r4, r7
 8000d60:	2101      	movs	r1, #1
 8000d62:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d66:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x11e>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x11c>
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	f200 80e0 	bhi.w	8000f44 <__udivmoddi4+0x2dc>
 8000d84:	46c4      	mov	ip, r8
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d8c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d90:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d94:	fb02 f404 	mul.w	r4, r2, r4
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x144>
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x142>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f200 80ca 	bhi.w	8000f3e <__udivmoddi4+0x2d6>
 8000daa:	4602      	mov	r2, r0
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0x98>
 8000db4:	f1c1 0620 	rsb	r6, r1, #32
 8000db8:	408b      	lsls	r3, r1
 8000dba:	fa22 f706 	lsr.w	r7, r2, r6
 8000dbe:	431f      	orrs	r7, r3
 8000dc0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dc4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dc8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dcc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	fa1f fc87 	uxth.w	ip, r7
 8000dda:	fbbe f0f9 	udiv	r0, lr, r9
 8000dde:	0c1c      	lsrs	r4, r3, #16
 8000de0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000de4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000de8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	fa02 f201 	lsl.w	r2, r2, r1
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x1a0>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 809c 	bcs.w	8000f36 <__udivmoddi4+0x2ce>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f240 8099 	bls.w	8000f36 <__udivmoddi4+0x2ce>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	fa1f fe83 	uxth.w	lr, r3
 8000e10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e14:	fb09 4413 	mls	r4, r9, r3, r4
 8000e18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e20:	45a4      	cmp	ip, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1ce>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e2a:	f080 8082 	bcs.w	8000f32 <__udivmoddi4+0x2ca>
 8000e2e:	45a4      	cmp	ip, r4
 8000e30:	d97f      	bls.n	8000f32 <__udivmoddi4+0x2ca>
 8000e32:	3b02      	subs	r3, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e3a:	eba4 040c 	sub.w	r4, r4, ip
 8000e3e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e42:	4564      	cmp	r4, ip
 8000e44:	4673      	mov	r3, lr
 8000e46:	46e1      	mov	r9, ip
 8000e48:	d362      	bcc.n	8000f10 <__udivmoddi4+0x2a8>
 8000e4a:	d05f      	beq.n	8000f0c <__udivmoddi4+0x2a4>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x1fe>
 8000e4e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e52:	eb64 0409 	sbc.w	r4, r4, r9
 8000e56:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e5e:	431e      	orrs	r6, r3
 8000e60:	40cc      	lsrs	r4, r1
 8000e62:	e9c5 6400 	strd	r6, r4, [r5]
 8000e66:	2100      	movs	r1, #0
 8000e68:	e74f      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000e6a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e6e:	0c01      	lsrs	r1, r0, #16
 8000e70:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	463c      	mov	r4, r7
 8000e80:	46b8      	mov	r8, r7
 8000e82:	46be      	mov	lr, r7
 8000e84:	2620      	movs	r6, #32
 8000e86:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e8a:	eba2 0208 	sub.w	r2, r2, r8
 8000e8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e92:	e766      	b.n	8000d62 <__udivmoddi4+0xfa>
 8000e94:	4601      	mov	r1, r0
 8000e96:	e718      	b.n	8000cca <__udivmoddi4+0x62>
 8000e98:	4610      	mov	r0, r2
 8000e9a:	e72c      	b.n	8000cf6 <__udivmoddi4+0x8e>
 8000e9c:	f1c6 0220 	rsb	r2, r6, #32
 8000ea0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ea4:	40b7      	lsls	r7, r6
 8000ea6:	40b1      	lsls	r1, r6
 8000ea8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eb6:	b2bc      	uxth	r4, r7
 8000eb8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb08 f904 	mul.w	r9, r8, r4
 8000ec6:	40b0      	lsls	r0, r6
 8000ec8:	4589      	cmp	r9, r1
 8000eca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ece:	b280      	uxth	r0, r0
 8000ed0:	d93e      	bls.n	8000f50 <__udivmoddi4+0x2e8>
 8000ed2:	1879      	adds	r1, r7, r1
 8000ed4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ed8:	d201      	bcs.n	8000ede <__udivmoddi4+0x276>
 8000eda:	4589      	cmp	r9, r1
 8000edc:	d81f      	bhi.n	8000f1e <__udivmoddi4+0x2b6>
 8000ede:	eba1 0109 	sub.w	r1, r1, r9
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fb09 f804 	mul.w	r8, r9, r4
 8000eea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eee:	b292      	uxth	r2, r2
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	4542      	cmp	r2, r8
 8000ef6:	d229      	bcs.n	8000f4c <__udivmoddi4+0x2e4>
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000efe:	d2c4      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f00:	4542      	cmp	r2, r8
 8000f02:	d2c2      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f04:	f1a9 0102 	sub.w	r1, r9, #2
 8000f08:	443a      	add	r2, r7
 8000f0a:	e7be      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f0c:	45f0      	cmp	r8, lr
 8000f0e:	d29d      	bcs.n	8000e4c <__udivmoddi4+0x1e4>
 8000f10:	ebbe 0302 	subs.w	r3, lr, r2
 8000f14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f18:	3801      	subs	r0, #1
 8000f1a:	46e1      	mov	r9, ip
 8000f1c:	e796      	b.n	8000e4c <__udivmoddi4+0x1e4>
 8000f1e:	eba7 0909 	sub.w	r9, r7, r9
 8000f22:	4449      	add	r1, r9
 8000f24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2c:	fb09 f804 	mul.w	r8, r9, r4
 8000f30:	e7db      	b.n	8000eea <__udivmoddi4+0x282>
 8000f32:	4673      	mov	r3, lr
 8000f34:	e77f      	b.n	8000e36 <__udivmoddi4+0x1ce>
 8000f36:	4650      	mov	r0, sl
 8000f38:	e766      	b.n	8000e08 <__udivmoddi4+0x1a0>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e6fd      	b.n	8000d3a <__udivmoddi4+0xd2>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3a02      	subs	r2, #2
 8000f42:	e733      	b.n	8000dac <__udivmoddi4+0x144>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	443b      	add	r3, r7
 8000f4a:	e71c      	b.n	8000d86 <__udivmoddi4+0x11e>
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	e79c      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f50:	eba1 0109 	sub.w	r1, r1, r9
 8000f54:	46c4      	mov	ip, r8
 8000f56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5a:	fb09 f804 	mul.w	r8, r9, r4
 8000f5e:	e7c4      	b.n	8000eea <__udivmoddi4+0x282>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MLX90640_GetFrameData>:

    return MLX90640_NO_ERROR;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0a6      	sub	sp, #152	@ 0x98
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95

    while(dataReady == 0)
 8000f82:	e016      	b.n	8000fb2 <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 8000f84:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000f88:	79f8      	ldrb	r0, [r7, #7]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f90:	f000 ff8a 	bl	8001ea8 <MLX90640_I2CRead>
 8000f94:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        if(error != MLX90640_NO_ERROR)
 8000f98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <MLX90640_GetFrameData+0x42>
        {
            return error;
 8000fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fa4:	e093      	b.n	80010ce <MLX90640_GetFrameData+0x16a>
        }
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister);
 8000fa6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    while(dataReady == 0)
 8000fb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0e4      	beq.n	8000f84 <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2230      	movs	r2, #48	@ 0x30
 8000fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 ffbc 	bl	8001f40 <MLX90640_I2CWrite>
 8000fc8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 8000fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fd4:	d102      	bne.n	8000fdc <MLX90640_GetFrameData+0x78>
    {
        return error;
 8000fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fda:	e078      	b.n	80010ce <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData);
 8000fdc:	79f8      	ldrb	r0, [r7, #7]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fe4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe8:	f000 ff5e 	bl	8001ea8 <MLX90640_I2CRead>
 8000fec:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8000ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <MLX90640_GetFrameData+0x9a>
    {
        return error;
 8000ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ffc:	e067      	b.n	80010ce <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	79f8      	ldrb	r0, [r7, #7]
 8001004:	2240      	movs	r2, #64	@ 0x40
 8001006:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800100a:	f000 ff4d 	bl	8001ea8 <MLX90640_I2CRead>
 800100e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8001012:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <MLX90640_GetFrameData+0xbc>
    {
        return error;
 800101a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800101e:	e056      	b.n	80010ce <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8001020:	f107 038e 	add.w	r3, r7, #142	@ 0x8e
 8001024:	79f8      	ldrb	r0, [r7, #7]
 8001026:	2201      	movs	r2, #1
 8001028:	f248 010d 	movw	r1, #32781	@ 0x800d
 800102c:	f000 ff3c 	bl	8001ea8 <MLX90640_I2CRead>
 8001030:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    frameData[832] = controlRegister1;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800103a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800103e:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 8001040:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 800104a:	f002 0201 	and.w	r2, r2, #1
 800104e:	b292      	uxth	r2, r2
 8001050:	801a      	strh	r2, [r3, #0]

    if(error != MLX90640_NO_ERROR)
 8001052:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <MLX90640_GetFrameData+0xfc>
    {
        return error;
 800105a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800105e:	e036      	b.n	80010ce <MLX90640_GetFrameData+0x16a>
    }

    error = ValidateAuxData(data);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f867 	bl	8001138 <ValidateAuxData>
 800106a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == MLX90640_NO_ERROR)
 800106e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11b      	bne.n	80010ae <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8001076:	2300      	movs	r3, #0
 8001078:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800107c:	e013      	b.n	80010a6 <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 800107e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001082:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 8001086:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800108a:	0052      	lsls	r2, r2, #1
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	440a      	add	r2, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	3398      	adds	r3, #152	@ 0x98
 8001094:	443b      	add	r3, r7
 8001096:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 800109a:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 800109c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80010a0:	3301      	adds	r3, #1
 80010a2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80010a6:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80010aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ac:	d9e7      	bls.n	800107e <MLX90640_GetFrameData+0x11a>
        }
    }

    error = ValidateFrameData(frameData);
 80010ae:	6838      	ldr	r0, [r7, #0]
 80010b0:	f000 f811 	bl	80010d6 <ValidateFrameData>
 80010b4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if (error != MLX90640_NO_ERROR)
 80010b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <MLX90640_GetFrameData+0x162>
    {
        return error;
 80010c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010c4:	e003      	b.n	80010ce <MLX90640_GetFrameData+0x16a>
    }

    return frameData[833];
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 80010cc:	881b      	ldrh	r3, [r3, #0]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3798      	adds	r7, #152	@ 0x98
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	e01c      	b.n	8001122 <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10d      	bne.n	8001116 <ValidateFrameData+0x40>
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d102      	bne.n	8001116 <ValidateFrameData+0x40>
 8001110:	f06f 0307 	mvn.w	r3, #7
 8001114:	e00a      	b.n	800112c <ValidateFrameData+0x56>
        line = line + 1;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	3301      	adds	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3320      	adds	r3, #32
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001128:	dbde      	blt.n	80010e8 <ValidateFrameData+0x12>
    }

    return MLX90640_NO_ERROR;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001148:	4293      	cmp	r3, r2
 800114a:	d102      	bne.n	8001152 <ValidateAuxData+0x1a>
 800114c:	f06f 0307 	mvn.w	r3, #7
 8001150:	e07e      	b.n	8001250 <ValidateAuxData+0x118>

    for(int i=8; i<19; i++)
 8001152:	2308      	movs	r3, #8
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e00e      	b.n	8001176 <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001166:	4293      	cmp	r3, r2
 8001168:	d102      	bne.n	8001170 <ValidateAuxData+0x38>
 800116a:	f06f 0307 	mvn.w	r3, #7
 800116e:	e06f      	b.n	8001250 <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	3301      	adds	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b12      	cmp	r3, #18
 800117a:	dded      	ble.n	8001158 <ValidateAuxData+0x20>
    }

    for(int i=20; i<23; i++)
 800117c:	2314      	movs	r3, #20
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	e00e      	b.n	80011a0 <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001190:	4293      	cmp	r3, r2
 8001192:	d102      	bne.n	800119a <ValidateAuxData+0x62>
 8001194:	f06f 0307 	mvn.w	r3, #7
 8001198:	e05a      	b.n	8001250 <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	3301      	adds	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b16      	cmp	r3, #22
 80011a4:	dded      	ble.n	8001182 <ValidateAuxData+0x4a>
    }

    for(int i=24; i<33; i++)
 80011a6:	2318      	movs	r3, #24
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e00e      	b.n	80011ca <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d102      	bne.n	80011c4 <ValidateAuxData+0x8c>
 80011be:	f06f 0307 	mvn.w	r3, #7
 80011c2:	e045      	b.n	8001250 <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	dded      	ble.n	80011ac <ValidateAuxData+0x74>
    }

    for(int i=40; i<51; i++)
 80011d0:	2328      	movs	r3, #40	@ 0x28
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	e00e      	b.n	80011f4 <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d102      	bne.n	80011ee <ValidateAuxData+0xb6>
 80011e8:	f06f 0307 	mvn.w	r3, #7
 80011ec:	e030      	b.n	8001250 <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	3301      	adds	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b32      	cmp	r3, #50	@ 0x32
 80011f8:	dded      	ble.n	80011d6 <ValidateAuxData+0x9e>
    }

    for(int i=52; i<55; i++)
 80011fa:	2334      	movs	r3, #52	@ 0x34
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e00e      	b.n	800121e <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800120e:	4293      	cmp	r3, r2
 8001210:	d102      	bne.n	8001218 <ValidateAuxData+0xe0>
 8001212:	f06f 0307 	mvn.w	r3, #7
 8001216:	e01b      	b.n	8001250 <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b36      	cmp	r3, #54	@ 0x36
 8001222:	dded      	ble.n	8001200 <ValidateAuxData+0xc8>
    }

    for(int i=56; i<64; i++)
 8001224:	2338      	movs	r3, #56	@ 0x38
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	e00e      	b.n	8001248 <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001238:	4293      	cmp	r3, r2
 800123a:	d102      	bne.n	8001242 <ValidateAuxData+0x10a>
 800123c:	f06f 0307 	mvn.w	r3, #7
 8001240:	e006      	b.n	8001250 <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3301      	adds	r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b3f      	cmp	r3, #63	@ 0x3f
 800124c:	dded      	ble.n	800122a <ValidateAuxData+0xf2>
    }

    return MLX90640_NO_ERROR;
 800124e:	2300      	movs	r3, #0

}
 8001250:	4618      	mov	r0, r3
 8001252:	3724      	adds	r7, #36	@ 0x24
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	0000      	movs	r0, r0
	...

08001260 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8001260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001264:	b0a0      	sub	sp, #128	@ 0x80
 8001266:	af00      	add	r7, sp, #0
 8001268:	6178      	str	r0, [r7, #20]
 800126a:	6139      	str	r1, [r7, #16]
 800126c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001270:	edc7 0a02 	vstr	s1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;

    subPage = frameData[833];
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	@ 0x682
 800127c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f000 fd04 	bl	8001c90 <MLX90640_GetVdd>
 8001288:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    ta = MLX90640_GetTa(frameData, params);
 800128c:	6939      	ldr	r1, [r7, #16]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f000 fd76 	bl	8001d80 <MLX90640_GetTa>
 8001294:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

    ta4 = (ta + 273.15);
 8001298:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800129a:	f7ff f94d 	bl	8000538 <__aeabi_f2d>
 800129e:	a3e6      	add	r3, pc, #920	@ (adr r3, 8001638 <MLX90640_CalculateTo+0x3d8>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7fe ffea 	bl	800027c <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc72 	bl	8000b98 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	667b      	str	r3, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 80012b8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80012bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012c0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 80012c4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80012c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012cc:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    tr4 = (tr + 273.15);
 80012d0:	68b8      	ldr	r0, [r7, #8]
 80012d2:	f7ff f931 	bl	8000538 <__aeabi_f2d>
 80012d6:	a3d8      	add	r3, pc, #864	@ (adr r3, 8001638 <MLX90640_CalculateTo+0x3d8>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7fe ffce 	bl	800027c <__adddf3>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc56 	bl	8000b98 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	663b      	str	r3, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 80012f0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80012f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012f8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 80012fc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001300:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001304:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001308:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800130c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001310:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001314:	ed97 7a03 	vldr	s14, [r7, #12]
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    ktaScale = POW2(params->ktaScale);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	@ 0xf4c
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f8e0 	bl	80004f4 <__aeabi_ui2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	ec43 2b11 	vmov	d1, r2, r3
 800133c:	ed9f 0bb8 	vldr	d0, [pc, #736]	@ 8001620 <MLX90640_CalculateTo+0x3c0>
 8001340:	f007 fe00 	bl	8008f44 <pow>
 8001344:	ec53 2b10 	vmov	r2, r3, d0
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc24 	bl	8000b98 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	65bb      	str	r3, [r7, #88]	@ 0x58
    kvScale = POW2(params->kvScale);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800135a:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8c8 	bl	80004f4 <__aeabi_ui2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b11 	vmov	d1, r2, r3
 800136c:	ed9f 0bac 	vldr	d0, [pc, #688]	@ 8001620 <MLX90640_CalculateTo+0x3c0>
 8001370:	f007 fde8 	bl	8008f44 <pow>
 8001374:	ec53 2b10 	vmov	r2, r3, d0
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fc0c 	bl	8000b98 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	657b      	str	r3, [r7, #84]	@ 0x54
    alphaScale = POW2(params->alphaScale);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f893 364a 	ldrb.w	r3, [r3, #1610]	@ 0x64a
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8b2 	bl	80004f4 <__aeabi_ui2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	ec43 2b11 	vmov	d1, r2, r3
 8001398:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 8001620 <MLX90640_CalculateTo+0x3c0>
 800139c:	f007 fdd2 	bl	8008f44 <pow>
 80013a0:	ec53 2b10 	vmov	r2, r3, d0
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fbf6 	bl	8000b98 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	653b      	str	r3, [r7, #80]	@ 0x50

    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80013b6:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8001630 <MLX90640_CalculateTo+0x3d0>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 80013d2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013d6:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 80013fc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800140c:	461a      	mov	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800142a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

//------------------------- Gain calculation -----------------------------------

    gain = (float)params->gainEE / (int16_t)frameData[778];
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b21b      	sxth	r3, r3
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001456:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//------------------------- To calculation -------------------------------------
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800146a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    irDataCP[0] = (int16_t)frameData[776] * gain;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b21b      	sxth	r3, r3
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001488:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b21b      	sxth	r3, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80014aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f843 	bl	8000538 <__aeabi_f2d>
 80014b2:	4604      	mov	r4, r0
 80014b4:	460d      	mov	r5, r1
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014bc:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	@ 0x258
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	edd3 6a08 	vldr	s13, [r3, #32]
 80014ce:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80014d2:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 80014d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80014da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ea:	ee17 0a90 	vmov	r0, s15
 80014ee:	f7ff f823 	bl	8000538 <__aeabi_f2d>
 80014f2:	4680      	mov	r8, r0
 80014f4:	4689      	mov	r9, r1
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f81c 	bl	8000538 <__aeabi_f2d>
 8001500:	4682      	mov	sl, r0
 8001502:	468b      	mov	fp, r1
 8001504:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001506:	f7ff f817 	bl	8000538 <__aeabi_f2d>
 800150a:	a347      	add	r3, pc, #284	@ (adr r3, 8001628 <MLX90640_CalculateTo+0x3c8>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7fe feb2 	bl	8000278 <__aeabi_dsub>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4650      	mov	r0, sl
 800151a:	4659      	mov	r1, fp
 800151c:	f7ff f864 	bl	80005e8 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <MLX90640_CalculateTo+0x3d4>)
 800152e:	f7fe fea5 	bl	800027c <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4640      	mov	r0, r8
 8001538:	4649      	mov	r1, r9
 800153a:	f7ff f855 	bl	80005e8 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7fe fe97 	bl	8000278 <__aeabi_dsub>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb21 	bl	8000b98 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if( mode ==  params->calibrationModeEE)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001560:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001564:	429a      	cmp	r2, r3
 8001566:	d16b      	bne.n	8001640 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffe4 	bl	8000538 <__aeabi_f2d>
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800157a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	edd3 6a08 	vldr	s13, [r3, #32]
 800158c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001590:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001594:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	ee17 0a90 	vmov	r0, s15
 80015ac:	f7fe ffc4 	bl	8000538 <__aeabi_f2d>
 80015b0:	4680      	mov	r8, r0
 80015b2:	4689      	mov	r9, r1
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffbd 	bl	8000538 <__aeabi_f2d>
 80015be:	4682      	mov	sl, r0
 80015c0:	468b      	mov	fp, r1
 80015c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80015c4:	f7fe ffb8 	bl	8000538 <__aeabi_f2d>
 80015c8:	a317      	add	r3, pc, #92	@ (adr r3, 8001628 <MLX90640_CalculateTo+0x3c8>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7fe fe53 	bl	8000278 <__aeabi_dsub>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4650      	mov	r0, sl
 80015d8:	4659      	mov	r1, fp
 80015da:	f7ff f805 	bl	80005e8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <MLX90640_CalculateTo+0x3d4>)
 80015ec:	f7fe fe46 	bl	800027c <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4640      	mov	r0, r8
 80015f6:	4649      	mov	r1, r9
 80015f8:	f7fe fff6 	bl	80005e8 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7fe fe38 	bl	8000278 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fac2 	bl	8000b98 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
 8001618:	e071      	b.n	80016fe <MLX90640_CalculateTo+0x49e>
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	00000000 	.word	0x00000000
 8001624:	40000000 	.word	0x40000000
 8001628:	66666666 	.word	0x66666666
 800162c:	400a6666 	.word	0x400a6666
 8001630:	42200000 	.word	0x42200000
 8001634:	3ff00000 	.word	0x3ff00000
 8001638:	66666666 	.word	0x66666666
 800163c:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff78 	bl	8000538 <__aeabi_f2d>
 8001648:	4604      	mov	r4, r0
 800164a:	460d      	mov	r5, r1
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001652:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001664:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8001668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001672:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001676:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 800167a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800167e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	ee17 0a90 	vmov	r0, s15
 8001692:	f7fe ff51 	bl	8000538 <__aeabi_f2d>
 8001696:	4680      	mov	r8, r0
 8001698:	4689      	mov	r9, r1
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff4a 	bl	8000538 <__aeabi_f2d>
 80016a4:	4682      	mov	sl, r0
 80016a6:	468b      	mov	fp, r1
 80016a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80016aa:	f7fe ff45 	bl	8000538 <__aeabi_f2d>
 80016ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80017a8 <MLX90640_CalculateTo+0x548>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe fde0 	bl	8000278 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4650      	mov	r0, sl
 80016be:	4659      	mov	r1, fp
 80016c0:	f7fe ff92 	bl	80005e8 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b37      	ldr	r3, [pc, #220]	@ (80017b0 <MLX90640_CalculateTo+0x550>)
 80016d2:	f7fe fdd3 	bl	800027c <__adddf3>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4640      	mov	r0, r8
 80016dc:	4649      	mov	r1, r9
 80016de:	f7fe ff83 	bl	80005e8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4620      	mov	r0, r4
 80016e8:	4629      	mov	r1, r5
 80016ea:	f7fe fdc5 	bl	8000278 <__aeabi_dsub>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa4f 	bl	8000b98 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 80016fe:	2300      	movs	r3, #0
 8001700:	677b      	str	r3, [r7, #116]	@ 0x74
 8001702:	e2b5      	b.n	8001c70 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 8001704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001706:	2b00      	cmp	r3, #0
 8001708:	da00      	bge.n	800170c <MLX90640_CalculateTo+0x4ac>
 800170a:	331f      	adds	r3, #31
 800170c:	115b      	asrs	r3, r3, #5
 800170e:	b2da      	uxtb	r2, r3
 8001710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001712:	2b00      	cmp	r3, #0
 8001714:	da00      	bge.n	8001718 <MLX90640_CalculateTo+0x4b8>
 8001716:	333f      	adds	r3, #63	@ 0x3f
 8001718:	119b      	asrs	r3, r3, #6
 800171a:	b2db      	uxtb	r3, r3
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
 8001728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800172a:	2b00      	cmp	r3, #0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	bfb8      	it	lt
 8001732:	425b      	neglt	r3, r3
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800173a:	4053      	eors	r3, r2
 800173c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8001740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001742:	3302      	adds	r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	da00      	bge.n	800174a <MLX90640_CalculateTo+0x4ea>
 8001748:	3303      	adds	r3, #3
 800174a:	109b      	asrs	r3, r3, #2
 800174c:	461a      	mov	r2, r3
 800174e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001750:	3303      	adds	r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	da00      	bge.n	8001758 <MLX90640_CalculateTo+0x4f8>
 8001756:	3303      	adds	r3, #3
 8001758:	109b      	asrs	r3, r3, #2
 800175a:	425b      	negs	r3, r3
 800175c:	441a      	add	r2, r3
 800175e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001760:	3301      	adds	r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	da00      	bge.n	8001768 <MLX90640_CalculateTo+0x508>
 8001766:	3303      	adds	r3, #3
 8001768:	109b      	asrs	r3, r3, #2
 800176a:	441a      	add	r2, r3
 800176c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800176e:	2b00      	cmp	r3, #0
 8001770:	da00      	bge.n	8001774 <MLX90640_CalculateTo+0x514>
 8001772:	3303      	adds	r3, #3
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	425b      	negs	r3, r3
 8001778:	4413      	add	r3, r2
 800177a:	b2da      	uxtb	r2, r3
 800177c:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	f1c3 0301 	rsb	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	fb12 f303 	smulbb	r3, r2, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        if(mode == 0)
 8001792:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern;
 800179a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800179e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80017a2:	e00b      	b.n	80017bc <MLX90640_CalculateTo+0x55c>
 80017a4:	f3af 8000 	nop.w
 80017a8:	66666666 	.word	0x66666666
 80017ac:	400a6666 	.word	0x400a6666
 80017b0:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          pattern = chessPattern;
 80017b4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80017b8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        }

        if(pattern == frameData[833])
 80017bc:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	f202 6282 	addw	r2, r2, #1666	@ 0x682
 80017c6:	8812      	ldrh	r2, [r2, #0]
 80017c8:	4293      	cmp	r3, r2
 80017ca:	f040 824e 	bne.w	8001c6a <MLX90640_CalculateTo+0xa0a>
        {
            irData = (int16_t)frameData[pixelNumber] * gain;
 80017ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4413      	add	r3, r2
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            kta = params->kta[pixelNumber]/ktaScale;
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017f2:	4413      	add	r3, r2
 80017f4:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001804:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            kv = params->kv[pixelNumber]/kvScale;
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001814:	4413      	add	r3, r2
 8001816:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 800181a:	f993 3000 	ldrsb.w	r3, [r3]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800182a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 8001832:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001834:	f7fe fe80 	bl	8000538 <__aeabi_f2d>
 8001838:	4604      	mov	r4, r0
 800183a:	460d      	mov	r5, r1
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001840:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001854:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001858:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 800185c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001860:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800186c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe5e 	bl	8000538 <__aeabi_f2d>
 800187c:	4680      	mov	r8, r0
 800187e:	4689      	mov	r9, r1
 8001880:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001882:	f7fe fe59 	bl	8000538 <__aeabi_f2d>
 8001886:	4682      	mov	sl, r0
 8001888:	468b      	mov	fp, r1
 800188a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800188c:	f7fe fe54 	bl	8000538 <__aeabi_f2d>
 8001890:	a3c4      	add	r3, pc, #784	@ (adr r3, 8001ba4 <MLX90640_CalculateTo+0x944>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fcef 	bl	8000278 <__aeabi_dsub>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4650      	mov	r0, sl
 80018a0:	4659      	mov	r1, fp
 80018a2:	f7fe fea1 	bl	80005e8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4bbb      	ldr	r3, [pc, #748]	@ (8001ba0 <MLX90640_CalculateTo+0x940>)
 80018b4:	f7fe fce2 	bl	800027c <__adddf3>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4640      	mov	r0, r8
 80018be:	4649      	mov	r1, r9
 80018c0:	f7fe fe92 	bl	80005e8 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4620      	mov	r0, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	f7fe fcd4 	bl	8000278 <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f95e 	bl	8000b98 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if(mode !=  params->calibrationModeEE)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018e6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d023      	beq.n	8001936 <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f4:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 80018f8:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	edd3 6a98 	vldr	s13, [r3, #608]	@ 0x260
 800191e:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            }

            irData = irData - params->tgc * irDataCP[subPage];
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	ed93 7a06 	vldr	s14, [r3, #24]
 800193c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	3380      	adds	r3, #128	@ 0x80
 8001944:	443b      	add	r3, r7
 8001946:	3b54      	subs	r3, #84	@ 0x54
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001950:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001958:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            irData = irData / emissivity;
 800195c:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001960:	ed97 7a03 	vldr	s14, [r7, #12]
 8001964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001968:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 800196c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800196e:	f7fe fde3 	bl	8000538 <__aeabi_f2d>
 8001972:	a387      	add	r3, pc, #540	@ (adr r3, 8001b90 <MLX90640_CalculateTo+0x930>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe36 	bl	80005e8 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4614      	mov	r4, r2
 8001982:	461d      	mov	r5, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001988:	3324      	adds	r3, #36	@ 0x24
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	885b      	ldrh	r3, [r3, #2]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdbf 	bl	8000514 <__aeabi_i2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f7fe ff4d 	bl	800083c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f8f5 	bl	8000b98 <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80019b8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80019bc:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80019c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019d0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 80019dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80019f0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80019f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019f8:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80019fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a04:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 8001a08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a0a:	f7fe fd95 	bl	8000538 <__aeabi_f2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	ec43 2b10 	vmov	d0, r2, r3
 8001a16:	f007 fb05 	bl	8009024 <sqrt>
 8001a1a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a1e:	eef0 7a60 	vmov.f32	s15, s1
 8001a22:	eeb0 0a47 	vmov.f32	s0, s14
 8001a26:	eef0 0a67 	vmov.f32	s1, s15
 8001a2a:	f007 fafb 	bl	8009024 <sqrt>
 8001a2e:	ec55 4b10 	vmov	r4, r5, d0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd7e 	bl	8000538 <__aeabi_f2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fdd0 	bl	80005e8 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f8a2 	bl	8000b98 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	63bb      	str	r3, [r7, #56]	@ 0x38

            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 8001a58:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001a5a:	f7fe fd6d 	bl	8000538 <__aeabi_f2d>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a64:	f7fe fd68 	bl	8000538 <__aeabi_f2d>
 8001a68:	4680      	mov	r8, r0
 8001a6a:	4689      	mov	r9, r1
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd61 	bl	8000538 <__aeabi_f2d>
 8001a76:	a348      	add	r3, pc, #288	@ (adr r3, 8001b98 <MLX90640_CalculateTo+0x938>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdb4 	bl	80005e8 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	4945      	ldr	r1, [pc, #276]	@ (8001ba0 <MLX90640_CalculateTo+0x940>)
 8001a8a:	f7fe fbf5 	bl	8000278 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4640      	mov	r0, r8
 8001a94:	4649      	mov	r1, r9
 8001a96:	f7fe fda7 	bl	80005e8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	4699      	mov	r9, r3
 8001aa2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001aa4:	f7fe fd48 	bl	8000538 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4640      	mov	r0, r8
 8001aae:	4649      	mov	r1, r9
 8001ab0:	f7fe fbe4 	bl	800027c <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4620      	mov	r0, r4
 8001aba:	4629      	mov	r1, r5
 8001abc:	f7fe febe 	bl	800083c <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001aca:	f7fe fd35 	bl	8000538 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fbd1 	bl	800027c <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec43 2b17 	vmov	d7, r2, r3
 8001ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae6:	eef0 0a67 	vmov.f32	s1, s15
 8001aea:	f007 fa9b 	bl	8009024 <sqrt>
 8001aee:	eeb0 7a40 	vmov.f32	s14, s0
 8001af2:	eef0 7a60 	vmov.f32	s15, s1
 8001af6:	eeb0 0a47 	vmov.f32	s0, s14
 8001afa:	eef0 0a67 	vmov.f32	s1, s15
 8001afe:	f007 fa91 	bl	8009024 <sqrt>
 8001b02:	ec51 0b10 	vmov	r0, r1, d0
 8001b06:	a324      	add	r3, pc, #144	@ (adr r3, 8001b98 <MLX90640_CalculateTo+0x938>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fbb4 	bl	8000278 <__aeabi_dsub>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff f83e 	bl	8000b98 <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	637b      	str	r3, [r7, #52]	@ 0x34

            if(To < params->ct[1])
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d503      	bpl.n	8001b44 <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001b42:	e036      	b.n	8001bb2 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b52:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	d503      	bpl.n	8001b68 <MLX90640_CalculateTo+0x908>
            {
                range = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001b66:	e024      	b.n	8001bb2 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[3])
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	d513      	bpl.n	8001bac <MLX90640_CalculateTo+0x94c>
            {
                range = 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001b8a:	e012      	b.n	8001bb2 <MLX90640_CalculateTo+0x952>
 8001b8c:	f3af 8000 	nop.w
 8001b90:	a0b5ed8d 	.word	0xa0b5ed8d
 8001b94:	3eb0c6f7 	.word	0x3eb0c6f7
 8001b98:	66666666 	.word	0x66666666
 8001b9c:	40711266 	.word	0x40711266
 8001ba0:	3ff00000 	.word	0x3ff00000
 8001ba4:	66666666 	.word	0x66666666
 8001ba8:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            }

            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 8001bb2:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	3380      	adds	r3, #128	@ 0x80
 8001bba:	443b      	add	r3, r7
 8001bbc:	3b64      	subs	r3, #100	@ 0x64
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bca:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	330a      	adds	r3, #10
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	edd3 6a00 	vldr	s13, [r3]
 8001bdc:	f997 207a 	ldrsb.w	r2, [r7, #122]	@ 0x7a
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	3220      	adds	r2, #32
 8001be4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf0:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8001bf4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c08:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c10:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	ee17 0a90 	vmov	r0, s15
 8001c1c:	f7fe fc8c 	bl	8000538 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	ec43 2b10 	vmov	d0, r2, r3
 8001c28:	f007 f9fc 	bl	8009024 <sqrt>
 8001c2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c30:	eef0 7a60 	vmov.f32	s15, s1
 8001c34:	eeb0 0a47 	vmov.f32	s0, s14
 8001c38:	eef0 0a67 	vmov.f32	s1, s15
 8001c3c:	f007 f9f2 	bl	8009024 <sqrt>
 8001c40:	ec51 0b10 	vmov	r0, r1, d0
 8001c44:	a310      	add	r3, pc, #64	@ (adr r3, 8001c88 <MLX90640_CalculateTo+0xa28>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fb15 	bl	8000278 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ff9f 	bl	8000b98 <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34

            result[pixelNumber] = To;
 8001c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c68:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c76:	f6ff ad45 	blt.w	8001704 <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3780      	adds	r7, #128	@ 0x80
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c86:	bf00      	nop
 8001c88:	66666666 	.word	0x66666666
 8001c8c:	40711266 	.word	0x40711266

08001c90 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;

    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc1e 	bl	80004f4 <__aeabi_ui2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	ec43 2b11 	vmov	d1, r2, r3
 8001cc0:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001d70 <MLX90640_GetVdd+0xe0>
 8001cc4:	f007 f93e 	bl	8008f44 <pow>
 8001cc8:	ec55 4b10 	vmov	r4, r5, d0
 8001ccc:	8afb      	ldrh	r3, [r7, #22]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc10 	bl	80004f4 <__aeabi_ui2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b11 	vmov	d1, r2, r3
 8001cdc:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8001d70 <MLX90640_GetVdd+0xe0>
 8001ce0:	f007 f930 	bl	8008f44 <pow>
 8001ce4:	ec53 2b10 	vmov	r2, r3, d0
 8001ce8:	4620      	mov	r0, r4
 8001cea:	4629      	mov	r1, r5
 8001cec:	f7fe fda6 	bl	800083c <__aeabi_ddiv>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe ff4e 	bl	8000b98 <__aeabi_d2f>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f203 6354 	addw	r3, r3, #1620	@ 0x654
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d3e:	ee16 0a90 	vmov	r0, s13
 8001d42:	f7fe fbf9 	bl	8000538 <__aeabi_f2d>
 8001d46:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d78 <MLX90640_GetVdd+0xe8>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fa96 	bl	800027c <__adddf3>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe ff1e 	bl	8000b98 <__aeabi_d2f>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]

    return vdd;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	ee07 3a90 	vmov	s15, r3
}
 8001d66:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d70:	00000000 	.word	0x00000000
 8001d74:	40000000 	.word	0x40000000
 8001d78:	66666666 	.word	0x66666666
 8001d7c:	400a6666 	.word	0x400a6666

08001d80 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;

    vdd = MLX90640_GetVdd(frameData, params);
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff7e 	bl	8001c90 <MLX90640_GetVdd>
 8001d94:	ed87 0a05 	vstr	s0, [r7, #20]

    ptat = (int16_t)frameData[800];
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	827b      	strh	r3, [r7, #18]

    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 8001da2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001ea0 <MLX90640_GetTa+0x120>
 8001de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de6:	edc7 7a03 	vstr	s15, [r7, #12]

    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7fe fba4 	bl	8000538 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb9d 	bl	8000538 <__aeabi_f2d>
 8001dfe:	4680      	mov	r8, r0
 8001e00:	4689      	mov	r9, r1
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7fe fb98 	bl	8000538 <__aeabi_f2d>
 8001e08:	a323      	add	r3, pc, #140	@ (adr r3, 8001e98 <MLX90640_GetTa+0x118>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fa33 	bl	8000278 <__aeabi_dsub>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4640      	mov	r0, r8
 8001e18:	4649      	mov	r1, r9
 8001e1a:	f7fe fbe5 	bl	80005e8 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <MLX90640_GetTa+0x124>)
 8001e2c:	f7fe fa26 	bl	800027c <__adddf3>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fd00 	bl	800083c <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	899b      	ldrh	r3, [r3, #12]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb63 	bl	8000514 <__aeabi_i2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fa0f 	bl	8000278 <__aeabi_dsub>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fe99 	bl	8000b98 <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e70:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e78:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e80:	edc7 7a02 	vstr	s15, [r7, #8]

    return ta;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	ee07 3a90 	vmov	s15, r3
}
 8001e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e96:	bf00      	nop
 8001e98:	66666666 	.word	0x66666666
 8001e9c:	400a6666 	.word	0x400a6666
 8001ea0:	48800000 	.word	0x48800000
 8001ea4:	3ff00000 	.word	0x3ff00000

08001ea8 <MLX90640_I2CRead>:
	}
	printf("Scan Complete\r\n");
}

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress,
		uint16_t nMemAddressRead, uint16_t *data) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	@ 0x30
 8001eac:	af04      	add	r7, sp, #16
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	81bb      	strh	r3, [r7, #12]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	817b      	strh	r3, [r7, #10]
	uint8_t* pData = (uint8_t*) data;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
	int ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr << 1), startAddress,
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b299      	uxth	r1, r3
 8001ec8:	897b      	ldrh	r3, [r7, #10]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	89ba      	ldrh	r2, [r7, #12]
 8001ed0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ed4:	9002      	str	r0, [sp, #8]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2302      	movs	r3, #2
 8001ede:	4817      	ldr	r0, [pc, #92]	@ (8001f3c <MLX90640_I2CRead+0x94>)
 8001ee0:	f003 fa52 	bl	8005388 <HAL_I2C_Mem_Read>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, 2 * nMemAddressRead, 500);
	if (ack != HAL_OK) {
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <MLX90640_I2CRead+0x4c>
		return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ef2:	e01f      	b.n	8001f34 <MLX90640_I2CRead+0x8c>
	}

	// Perform Endian Conversion on the received data
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	e016      	b.n	8001f28 <MLX90640_I2CRead+0x80>
		uint8_t temp = pData[k+1];
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	74fb      	strb	r3, [r7, #19]
		pData[k+1] = pData[k];
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	69b9      	ldr	r1, [r7, #24]
 8001f12:	440b      	add	r3, r1
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	701a      	strb	r2, [r3, #0]
		pData[k] = temp;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	7cfa      	ldrb	r2, [r7, #19]
 8001f20:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3302      	adds	r3, #2
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	897b      	ldrh	r3, [r7, #10]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbe3      	blt.n	8001efa <MLX90640_I2CRead+0x52>
	}

	return 0;
 8001f32:	2300      	movs	r3, #0

}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000110 	.word	0x20000110

08001f40 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af04      	add	r7, sp, #16
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	80bb      	strh	r3, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	807b      	strh	r3, [r7, #2]
	uint8_t pData[2];
	pData[0] = (uint8_t)((data >> 8) & 0xFF); // MSB
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	743b      	strb	r3, [r7, #16]
	pData[1] = (uint8_t)(data & 0xFF); // LSB
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	747b      	strb	r3, [r7, #17]
	// Perform Endian Conversion on data to write

	int ack = HAL_I2C_Mem_Write(&hi2c1, (slaveAddr << 1), writeAddress,
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	88ba      	ldrh	r2, [r7, #4]
 8001f6c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	2302      	movs	r3, #2
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	480f      	ldr	r0, [pc, #60]	@ (8001fbc <MLX90640_I2CWrite+0x7c>)
 8001f80:	f003 f8ee 	bl	8005160 <HAL_I2C_Mem_Write>
 8001f84:	4603      	mov	r3, r0
 8001f86:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, sizeof(pData), 500);

	if (ack != HAL_OK) {
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <MLX90640_I2CWrite+0x54>
		return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f92:	e00e      	b.n	8001fb2 <MLX90640_I2CWrite+0x72>
	}

	uint16_t dataCheck;
	MLX90640_I2CRead(slaveAddr, writeAddress, 2, &dataCheck);
 8001f94:	f107 030e 	add.w	r3, r7, #14
 8001f98:	88b9      	ldrh	r1, [r7, #4]
 8001f9a:	79f8      	ldrb	r0, [r7, #7]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f7ff ff83 	bl	8001ea8 <MLX90640_I2CRead>
	if (dataCheck != data) return -2;
 8001fa2:	89fb      	ldrh	r3, [r7, #14]
 8001fa4:	887a      	ldrh	r2, [r7, #2]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d002      	beq.n	8001fb0 <MLX90640_I2CWrite+0x70>
 8001faa:	f06f 0301 	mvn.w	r3, #1
 8001fae:	e000      	b.n	8001fb2 <MLX90640_I2CWrite+0x72>

	return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000110 	.word	0x20000110

08001fc0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <MX_ADC1_Init+0xbc>)
 8001fd8:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <MX_ADC1_Init+0xc0>)
 8001fda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fdc:	4b27      	ldr	r3, [pc, #156]	@ (800207c <MX_ADC1_Init+0xbc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <MX_ADC1_Init+0xbc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	@ (800207c <MX_ADC1_Init+0xbc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fee:	4b23      	ldr	r3, [pc, #140]	@ (800207c <MX_ADC1_Init+0xbc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff4:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_ADC1_Init+0xbc>)
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <MX_ADC1_Init+0xbc>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002000:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <MX_ADC1_Init+0xbc>)
 8002002:	2200      	movs	r2, #0
 8002004:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_ADC1_Init+0xbc>)
 8002008:	2201      	movs	r2, #1
 800200a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800200c:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <MX_ADC1_Init+0xbc>)
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002014:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_ADC1_Init+0xbc>)
 8002016:	2200      	movs	r2, #0
 8002018:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <MX_ADC1_Init+0xbc>)
 800201c:	2200      	movs	r2, #0
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002020:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MX_ADC1_Init+0xbc>)
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002028:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_ADC1_Init+0xbc>)
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <MX_ADC1_Init+0xbc>)
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002036:	4811      	ldr	r0, [pc, #68]	@ (800207c <MX_ADC1_Init+0xbc>)
 8002038:	f001 fb68 	bl	800370c <HAL_ADC_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002042:	f000 fbf7 	bl	8002834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002046:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <MX_ADC1_Init+0xc4>)
 8002048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800204a:	2306      	movs	r3, #6
 800204c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002052:	237f      	movs	r3, #127	@ 0x7f
 8002054:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002056:	2304      	movs	r3, #4
 8002058:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	@ (800207c <MX_ADC1_Init+0xbc>)
 8002064:	f001 fdd4 	bl	8003c10 <HAL_ADC_ConfigChannel>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800206e:	f000 fbe1 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000084 	.word	0x20000084
 8002080:	50040000 	.word	0x50040000
 8002084:	19200040 	.word	0x19200040

08002088 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b09e      	sub	sp, #120	@ 0x78
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	2254      	movs	r2, #84	@ 0x54
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f006 f8f3 	bl	8008294 <memset>
  if(adcHandle->Instance==ADC1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a25      	ldr	r2, [pc, #148]	@ (8002148 <HAL_ADC_MspInit+0xc0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d143      	bne.n	8002140 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80020be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80020c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80020cc:	2308      	movs	r3, #8
 80020ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80020d0:	2307      	movs	r3, #7
 80020d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80020dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fc5e 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80020f2:	f000 fb9f 	bl	8002834 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <HAL_ADC_MspInit+0xc4>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a14      	ldr	r2, [pc, #80]	@ (800214c <HAL_ADC_MspInit+0xc4>)
 80020fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_ADC_MspInit+0xc4>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_ADC_MspInit+0xc4>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_ADC_MspInit+0xc4>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <HAL_ADC_MspInit+0xc4>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002126:	2302      	movs	r3, #2
 8002128:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800212a:	230b      	movs	r3, #11
 800212c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213c:	f002 fdda 	bl	8004cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002140:	bf00      	nop
 8002142:	3778      	adds	r7, #120	@ 0x78
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	50040000 	.word	0x50040000
 800214c:	40021000 	.word	0x40021000

08002150 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <MX_CAN1_Init+0x64>)
 8002156:	4a18      	ldr	r2, [pc, #96]	@ (80021b8 <MX_CAN1_Init+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <MX_CAN1_Init+0x64>)
 800215c:	220a      	movs	r2, #10
 800215e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <MX_CAN1_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <MX_CAN1_Init+0x64>)
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <MX_CAN1_Init+0x64>)
 800216e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8002172:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <MX_CAN1_Init+0x64>)
 8002176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800217a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <MX_CAN1_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <MX_CAN1_Init+0x64>)
 8002184:	2200      	movs	r2, #0
 8002186:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <MX_CAN1_Init+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <MX_CAN1_Init+0x64>)
 8002190:	2200      	movs	r2, #0
 8002192:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <MX_CAN1_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <MX_CAN1_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80021a0:	4804      	ldr	r0, [pc, #16]	@ (80021b4 <MX_CAN1_Init+0x64>)
 80021a2:	f002 fa31 	bl	8004608 <HAL_CAN_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80021ac:	f000 fb42 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200000e8 	.word	0x200000e8
 80021b8:	40006400 	.word	0x40006400

080021bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_CAN_MspInit+0xa4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d13b      	bne.n	8002256 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021de:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_CAN_MspInit+0xa8>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_CAN_MspInit+0xa8>)
 80021e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <HAL_CAN_MspInit+0xa8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_CAN_MspInit+0xa8>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_CAN_MspInit+0xa8>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_CAN_MspInit+0xa8>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800220e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002218:	2301      	movs	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002220:	2309      	movs	r3, #9
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800222e:	f002 fd61 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002244:	2309      	movs	r3, #9
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002252:	f002 fd4f 	bl	8004cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	@ 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40006400 	.word	0x40006400
 8002264:	40021000 	.word	0x40021000

08002268 <CANTransmitMinion>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CANTransmitMinion (CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef TXStatusOut = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	77fb      	strb	r3, [r7, #31]
	//	printf("sending ID ");
	//	printf((uint32_t)(header->StdId));
	int i = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
	uint32_t mailbox = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8002280:	e012      	b.n	80022a8 <CANTransmitMinion+0x40>
		while(HAL_CAN_GetTxMailboxesFreeLevel(canport) < 1) {
 8002282:	bf00      	nop
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f002 fb8a 	bl	800499e <HAL_CAN_GetTxMailboxesFreeLevel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f9      	beq.n	8002284 <CANTransmitMinion+0x1c>
					//wait until a new mailbox gets freed up
		//			printf("\n\rwaiting\n\r");
				}
		TXStatusOut = HAL_CAN_AddTxMessage(canport, header, dataArray, &mailbox);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f002 fab0 	bl	80047fe <HAL_CAN_AddTxMessage>
 800229e:	4603      	mov	r3, r0
 80022a0:	77fb      	strb	r3, [r7, #31]

		i++;
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61bb      	str	r3, [r7, #24]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	dc02      	bgt.n	80022b4 <CANTransmitMinion+0x4c>
 80022ae:	7ffb      	ldrb	r3, [r7, #31]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e6      	bne.n	8002282 <CANTransmitMinion+0x1a>
	}

	if (TXStatusOut != HAL_OK) {
 80022b4:	7ffb      	ldrb	r3, [r7, #31]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <CANTransmitMinion+0x56>
		mailbox = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]

	}
	//	printf("\n\r");
	return TXStatusOut;
 80022be:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <clearEflagsHelper>:

void clearEflagsHelper(CORNER_CAN_CONTEXT *CANCONTEXT) {
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	CANCONTEXT->misc_dataframe.data.eflags.ADCErrorBit = 0;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.BrakeTempErrorBit = 0;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80022e4:	f023 0302 	bic.w	r3, r3, #2
 80022e8:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = 0;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80022f2:	f023 0308 	bic.w	r3, r3, #8
 80022f6:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = 0;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = 0;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800230e:	f023 0310 	bic.w	r3, r3, #16
 8002312:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = 0;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800231c:	f023 0320 	bic.w	r3, r3, #32
 8002320:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = 0;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800232a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800232e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = 0;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800233c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b

}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <CANMailman>:

void CANMailman(CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, CORNER_CAN_CONTEXT *CANCONTEXT) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	clearEflagsHelper(CANCONTEXT);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ffb5 	bl	80022c8 <clearEflagsHelper>
	HAL_StatusTypeDef txstatus;
	/*** BEGIN SEND MISC MESSAGE (btemp, whs, board temp, error flags, shock travel) */

	if (HAL_GetTick() - CANCONTEXT->ms_since_miscmsg_broadcast > MISC_DATA_TRANSMISSION_PERIOD) {
 800235e:	f001 f801 	bl	8003364 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b15      	cmp	r3, #21
 800236c:	d91b      	bls.n	80023a6 <CANMailman+0x5a>
		header->StdId = MISC_DATA_ID;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f240 7215 	movw	r2, #1813	@ 0x715
 8002374:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion(canport, header, CANCONTEXT->misc_dataframe.array);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3334      	adds	r3, #52	@ 0x34
 800237a:	461a      	mov	r2, r3
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff ff72 	bl	8002268 <CANTransmitMinion>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <CANMailman+0x50>
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = true;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_miscmsg_broadcast = HAL_GetTick();
 800239c:	f000 ffe2 	bl	8003364 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	631a      	str	r2, [r3, #48]	@ 0x30




	/**** BEGIN SEND STRAIN GAUGE DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_strain_broadcast > STRAIN_GAUGE_TRANSMISSION_PERIOD) {
 80023a6:	f000 ffdd 	bl	8003364 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d91b      	bls.n	80023ee <CANMailman+0xa2>
		header->StdId = STRAIN_GAUGE_ID;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 80023bc:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->straingauge_dataframe.array);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	461a      	mov	r2, r3
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff ff4e 	bl	8002268 <CANTransmitMinion>
 80023cc:	4603      	mov	r3, r0
 80023ce:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <CANMailman+0x98>
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = true;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_strain_broadcast = HAL_GetTick();
 80023e4:	f000 ffbe 	bl	8003364 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
	/**** END SEND STRAIN GAUGE DATA ****/



	/**** BEGIN SEND TIRE TEMP DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_ttemp_broadcast > TIRE_TEMP_TRANSMISSION_PERIOD) {
 80023ee:	f000 ffb9 	bl	8003364 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80023fe:	d360      	bcc.n	80024c2 <CANMailman+0x176>
		//		CTXHeader.IDE = CAN_ID_STD;
		//		CTXHeader.RTR = CAN_RTR_DATA;
		//		CTXHeader.DLC = 8;
		//		ms_since_ttemp_broadcast = HAL_GetTick();

		header->StdId = TIRE_TEMP_MSG1_ID;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f240 7211 	movw	r2, #1809	@ 0x711
 8002406:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[0].array);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3310      	adds	r3, #16
 800240c:	461a      	mov	r2, r3
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f7ff ff29 	bl	8002268 <CANTransmitMinion>
 8002416:	4603      	mov	r3, r0
 8002418:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <CANMailman+0xe2>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = true;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG2_ID;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f240 7212 	movw	r2, #1810	@ 0x712
 8002434:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[1].array);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3318      	adds	r3, #24
 800243a:	461a      	mov	r2, r3
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff ff12 	bl	8002268 <CANTransmitMinion>
 8002444:	4603      	mov	r3, r0
 8002446:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <CANMailman+0x110>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = true;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG3_ID;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f240 7213 	movw	r2, #1811	@ 0x713
 8002462:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[2].array);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3320      	adds	r3, #32
 8002468:	461a      	mov	r2, r3
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff fefb 	bl	8002268 <CANTransmitMinion>
 8002472:	4603      	mov	r3, r0
 8002474:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <CANMailman+0x13e>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = true;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002486:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG4_ID;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f240 7214 	movw	r2, #1812	@ 0x714
 8002490:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[3].array);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3328      	adds	r3, #40	@ 0x28
 8002496:	461a      	mov	r2, r3
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7ff fee4 	bl	8002268 <CANTransmitMinion>
 80024a0:	4603      	mov	r3, r0
 80024a2:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <CANMailman+0x16c>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = true;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80024b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b4:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_ttemp_broadcast = HAL_GetTick();
 80024b8:	f000 ff54 	bl	8003364 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60da      	str	r2, [r3, #12]
	}

	/**** END SEND TIRE TEMP DATA ****/
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
 80024e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <MX_GPIO_Init+0xc0>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	4a29      	ldr	r2, [pc, #164]	@ (800258c <MX_GPIO_Init+0xc0>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ee:	4b27      	ldr	r3, [pc, #156]	@ (800258c <MX_GPIO_Init+0xc0>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b24      	ldr	r3, [pc, #144]	@ (800258c <MX_GPIO_Init+0xc0>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fe:	4a23      	ldr	r2, [pc, #140]	@ (800258c <MX_GPIO_Init+0xc0>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002506:	4b21      	ldr	r3, [pc, #132]	@ (800258c <MX_GPIO_Init+0xc0>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <MX_GPIO_Init+0xc0>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <MX_GPIO_Init+0xc0>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800251e:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <MX_GPIO_Init+0xc0>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_FAULT_GPIO_Port, GEN_FAULT_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	2101      	movs	r1, #1
 800252e:	4818      	ldr	r0, [pc, #96]	@ (8002590 <MX_GPIO_Init+0xc4>)
 8002530:	f002 fd62 	bl	8004ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002534:	2308      	movs	r3, #8
 8002536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	4619      	mov	r1, r3
 8002546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254a:	f002 fbd3 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_FAULT_Pin */
  GPIO_InitStruct.Pin = GEN_FAULT_Pin;
 800254e:	2301      	movs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2301      	movs	r3, #1
 8002554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEN_FAULT_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	4619      	mov	r1, r3
 8002564:	480a      	ldr	r0, [pc, #40]	@ (8002590 <MX_GPIO_Init+0xc4>)
 8002566:	f002 fbc5 	bl	8004cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 800256a:	2310      	movs	r3, #16
 800256c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	4619      	mov	r1, r3
 800257c:	4804      	ldr	r0, [pc, #16]	@ (8002590 <MX_GPIO_Init+0xc4>)
 800257e:	f002 fbb9 	bl	8004cf4 <HAL_GPIO_Init>

}
 8002582:	bf00      	nop
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	48000400 	.word	0x48000400

08002594 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <MX_I2C1_Init+0x74>)
 800259a:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <MX_I2C1_Init+0x78>)
 800259c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 800259e:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002610 <MX_I2C1_Init+0x7c>)
 80025a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b0:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025bc:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025ce:	480e      	ldr	r0, [pc, #56]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025d0:	f002 fd2a 	bl	8005028 <HAL_I2C_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025da:	f000 f92b 	bl	8002834 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025de:	2100      	movs	r1, #0
 80025e0:	4809      	ldr	r0, [pc, #36]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025e2:	f003 faad 	bl	8005b40 <HAL_I2CEx_ConfigAnalogFilter>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025ec:	f000 f922 	bl	8002834 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025f0:	2100      	movs	r1, #0
 80025f2:	4805      	ldr	r0, [pc, #20]	@ (8002608 <MX_I2C1_Init+0x74>)
 80025f4:	f003 faef 	bl	8005bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025fe:	f000 f919 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000110 	.word	0x20000110
 800260c:	40005400 	.word	0x40005400
 8002610:	00f12981 	.word	0x00f12981

08002614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b09e      	sub	sp, #120	@ 0x78
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	2254      	movs	r2, #84	@ 0x54
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f005 fe2d 	bl	8008294 <memset>
  if(i2cHandle->Instance==I2C1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1e      	ldr	r2, [pc, #120]	@ (80026b8 <HAL_I2C_MspInit+0xa4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d135      	bne.n	80026b0 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002644:	2340      	movs	r3, #64	@ 0x40
 8002646:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002648:	2300      	movs	r3, #0
 800264a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4618      	mov	r0, r3
 8002652:	f004 f9a9 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800265c:	f000 f8ea 	bl	8002834 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002660:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <HAL_I2C_MspInit+0xa8>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002664:	4a15      	ldr	r2, [pc, #84]	@ (80026bc <HAL_I2C_MspInit+0xa8>)
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266c:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <HAL_I2C_MspInit+0xa8>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002678:	23c0      	movs	r3, #192	@ 0xc0
 800267a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800267c:	2312      	movs	r3, #18
 800267e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002680:	2301      	movs	r3, #1
 8002682:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002688:	2304      	movs	r3, #4
 800268a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002690:	4619      	mov	r1, r3
 8002692:	480b      	ldr	r0, [pc, #44]	@ (80026c0 <HAL_I2C_MspInit+0xac>)
 8002694:	f002 fb2e 	bl	8004cf4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_I2C_MspInit+0xa8>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	4a07      	ldr	r2, [pc, #28]	@ (80026bc <HAL_I2C_MspInit+0xa8>)
 800269e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_I2C_MspInit+0xa8>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026b0:	bf00      	nop
 80026b2:	3778      	adds	r7, #120	@ 0x78
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40005400 	.word	0x40005400
 80026bc:	40021000 	.word	0x40021000
 80026c0:	48000400 	.word	0x48000400

080026c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026c8:	f000 fde3 	bl	8003292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026cc:	f000 f84e 	bl	800276c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026d0:	f7ff fefc 	bl	80024cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80026d4:	f7ff fc74 	bl	8001fc0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80026d8:	f000 fc0c 	bl	8002ef4 <MX_TIM1_Init>
  MX_CAN1_Init();
 80026dc:	f7ff fd38 	bl	8002150 <MX_CAN1_Init>
  MX_I2C1_Init();
 80026e0:	f7ff ff58 	bl	8002594 <MX_I2C1_Init>
  MX_SPI1_Init();
 80026e4:	f000 fa7e 	bl	8002be4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80026e8:	f000 fc78 	bl	8002fdc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80026ec:	f000 fca8 	bl	8003040 <MX_USART2_UART_Init>
		//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

		//		spamCan();

		//read the sensors
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 80026f0:	4a10      	ldr	r2, [pc, #64]	@ (8002734 <main+0x70>)
 80026f2:	4911      	ldr	r1, [pc, #68]	@ (8002738 <main+0x74>)
 80026f4:	4811      	ldr	r0, [pc, #68]	@ (800273c <main+0x78>)
 80026f6:	f000 f8e3 	bl	80028c0 <readLinearPotentiometer>
		readBrakeTemp(&ms_since_btemp_read, &(CANCONTEXT.misc_dataframe));
 80026fa:	490e      	ldr	r1, [pc, #56]	@ (8002734 <main+0x70>)
 80026fc:	4810      	ldr	r0, [pc, #64]	@ (8002740 <main+0x7c>)
 80026fe:	f000 f90c 	bl	800291a <readBrakeTemp>
		readTireTemp(&ms_since_ttemp_read, (CANCONTEXT.ttemp_dataframes));
 8002702:	4910      	ldr	r1, [pc, #64]	@ (8002744 <main+0x80>)
 8002704:	4810      	ldr	r0, [pc, #64]	@ (8002748 <main+0x84>)
 8002706:	f000 f921 	bl	800294c <readTireTemp>
		readStrainGauges(&hspi1, &ms_since_strain_read, &(CANCONTEXT.straingauge_dataframe));
 800270a:	4a10      	ldr	r2, [pc, #64]	@ (800274c <main+0x88>)
 800270c:	4910      	ldr	r1, [pc, #64]	@ (8002750 <main+0x8c>)
 800270e:	4811      	ldr	r0, [pc, #68]	@ (8002754 <main+0x90>)
 8002710:	f000 f9b0 	bl	8002a74 <readStrainGauges>
		readWheelSpeed(&ms_since_whs_read, &(CANCONTEXT.misc_dataframe));
 8002714:	4907      	ldr	r1, [pc, #28]	@ (8002734 <main+0x70>)
 8002716:	4810      	ldr	r0, [pc, #64]	@ (8002758 <main+0x94>)
 8002718:	f000 f9d0 	bl	8002abc <readWheelSpeed>
		readBoardTemp(&hspi1, &ms_since_boardtemp_read, &(CANCONTEXT.misc_dataframe));
 800271c:	4a05      	ldr	r2, [pc, #20]	@ (8002734 <main+0x70>)
 800271e:	490f      	ldr	r1, [pc, #60]	@ (800275c <main+0x98>)
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <main+0x90>)
 8002722:	f000 fa45 	bl	8002bb0 <readBoardTemp>


		//send out the sensors
		CANMailman(&hcan1, &CTXHeader, &CANCONTEXT);
 8002726:	4a0e      	ldr	r2, [pc, #56]	@ (8002760 <main+0x9c>)
 8002728:	490e      	ldr	r1, [pc, #56]	@ (8002764 <main+0xa0>)
 800272a:	480f      	ldr	r0, [pc, #60]	@ (8002768 <main+0xa4>)
 800272c:	f7ff fe0e 	bl	800234c <CANMailman>
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8002730:	bf00      	nop
 8002732:	e7dd      	b.n	80026f0 <main+0x2c>
 8002734:	20000198 	.word	0x20000198
 8002738:	200001a0 	.word	0x200001a0
 800273c:	20000084 	.word	0x20000084
 8002740:	200001ac 	.word	0x200001ac
 8002744:	20000174 	.word	0x20000174
 8002748:	200001a8 	.word	0x200001a8
 800274c:	20000168 	.word	0x20000168
 8002750:	200001a4 	.word	0x200001a4
 8002754:	200026f0 	.word	0x200026f0
 8002758:	200001b0 	.word	0x200001b0
 800275c:	200001b4 	.word	0x200001b4
 8002760:	20000164 	.word	0x20000164
 8002764:	200001b8 	.word	0x200001b8
 8002768:	200000e8 	.word	0x200000e8

0800276c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b096      	sub	sp, #88	@ 0x58
 8002770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	2244      	movs	r2, #68	@ 0x44
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f005 fd8a 	bl	8008294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002780:	463b      	mov	r3, r7
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800278e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002792:	f003 fa7b 	bl	8005c8c <HAL_PWREx_ControlVoltageScaling>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800279c:	f000 f84a 	bl	8002834 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a0:	2302      	movs	r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027aa:	2310      	movs	r3, #16
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ae:	2302      	movs	r3, #2
 80027b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027b2:	2302      	movs	r3, #2
 80027b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80027ba:	230a      	movs	r3, #10
 80027bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027be:	2307      	movs	r3, #7
 80027c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027c2:	2302      	movs	r3, #2
 80027c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027c6:	2302      	movs	r3, #2
 80027c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fab2 	bl	8005d38 <HAL_RCC_OscConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80027da:	f000 f82b 	bl	8002834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027de:	230f      	movs	r3, #15
 80027e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e2:	2303      	movs	r3, #3
 80027e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027f2:	463b      	mov	r3, r7
 80027f4:	2104      	movs	r1, #4
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 feb2 	bl	8006560 <HAL_RCC_ClockConfig>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002802:	f000 f817 	bl	8002834 <Error_Handler>
  }
}
 8002806:	bf00      	nop
 8002808:	3758      	adds	r7, #88	@ 0x58
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the LPUART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002818:	1d39      	adds	r1, r7, #4
 800281a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800281e:	2201      	movs	r2, #1
 8002820:	4803      	ldr	r0, [pc, #12]	@ (8002830 <__io_putchar+0x20>)
 8002822:	f004 ff2b 	bl	800767c <HAL_UART_Transmit>

	return ch;
 8002826:	687b      	ldr	r3, [r7, #4]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2000282c 	.word	0x2000282c

08002834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <Error_Handler+0x8>

08002840 <computeMLXSample>:

	if (status == -1) return 0;
	return 1;
}

void computeMLXSample() {
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
	int startIndex = 384;
 8002846:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800284a:	60bb      	str	r3, [r7, #8]
	for (int k = 0; k < 32; k++) {
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e021      	b.n	8002896 <computeMLXSample+0x56>
		MLX_sample[k] = (uint8_t)(255.0f * (MLX_to[startIndex+k] + 40.0f) / 340.0f);
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <computeMLXSample+0x6c>)
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80028b0 <computeMLXSample+0x70>
 8002866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800286a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80028b4 <computeMLXSample+0x74>
 800286e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002872:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80028b8 <computeMLXSample+0x78>
 8002876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800287a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002882:	793b      	ldrb	r3, [r7, #4]
 8002884:	b2d9      	uxtb	r1, r3
 8002886:	4a0d      	ldr	r2, [pc, #52]	@ (80028bc <computeMLXSample+0x7c>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	460a      	mov	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < 32; k++) {
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3301      	adds	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b1f      	cmp	r3, #31
 800289a:	ddda      	ble.n	8002852 <computeMLXSample+0x12>
	}
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20001ad0 	.word	0x20001ad0
 80028b0:	42200000 	.word	0x42200000
 80028b4:	437f0000 	.word	0x437f0000
 80028b8:	43aa0000 	.word	0x43aa0000
 80028bc:	200026d0 	.word	0x200026d0

080028c0 <readLinearPotentiometer>:

void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS,  MISC_DATAFRAME *dataframe) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	uint32_t ADC_Read[1];
	uint32_t ADC_BUFFER = 1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]

	HAL_ADC_PollForConversion(hadc, 100);
 80028d0:	2164      	movs	r1, #100	@ 0x64
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f001 f85c 	bl	8003990 <HAL_ADC_PollForConversion>
	ADC_Read[0] = HAL_ADC_GetValue(hadc);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f001 f96d 	bl	8003bb8 <HAL_ADC_GetValue>
 80028de:	4603      	mov	r3, r0
 80028e0:	613b      	str	r3, [r7, #16]

	HAL_ADC_Start_DMA(hadc, ADC_Read, ADC_BUFFER);
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4619      	mov	r1, r3
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f001 f8e0 	bl	8003ab0 <HAL_ADC_Start_DMA>
	if( HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD){
 80028f0:	f000 fd38 	bl	8003364 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b15      	cmp	r3, #21
 80028fe:	d908      	bls.n	8002912 <readLinearPotentiometer+0x52>
		dataframe->data.shockTravel = ADC_Read[0];
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	809a      	strh	r2, [r3, #4]

		*lastReadMS = HAL_GetTick();
 8002908:	f000 fd2c 	bl	8003364 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	601a      	str	r2, [r3, #0]
	}

	//todo: convert counts to travel
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <readBrakeTemp>:

void readBrakeTemp(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > BRAKE_TEMP_SAMPLE_PERIOD){
 8002924:	f000 fd1e 	bl	8003364 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b65      	cmp	r3, #101	@ 0x65
 8002932:	d907      	bls.n	8002944 <readBrakeTemp+0x2a>
		dataframe->data.brakeTemp = 0;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	805a      	strh	r2, [r3, #2]
		//todo: actual brake temp sensor read code
		*lastReadMS = HAL_GetTick();
 800293a:	f000 fd13 	bl	8003364 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	601a      	str	r2, [r3, #0]
	}

	//todo: convert to deg C
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <readTireTemp>:

void readTireTemp(uint32_t *lastReadMS, TTEMP_DATAFRAME *dataframes) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	if (HAL_GetTick() - *lastReadMS > TIRE_TEMP_SAMPLE_PERIOD) {
 8002956:	f000 fd05 	bl	8003364 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8002966:	d377      	bcc.n	8002a58 <readTireTemp+0x10c>

		MLX90640_GetFrameData(MLX_ADDR, MLX_dataFrame);
 8002968:	493d      	ldr	r1, [pc, #244]	@ (8002a60 <readTireTemp+0x114>)
 800296a:	2033      	movs	r0, #51	@ 0x33
 800296c:	f7fe fafa 	bl	8000f64 <MLX90640_GetFrameData>
		float tr = MLX90640_GetTa(MLX_dataFrame, &MLX_params) - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8002970:	493c      	ldr	r1, [pc, #240]	@ (8002a64 <readTireTemp+0x118>)
 8002972:	483b      	ldr	r0, [pc, #236]	@ (8002a60 <readTireTemp+0x114>)
 8002974:	f7ff fa04 	bl	8001d80 <MLX90640_GetTa>
 8002978:	eef0 7a40 	vmov.f32	s15, s0
 800297c:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002984:	edc7 7a02 	vstr	s15, [r7, #8]
		MLX90640_CalculateTo(MLX_dataFrame, &MLX_params, EMISSIVITY, tr, MLX_to);
 8002988:	4a37      	ldr	r2, [pc, #220]	@ (8002a68 <readTireTemp+0x11c>)
 800298a:	edd7 0a02 	vldr	s1, [r7, #8]
 800298e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8002a6c <readTireTemp+0x120>
 8002992:	4934      	ldr	r1, [pc, #208]	@ (8002a64 <readTireTemp+0x118>)
 8002994:	4832      	ldr	r0, [pc, #200]	@ (8002a60 <readTireTemp+0x114>)
 8002996:	f7fe fc63 	bl	8001260 <MLX90640_CalculateTo>
		computeMLXSample();
 800299a:	f7ff ff51 	bl	8002840 <computeMLXSample>

		for (int i = 0; i < 4; i++) {
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e051      	b.n	8002a48 <readTireTemp+0xfc>
			dataframes[i].data.pix0 = MLX_sample[0 + 8*i];
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	00da      	lsls	r2, r3, #3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	440b      	add	r3, r1
 80029b0:	492f      	ldr	r1, [pc, #188]	@ (8002a70 <readTireTemp+0x124>)
 80029b2:	5c8a      	ldrb	r2, [r1, r2]
 80029b4:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix0 = MLX_sample[1 + 8*i];
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	440b      	add	r3, r1
 80029c4:	492a      	ldr	r1, [pc, #168]	@ (8002a70 <readTireTemp+0x124>)
 80029c6:	5c8a      	ldrb	r2, [r1, r2]
 80029c8:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix1 = MLX_sample[2 + 8*i];
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	1c9a      	adds	r2, r3, #2
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	440b      	add	r3, r1
 80029d8:	4925      	ldr	r1, [pc, #148]	@ (8002a70 <readTireTemp+0x124>)
 80029da:	5c8a      	ldrb	r2, [r1, r2]
 80029dc:	705a      	strb	r2, [r3, #1]
			dataframes[i].data.pix2 = MLX_sample[3 + 8*i];
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	1cda      	adds	r2, r3, #3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	440b      	add	r3, r1
 80029ec:	4920      	ldr	r1, [pc, #128]	@ (8002a70 <readTireTemp+0x124>)
 80029ee:	5c8a      	ldrb	r2, [r1, r2]
 80029f0:	709a      	strb	r2, [r3, #2]
			dataframes[i].data.pix3 = MLX_sample[4 + 8*i];
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1d1a      	adds	r2, r3, #4
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	440b      	add	r3, r1
 8002a00:	491b      	ldr	r1, [pc, #108]	@ (8002a70 <readTireTemp+0x124>)
 8002a02:	5c8a      	ldrb	r2, [r1, r2]
 8002a04:	70da      	strb	r2, [r3, #3]
			dataframes[i].data.pix4 = MLX_sample[5 + 8*i];
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1d5a      	adds	r2, r3, #5
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	440b      	add	r3, r1
 8002a14:	4916      	ldr	r1, [pc, #88]	@ (8002a70 <readTireTemp+0x124>)
 8002a16:	5c8a      	ldrb	r2, [r1, r2]
 8002a18:	711a      	strb	r2, [r3, #4]
			dataframes[i].data.pix5 = MLX_sample[6 + 8*i];
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	1d9a      	adds	r2, r3, #6
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	440b      	add	r3, r1
 8002a28:	4911      	ldr	r1, [pc, #68]	@ (8002a70 <readTireTemp+0x124>)
 8002a2a:	5c8a      	ldrb	r2, [r1, r2]
 8002a2c:	715a      	strb	r2, [r3, #5]
			dataframes[i].data.pix6 = MLX_sample[7 + 8*i];
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	1dda      	adds	r2, r3, #7
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	440b      	add	r3, r1
 8002a3c:	490c      	ldr	r1, [pc, #48]	@ (8002a70 <readTireTemp+0x124>)
 8002a3e:	5c8a      	ldrb	r2, [r1, r2]
 8002a40:	719a      	strb	r2, [r3, #6]
		for (int i = 0; i < 4; i++) {
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	ddaa      	ble.n	80029a4 <readTireTemp+0x58>
		}

		*lastReadMS = HAL_GetTick();
 8002a4e:	f000 fc89 	bl	8003364 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]

	}
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000144c 	.word	0x2000144c
 8002a64:	200001d0 	.word	0x200001d0
 8002a68:	20001ad0 	.word	0x20001ad0
 8002a6c:	3f733333 	.word	0x3f733333
 8002a70:	200026d0 	.word	0x200026d0

08002a74 <readStrainGauges>:

void readStrainGauges(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, SG_DATAFRAME *dataframe) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]


	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8002a80:	f000 fc70 	bl	8003364 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d910      	bls.n	8002ab2 <readStrainGauges+0x3e>
		dataframe->data.SG0 = 0;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	801a      	strh	r2, [r3, #0]
		dataframe->data.SG1 = 0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	805a      	strh	r2, [r3, #2]
		dataframe->data.SG2 = 0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	809a      	strh	r2, [r3, #4]
		dataframe->data.SG3 = 0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	80da      	strh	r2, [r3, #6]

		//todo: actual strain gauge sensor read code
		//todo: convert counts to newtons
		*lastReadMS = HAL_GetTick();
 8002aa8:	f000 fc5c 	bl	8003364 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	601a      	str	r2, [r3, #0]
	}
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <readWheelSpeed>:

void readWheelSpeed(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > WHEEL_SPEED_SAMPLE_PERIOD){
 8002ac6:	f000 fc4d 	bl	8003364 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b0b      	cmp	r3, #11
 8002ad4:	d960      	bls.n	8002b98 <readWheelSpeed+0xdc>

		uint8_t prevWHSLogicLevel = GPIO_PIN_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]




		uint8_t edges = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75bb      	strb	r3, [r7, #22]
		uint8_t readBeginMS = HAL_GetTick(); //possilbly a good idea to lower tick period to like 10us or sth
 8002ade:	f000 fc41 	bl	8003364 <HAL_GetTick>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e015      	b.n	8002b18 <readWheelSpeed+0x5c>

			/* if whs pin is logic high and prev_whs_logic_level is opposite, add one to edges */

			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != prevWHSLogicLevel) {
 8002aec:	2110      	movs	r1, #16
 8002aee:	482c      	ldr	r0, [pc, #176]	@ (8002ba0 <readWheelSpeed+0xe4>)
 8002af0:	f002 fa6a 	bl	8004fc8 <HAL_GPIO_ReadPin>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <readWheelSpeed+0x56>
				edges++;
 8002afe:	7dbb      	ldrb	r3, [r7, #22]
 8002b00:	3301      	adds	r3, #1
 8002b02:	75bb      	strb	r3, [r7, #22]
				prevWHSLogicLevel = !prevWHSLogicLevel;
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf0c      	ite	eq
 8002b0a:	2301      	moveq	r3, #1
 8002b0c:	2300      	movne	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	3301      	adds	r3, #1
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b1e:	dbe5      	blt.n	8002aec <readWheelSpeed+0x30>
			}
		}

		uint8_t readEndMS = HAL_GetTick();
 8002b20:	f000 fc20 	bl	8003364 <HAL_GetTick>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73bb      	strb	r3, [r7, #14]
		//convert to rpm
		/*
		 * edges/msec * 1/(edges/rotation) * msec/sec = rotations/msec
		 * 1/(edges/rotation) * msec/sec = 1/24 * 1/1000 =
		 */
		dataframe->data.wheelRPM = ( ((float)(edges)) / ((float)(readEndMS)-(float)(readBeginMS)) ) * (float)(1/24000);
 8002b28:	7dbb      	ldrb	r3, [r7, #22]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b32:	7bbb      	ldrb	r3, [r7, #14]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b4e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002ba4 <readWheelSpeed+0xe8>
 8002b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5a:	ee17 3a90 	vmov	r3, s15
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	801a      	strh	r2, [r3, #0]
		printf("%d", (int) (dataframe->data.wheelRPM*1000.0));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fcd3 	bl	8000514 <__aeabi_i2d>
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <readWheelSpeed+0xec>)
 8002b74:	f7fd fd38 	bl	80005e8 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fd ffe2 	bl	8000b48 <__aeabi_d2iz>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4619      	mov	r1, r3
 8002b88:	4808      	ldr	r0, [pc, #32]	@ (8002bac <readWheelSpeed+0xf0>)
 8002b8a:	f005 fb71 	bl	8008270 <iprintf>


		*lastReadMS = HAL_GetTick();
 8002b8e:	f000 fbe9 	bl	8003364 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	601a      	str	r2, [r3, #0]
	}
}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	48000400 	.word	0x48000400
 8002ba4:	00000000 	.word	0x00000000
 8002ba8:	408f4000 	.word	0x408f4000
 8002bac:	08009eb4 	.word	0x08009eb4

08002bb0 <readBoardTemp>:

void readBoardTemp(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8002bbc:	f000 fbd2 	bl	8003364 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d907      	bls.n	8002bdc <readBoardTemp+0x2c>
		dataframe->data.boardTemp = 0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	719a      	strb	r2, [r3, #6]


		//todo: use ads1118, same chip as the shits, to read board temp
		//todo: convert counts to deg.C
		*lastReadMS = HAL_GetTick();
 8002bd2:	f000 fbc7 	bl	8003364 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	601a      	str	r2, [r3, #0]
	}
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bea:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <MX_SPI1_Init+0x78>)
 8002bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bee:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bf0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bfe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c12:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002c16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c1a:	2228      	movs	r2, #40	@ 0x28
 8002c1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c32:	2207      	movs	r2, #7
 8002c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c3e:	2208      	movs	r2, #8
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c44:	f004 f998 	bl	8006f78 <HAL_SPI_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c4e:	f7ff fdf1 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200026f0 	.word	0x200026f0
 8002c5c:	40013000 	.word	0x40013000

08002c60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	@ 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	@ (8002cdc <HAL_SPI_MspInit+0x7c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d128      	bne.n	8002cd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c82:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <HAL_SPI_MspInit+0x80>)
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	4a16      	ldr	r2, [pc, #88]	@ (8002ce0 <HAL_SPI_MspInit+0x80>)
 8002c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <HAL_SPI_MspInit+0x80>)
 8002c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <HAL_SPI_MspInit+0x80>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ce0 <HAL_SPI_MspInit+0x80>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <HAL_SPI_MspInit+0x80>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cb2:	23f0      	movs	r3, #240	@ 0xf0
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cd0:	f002 f810 	bl	8004cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3728      	adds	r7, #40	@ 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40013000 	.word	0x40013000
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <HAL_MspInit+0x44>)
 8002cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cee:	4a0e      	ldr	r2, [pc, #56]	@ (8002d28 <HAL_MspInit+0x44>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <HAL_MspInit+0x44>)
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_MspInit+0x44>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <HAL_MspInit+0x44>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_MspInit+0x44>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000

08002d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <NMI_Handler+0x4>

08002d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <HardFault_Handler+0x4>

08002d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <MemManage_Handler+0x4>

08002d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <BusFault_Handler+0x4>

08002d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <UsageFault_Handler+0x4>

08002d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d82:	f000 fadb 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e00a      	b.n	8002db2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d9c:	f3af 8000 	nop.w
 8002da0:	4601      	mov	r1, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	b2ca      	uxtb	r2, r1
 8002daa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	dbf0      	blt.n	8002d9c <_read+0x12>
  }

  return len;
 8002dba:	687b      	ldr	r3, [r7, #4]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e009      	b.n	8002dea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	60ba      	str	r2, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fd16 	bl	8002810 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3301      	adds	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	dbf1      	blt.n	8002dd6 <_write+0x12>
  }
  return len;
 8002df2:	687b      	ldr	r3, [r7, #4]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_close>:

int _close(int file)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e24:	605a      	str	r2, [r3, #4]
  return 0;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_isatty>:

int _isatty(int file)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e3c:	2301      	movs	r3, #1
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e6c:	4a14      	ldr	r2, [pc, #80]	@ (8002ec0 <_sbrk+0x5c>)
 8002e6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <_sbrk+0x60>)
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e78:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <_sbrk+0x64>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e80:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <_sbrk+0x64>)
 8002e82:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <_sbrk+0x68>)
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e86:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d207      	bcs.n	8002ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e94:	f005 fa06 	bl	80082a4 <__errno>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ea2:	e009      	b.n	8002eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4a05      	ldr	r2, [pc, #20]	@ (8002ec8 <_sbrk+0x64>)
 8002eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000c000 	.word	0x2000c000
 8002ec4:	00000400 	.word	0x00000400
 8002ec8:	20002754 	.word	0x20002754
 8002ecc:	20002a08 	.word	0x20002a08

08002ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <SystemInit+0x20>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <SystemInit+0x20>)
 8002edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f12:	4b20      	ldr	r3, [pc, #128]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f14:	4a20      	ldr	r2, [pc, #128]	@ (8002f98 <MX_TIM1_Init+0xa4>)
 8002f16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8002f18:	4b1e      	ldr	r3, [pc, #120]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f32:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f38:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f3e:	4815      	ldr	r0, [pc, #84]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f40:	f004 f8bd 	bl	80070be <HAL_TIM_Base_Init>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002f4a:	f7ff fc73 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	4619      	mov	r1, r3
 8002f5a:	480e      	ldr	r0, [pc, #56]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f5c:	f004 f906 	bl	800716c <HAL_TIM_ConfigClockSource>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002f66:	f7ff fc65 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4806      	ldr	r0, [pc, #24]	@ (8002f94 <MX_TIM1_Init+0xa0>)
 8002f7c:	f004 faca 	bl	8007514 <HAL_TIMEx_MasterConfigSynchronization>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f86:	f7ff fc55 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f8a:	bf00      	nop
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20002758 	.word	0x20002758
 8002f98:	40012c00 	.word	0x40012c00

08002f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <HAL_TIM_Base_MspInit+0x38>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10b      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb2:	4a09      	ldr	r2, [pc, #36]	@ (8002fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8002fb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fba:	4b07      	ldr	r3, [pc, #28]	@ (8002fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40021000 	.word	0x40021000

08002fdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8002fe2:	4a16      	ldr	r2, [pc, #88]	@ (800303c <MX_USART1_UART_Init+0x60>)
 8002fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8002fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fee:	4b12      	ldr	r3, [pc, #72]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003000:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8003002:	220c      	movs	r2, #12
 8003004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003006:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800300c:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003018:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 800301a:	2200      	movs	r2, #0
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800301e:	2300      	movs	r3, #0
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	4804      	ldr	r0, [pc, #16]	@ (8003038 <MX_USART1_UART_Init+0x5c>)
 8003026:	f004 fffa 	bl	800801e <HAL_RS485Ex_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003030:	f7ff fc00 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	200027a4 	.word	0x200027a4
 800303c:	40013800 	.word	0x40013800

08003040 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003044:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 8003046:	4a15      	ldr	r2, [pc, #84]	@ (800309c <MX_USART2_UART_Init+0x5c>)
 8003048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 800304c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003058:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800305a:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003060:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 8003068:	220c      	movs	r2, #12
 800306a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003078:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 800307a:	2200      	movs	r2, #0
 800307c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003084:	4804      	ldr	r0, [pc, #16]	@ (8003098 <MX_USART2_UART_Init+0x58>)
 8003086:	f004 faab 	bl	80075e0 <HAL_UART_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8003090:	f7ff fbd0 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}
 8003098:	2000282c 	.word	0x2000282c
 800309c:	40004400 	.word	0x40004400

080030a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b0a2      	sub	sp, #136	@ 0x88
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030b8:	f107 0320 	add.w	r3, r7, #32
 80030bc:	2254      	movs	r2, #84	@ 0x54
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 f8e7 	bl	8008294 <memset>
  if(uartHandle->Instance==USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a59      	ldr	r2, [pc, #356]	@ (8003230 <HAL_UART_MspInit+0x190>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d158      	bne.n	8003182 <HAL_UART_MspInit+0xe2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030d0:	2301      	movs	r3, #1
 80030d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030d4:	2300      	movs	r3, #0
 80030d6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030d8:	f107 0320 	add.w	r3, r7, #32
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fc63 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030e8:	f7ff fba4 	bl	8002834 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ec:	4b51      	ldr	r3, [pc, #324]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80030ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f0:	4a50      	ldr	r2, [pc, #320]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80030f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80030f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003104:	4b4b      	ldr	r3, [pc, #300]	@ (8003234 <HAL_UART_MspInit+0x194>)
 8003106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003108:	4a4a      	ldr	r2, [pc, #296]	@ (8003234 <HAL_UART_MspInit+0x194>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003110:	4b48      	ldr	r3, [pc, #288]	@ (8003234 <HAL_UART_MspInit+0x194>)
 8003112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311c:	4b45      	ldr	r3, [pc, #276]	@ (8003234 <HAL_UART_MspInit+0x194>)
 800311e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003120:	4a44      	ldr	r2, [pc, #272]	@ (8003234 <HAL_UART_MspInit+0x194>)
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003128:	4b42      	ldr	r3, [pc, #264]	@ (8003234 <HAL_UART_MspInit+0x194>)
 800312a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB3 (JTDO-TRACESWO)     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003134:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003138:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003148:	2307      	movs	r3, #7
 800314a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003152:	4619      	mov	r1, r3
 8003154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003158:	f001 fdcc 	bl	8004cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800315c:	2308      	movs	r3, #8
 800315e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003168:	2303      	movs	r3, #3
 800316a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800316e:	2307      	movs	r3, #7
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003178:	4619      	mov	r1, r3
 800317a:	482f      	ldr	r0, [pc, #188]	@ (8003238 <HAL_UART_MspInit+0x198>)
 800317c:	f001 fdba 	bl	8004cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003180:	e051      	b.n	8003226 <HAL_UART_MspInit+0x186>
  else if(uartHandle->Instance==USART2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <HAL_UART_MspInit+0x19c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d14c      	bne.n	8003226 <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800318c:	2302      	movs	r3, #2
 800318e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003190:	2300      	movs	r3, #0
 8003192:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003194:	f107 0320 	add.w	r3, r7, #32
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fc05 	bl	80069a8 <HAL_RCCEx_PeriphCLKConfig>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80031a4:	f7ff fb46 	bl	8002834 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031a8:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	4a21      	ldr	r2, [pc, #132]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80031c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_UART_MspInit+0x194>)
 80031ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031d8:	2304      	movs	r3, #4
 80031da:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ea:	2307      	movs	r3, #7
 80031ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031fa:	f001 fd7b 	bl	8004cf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003202:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003212:	2303      	movs	r3, #3
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800321c:	4619      	mov	r1, r3
 800321e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003222:	f001 fd67 	bl	8004cf4 <HAL_GPIO_Init>
}
 8003226:	bf00      	nop
 8003228:	3788      	adds	r7, #136	@ 0x88
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40013800 	.word	0x40013800
 8003234:	40021000 	.word	0x40021000
 8003238:	48000400 	.word	0x48000400
 800323c:	40004400 	.word	0x40004400

08003240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003244:	f7ff fe44 	bl	8002ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003248:	480c      	ldr	r0, [pc, #48]	@ (800327c <LoopForever+0x6>)
  ldr r1, =_edata
 800324a:	490d      	ldr	r1, [pc, #52]	@ (8003280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800324c:	4a0d      	ldr	r2, [pc, #52]	@ (8003284 <LoopForever+0xe>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003250:	e002      	b.n	8003258 <LoopCopyDataInit>

08003252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003256:	3304      	adds	r3, #4

08003258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800325c:	d3f9      	bcc.n	8003252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003260:	4c0a      	ldr	r4, [pc, #40]	@ (800328c <LoopForever+0x16>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003264:	e001      	b.n	800326a <LoopFillZerobss>

08003266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003268:	3204      	adds	r2, #4

0800326a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800326c:	d3fb      	bcc.n	8003266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800326e:	f005 f81f 	bl	80082b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003272:	f7ff fa27 	bl	80026c4 <main>

08003276 <LoopForever>:

LoopForever:
    b LoopForever
 8003276:	e7fe      	b.n	8003276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003278:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003284:	08009f88 	.word	0x08009f88
  ldr r2, =_sbss
 8003288:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800328c:	20002a04 	.word	0x20002a04

08003290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC1_IRQHandler>

08003292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f001 fc65 	bl	8004b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a2:	2000      	movs	r0, #0
 80032a4:	f000 f80e 	bl	80032c4 <HAL_InitTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	e001      	b.n	80032b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032b4:	f7ff fd16 	bl	8002ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032b8:	79fb      	ldrb	r3, [r7, #7]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032d0:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <HAL_InitTick+0x6c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d023      	beq.n	8003320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032d8:	4b16      	ldr	r3, [pc, #88]	@ (8003334 <HAL_InitTick+0x70>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <HAL_InitTick+0x6c>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4619      	mov	r1, r3
 80032e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 fc63 	bl	8004bba <HAL_SYSTICK_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d809      	bhi.n	8003314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003300:	2200      	movs	r2, #0
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003308:	f001 fc3b 	bl	8004b82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800330c:	4a0a      	ldr	r2, [pc, #40]	@ (8003338 <HAL_InitTick+0x74>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e007      	b.n	8003324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e004      	b.n	8003324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e001      	b.n	8003324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000008 	.word	0x20000008
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	@ (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000008 	.word	0x20000008
 8003360:	200028b4 	.word	0x200028b4

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200028b4 	.word	0x200028b4

0800337c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	609a      	str	r2, [r3, #8]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3360      	adds	r3, #96	@ 0x60
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <LL_ADC_SetOffset+0x44>)
 8003406:	4013      	ands	r3, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	4313      	orrs	r3, r2
 8003414:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	03fff000 	.word	0x03fff000

0800342c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3360      	adds	r3, #96	@ 0x60
 800343a:	461a      	mov	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3360      	adds	r3, #96	@ 0x60
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	431a      	orrs	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3330      	adds	r3, #48	@ 0x30
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	4413      	add	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	211f      	movs	r1, #31
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	f003 011f 	and.w	r1, r3, #31
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	431a      	orrs	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3314      	adds	r3, #20
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0e5b      	lsrs	r3, r3, #25
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	4413      	add	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	0d1b      	lsrs	r3, r3, #20
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2107      	movs	r1, #7
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	401a      	ands	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	0d1b      	lsrs	r3, r3, #20
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	431a      	orrs	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	43db      	mvns	r3, r3
 800357e:	401a      	ands	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0318 	and.w	r3, r3, #24
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003588:	40d9      	lsrs	r1, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	400b      	ands	r3, r1
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	431a      	orrs	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	0007ffff 	.word	0x0007ffff

080035ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80035bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6093      	str	r3, [r2, #8]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035e4:	d101      	bne.n	80035ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800360c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003634:	d101      	bne.n	800363a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <LL_ADC_IsEnabled+0x18>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <LL_ADC_IsEnabled+0x1a>
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d101      	bne.n	80036d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d101      	bne.n	80036fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e126      	b.n	8003974 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fe fca7 	bl	8002088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff3f 	bl	80035d0 <LL_ADC_IsDeepPowerDownEnabled>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff25 	bl	80035ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff5a 	bl	8003620 <LL_ADC_IsInternalRegulatorEnabled>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d115      	bne.n	800379e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff3e 	bl	80035f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800377c:	4b7f      	ldr	r3, [pc, #508]	@ (800397c <HAL_ADC_Init+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	4a7f      	ldr	r2, [pc, #508]	@ (8003980 <HAL_ADC_Init+0x274>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	3301      	adds	r3, #1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003790:	e002      	b.n	8003798 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3b01      	subs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f9      	bne.n	8003792 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ff3c 	bl	8003620 <LL_ADC_IsInternalRegulatorEnabled>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10d      	bne.n	80037ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f043 0210 	orr.w	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff75 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 80037d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 80bf 	bne.w	8003962 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80bb 	bne.w	8003962 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037f4:	f043 0202 	orr.w	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff35 	bl	8003670 <LL_ADC_IsEnabled>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800380c:	485d      	ldr	r0, [pc, #372]	@ (8003984 <HAL_ADC_Init+0x278>)
 800380e:	f7ff ff2f 	bl	8003670 <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4619      	mov	r1, r3
 800381e:	485a      	ldr	r0, [pc, #360]	@ (8003988 <HAL_ADC_Init+0x27c>)
 8003820:	f7ff fdac 	bl	800337c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7e5b      	ldrb	r3, [r3, #25]
 8003828:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800382e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003834:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800383a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003842:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d106      	bne.n	8003860 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	045b      	lsls	r3, r3, #17
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d009      	beq.n	800387c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	4b42      	ldr	r3, [pc, #264]	@ (800398c <HAL_ADC_Init+0x280>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	69b9      	ldr	r1, [r7, #24]
 800388c:	430b      	orrs	r3, r1
 800388e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff25 	bl	80036e4 <LL_ADC_INJ_IsConversionOngoing>
 800389a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d13d      	bne.n	800391e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13a      	bne.n	800391e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038c4:	f023 0302 	bic.w	r3, r3, #2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	69b9      	ldr	r1, [r7, #24]
 80038ce:	430b      	orrs	r3, r1
 80038d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d118      	bne.n	800390e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80038e6:	f023 0304 	bic.w	r3, r3, #4
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038f2:	4311      	orrs	r1, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038f8:	4311      	orrs	r1, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038fe:	430a      	orrs	r2, r1
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	611a      	str	r2, [r3, #16]
 800390c:	e007      	b.n	800391e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d10c      	bne.n	8003940 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	f023 010f 	bic.w	r1, r3, #15
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	631a      	str	r2, [r3, #48]	@ 0x30
 800393e:	e007      	b.n	8003950 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 020f 	bic.w	r2, r2, #15
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003954:	f023 0303 	bic.w	r3, r3, #3
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003960:	e007      	b.n	8003972 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003972:	7ffb      	ldrb	r3, [r7, #31]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000000 	.word	0x20000000
 8003980:	053e2d63 	.word	0x053e2d63
 8003984:	50040000 	.word	0x50040000
 8003988:	50040300 	.word	0x50040300
 800398c:	fff0c007 	.word	0xfff0c007

08003990 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d102      	bne.n	80039a8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80039a2:	2308      	movs	r3, #8
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e010      	b.n	80039ca <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06f      	b.n	8003aa6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80039c6:	2304      	movs	r3, #4
 80039c8:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80039ca:	f7ff fccb 	bl	8003364 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039d0:	e021      	b.n	8003a16 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d8:	d01d      	beq.n	8003a16 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039da:	f7ff fcc3 	bl	8003364 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <HAL_ADC_PollForConversion+0x60>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d112      	bne.n	8003a16 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10b      	bne.n	8003a16 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	f043 0204 	orr.w	r2, r3, #4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e047      	b.n	8003aa6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0d6      	beq.n	80039d2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fd2a 	bl	800348e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7e5b      	ldrb	r3, [r3, #25]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d118      	bne.n	8003a7a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d111      	bne.n	8003a7a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d104      	bne.n	8003a92 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e008      	b.n	8003aa4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fdfc 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d167      	bne.n	8003b9c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_Start_DMA+0x2a>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e063      	b.n	8003ba2 <HAL_ADC_Start_DMA+0xf2>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fc76 	bl	80043d4 <ADC_Enable>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d14f      	bne.n	8003b92 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f023 0206 	bic.w	r2, r3, #6
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b1e:	e002      	b.n	8003b26 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2a:	4a20      	ldr	r2, [pc, #128]	@ (8003bac <HAL_ADC_Start_DMA+0xfc>)
 8003b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b32:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_ADC_Start_DMA+0x100>)
 8003b34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb4 <HAL_ADC_Start_DMA+0x104>)
 8003b3c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	221c      	movs	r2, #28
 8003b44:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0210 	orr.w	r2, r2, #16
 8003b5c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3340      	adds	r3, #64	@ 0x40
 8003b78:	4619      	mov	r1, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f001 f828 	bl	8004bd2 <HAL_DMA_Start_IT>
 8003b82:	4603      	mov	r3, r0
 8003b84:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fd83 	bl	8003696 <LL_ADC_REG_StartConversion>
 8003b90:	e006      	b.n	8003ba0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003b9a:	e001      	b.n	8003ba0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	080044e1 	.word	0x080044e1
 8003bb0:	080045b9 	.word	0x080045b9
 8003bb4:	080045d5 	.word	0x080045d5

08003bb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0b6      	sub	sp, #216	@ 0xd8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x22>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e3bb      	b.n	80043aa <HAL_ADC_ConfigChannel+0x79a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fd3d 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 83a0 	bne.w	800438c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b05      	cmp	r3, #5
 8003c5a:	d824      	bhi.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	3b02      	subs	r3, #2
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d81b      	bhi.n	8003c9e <HAL_ADC_ConfigChannel+0x8e>
 8003c66:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <HAL_ADC_ConfigChannel+0x5c>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c85 	.word	0x08003c85
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c95 	.word	0x08003c95
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c82:	e010      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003c84:	2312      	movs	r3, #18
 8003c86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c8a:	e00c      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003c8c:	2318      	movs	r3, #24
 8003c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c92:	e008      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c9c:	e003      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003c9e:	2306      	movs	r3, #6
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003ca4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003cb4:	f7ff fbfe 	bl	80034b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fcfe 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 8003cc2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fd0a 	bl	80036e4 <LL_ADC_INJ_IsConversionOngoing>
 8003cd0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 81a4 	bne.w	8004026 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 819f 	bne.w	8004026 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6819      	ldr	r1, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f7ff fc09 	bl	800350c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d00a      	beq.n	8003d32 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6919      	ldr	r1, [r3, #16]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d2c:	f7ff fb5a 	bl	80033e4 <LL_ADC_SetOffset>
 8003d30:	e179      	b.n	8004026 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fb77 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x14e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fb6c 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	e01e      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x18c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fb61 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e004      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1a4>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	e018      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x1d6>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	e004      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d106      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fb30 	bl	8003458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fb14 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x214>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fb09 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 021f 	and.w	r2, r3, #31
 8003e22:	e01e      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x252>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fafe 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e004      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x26a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0e9b      	lsrs	r3, r3, #26
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	e018      	b.n	8003eac <HAL_ADC_ConfigChannel+0x29c>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	e004      	b.n	8003eac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d106      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff facd 	bl	8003458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fab1 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x2da>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff faa6 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	0e9b      	lsrs	r3, r3, #26
 8003ee4:	f003 021f 	and.w	r2, r3, #31
 8003ee8:	e01e      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x318>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fa9b 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	e004      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x330>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	e014      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x35a>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f48:	fa93 f3a3 	rbit	r3, r3
 8003f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	e004      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d106      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2102      	movs	r1, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fa6e 	bl	8003458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2103      	movs	r1, #3
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fa52 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x398>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2103      	movs	r1, #3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fa47 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	e017      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x3c8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2103      	movs	r1, #3
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fa3c 	bl	800342c <LL_ADC_GetOffsetChannel>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003fca:	2320      	movs	r3, #32
 8003fcc:	e003      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003fce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x3e0>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	e011      	b.n	8004014 <HAL_ADC_ConfigChannel+0x404>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004000:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004008:	2320      	movs	r3, #32
 800400a:	e003      	b.n	8004014 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800400c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004014:	429a      	cmp	r2, r3
 8004016:	d106      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2200      	movs	r2, #0
 800401e:	2103      	movs	r1, #3
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fa19 	bl	8003458 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fb20 	bl	8003670 <LL_ADC_IsEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 8140 	bne.w	80042b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	461a      	mov	r2, r3
 8004046:	f7ff fa8d 	bl	8003564 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4a8f      	ldr	r2, [pc, #572]	@ (800428c <HAL_ADC_ConfigChannel+0x67c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	f040 8131 	bne.w	80042b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_ADC_ConfigChannel+0x46e>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	0e9b      	lsrs	r3, r3, #26
 800406c:	3301      	adds	r3, #1
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2b09      	cmp	r3, #9
 8004074:	bf94      	ite	ls
 8004076:	2301      	movls	r3, #1
 8004078:	2300      	movhi	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e019      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x4a2>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800408c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	e003      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800409a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2b09      	cmp	r3, #9
 80040aa:	bf94      	ite	ls
 80040ac:	2301      	movls	r3, #1
 80040ae:	2300      	movhi	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d079      	beq.n	80041aa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x4c2>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	3301      	adds	r3, #1
 80040ca:	069b      	lsls	r3, r3, #26
 80040cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040d0:	e015      	b.n	80040fe <HAL_ADC_ConfigChannel+0x4ee>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80040ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	069b      	lsls	r3, r3, #26
 80040fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_ADC_ConfigChannel+0x50e>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0e9b      	lsrs	r3, r3, #26
 8004110:	3301      	adds	r3, #1
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2101      	movs	r1, #1
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	e017      	b.n	800414e <HAL_ADC_ConfigChannel+0x53e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800412c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004136:	2320      	movs	r3, #32
 8004138:	e003      	b.n	8004142 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800413a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	3301      	adds	r3, #1
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	ea42 0103 	orr.w	r1, r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x564>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0e9b      	lsrs	r3, r3, #26
 8004164:	3301      	adds	r3, #1
 8004166:	f003 021f 	and.w	r2, r3, #31
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	051b      	lsls	r3, r3, #20
 8004172:	e018      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x596>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	fa93 f3a3 	rbit	r3, r3
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800418c:	2320      	movs	r3, #32
 800418e:	e003      	b.n	8004198 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f003 021f 	and.w	r2, r3, #31
 800419e:	4613      	mov	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4413      	add	r3, r2
 80041a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a6:	430b      	orrs	r3, r1
 80041a8:	e081      	b.n	80042ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x5b6>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0e9b      	lsrs	r3, r3, #26
 80041bc:	3301      	adds	r3, #1
 80041be:	069b      	lsls	r3, r3, #26
 80041c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c4:	e015      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x5e2>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80041de:	2320      	movs	r3, #32
 80041e0:	e003      	b.n	80041ea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80041e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	069b      	lsls	r3, r3, #26
 80041ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x602>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	0e9b      	lsrs	r3, r3, #26
 8004204:	3301      	adds	r3, #1
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2101      	movs	r1, #1
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	e017      	b.n	8004242 <HAL_ADC_ConfigChannel+0x632>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	61bb      	str	r3, [r7, #24]
  return result;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800422a:	2320      	movs	r3, #32
 800422c:	e003      	b.n	8004236 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	3301      	adds	r3, #1
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2101      	movs	r1, #1
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	ea42 0103 	orr.w	r1, r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_ADC_ConfigChannel+0x65e>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	3301      	adds	r3, #1
 800425a:	f003 021f 	and.w	r2, r3, #31
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	3b1e      	subs	r3, #30
 8004266:	051b      	lsls	r3, r3, #20
 8004268:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800426c:	e01e      	b.n	80042ac <HAL_ADC_ConfigChannel+0x69c>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	60fb      	str	r3, [r7, #12]
  return result;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004286:	2320      	movs	r3, #32
 8004288:	e006      	b.n	8004298 <HAL_ADC_ConfigChannel+0x688>
 800428a:	bf00      	nop
 800428c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fab3 f383 	clz	r3, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f003 021f 	and.w	r2, r3, #31
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	3b1e      	subs	r3, #30
 80042a6:	051b      	lsls	r3, r3, #20
 80042a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7ff f92a 	bl	800350c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b3d      	ldr	r3, [pc, #244]	@ (80043b4 <HAL_ADC_ConfigChannel+0x7a4>)
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d06c      	beq.n	800439e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c4:	483c      	ldr	r0, [pc, #240]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7a8>)
 80042c6:	f7ff f87f 	bl	80033c8 <LL_ADC_GetCommonPathInternalCh>
 80042ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3a      	ldr	r2, [pc, #232]	@ (80043bc <HAL_ADC_ConfigChannel+0x7ac>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d127      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d121      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a35      	ldr	r2, [pc, #212]	@ (80043c0 <HAL_ADC_ConfigChannel+0x7b0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d157      	bne.n	800439e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042f6:	4619      	mov	r1, r3
 80042f8:	482f      	ldr	r0, [pc, #188]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7a8>)
 80042fa:	f7ff f852 	bl	80033a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042fe:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <HAL_ADC_ConfigChannel+0x7b4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	4a30      	ldr	r2, [pc, #192]	@ (80043c8 <HAL_ADC_ConfigChannel+0x7b8>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004318:	e002      	b.n	8004320 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3b01      	subs	r3, #1
 800431e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f9      	bne.n	800431a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004326:	e03a      	b.n	800439e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a27      	ldr	r2, [pc, #156]	@ (80043cc <HAL_ADC_ConfigChannel+0x7bc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d113      	bne.n	800435a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004336:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10d      	bne.n	800435a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <HAL_ADC_ConfigChannel+0x7b0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d12a      	bne.n	800439e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800434c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004350:	4619      	mov	r1, r3
 8004352:	4819      	ldr	r0, [pc, #100]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7a8>)
 8004354:	f7ff f825 	bl	80033a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004358:	e021      	b.n	800439e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1c      	ldr	r2, [pc, #112]	@ (80043d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d11c      	bne.n	800439e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d116      	bne.n	800439e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a12      	ldr	r2, [pc, #72]	@ (80043c0 <HAL_ADC_ConfigChannel+0x7b0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d111      	bne.n	800439e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800437a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800437e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004382:	4619      	mov	r1, r3
 8004384:	480c      	ldr	r0, [pc, #48]	@ (80043b8 <HAL_ADC_ConfigChannel+0x7a8>)
 8004386:	f7ff f80c 	bl	80033a2 <LL_ADC_SetCommonPathInternalCh>
 800438a:	e008      	b.n	800439e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	37d8      	adds	r7, #216	@ 0xd8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	80080000 	.word	0x80080000
 80043b8:	50040300 	.word	0x50040300
 80043bc:	c7520000 	.word	0xc7520000
 80043c0:	50040000 	.word	0x50040000
 80043c4:	20000000 	.word	0x20000000
 80043c8:	053e2d63 	.word	0x053e2d63
 80043cc:	cb840000 	.word	0xcb840000
 80043d0:	80000001 	.word	0x80000001

080043d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff f943 	bl	8003670 <LL_ADC_IsEnabled>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d169      	bne.n	80044c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	4b36      	ldr	r3, [pc, #216]	@ (80044d0 <ADC_Enable+0xfc>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004402:	f043 0210 	orr.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e055      	b.n	80044c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f912 	bl	8003648 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004424:	482b      	ldr	r0, [pc, #172]	@ (80044d4 <ADC_Enable+0x100>)
 8004426:	f7fe ffcf 	bl	80033c8 <LL_ADC_GetCommonPathInternalCh>
 800442a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800442c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004434:	4b28      	ldr	r3, [pc, #160]	@ (80044d8 <ADC_Enable+0x104>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	099b      	lsrs	r3, r3, #6
 800443a:	4a28      	ldr	r2, [pc, #160]	@ (80044dc <ADC_Enable+0x108>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800444e:	e002      	b.n	8004456 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	3b01      	subs	r3, #1
 8004454:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f9      	bne.n	8004450 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800445c:	f7fe ff82 	bl	8003364 <HAL_GetTick>
 8004460:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004462:	e028      	b.n	80044b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f901 	bl	8003670 <LL_ADC_IsEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f8e5 	bl	8003648 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800447e:	f7fe ff71 	bl	8003364 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d914      	bls.n	80044b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d00d      	beq.n	80044b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449e:	f043 0210 	orr.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e007      	b.n	80044c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d1cf      	bne.n	8004464 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	8000003f 	.word	0x8000003f
 80044d4:	50040300 	.word	0x50040300
 80044d8:	20000000 	.word	0x20000000
 80044dc:	053e2d63 	.word	0x053e2d63

080044e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d14b      	bne.n	8004592 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d021      	beq.n	8004558 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe ffb8 	bl	800348e <LL_ADC_REG_IsTriggerSourceSWStart>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d032      	beq.n	800458a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d12b      	bne.n	800458a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004536:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11f      	bne.n	800458a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
 8004556:	e018      	b.n	800458a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d111      	bne.n	800458a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	f043 0201 	orr.w	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fb21 	bl	8003bd2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004590:	e00e      	b.n	80045b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fb2b 	bl	8003bfa <HAL_ADC_ErrorCallback>
}
 80045a4:	e004      	b.n	80045b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff fb0d 	bl	8003be6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fafd 	bl	8003bfa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0ed      	b.n	80047f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd fdc8 	bl	80021bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800463c:	f7fe fe92 	bl	8003364 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004642:	e012      	b.n	800466a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004644:	f7fe fe8e 	bl	8003364 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b0a      	cmp	r3, #10
 8004650:	d90b      	bls.n	800466a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2205      	movs	r2, #5
 8004662:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0c5      	b.n	80047f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0e5      	beq.n	8004644 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0202 	bic.w	r2, r2, #2
 8004686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004688:	f7fe fe6c 	bl	8003364 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800468e:	e012      	b.n	80046b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004690:	f7fe fe68 	bl	8003364 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b0a      	cmp	r3, #10
 800469c:	d90b      	bls.n	80046b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2205      	movs	r2, #5
 80046ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e09f      	b.n	80047f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e5      	bne.n	8004690 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7e1b      	ldrb	r3, [r3, #24]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d108      	bne.n	80046de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e007      	b.n	80046ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7e5b      	ldrb	r3, [r3, #25]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d108      	bne.n	8004708 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e007      	b.n	8004718 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004716:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	7e9b      	ldrb	r3, [r3, #26]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d108      	bne.n	8004732 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0220 	orr.w	r2, r2, #32
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e007      	b.n	8004742 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0220 	bic.w	r2, r2, #32
 8004740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	7edb      	ldrb	r3, [r3, #27]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d108      	bne.n	800475c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0210 	bic.w	r2, r2, #16
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e007      	b.n	800476c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0210 	orr.w	r2, r2, #16
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7f1b      	ldrb	r3, [r3, #28]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d108      	bne.n	8004786 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0208 	orr.w	r2, r2, #8
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e007      	b.n	8004796 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0208 	bic.w	r2, r2, #8
 8004794:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7f5b      	ldrb	r3, [r3, #29]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d108      	bne.n	80047b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0204 	orr.w	r2, r2, #4
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e007      	b.n	80047c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0204 	bic.w	r2, r2, #4
 80047be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	ea42 0103 	orr.w	r1, r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80047fe:	b480      	push	{r7}
 8004800:	b089      	sub	sp, #36	@ 0x24
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004812:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800481c:	7ffb      	ldrb	r3, [r7, #31]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d003      	beq.n	800482a <HAL_CAN_AddTxMessage+0x2c>
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	2b02      	cmp	r3, #2
 8004826:	f040 80ad 	bne.w	8004984 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8095 	beq.w	8004974 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	0e1b      	lsrs	r3, r3, #24
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004854:	2201      	movs	r2, #1
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	409a      	lsls	r2, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	6809      	ldr	r1, [r1, #0]
 8004874:	431a      	orrs	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3318      	adds	r3, #24
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	440b      	add	r3, r1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	e00f      	b.n	80048a2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800488c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004896:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3318      	adds	r3, #24
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	440b      	add	r3, r1
 80048a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	3318      	adds	r3, #24
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	440b      	add	r3, r1
 80048b2:	3304      	adds	r3, #4
 80048b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	7d1b      	ldrb	r3, [r3, #20]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d111      	bne.n	80048e2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3318      	adds	r3, #24
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	4413      	add	r3, r2
 80048ca:	3304      	adds	r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	6811      	ldr	r1, [r2, #0]
 80048d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	3318      	adds	r3, #24
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	440b      	add	r3, r1
 80048de:	3304      	adds	r3, #4
 80048e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3307      	adds	r3, #7
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	061a      	lsls	r2, r3, #24
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3306      	adds	r3, #6
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3305      	adds	r3, #5
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	4313      	orrs	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	3204      	adds	r2, #4
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	4610      	mov	r0, r2
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	6811      	ldr	r1, [r2, #0]
 800490a:	ea43 0200 	orr.w	r2, r3, r0
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	440b      	add	r3, r1
 8004914:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004918:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3303      	adds	r3, #3
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	061a      	lsls	r2, r3, #24
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3302      	adds	r3, #2
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3301      	adds	r3, #1
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	4313      	orrs	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	4610      	mov	r0, r2
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	6811      	ldr	r1, [r2, #0]
 8004940:	ea43 0200 	orr.w	r2, r3, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	440b      	add	r3, r1
 800494a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800494e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3318      	adds	r3, #24
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	4413      	add	r3, r2
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	6811      	ldr	r1, [r2, #0]
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	3318      	adds	r3, #24
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	440b      	add	r3, r1
 800496e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e00e      	b.n	8004992 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e006      	b.n	8004992 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	@ 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80049b2:	7afb      	ldrb	r3, [r7, #11]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d002      	beq.n	80049be <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80049b8:	7afb      	ldrb	r3, [r7, #11]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d11d      	bne.n	80049fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3301      	adds	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a18:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <__NVIC_SetPriorityGrouping+0x44>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a24:	4013      	ands	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a3a:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <__NVIC_SetPriorityGrouping+0x44>)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	60d3      	str	r3, [r2, #12]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a54:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <__NVIC_GetPriorityGrouping+0x18>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	f003 0307 	and.w	r3, r3, #7
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	db0a      	blt.n	8004a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	490c      	ldr	r1, [pc, #48]	@ (8004ab8 <__NVIC_SetPriority+0x4c>)
 8004a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	440b      	add	r3, r1
 8004a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a94:	e00a      	b.n	8004aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4908      	ldr	r1, [pc, #32]	@ (8004abc <__NVIC_SetPriority+0x50>)
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	0112      	lsls	r2, r2, #4
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	761a      	strb	r2, [r3, #24]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000e100 	.word	0xe000e100
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b089      	sub	sp, #36	@ 0x24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f1c3 0307 	rsb	r3, r3, #7
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	bf28      	it	cs
 8004ade:	2304      	movcs	r3, #4
 8004ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d902      	bls.n	8004af0 <NVIC_EncodePriority+0x30>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3b03      	subs	r3, #3
 8004aee:	e000      	b.n	8004af2 <NVIC_EncodePriority+0x32>
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43da      	mvns	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	401a      	ands	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	43d9      	mvns	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b18:	4313      	orrs	r3, r2
         );
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3724      	adds	r7, #36	@ 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b38:	d301      	bcc.n	8004b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e00f      	b.n	8004b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b68 <SysTick_Config+0x40>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b46:	210f      	movs	r1, #15
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b4c:	f7ff ff8e 	bl	8004a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b50:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <SysTick_Config+0x40>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b56:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <SysTick_Config+0x40>)
 8004b58:	2207      	movs	r2, #7
 8004b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	e000e010 	.word	0xe000e010

08004b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ff47 	bl	8004a08 <__NVIC_SetPriorityGrouping>
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	4603      	mov	r3, r0
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b94:	f7ff ff5c 	bl	8004a50 <__NVIC_GetPriorityGrouping>
 8004b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	6978      	ldr	r0, [r7, #20]
 8004ba0:	f7ff ff8e 	bl	8004ac0 <NVIC_EncodePriority>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff ff5d 	bl	8004a6c <__NVIC_SetPriority>
}
 8004bb2:	bf00      	nop
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ffb0 	bl	8004b28 <SysTick_Config>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_DMA_Start_IT+0x20>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e04b      	b.n	8004c8a <HAL_DMA_Start_IT+0xb8>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d13a      	bne.n	8004c7c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f831 	bl	8004c92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 020e 	orr.w	r2, r2, #14
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e00f      	b.n	8004c6a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0204 	bic.w	r2, r2, #4
 8004c58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 020a 	orr.w	r2, r2, #10
 8004c68:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e005      	b.n	8004c88 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
 8004c86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca4:	f003 021c 	and.w	r2, r3, #28
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	2101      	movs	r1, #1
 8004cae:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d108      	bne.n	8004cd6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cd4:	e007      	b.n	8004ce6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d02:	e148      	b.n	8004f96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	2101      	movs	r1, #1
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	4013      	ands	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 813a 	beq.w	8004f90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d005      	beq.n	8004d34 <HAL_GPIO_Init+0x40>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d130      	bne.n	8004d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	2203      	movs	r2, #3
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4013      	ands	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	f003 0201 	and.w	r2, r3, #1
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d017      	beq.n	8004dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	2203      	movs	r2, #3
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d123      	bne.n	8004e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	08da      	lsrs	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3208      	adds	r2, #8
 8004de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	220f      	movs	r2, #15
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	08da      	lsrs	r2, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3208      	adds	r2, #8
 8004e20:	6939      	ldr	r1, [r7, #16]
 8004e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 0203 	and.w	r2, r3, #3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8094 	beq.w	8004f90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e68:	4b52      	ldr	r3, [pc, #328]	@ (8004fb4 <HAL_GPIO_Init+0x2c0>)
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6c:	4a51      	ldr	r2, [pc, #324]	@ (8004fb4 <HAL_GPIO_Init+0x2c0>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e74:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb4 <HAL_GPIO_Init+0x2c0>)
 8004e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e80:	4a4d      	ldr	r2, [pc, #308]	@ (8004fb8 <HAL_GPIO_Init+0x2c4>)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	3302      	adds	r3, #2
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	220f      	movs	r2, #15
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004eaa:	d00d      	beq.n	8004ec8 <HAL_GPIO_Init+0x1d4>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a43      	ldr	r2, [pc, #268]	@ (8004fbc <HAL_GPIO_Init+0x2c8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <HAL_GPIO_Init+0x1d0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a42      	ldr	r2, [pc, #264]	@ (8004fc0 <HAL_GPIO_Init+0x2cc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d101      	bne.n	8004ec0 <HAL_GPIO_Init+0x1cc>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e004      	b.n	8004eca <HAL_GPIO_Init+0x1d6>
 8004ec0:	2307      	movs	r3, #7
 8004ec2:	e002      	b.n	8004eca <HAL_GPIO_Init+0x1d6>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_GPIO_Init+0x1d6>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	f002 0203 	and.w	r2, r2, #3
 8004ed0:	0092      	lsls	r2, r2, #2
 8004ed2:	4093      	lsls	r3, r2
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004eda:	4937      	ldr	r1, [pc, #220]	@ (8004fb8 <HAL_GPIO_Init+0x2c4>)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ee8:	4b36      	ldr	r3, [pc, #216]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f12:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f36:	4a23      	ldr	r2, [pc, #140]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f3c:	4b21      	ldr	r3, [pc, #132]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f60:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f66:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc4 <HAL_GPIO_Init+0x2d0>)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3301      	adds	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f47f aeaf 	bne.w	8004d04 <HAL_GPIO_Init+0x10>
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	48000400 	.word	0x48000400
 8004fc0:	48000800 	.word	0x48000800
 8004fc4:	40010400 	.word	0x40010400

08004fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	887b      	ldrh	r3, [r7, #2]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e001      	b.n	8004fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
 8005004:	4613      	mov	r3, r2
 8005006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005008:	787b      	ldrb	r3, [r7, #1]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800500e:	887a      	ldrh	r2, [r7, #2]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005014:	e002      	b.n	800501c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e08d      	b.n	8005156 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fd fae0 	bl	8002614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2224      	movs	r2, #36	@ 0x24
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005078:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005088:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	e006      	b.n	80050b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d108      	bne.n	80050ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	e007      	b.n	80050da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80050e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69d9      	ldr	r1, [r3, #28]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	4603      	mov	r3, r0
 8005170:	817b      	strh	r3, [r7, #10]
 8005172:	460b      	mov	r3, r1
 8005174:	813b      	strh	r3, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b20      	cmp	r3, #32
 8005184:	f040 80f9 	bne.w	800537a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_I2C_Mem_Write+0x34>
 800518e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800519a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0ed      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_I2C_Mem_Write+0x4e>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e0e6      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051b6:	f7fe f8d5 	bl	8003364 <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	2319      	movs	r3, #25
 80051c2:	2201      	movs	r2, #1
 80051c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fac3 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0d1      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2221      	movs	r2, #33	@ 0x21
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2240      	movs	r2, #64	@ 0x40
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005200:	88f8      	ldrh	r0, [r7, #6]
 8005202:	893a      	ldrh	r2, [r7, #8]
 8005204:	8979      	ldrh	r1, [r7, #10]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	4603      	mov	r3, r0
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f9d3 	bl	80055bc <I2C_RequestMemoryWrite>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0a9      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2bff      	cmp	r3, #255	@ 0xff
 8005230:	d90e      	bls.n	8005250 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	22ff      	movs	r2, #255	@ 0xff
 8005236:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523c:	b2da      	uxtb	r2, r3
 800523e:	8979      	ldrh	r1, [r7, #10]
 8005240:	2300      	movs	r3, #0
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fc47 	bl	8005adc <I2C_TransferConfig>
 800524e:	e00f      	b.n	8005270 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	b2da      	uxtb	r2, r3
 8005260:	8979      	ldrh	r1, [r7, #10]
 8005262:	2300      	movs	r3, #0
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fc36 	bl	8005adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fac6 	bl	8005806 <I2C_WaitOnTXISFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e07b      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d034      	beq.n	8005328 <HAL_I2C_Mem_Write+0x1c8>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d130      	bne.n	8005328 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	2200      	movs	r2, #0
 80052ce:	2180      	movs	r1, #128	@ 0x80
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fa3f 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e04d      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2bff      	cmp	r3, #255	@ 0xff
 80052e8:	d90e      	bls.n	8005308 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	@ 0xff
 80052ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	8979      	ldrh	r1, [r7, #10]
 80052f8:	2300      	movs	r3, #0
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fbeb 	bl	8005adc <I2C_TransferConfig>
 8005306:	e00f      	b.n	8005328 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005316:	b2da      	uxtb	r2, r3
 8005318:	8979      	ldrh	r1, [r7, #10]
 800531a:	2300      	movs	r3, #0
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fbda 	bl	8005adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d19e      	bne.n	8005270 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 faac 	bl	8005894 <I2C_WaitOnSTOPFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e01a      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2220      	movs	r2, #32
 800534c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b0a      	ldr	r3, [pc, #40]	@ (8005384 <HAL_I2C_Mem_Write+0x224>)
 800535a:	400b      	ands	r3, r1
 800535c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e000      	b.n	800537c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	fe00e800 	.word	0xfe00e800

08005388 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	461a      	mov	r2, r3
 8005396:	4603      	mov	r3, r0
 8005398:	817b      	strh	r3, [r7, #10]
 800539a:	460b      	mov	r3, r1
 800539c:	813b      	strh	r3, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	f040 80fd 	bne.w	80055aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_I2C_Mem_Read+0x34>
 80053b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0f1      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_I2C_Mem_Read+0x4e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0ea      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053de:	f7fd ffc1 	bl	8003364 <HAL_GetTick>
 80053e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2319      	movs	r3, #25
 80053ea:	2201      	movs	r2, #1
 80053ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f9af 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0d5      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2222      	movs	r2, #34	@ 0x22
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2240      	movs	r2, #64	@ 0x40
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005428:	88f8      	ldrh	r0, [r7, #6]
 800542a:	893a      	ldrh	r2, [r7, #8]
 800542c:	8979      	ldrh	r1, [r7, #10]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	4603      	mov	r3, r0
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f913 	bl	8005664 <I2C_RequestMemoryRead>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0ad      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2bff      	cmp	r3, #255	@ 0xff
 8005458:	d90e      	bls.n	8005478 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005464:	b2da      	uxtb	r2, r3
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	4b52      	ldr	r3, [pc, #328]	@ (80055b4 <HAL_I2C_Mem_Read+0x22c>)
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fb33 	bl	8005adc <I2C_TransferConfig>
 8005476:	e00f      	b.n	8005498 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005486:	b2da      	uxtb	r2, r3
 8005488:	8979      	ldrh	r1, [r7, #10]
 800548a:	4b4a      	ldr	r3, [pc, #296]	@ (80055b4 <HAL_I2C_Mem_Read+0x22c>)
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fb22 	bl	8005adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	2200      	movs	r2, #0
 80054a0:	2104      	movs	r1, #4
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f956 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e07c      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d034      	beq.n	8005558 <HAL_I2C_Mem_Read+0x1d0>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d130      	bne.n	8005558 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	@ 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f927 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e04d      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2bff      	cmp	r3, #255	@ 0xff
 8005518:	d90e      	bls.n	8005538 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005524:	b2da      	uxtb	r2, r3
 8005526:	8979      	ldrh	r1, [r7, #10]
 8005528:	2300      	movs	r3, #0
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fad3 	bl	8005adc <I2C_TransferConfig>
 8005536:	e00f      	b.n	8005558 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005546:	b2da      	uxtb	r2, r3
 8005548:	8979      	ldrh	r1, [r7, #10]
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fac2 	bl	8005adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d19a      	bne.n	8005498 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f994 	bl	8005894 <I2C_WaitOnSTOPFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e01a      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2220      	movs	r2, #32
 800557c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <HAL_I2C_Mem_Read+0x230>)
 800558a:	400b      	ands	r3, r1
 800558c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
  }
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	80002400 	.word	0x80002400
 80055b8:	fe00e800 	.word	0xfe00e800

080055bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	4608      	mov	r0, r1
 80055c6:	4611      	mov	r1, r2
 80055c8:	461a      	mov	r2, r3
 80055ca:	4603      	mov	r3, r0
 80055cc:	817b      	strh	r3, [r7, #10]
 80055ce:	460b      	mov	r3, r1
 80055d0:	813b      	strh	r3, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	8979      	ldrh	r1, [r7, #10]
 80055dc:	4b20      	ldr	r3, [pc, #128]	@ (8005660 <I2C_RequestMemoryWrite+0xa4>)
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fa79 	bl	8005adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f909 	bl	8005806 <I2C_WaitOnTXISFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e02c      	b.n	8005658 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d105      	bne.n	8005610 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005604:	893b      	ldrh	r3, [r7, #8]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	629a      	str	r2, [r3, #40]	@ 0x28
 800560e:	e015      	b.n	800563c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	b29b      	uxth	r3, r3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	69b9      	ldr	r1, [r7, #24]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f8ef 	bl	8005806 <I2C_WaitOnTXISFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e012      	b.n	8005658 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005632:	893b      	ldrh	r3, [r7, #8]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2200      	movs	r2, #0
 8005644:	2180      	movs	r1, #128	@ 0x80
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f884 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	80002000 	.word	0x80002000

08005664 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	817b      	strh	r3, [r7, #10]
 8005676:	460b      	mov	r3, r1
 8005678:	813b      	strh	r3, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	8979      	ldrh	r1, [r7, #10]
 8005684:	4b20      	ldr	r3, [pc, #128]	@ (8005708 <I2C_RequestMemoryRead+0xa4>)
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa26 	bl	8005adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	69b9      	ldr	r1, [r7, #24]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f8b6 	bl	8005806 <I2C_WaitOnTXISFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e02c      	b.n	80056fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d105      	bne.n	80056b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056aa:	893b      	ldrh	r3, [r7, #8]
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80056b4:	e015      	b.n	80056e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056b6:	893b      	ldrh	r3, [r7, #8]
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	69b9      	ldr	r1, [r7, #24]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f89c 	bl	8005806 <I2C_WaitOnTXISFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e012      	b.n	80056fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056d8:	893b      	ldrh	r3, [r7, #8]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2140      	movs	r1, #64	@ 0x40
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f831 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	80002000 	.word	0x80002000

0800570c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d103      	bne.n	800572a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d007      	beq.n	8005748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	619a      	str	r2, [r3, #24]
  }
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005764:	e03b      	b.n	80057de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f8d6 	bl	800591c <I2C_IsErrorOccurred>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e041      	b.n	80057fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005780:	d02d      	beq.n	80057de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005782:	f7fd fdef 	bl	8003364 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d122      	bne.n	80057de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d113      	bne.n	80057de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e00f      	b.n	80057fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	bf0c      	ite	eq
 80057ee:	2301      	moveq	r3, #1
 80057f0:	2300      	movne	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d0b4      	beq.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005812:	e033      	b.n	800587c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f87f 	bl	800591c <I2C_IsErrorOccurred>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e031      	b.n	800588c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800582e:	d025      	beq.n	800587c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fd fd98 	bl	8003364 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d11a      	bne.n	800587c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b02      	cmp	r3, #2
 8005852:	d013      	beq.n	800587c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e007      	b.n	800588c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b02      	cmp	r3, #2
 8005888:	d1c4      	bne.n	8005814 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058a0:	e02f      	b.n	8005902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f838 	bl	800591c <I2C_IsErrorOccurred>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e02d      	b.n	8005912 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fd fd55 	bl	8003364 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d11a      	bne.n	8005902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d013      	beq.n	8005902 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e007      	b.n	8005912 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b20      	cmp	r3, #32
 800590e:	d1c8      	bne.n	80058a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	@ 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	d068      	beq.n	8005a1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2210      	movs	r2, #16
 800594e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005950:	e049      	b.n	80059e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005958:	d045      	beq.n	80059e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800595a:	f7fd fd03 	bl	8003364 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <I2C_IsErrorOccurred+0x54>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d13a      	bne.n	80059e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800597a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005982:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800598e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005992:	d121      	bne.n	80059d8 <I2C_IsErrorOccurred+0xbc>
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800599a:	d01d      	beq.n	80059d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800599c:	7cfb      	ldrb	r3, [r7, #19]
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d01a      	beq.n	80059d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80059b2:	f7fd fcd7 	bl	8003364 <HAL_GetTick>
 80059b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059b8:	e00e      	b.n	80059d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059ba:	f7fd fcd3 	bl	8003364 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b19      	cmp	r3, #25
 80059c6:	d907      	bls.n	80059d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	f043 0320 	orr.w	r3, r3, #32
 80059ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80059d6:	e006      	b.n	80059e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d1e9      	bne.n	80059ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d003      	beq.n	80059fc <I2C_IsErrorOccurred+0xe0>
 80059f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0aa      	beq.n	8005952 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80059fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	f043 0304 	orr.w	r3, r3, #4
 8005a12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f043 0308 	orr.w	r3, r3, #8
 8005a54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	f043 0302 	orr.w	r3, r3, #2
 8005a76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01c      	beq.n	8005aca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff fe3b 	bl	800570c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <I2C_IsErrorOccurred+0x1bc>)
 8005aa2:	400b      	ands	r3, r1
 8005aa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3728      	adds	r7, #40	@ 0x28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	fe00e800 	.word	0xfe00e800

08005adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	817b      	strh	r3, [r7, #10]
 8005aea:	4613      	mov	r3, r2
 8005aec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aee:	897b      	ldrh	r3, [r7, #10]
 8005af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005af4:	7a7b      	ldrb	r3, [r7, #9]
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005afc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	0d5b      	lsrs	r3, r3, #21
 8005b16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005b1a:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <I2C_TransferConfig+0x60>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	ea02 0103 	and.w	r1, r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	03ff63ff 	.word	0x03ff63ff

08005b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d138      	bne.n	8005bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e032      	b.n	8005bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	@ 0x24
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d139      	bne.n	8005c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e033      	b.n	8005c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2224      	movs	r2, #36	@ 0x24
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005c74:	4b04      	ldr	r3, [pc, #16]	@ (8005c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40007000 	.word	0x40007000

08005c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c9a:	d130      	bne.n	8005cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c9c:	4b23      	ldr	r3, [pc, #140]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca8:	d038      	beq.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005caa:	4b20      	ldr	r3, [pc, #128]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cba:	4b1d      	ldr	r3, [pc, #116]	@ (8005d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2232      	movs	r2, #50	@ 0x32
 8005cc0:	fb02 f303 	mul.w	r3, r2, r3
 8005cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	0c9b      	lsrs	r3, r3, #18
 8005ccc:	3301      	adds	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cd0:	e002      	b.n	8005cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cd8:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce4:	d102      	bne.n	8005cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f2      	bne.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cec:	4b0f      	ldr	r3, [pc, #60]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf8:	d110      	bne.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e00f      	b.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0a:	d007      	beq.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d0c:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d14:	4a05      	ldr	r2, [pc, #20]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40007000 	.word	0x40007000
 8005d30:	20000000 	.word	0x20000000
 8005d34:	431bde83 	.word	0x431bde83

08005d38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	f000 bc02 	b.w	8006550 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4c:	4b96      	ldr	r3, [pc, #600]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 030c 	and.w	r3, r3, #12
 8005d54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d56:	4b94      	ldr	r3, [pc, #592]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80e4 	beq.w	8005f36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_RCC_OscConfig+0x4c>
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	f040 808b 	bne.w	8005e92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	f040 8087 	bne.w	8005e92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d84:	4b88      	ldr	r3, [pc, #544]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_OscConfig+0x64>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e3d9      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	4b81      	ldr	r3, [pc, #516]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_RCC_OscConfig+0x7e>
 8005dac:	4b7e      	ldr	r3, [pc, #504]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005db4:	e005      	b.n	8005dc2 <HAL_RCC_OscConfig+0x8a>
 8005db6:	4b7c      	ldr	r3, [pc, #496]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d223      	bcs.n	8005e0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fd8c 	bl	80068e8 <RCC_SetFlashLatencyFromMSIRange>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e3ba      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dda:	4b73      	ldr	r3, [pc, #460]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a72      	ldr	r2, [pc, #456]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005de0:	f043 0308 	orr.w	r3, r3, #8
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	4b70      	ldr	r3, [pc, #448]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	496d      	ldr	r1, [pc, #436]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005df8:	4b6b      	ldr	r3, [pc, #428]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	4968      	ldr	r1, [pc, #416]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]
 8005e0c:	e025      	b.n	8005e5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e0e:	4b66      	ldr	r3, [pc, #408]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a65      	ldr	r2, [pc, #404]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e14:	f043 0308 	orr.w	r3, r3, #8
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b63      	ldr	r3, [pc, #396]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	4960      	ldr	r1, [pc, #384]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	495b      	ldr	r1, [pc, #364]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fd4c 	bl	80068e8 <RCC_SetFlashLatencyFromMSIRange>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e37a      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e5a:	f000 fc81 	bl	8006760 <HAL_RCC_GetSysClockFreq>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	4950      	ldr	r1, [pc, #320]	@ (8005fac <HAL_RCC_OscConfig+0x274>)
 8005e6c:	5ccb      	ldrb	r3, [r1, r3]
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	4a4e      	ldr	r2, [pc, #312]	@ (8005fb0 <HAL_RCC_OscConfig+0x278>)
 8005e78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb4 <HAL_RCC_OscConfig+0x27c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd fa20 	bl	80032c4 <HAL_InitTick>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d052      	beq.n	8005f34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	e35e      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d032      	beq.n	8005f00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e9a:	4b43      	ldr	r3, [pc, #268]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a42      	ldr	r2, [pc, #264]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ea6:	f7fd fa5d 	bl	8003364 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005eae:	f7fd fa59 	bl	8003364 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e347      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ec0:	4b39      	ldr	r3, [pc, #228]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ecc:	4b36      	ldr	r3, [pc, #216]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a35      	ldr	r2, [pc, #212]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005ed2:	f043 0308 	orr.w	r3, r3, #8
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	4b33      	ldr	r3, [pc, #204]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	4930      	ldr	r1, [pc, #192]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eea:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	492b      	ldr	r1, [pc, #172]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	604b      	str	r3, [r1, #4]
 8005efe:	e01a      	b.n	8005f36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f00:	4b29      	ldr	r3, [pc, #164]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a28      	ldr	r2, [pc, #160]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f06:	f023 0301 	bic.w	r3, r3, #1
 8005f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f0c:	f7fd fa2a 	bl	8003364 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f14:	f7fd fa26 	bl	8003364 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e314      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f26:	4b20      	ldr	r3, [pc, #128]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x1dc>
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d073      	beq.n	800602a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_OscConfig+0x21c>
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b0c      	cmp	r3, #12
 8005f4c:	d10e      	bne.n	8005f6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d10b      	bne.n	8005f6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f54:	4b14      	ldr	r3, [pc, #80]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d063      	beq.n	8006028 <HAL_RCC_OscConfig+0x2f0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d15f      	bne.n	8006028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e2f1      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f74:	d106      	bne.n	8005f84 <HAL_RCC_OscConfig+0x24c>
 8005f76:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e025      	b.n	8005fd0 <HAL_RCC_OscConfig+0x298>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f8c:	d114      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x280>
 8005f8e:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a05      	ldr	r2, [pc, #20]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	4b03      	ldr	r3, [pc, #12]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a02      	ldr	r2, [pc, #8]	@ (8005fa8 <HAL_RCC_OscConfig+0x270>)
 8005fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e013      	b.n	8005fd0 <HAL_RCC_OscConfig+0x298>
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	08009eb8 	.word	0x08009eb8
 8005fb0:	20000000 	.word	0x20000000
 8005fb4:	20000004 	.word	0x20000004
 8005fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8005fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	4b9d      	ldr	r3, [pc, #628]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a9c      	ldr	r2, [pc, #624]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8005fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d013      	beq.n	8006000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd8:	f7fd f9c4 	bl	8003364 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe0:	f7fd f9c0 	bl	8003364 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	@ 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e2ae      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ff2:	4b92      	ldr	r3, [pc, #584]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x2a8>
 8005ffe:	e014      	b.n	800602a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fd f9b0 	bl	8003364 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006008:	f7fd f9ac 	bl	8003364 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	@ 0x64
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e29a      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800601a:	4b88      	ldr	r3, [pc, #544]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x2d0>
 8006026:	e000      	b.n	800602a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d060      	beq.n	80060f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d005      	beq.n	8006048 <HAL_RCC_OscConfig+0x310>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b0c      	cmp	r3, #12
 8006040:	d119      	bne.n	8006076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d116      	bne.n	8006076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006048:	4b7c      	ldr	r3, [pc, #496]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_RCC_OscConfig+0x328>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e277      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006060:	4b76      	ldr	r3, [pc, #472]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	061b      	lsls	r3, r3, #24
 800606e:	4973      	ldr	r1, [pc, #460]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006070:	4313      	orrs	r3, r2
 8006072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006074:	e040      	b.n	80060f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d023      	beq.n	80060c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800607e:	4b6f      	ldr	r3, [pc, #444]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6e      	ldr	r2, [pc, #440]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fd f96b 	bl	8003364 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006092:	f7fd f967 	bl	8003364 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e255      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060a4:	4b65      	ldr	r3, [pc, #404]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b0:	4b62      	ldr	r3, [pc, #392]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	495f      	ldr	r1, [pc, #380]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	604b      	str	r3, [r1, #4]
 80060c4:	e018      	b.n	80060f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060c6:	4b5d      	ldr	r3, [pc, #372]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a5c      	ldr	r2, [pc, #368]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80060cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fd f947 	bl	8003364 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060da:	f7fd f943 	bl	8003364 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e231      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060ec:	4b53      	ldr	r3, [pc, #332]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d03c      	beq.n	800617e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01c      	beq.n	8006146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800610c:	4b4b      	ldr	r3, [pc, #300]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 800610e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006112:	4a4a      	ldr	r2, [pc, #296]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fd f922 	bl	8003364 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006124:	f7fd f91e 	bl	8003364 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e20c      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006136:	4b41      	ldr	r3, [pc, #260]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0ef      	beq.n	8006124 <HAL_RCC_OscConfig+0x3ec>
 8006144:	e01b      	b.n	800617e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006146:	4b3d      	ldr	r3, [pc, #244]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614c:	4a3b      	ldr	r2, [pc, #236]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006156:	f7fd f905 	bl	8003364 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800615e:	f7fd f901 	bl	8003364 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e1ef      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006170:	4b32      	ldr	r3, [pc, #200]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ef      	bne.n	800615e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80a6 	beq.w	80062d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618c:	2300      	movs	r3, #0
 800618e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006190:	4b2a      	ldr	r3, [pc, #168]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10d      	bne.n	80061b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619c:	4b27      	ldr	r3, [pc, #156]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 800619e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a0:	4a26      	ldr	r2, [pc, #152]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80061a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061a8:	4b24      	ldr	r3, [pc, #144]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 80061aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b4:	2301      	movs	r3, #1
 80061b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061b8:	4b21      	ldr	r3, [pc, #132]	@ (8006240 <HAL_RCC_OscConfig+0x508>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d118      	bne.n	80061f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006240 <HAL_RCC_OscConfig+0x508>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006240 <HAL_RCC_OscConfig+0x508>)
 80061ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061d0:	f7fd f8c8 	bl	8003364 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d8:	f7fd f8c4 	bl	8003364 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e1b2      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ea:	4b15      	ldr	r3, [pc, #84]	@ (8006240 <HAL_RCC_OscConfig+0x508>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d108      	bne.n	8006210 <HAL_RCC_OscConfig+0x4d8>
 80061fe:	4b0f      	ldr	r3, [pc, #60]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006204:	4a0d      	ldr	r2, [pc, #52]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800620e:	e029      	b.n	8006264 <HAL_RCC_OscConfig+0x52c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b05      	cmp	r3, #5
 8006216:	d115      	bne.n	8006244 <HAL_RCC_OscConfig+0x50c>
 8006218:	4b08      	ldr	r3, [pc, #32]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621e:	4a07      	ldr	r2, [pc, #28]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006220:	f043 0304 	orr.w	r3, r3, #4
 8006224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006228:	4b04      	ldr	r3, [pc, #16]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	4a03      	ldr	r2, [pc, #12]	@ (800623c <HAL_RCC_OscConfig+0x504>)
 8006230:	f043 0301 	orr.w	r3, r3, #1
 8006234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006238:	e014      	b.n	8006264 <HAL_RCC_OscConfig+0x52c>
 800623a:	bf00      	nop
 800623c:	40021000 	.word	0x40021000
 8006240:	40007000 	.word	0x40007000
 8006244:	4b9a      	ldr	r3, [pc, #616]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624a:	4a99      	ldr	r2, [pc, #612]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006254:	4b96      	ldr	r3, [pc, #600]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625a:	4a95      	ldr	r2, [pc, #596]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800625c:	f023 0304 	bic.w	r3, r3, #4
 8006260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d016      	beq.n	800629a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626c:	f7fd f87a 	bl	8003364 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006272:	e00a      	b.n	800628a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006274:	f7fd f876 	bl	8003364 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006282:	4293      	cmp	r3, r2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e162      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800628a:	4b89      	ldr	r3, [pc, #548]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ed      	beq.n	8006274 <HAL_RCC_OscConfig+0x53c>
 8006298:	e015      	b.n	80062c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629a:	f7fd f863 	bl	8003364 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a2:	f7fd f85f 	bl	8003364 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e14b      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062b8:	4b7d      	ldr	r3, [pc, #500]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ed      	bne.n	80062a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062c6:	7ffb      	ldrb	r3, [r7, #31]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d105      	bne.n	80062d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062cc:	4b78      	ldr	r3, [pc, #480]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d0:	4a77      	ldr	r2, [pc, #476]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80062d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d03c      	beq.n	800635e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01c      	beq.n	8006326 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062ec:	4b70      	ldr	r3, [pc, #448]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80062ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062f2:	4a6f      	ldr	r2, [pc, #444]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fc:	f7fd f832 	bl	8003364 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006304:	f7fd f82e 	bl	8003364 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e11c      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006316:	4b66      	ldr	r3, [pc, #408]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ef      	beq.n	8006304 <HAL_RCC_OscConfig+0x5cc>
 8006324:	e01b      	b.n	800635e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006326:	4b62      	ldr	r3, [pc, #392]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006328:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800632c:	4a60      	ldr	r2, [pc, #384]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006336:	f7fd f815 	bl	8003364 <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800633e:	f7fd f811 	bl	8003364 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e0ff      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006350:	4b57      	ldr	r3, [pc, #348]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006352:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1ef      	bne.n	800633e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 80f3 	beq.w	800654e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	2b02      	cmp	r3, #2
 800636e:	f040 80c9 	bne.w	8006504 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006372:	4b4f      	ldr	r3, [pc, #316]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f003 0203 	and.w	r2, r3, #3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	429a      	cmp	r2, r3
 8006384:	d12c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	3b01      	subs	r3, #1
 8006392:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006394:	429a      	cmp	r2, r3
 8006396:	d123      	bne.n	80063e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d11b      	bne.n	80063e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d113      	bne.n	80063e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	3b01      	subs	r3, #1
 80063c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d109      	bne.n	80063e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	3b01      	subs	r3, #1
 80063da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063dc:	429a      	cmp	r2, r3
 80063de:	d06b      	beq.n	80064b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2b0c      	cmp	r3, #12
 80063e4:	d062      	beq.n	80064ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063e6:	4b32      	ldr	r3, [pc, #200]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0ac      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063f6:	4b2e      	ldr	r3, [pc, #184]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2d      	ldr	r2, [pc, #180]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80063fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006400:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006402:	f7fc ffaf 	bl	8003364 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640a:	f7fc ffab 	bl	8003364 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e099      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641c:	4b24      	ldr	r3, [pc, #144]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006428:	4b21      	ldr	r3, [pc, #132]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	4b21      	ldr	r3, [pc, #132]	@ (80064b4 <HAL_RCC_OscConfig+0x77c>)
 800642e:	4013      	ands	r3, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006438:	3a01      	subs	r2, #1
 800643a:	0112      	lsls	r2, r2, #4
 800643c:	4311      	orrs	r1, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006442:	0212      	lsls	r2, r2, #8
 8006444:	4311      	orrs	r1, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800644a:	0852      	lsrs	r2, r2, #1
 800644c:	3a01      	subs	r2, #1
 800644e:	0552      	lsls	r2, r2, #21
 8006450:	4311      	orrs	r1, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006456:	0852      	lsrs	r2, r2, #1
 8006458:	3a01      	subs	r2, #1
 800645a:	0652      	lsls	r2, r2, #25
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006462:	06d2      	lsls	r2, r2, #27
 8006464:	430a      	orrs	r2, r1
 8006466:	4912      	ldr	r1, [pc, #72]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006468:	4313      	orrs	r3, r2
 800646a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800646c:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a0f      	ldr	r2, [pc, #60]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 8006472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006476:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006478:	4b0d      	ldr	r3, [pc, #52]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a0c      	ldr	r2, [pc, #48]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800647e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006482:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006484:	f7fc ff6e 	bl	8003364 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800648c:	f7fc ff6a 	bl	8003364 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e058      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800649e:	4b04      	ldr	r3, [pc, #16]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064aa:	e050      	b.n	800654e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e04f      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
 80064b0:	40021000 	.word	0x40021000
 80064b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064b8:	4b27      	ldr	r3, [pc, #156]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d144      	bne.n	800654e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80064c4:	4b24      	ldr	r3, [pc, #144]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a23      	ldr	r2, [pc, #140]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 80064ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064d0:	4b21      	ldr	r3, [pc, #132]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	4a20      	ldr	r2, [pc, #128]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 80064d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064dc:	f7fc ff42 	bl	8003364 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e4:	f7fc ff3e 	bl	8003364 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e02c      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f6:	4b18      	ldr	r3, [pc, #96]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0x7ac>
 8006502:	e024      	b.n	800654e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b0c      	cmp	r3, #12
 8006508:	d01f      	beq.n	800654a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650a:	4b13      	ldr	r3, [pc, #76]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a12      	ldr	r2, [pc, #72]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 8006510:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006516:	f7fc ff25 	bl	8003364 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651e:	f7fc ff21 	bl	8003364 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e00f      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f0      	bne.n	800651e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	4905      	ldr	r1, [pc, #20]	@ (8006558 <HAL_RCC_OscConfig+0x820>)
 8006542:	4b06      	ldr	r3, [pc, #24]	@ (800655c <HAL_RCC_OscConfig+0x824>)
 8006544:	4013      	ands	r3, r2
 8006546:	60cb      	str	r3, [r1, #12]
 8006548:	e001      	b.n	800654e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40021000 	.word	0x40021000
 800655c:	feeefffc 	.word	0xfeeefffc

08006560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0e7      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006574:	4b75      	ldr	r3, [pc, #468]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d910      	bls.n	80065a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006582:	4b72      	ldr	r3, [pc, #456]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f023 0207 	bic.w	r2, r3, #7
 800658a:	4970      	ldr	r1, [pc, #448]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	4313      	orrs	r3, r2
 8006590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006592:	4b6e      	ldr	r3, [pc, #440]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d001      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0cf      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d010      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	4b66      	ldr	r3, [pc, #408]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065bc:	429a      	cmp	r2, r3
 80065be:	d908      	bls.n	80065d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c0:	4b63      	ldr	r3, [pc, #396]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	4960      	ldr	r1, [pc, #384]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d04c      	beq.n	8006678 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d107      	bne.n	80065f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d121      	bne.n	8006636 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0a6      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d107      	bne.n	800660e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065fe:	4b54      	ldr	r3, [pc, #336]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d115      	bne.n	8006636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e09a      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006616:	4b4e      	ldr	r3, [pc, #312]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e08e      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006626:	4b4a      	ldr	r3, [pc, #296]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e086      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006636:	4b46      	ldr	r3, [pc, #280]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f023 0203 	bic.w	r2, r3, #3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4943      	ldr	r1, [pc, #268]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006644:	4313      	orrs	r3, r2
 8006646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006648:	f7fc fe8c 	bl	8003364 <HAL_GetTick>
 800664c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664e:	e00a      	b.n	8006666 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006650:	f7fc fe88 	bl	8003364 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e06e      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006666:	4b3a      	ldr	r3, [pc, #232]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 020c 	and.w	r2, r3, #12
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	429a      	cmp	r2, r3
 8006676:	d1eb      	bne.n	8006650 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	4b31      	ldr	r3, [pc, #196]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006690:	429a      	cmp	r2, r3
 8006692:	d208      	bcs.n	80066a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006694:	4b2e      	ldr	r3, [pc, #184]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	492b      	ldr	r1, [pc, #172]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066a6:	4b29      	ldr	r3, [pc, #164]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d210      	bcs.n	80066d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b4:	4b25      	ldr	r3, [pc, #148]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f023 0207 	bic.w	r2, r3, #7
 80066bc:	4923      	ldr	r1, [pc, #140]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c4:	4b21      	ldr	r3, [pc, #132]	@ (800674c <HAL_RCC_ClockConfig+0x1ec>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e036      	b.n	8006744 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	4918      	ldr	r1, [pc, #96]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006700:	4b13      	ldr	r3, [pc, #76]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	4910      	ldr	r1, [pc, #64]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006714:	f000 f824 	bl	8006760 <HAL_RCC_GetSysClockFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <HAL_RCC_ClockConfig+0x1f0>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	490b      	ldr	r1, [pc, #44]	@ (8006754 <HAL_RCC_ClockConfig+0x1f4>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	4a09      	ldr	r2, [pc, #36]	@ (8006758 <HAL_RCC_ClockConfig+0x1f8>)
 8006732:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006734:	4b09      	ldr	r3, [pc, #36]	@ (800675c <HAL_RCC_ClockConfig+0x1fc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fc fdc3 	bl	80032c4 <HAL_InitTick>
 800673e:	4603      	mov	r3, r0
 8006740:	72fb      	strb	r3, [r7, #11]

  return status;
 8006742:	7afb      	ldrb	r3, [r7, #11]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40022000 	.word	0x40022000
 8006750:	40021000 	.word	0x40021000
 8006754:	08009eb8 	.word	0x08009eb8
 8006758:	20000000 	.word	0x20000000
 800675c:	20000004 	.word	0x20000004

08006760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006760:	b480      	push	{r7}
 8006762:	b089      	sub	sp, #36	@ 0x24
 8006764:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	2300      	movs	r3, #0
 800676c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800676e:	4b3e      	ldr	r3, [pc, #248]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 030c 	and.w	r3, r3, #12
 8006776:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006778:	4b3b      	ldr	r3, [pc, #236]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_RCC_GetSysClockFreq+0x34>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b0c      	cmp	r3, #12
 800678c:	d121      	bne.n	80067d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d11e      	bne.n	80067d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006794:	4b34      	ldr	r3, [pc, #208]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d107      	bne.n	80067b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80067a0:	4b31      	ldr	r3, [pc, #196]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 80067a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	e005      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	091b      	lsrs	r3, r3, #4
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80067bc:	4a2b      	ldr	r2, [pc, #172]	@ (800686c <HAL_RCC_GetSysClockFreq+0x10c>)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10d      	bne.n	80067e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067d0:	e00a      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d102      	bne.n	80067de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067d8:	4b25      	ldr	r3, [pc, #148]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x110>)
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e004      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d101      	bne.n	80067e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067e4:	4b23      	ldr	r3, [pc, #140]	@ (8006874 <HAL_RCC_GetSysClockFreq+0x114>)
 80067e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b0c      	cmp	r3, #12
 80067ec:	d134      	bne.n	8006858 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d003      	beq.n	8006806 <HAL_RCC_GetSysClockFreq+0xa6>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d003      	beq.n	800680c <HAL_RCC_GetSysClockFreq+0xac>
 8006804:	e005      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006806:	4b1a      	ldr	r3, [pc, #104]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x110>)
 8006808:	617b      	str	r3, [r7, #20]
      break;
 800680a:	e005      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800680c:	4b19      	ldr	r3, [pc, #100]	@ (8006874 <HAL_RCC_GetSysClockFreq+0x114>)
 800680e:	617b      	str	r3, [r7, #20]
      break;
 8006810:	e002      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	617b      	str	r3, [r7, #20]
      break;
 8006816:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006818:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	091b      	lsrs	r3, r3, #4
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	3301      	adds	r3, #1
 8006824:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006826:	4b10      	ldr	r3, [pc, #64]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	0a1b      	lsrs	r3, r3, #8
 800682c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	fb03 f202 	mul.w	r2, r3, r2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800683e:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x108>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	0e5b      	lsrs	r3, r3, #25
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	3301      	adds	r3, #1
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	fbb2 f3f3 	udiv	r3, r2, r3
 8006856:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006858:	69bb      	ldr	r3, [r7, #24]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3724      	adds	r7, #36	@ 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40021000 	.word	0x40021000
 800686c:	08009ed0 	.word	0x08009ed0
 8006870:	00f42400 	.word	0x00f42400
 8006874:	007a1200 	.word	0x007a1200

08006878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800687c:	4b03      	ldr	r3, [pc, #12]	@ (800688c <HAL_RCC_GetHCLKFreq+0x14>)
 800687e:	681b      	ldr	r3, [r3, #0]
}
 8006880:	4618      	mov	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	20000000 	.word	0x20000000

08006890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006894:	f7ff fff0 	bl	8006878 <HAL_RCC_GetHCLKFreq>
 8006898:	4602      	mov	r2, r0
 800689a:	4b06      	ldr	r3, [pc, #24]	@ (80068b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	4904      	ldr	r1, [pc, #16]	@ (80068b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068a6:	5ccb      	ldrb	r3, [r1, r3]
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40021000 	.word	0x40021000
 80068b8:	08009ec8 	.word	0x08009ec8

080068bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068c0:	f7ff ffda 	bl	8006878 <HAL_RCC_GetHCLKFreq>
 80068c4:	4602      	mov	r2, r0
 80068c6:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	0adb      	lsrs	r3, r3, #11
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	4904      	ldr	r1, [pc, #16]	@ (80068e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068d2:	5ccb      	ldrb	r3, [r1, r3]
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068dc:	4618      	mov	r0, r3
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	40021000 	.word	0x40021000
 80068e4:	08009ec8 	.word	0x08009ec8

080068e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80068f4:	4b2a      	ldr	r3, [pc, #168]	@ (80069a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006900:	f7ff f9b6 	bl	8005c70 <HAL_PWREx_GetVoltageRange>
 8006904:	6178      	str	r0, [r7, #20]
 8006906:	e014      	b.n	8006932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006908:	4b25      	ldr	r3, [pc, #148]	@ (80069a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800690a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690c:	4a24      	ldr	r2, [pc, #144]	@ (80069a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006912:	6593      	str	r3, [r2, #88]	@ 0x58
 8006914:	4b22      	ldr	r3, [pc, #136]	@ (80069a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006920:	f7ff f9a6 	bl	8005c70 <HAL_PWREx_GetVoltageRange>
 8006924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006926:	4b1e      	ldr	r3, [pc, #120]	@ (80069a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692a:	4a1d      	ldr	r2, [pc, #116]	@ (80069a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800692c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006930:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006938:	d10b      	bne.n	8006952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b80      	cmp	r3, #128	@ 0x80
 800693e:	d919      	bls.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2ba0      	cmp	r3, #160	@ 0xa0
 8006944:	d902      	bls.n	800694c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006946:	2302      	movs	r3, #2
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	e013      	b.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800694c:	2301      	movs	r3, #1
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	e010      	b.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b80      	cmp	r3, #128	@ 0x80
 8006956:	d902      	bls.n	800695e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006958:	2303      	movs	r3, #3
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	e00a      	b.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b80      	cmp	r3, #128	@ 0x80
 8006962:	d102      	bne.n	800696a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006964:	2302      	movs	r3, #2
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	e004      	b.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b70      	cmp	r3, #112	@ 0x70
 800696e:	d101      	bne.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006970:	2301      	movs	r3, #1
 8006972:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f023 0207 	bic.w	r2, r3, #7
 800697c:	4909      	ldr	r1, [pc, #36]	@ (80069a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006984:	4b07      	ldr	r3, [pc, #28]	@ (80069a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d001      	beq.n	8006996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40022000 	.word	0x40022000

080069a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069b0:	2300      	movs	r3, #0
 80069b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069b4:	2300      	movs	r3, #0
 80069b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d031      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80069cc:	d01a      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80069ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80069d2:	d814      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80069d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069dc:	d10f      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80069de:	4b5d      	ldr	r3, [pc, #372]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069ea:	e00c      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	2100      	movs	r1, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f9ce 	bl	8006d94 <RCCEx_PLLSAI1_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	74fb      	strb	r3, [r7, #19]
      break;
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a0c:	4b51      	ldr	r3, [pc, #324]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1a:	494e      	ldr	r1, [pc, #312]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006a22:	e001      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	7cfb      	ldrb	r3, [r7, #19]
 8006a26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 809e 	beq.w	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a36:	2300      	movs	r3, #0
 8006a38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a3a:	4b46      	ldr	r3, [pc, #280]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00d      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a50:	4b40      	ldr	r3, [pc, #256]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a54:	4a3f      	ldr	r2, [pc, #252]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a39      	ldr	r2, [pc, #228]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a78:	f7fc fc74 	bl	8003364 <HAL_GetTick>
 8006a7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a7e:	e009      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a80:	f7fc fc70 	bl	8003364 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d902      	bls.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	74fb      	strb	r3, [r7, #19]
        break;
 8006a92:	e005      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a94:	4b30      	ldr	r3, [pc, #192]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ef      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006aa0:	7cfb      	ldrb	r3, [r7, #19]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d15a      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ab0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01e      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d019      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ac2:	4b24      	ldr	r3, [pc, #144]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006acc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ace:	4b21      	ldr	r3, [pc, #132]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ade:	4b1d      	ldr	r3, [pc, #116]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006aee:	4a19      	ldr	r2, [pc, #100]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d016      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fc fc30 	bl	8003364 <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b06:	e00b      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b08:	f7fc fc2c 	bl	8003364 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d902      	bls.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	74fb      	strb	r3, [r7, #19]
            break;
 8006b1e:	e006      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b20:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ec      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006b2e:	7cfb      	ldrb	r3, [r7, #19]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b34:	4b07      	ldr	r3, [pc, #28]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b42:	4904      	ldr	r1, [pc, #16]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b4a:	e009      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b4c:	7cfb      	ldrb	r3, [r7, #19]
 8006b4e:	74bb      	strb	r3, [r7, #18]
 8006b50:	e006      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5c:	7cfb      	ldrb	r3, [r7, #19]
 8006b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b60:	7c7b      	ldrb	r3, [r7, #17]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d105      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b66:	4b8a      	ldr	r3, [pc, #552]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6a:	4a89      	ldr	r2, [pc, #548]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b7e:	4b84      	ldr	r3, [pc, #528]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b84:	f023 0203 	bic.w	r2, r3, #3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	4980      	ldr	r1, [pc, #512]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ba0:	4b7b      	ldr	r3, [pc, #492]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba6:	f023 020c 	bic.w	r2, r3, #12
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	4978      	ldr	r1, [pc, #480]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bc2:	4b73      	ldr	r3, [pc, #460]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	496f      	ldr	r1, [pc, #444]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006be4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bea:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf2:	4967      	ldr	r1, [pc, #412]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c06:	4b62      	ldr	r3, [pc, #392]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	495e      	ldr	r1, [pc, #376]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c28:	4b59      	ldr	r3, [pc, #356]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	4956      	ldr	r1, [pc, #344]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c4a:	4b51      	ldr	r3, [pc, #324]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c58:	494d      	ldr	r1, [pc, #308]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d028      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c6c:	4b48      	ldr	r3, [pc, #288]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	4945      	ldr	r1, [pc, #276]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c8c:	4b40      	ldr	r3, [pc, #256]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4a3f      	ldr	r2, [pc, #252]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c96:	60d3      	str	r3, [r2, #12]
 8006c98:	e011      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ca2:	d10c      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f872 	bl	8006d94 <RCCEx_PLLSAI1_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006cb4:	7cfb      	ldrb	r3, [r7, #19]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
 8006cbc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d028      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cca:	4b31      	ldr	r3, [pc, #196]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd8:	492d      	ldr	r1, [pc, #180]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ce8:	d106      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cea:	4b29      	ldr	r3, [pc, #164]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	4a28      	ldr	r2, [pc, #160]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf4:	60d3      	str	r3, [r2, #12]
 8006cf6:	e011      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	2101      	movs	r1, #1
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f843 	bl	8006d94 <RCCEx_PLLSAI1_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006d18:	7cfb      	ldrb	r3, [r7, #19]
 8006d1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01c      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d28:	4b19      	ldr	r3, [pc, #100]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d36:	4916      	ldr	r1, [pc, #88]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d46:	d10c      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 f820 	bl	8006d94 <RCCEx_PLLSAI1_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d58:	7cfb      	ldrb	r3, [r7, #19]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006d5e:	7cfb      	ldrb	r3, [r7, #19]
 8006d60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d6e:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d74:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d7c:	4904      	ldr	r1, [pc, #16]	@ (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d84:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40021000 	.word	0x40021000

08006d94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006da2:	4b74      	ldr	r3, [pc, #464]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d018      	beq.n	8006de0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006dae:	4b71      	ldr	r3, [pc, #452]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f003 0203 	and.w	r2, r3, #3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10d      	bne.n	8006dda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
       ||
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006dc6:	4b6b      	ldr	r3, [pc, #428]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
       ||
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d047      	beq.n	8006e6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	e044      	b.n	8006e6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d018      	beq.n	8006e1a <RCCEx_PLLSAI1_Config+0x86>
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d825      	bhi.n	8006e38 <RCCEx_PLLSAI1_Config+0xa4>
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d002      	beq.n	8006df6 <RCCEx_PLLSAI1_Config+0x62>
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d009      	beq.n	8006e08 <RCCEx_PLLSAI1_Config+0x74>
 8006df4:	e020      	b.n	8006e38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006df6:	4b5f      	ldr	r3, [pc, #380]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d11d      	bne.n	8006e3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e06:	e01a      	b.n	8006e3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e08:	4b5a      	ldr	r3, [pc, #360]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d116      	bne.n	8006e42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e18:	e013      	b.n	8006e42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e1a:	4b56      	ldr	r3, [pc, #344]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10f      	bne.n	8006e46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e26:	4b53      	ldr	r3, [pc, #332]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e36:	e006      	b.n	8006e46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3c:	e004      	b.n	8006e48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e3e:	bf00      	nop
 8006e40:	e002      	b.n	8006e48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e42:	bf00      	nop
 8006e44:	e000      	b.n	8006e48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e46:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10d      	bne.n	8006e6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e4e:	4b49      	ldr	r3, [pc, #292]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6819      	ldr	r1, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	430b      	orrs	r3, r1
 8006e64:	4943      	ldr	r1, [pc, #268]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d17c      	bne.n	8006f6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e70:	4b40      	ldr	r3, [pc, #256]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a3f      	ldr	r2, [pc, #252]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7c:	f7fc fa72 	bl	8003364 <HAL_GetTick>
 8006e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e82:	e009      	b.n	8006e98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e84:	f7fc fa6e 	bl	8003364 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d902      	bls.n	8006e98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	73fb      	strb	r3, [r7, #15]
        break;
 8006e96:	e005      	b.n	8006ea4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e98:	4b36      	ldr	r3, [pc, #216]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1ef      	bne.n	8006e84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d15f      	bne.n	8006f6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d110      	bne.n	8006ed2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006eb0:	4b30      	ldr	r3, [pc, #192]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006eb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6892      	ldr	r2, [r2, #8]
 8006ec0:	0211      	lsls	r1, r2, #8
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68d2      	ldr	r2, [r2, #12]
 8006ec6:	06d2      	lsls	r2, r2, #27
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	492a      	ldr	r1, [pc, #168]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	610b      	str	r3, [r1, #16]
 8006ed0:	e027      	b.n	8006f22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d112      	bne.n	8006efe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ed8:	4b26      	ldr	r3, [pc, #152]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006ee0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6892      	ldr	r2, [r2, #8]
 8006ee8:	0211      	lsls	r1, r2, #8
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6912      	ldr	r2, [r2, #16]
 8006eee:	0852      	lsrs	r2, r2, #1
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	0552      	lsls	r2, r2, #21
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	491f      	ldr	r1, [pc, #124]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	610b      	str	r3, [r1, #16]
 8006efc:	e011      	b.n	8006f22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006efe:	4b1d      	ldr	r3, [pc, #116]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006f06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6892      	ldr	r2, [r2, #8]
 8006f0e:	0211      	lsls	r1, r2, #8
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6952      	ldr	r2, [r2, #20]
 8006f14:	0852      	lsrs	r2, r2, #1
 8006f16:	3a01      	subs	r2, #1
 8006f18:	0652      	lsls	r2, r2, #25
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	4915      	ldr	r1, [pc, #84]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f22:	4b14      	ldr	r3, [pc, #80]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a13      	ldr	r2, [pc, #76]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f2e:	f7fc fa19 	bl	8003364 <HAL_GetTick>
 8006f32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f34:	e009      	b.n	8006f4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f36:	f7fc fa15 	bl	8003364 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d902      	bls.n	8006f4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	73fb      	strb	r3, [r7, #15]
          break;
 8006f48:	e005      	b.n	8006f56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0ef      	beq.n	8006f36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d106      	bne.n	8006f6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f5c:	4b05      	ldr	r3, [pc, #20]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	4903      	ldr	r1, [pc, #12]	@ (8006f74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40021000 	.word	0x40021000

08006f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e095      	b.n	80070b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d108      	bne.n	8006fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f9a:	d009      	beq.n	8006fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	61da      	str	r2, [r3, #28]
 8006fa2:	e005      	b.n	8006fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fb fe48 	bl	8002c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ff0:	d902      	bls.n	8006ff8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e002      	b.n	8006ffe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ffc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007006:	d007      	beq.n	8007018 <HAL_SPI_Init+0xa0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007010:	d002      	beq.n	8007018 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800705a:	ea42 0103 	orr.w	r1, r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	f003 0204 	and.w	r2, r3, #4
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007094:	ea42 0103 	orr.w	r1, r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e049      	b.n	8007164 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fb ff59 	bl	8002f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f000 f8ff 	bl	8007300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_TIM_ConfigClockSource+0x1c>
 8007184:	2302      	movs	r3, #2
 8007186:	e0b6      	b.n	80072f6 <HAL_TIM_ConfigClockSource+0x18a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80071aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c4:	d03e      	beq.n	8007244 <HAL_TIM_ConfigClockSource+0xd8>
 80071c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ca:	f200 8087 	bhi.w	80072dc <HAL_TIM_ConfigClockSource+0x170>
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d2:	f000 8086 	beq.w	80072e2 <HAL_TIM_ConfigClockSource+0x176>
 80071d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071da:	d87f      	bhi.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
 80071dc:	2b70      	cmp	r3, #112	@ 0x70
 80071de:	d01a      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0xaa>
 80071e0:	2b70      	cmp	r3, #112	@ 0x70
 80071e2:	d87b      	bhi.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
 80071e4:	2b60      	cmp	r3, #96	@ 0x60
 80071e6:	d050      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x11e>
 80071e8:	2b60      	cmp	r3, #96	@ 0x60
 80071ea:	d877      	bhi.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
 80071ec:	2b50      	cmp	r3, #80	@ 0x50
 80071ee:	d03c      	beq.n	800726a <HAL_TIM_ConfigClockSource+0xfe>
 80071f0:	2b50      	cmp	r3, #80	@ 0x50
 80071f2:	d873      	bhi.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
 80071f4:	2b40      	cmp	r3, #64	@ 0x40
 80071f6:	d058      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x13e>
 80071f8:	2b40      	cmp	r3, #64	@ 0x40
 80071fa:	d86f      	bhi.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
 80071fc:	2b30      	cmp	r3, #48	@ 0x30
 80071fe:	d064      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0x15e>
 8007200:	2b30      	cmp	r3, #48	@ 0x30
 8007202:	d86b      	bhi.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
 8007204:	2b20      	cmp	r3, #32
 8007206:	d060      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0x15e>
 8007208:	2b20      	cmp	r3, #32
 800720a:	d867      	bhi.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d05c      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0x15e>
 8007210:	2b10      	cmp	r3, #16
 8007212:	d05a      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0x15e>
 8007214:	e062      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007226:	f000 f955 	bl	80074d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	609a      	str	r2, [r3, #8]
      break;
 8007242:	e04f      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007254:	f000 f93e 	bl	80074d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007266:	609a      	str	r2, [r3, #8]
      break;
 8007268:	e03c      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007276:	461a      	mov	r2, r3
 8007278:	f000 f8b2 	bl	80073e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2150      	movs	r1, #80	@ 0x50
 8007282:	4618      	mov	r0, r3
 8007284:	f000 f90b 	bl	800749e <TIM_ITRx_SetConfig>
      break;
 8007288:	e02c      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007296:	461a      	mov	r2, r3
 8007298:	f000 f8d1 	bl	800743e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2160      	movs	r1, #96	@ 0x60
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f8fb 	bl	800749e <TIM_ITRx_SetConfig>
      break;
 80072a8:	e01c      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b6:	461a      	mov	r2, r3
 80072b8:	f000 f892 	bl	80073e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2140      	movs	r1, #64	@ 0x40
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f8eb 	bl	800749e <TIM_ITRx_SetConfig>
      break;
 80072c8:	e00c      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4619      	mov	r1, r3
 80072d4:	4610      	mov	r0, r2
 80072d6:	f000 f8e2 	bl	800749e <TIM_ITRx_SetConfig>
      break;
 80072da:	e003      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
      break;
 80072e0:	e000      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80072e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a30      	ldr	r2, [pc, #192]	@ (80073d4 <TIM_Base_SetConfig+0xd4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x20>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a27      	ldr	r2, [pc, #156]	@ (80073d4 <TIM_Base_SetConfig+0xd4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00b      	beq.n	8007352 <TIM_Base_SetConfig+0x52>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007340:	d007      	beq.n	8007352 <TIM_Base_SetConfig+0x52>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a24      	ldr	r2, [pc, #144]	@ (80073d8 <TIM_Base_SetConfig+0xd8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_Base_SetConfig+0x52>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a23      	ldr	r2, [pc, #140]	@ (80073dc <TIM_Base_SetConfig+0xdc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d108      	bne.n	8007364 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a12      	ldr	r2, [pc, #72]	@ (80073d4 <TIM_Base_SetConfig+0xd4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_Base_SetConfig+0xa0>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a11      	ldr	r2, [pc, #68]	@ (80073d8 <TIM_Base_SetConfig+0xd8>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_Base_SetConfig+0xa0>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a10      	ldr	r2, [pc, #64]	@ (80073dc <TIM_Base_SetConfig+0xdc>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d103      	bne.n	80073a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d105      	bne.n	80073c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f023 0201 	bic.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	611a      	str	r2, [r3, #16]
  }
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40012c00 	.word	0x40012c00
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40014400 	.word	0x40014400

080073e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f023 0201 	bic.w	r2, r3, #1
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800740a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f023 030a 	bic.w	r3, r3, #10
 800741c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800743e:	b480      	push	{r7}
 8007440:	b087      	sub	sp, #28
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	f023 0210 	bic.w	r2, r3, #16
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	031b      	lsls	r3, r3, #12
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800747a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f043 0307 	orr.w	r3, r3, #7
 80074c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	609a      	str	r2, [r3, #8]
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	021a      	lsls	r2, r3, #8
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007528:	2302      	movs	r3, #2
 800752a:	e04f      	b.n	80075cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a21      	ldr	r2, [pc, #132]	@ (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d108      	bne.n	8007568 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800755c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800756e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a14      	ldr	r2, [pc, #80]	@ (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007594:	d004      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a10      	ldr	r2, [pc, #64]	@ (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10c      	bne.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40014000 	.word	0x40014000

080075e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e040      	b.n	8007674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fb fd4c 	bl	80030a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2224      	movs	r2, #36	@ 0x24
 800760c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fade 	bl	8007be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f8af 	bl	8007790 <UART_SetConfig>
 8007632:	4603      	mov	r3, r0
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e01b      	b.n	8007674 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800764a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800765a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fb5d 	bl	8007d2c <UART_CheckIdleState>
 8007672:	4603      	mov	r3, r0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	@ 0x28
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007690:	2b20      	cmp	r3, #32
 8007692:	d177      	bne.n	8007784 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_UART_Transmit+0x24>
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e070      	b.n	8007786 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2221      	movs	r2, #33	@ 0x21
 80076b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076b2:	f7fb fe57 	bl	8003364 <HAL_GetTick>
 80076b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	88fa      	ldrh	r2, [r7, #6]
 80076bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d0:	d108      	bne.n	80076e4 <HAL_UART_Transmit+0x68>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	e003      	b.n	80076ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076ec:	e02f      	b.n	800774e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2180      	movs	r1, #128	@ 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fbbf 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e03b      	b.n	8007786 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	881a      	ldrh	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007720:	b292      	uxth	r2, r2
 8007722:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	3302      	adds	r3, #2
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e007      	b.n	800773c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	3301      	adds	r3, #1
 800773a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1c9      	bne.n	80076ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2200      	movs	r2, #0
 8007762:	2140      	movs	r1, #64	@ 0x40
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fb89 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e005      	b.n	8007786 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	e000      	b.n	8007786 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007794:	b08a      	sub	sp, #40	@ 0x28
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	431a      	orrs	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	431a      	orrs	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4bb4      	ldr	r3, [pc, #720]	@ (8007a90 <UART_SetConfig+0x300>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4aa9      	ldr	r2, [pc, #676]	@ (8007a94 <UART_SetConfig+0x304>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f8:	4313      	orrs	r3, r2
 80077fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4aa0      	ldr	r2, [pc, #640]	@ (8007a98 <UART_SetConfig+0x308>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d126      	bne.n	8007868 <UART_SetConfig+0xd8>
 800781a:	4ba0      	ldr	r3, [pc, #640]	@ (8007a9c <UART_SetConfig+0x30c>)
 800781c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	2b03      	cmp	r3, #3
 8007826:	d81b      	bhi.n	8007860 <UART_SetConfig+0xd0>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <UART_SetConfig+0xa0>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007841 	.word	0x08007841
 8007834:	08007851 	.word	0x08007851
 8007838:	08007849 	.word	0x08007849
 800783c:	08007859 	.word	0x08007859
 8007840:	2301      	movs	r3, #1
 8007842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007846:	e080      	b.n	800794a <UART_SetConfig+0x1ba>
 8007848:	2302      	movs	r3, #2
 800784a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800784e:	e07c      	b.n	800794a <UART_SetConfig+0x1ba>
 8007850:	2304      	movs	r3, #4
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007856:	e078      	b.n	800794a <UART_SetConfig+0x1ba>
 8007858:	2308      	movs	r3, #8
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785e:	e074      	b.n	800794a <UART_SetConfig+0x1ba>
 8007860:	2310      	movs	r3, #16
 8007862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007866:	e070      	b.n	800794a <UART_SetConfig+0x1ba>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a8c      	ldr	r2, [pc, #560]	@ (8007aa0 <UART_SetConfig+0x310>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d138      	bne.n	80078e4 <UART_SetConfig+0x154>
 8007872:	4b8a      	ldr	r3, [pc, #552]	@ (8007a9c <UART_SetConfig+0x30c>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007878:	f003 030c 	and.w	r3, r3, #12
 800787c:	2b0c      	cmp	r3, #12
 800787e:	d82d      	bhi.n	80078dc <UART_SetConfig+0x14c>
 8007880:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <UART_SetConfig+0xf8>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078bd 	.word	0x080078bd
 800788c:	080078dd 	.word	0x080078dd
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078dd 	.word	0x080078dd
 8007898:	080078cd 	.word	0x080078cd
 800789c:	080078dd 	.word	0x080078dd
 80078a0:	080078dd 	.word	0x080078dd
 80078a4:	080078dd 	.word	0x080078dd
 80078a8:	080078c5 	.word	0x080078c5
 80078ac:	080078dd 	.word	0x080078dd
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078dd 	.word	0x080078dd
 80078b8:	080078d5 	.word	0x080078d5
 80078bc:	2300      	movs	r3, #0
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c2:	e042      	b.n	800794a <UART_SetConfig+0x1ba>
 80078c4:	2302      	movs	r3, #2
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ca:	e03e      	b.n	800794a <UART_SetConfig+0x1ba>
 80078cc:	2304      	movs	r3, #4
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d2:	e03a      	b.n	800794a <UART_SetConfig+0x1ba>
 80078d4:	2308      	movs	r3, #8
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078da:	e036      	b.n	800794a <UART_SetConfig+0x1ba>
 80078dc:	2310      	movs	r3, #16
 80078de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078e2:	e032      	b.n	800794a <UART_SetConfig+0x1ba>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a6a      	ldr	r2, [pc, #424]	@ (8007a94 <UART_SetConfig+0x304>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d12a      	bne.n	8007944 <UART_SetConfig+0x1b4>
 80078ee:	4b6b      	ldr	r3, [pc, #428]	@ (8007a9c <UART_SetConfig+0x30c>)
 80078f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078fc:	d01a      	beq.n	8007934 <UART_SetConfig+0x1a4>
 80078fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007902:	d81b      	bhi.n	800793c <UART_SetConfig+0x1ac>
 8007904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007908:	d00c      	beq.n	8007924 <UART_SetConfig+0x194>
 800790a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800790e:	d815      	bhi.n	800793c <UART_SetConfig+0x1ac>
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <UART_SetConfig+0x18c>
 8007914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007918:	d008      	beq.n	800792c <UART_SetConfig+0x19c>
 800791a:	e00f      	b.n	800793c <UART_SetConfig+0x1ac>
 800791c:	2300      	movs	r3, #0
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007922:	e012      	b.n	800794a <UART_SetConfig+0x1ba>
 8007924:	2302      	movs	r3, #2
 8007926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792a:	e00e      	b.n	800794a <UART_SetConfig+0x1ba>
 800792c:	2304      	movs	r3, #4
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007932:	e00a      	b.n	800794a <UART_SetConfig+0x1ba>
 8007934:	2308      	movs	r3, #8
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	e006      	b.n	800794a <UART_SetConfig+0x1ba>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007942:	e002      	b.n	800794a <UART_SetConfig+0x1ba>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a51      	ldr	r2, [pc, #324]	@ (8007a94 <UART_SetConfig+0x304>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d17a      	bne.n	8007a4a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007954:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007958:	2b08      	cmp	r3, #8
 800795a:	d824      	bhi.n	80079a6 <UART_SetConfig+0x216>
 800795c:	a201      	add	r2, pc, #4	@ (adr r2, 8007964 <UART_SetConfig+0x1d4>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	08007989 	.word	0x08007989
 8007968:	080079a7 	.word	0x080079a7
 800796c:	08007991 	.word	0x08007991
 8007970:	080079a7 	.word	0x080079a7
 8007974:	08007997 	.word	0x08007997
 8007978:	080079a7 	.word	0x080079a7
 800797c:	080079a7 	.word	0x080079a7
 8007980:	080079a7 	.word	0x080079a7
 8007984:	0800799f 	.word	0x0800799f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007988:	f7fe ff82 	bl	8006890 <HAL_RCC_GetPCLK1Freq>
 800798c:	61f8      	str	r0, [r7, #28]
        break;
 800798e:	e010      	b.n	80079b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007990:	4b44      	ldr	r3, [pc, #272]	@ (8007aa4 <UART_SetConfig+0x314>)
 8007992:	61fb      	str	r3, [r7, #28]
        break;
 8007994:	e00d      	b.n	80079b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007996:	f7fe fee3 	bl	8006760 <HAL_RCC_GetSysClockFreq>
 800799a:	61f8      	str	r0, [r7, #28]
        break;
 800799c:	e009      	b.n	80079b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800799e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a2:	61fb      	str	r3, [r7, #28]
        break;
 80079a4:	e005      	b.n	80079b2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8107 	beq.w	8007bc8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	4613      	mov	r3, r2
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	4413      	add	r3, r2
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d305      	bcc.n	80079d6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d903      	bls.n	80079de <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079dc:	e0f4      	b.n	8007bc8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	2200      	movs	r2, #0
 80079e2:	461c      	mov	r4, r3
 80079e4:	4615      	mov	r5, r2
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	022b      	lsls	r3, r5, #8
 80079f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80079f4:	0222      	lsls	r2, r4, #8
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	6849      	ldr	r1, [r1, #4]
 80079fa:	0849      	lsrs	r1, r1, #1
 80079fc:	2000      	movs	r0, #0
 80079fe:	4688      	mov	r8, r1
 8007a00:	4681      	mov	r9, r0
 8007a02:	eb12 0a08 	adds.w	sl, r2, r8
 8007a06:	eb43 0b09 	adc.w	fp, r3, r9
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a18:	4650      	mov	r0, sl
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	f7f9 f90c 	bl	8000c38 <__aeabi_uldivmod>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4613      	mov	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a2e:	d308      	bcc.n	8007a42 <UART_SetConfig+0x2b2>
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a36:	d204      	bcs.n	8007a42 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	e0c2      	b.n	8007bc8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a48:	e0be      	b.n	8007bc8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a52:	d16a      	bne.n	8007b2a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007a54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d834      	bhi.n	8007ac6 <UART_SetConfig+0x336>
 8007a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a64 <UART_SetConfig+0x2d4>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a89 	.word	0x08007a89
 8007a68:	08007aa9 	.word	0x08007aa9
 8007a6c:	08007ab1 	.word	0x08007ab1
 8007a70:	08007ac7 	.word	0x08007ac7
 8007a74:	08007ab7 	.word	0x08007ab7
 8007a78:	08007ac7 	.word	0x08007ac7
 8007a7c:	08007ac7 	.word	0x08007ac7
 8007a80:	08007ac7 	.word	0x08007ac7
 8007a84:	08007abf 	.word	0x08007abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a88:	f7fe ff02 	bl	8006890 <HAL_RCC_GetPCLK1Freq>
 8007a8c:	61f8      	str	r0, [r7, #28]
        break;
 8007a8e:	e020      	b.n	8007ad2 <UART_SetConfig+0x342>
 8007a90:	efff69f3 	.word	0xefff69f3
 8007a94:	40008000 	.word	0x40008000
 8007a98:	40013800 	.word	0x40013800
 8007a9c:	40021000 	.word	0x40021000
 8007aa0:	40004400 	.word	0x40004400
 8007aa4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa8:	f7fe ff08 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8007aac:	61f8      	str	r0, [r7, #28]
        break;
 8007aae:	e010      	b.n	8007ad2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8007be4 <UART_SetConfig+0x454>)
 8007ab2:	61fb      	str	r3, [r7, #28]
        break;
 8007ab4:	e00d      	b.n	8007ad2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ab6:	f7fe fe53 	bl	8006760 <HAL_RCC_GetSysClockFreq>
 8007aba:	61f8      	str	r0, [r7, #28]
        break;
 8007abc:	e009      	b.n	8007ad2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac2:	61fb      	str	r3, [r7, #28]
        break;
 8007ac4:	e005      	b.n	8007ad2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d077      	beq.n	8007bc8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	005a      	lsls	r2, r3, #1
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	085b      	lsrs	r3, r3, #1
 8007ae2:	441a      	add	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b0f      	cmp	r3, #15
 8007af2:	d916      	bls.n	8007b22 <UART_SetConfig+0x392>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007afa:	d212      	bcs.n	8007b22 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f023 030f 	bic.w	r3, r3, #15
 8007b04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	085b      	lsrs	r3, r3, #1
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	8afb      	ldrh	r3, [r7, #22]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	8afa      	ldrh	r2, [r7, #22]
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	e052      	b.n	8007bc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b28:	e04e      	b.n	8007bc8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d827      	bhi.n	8007b82 <UART_SetConfig+0x3f2>
 8007b32:	a201      	add	r2, pc, #4	@ (adr r2, 8007b38 <UART_SetConfig+0x3a8>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	08007b83 	.word	0x08007b83
 8007b48:	08007b73 	.word	0x08007b73
 8007b4c:	08007b83 	.word	0x08007b83
 8007b50:	08007b83 	.word	0x08007b83
 8007b54:	08007b83 	.word	0x08007b83
 8007b58:	08007b7b 	.word	0x08007b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b5c:	f7fe fe98 	bl	8006890 <HAL_RCC_GetPCLK1Freq>
 8007b60:	61f8      	str	r0, [r7, #28]
        break;
 8007b62:	e014      	b.n	8007b8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b64:	f7fe feaa 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8007b68:	61f8      	str	r0, [r7, #28]
        break;
 8007b6a:	e010      	b.n	8007b8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007be4 <UART_SetConfig+0x454>)
 8007b6e:	61fb      	str	r3, [r7, #28]
        break;
 8007b70:	e00d      	b.n	8007b8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b72:	f7fe fdf5 	bl	8006760 <HAL_RCC_GetSysClockFreq>
 8007b76:	61f8      	str	r0, [r7, #28]
        break;
 8007b78:	e009      	b.n	8007b8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b7e:	61fb      	str	r3, [r7, #28]
        break;
 8007b80:	e005      	b.n	8007b8e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d019      	beq.n	8007bc8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	085a      	lsrs	r2, r3, #1
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	441a      	add	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	2b0f      	cmp	r3, #15
 8007bac:	d909      	bls.n	8007bc2 <UART_SetConfig+0x432>
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d205      	bcs.n	8007bc2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60da      	str	r2, [r3, #12]
 8007bc0:	e002      	b.n	8007bc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3728      	adds	r7, #40	@ 0x28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007be2:	bf00      	nop
 8007be4:	00f42400 	.word	0x00f42400

08007be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ce6:	d10a      	bne.n	8007cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b098      	sub	sp, #96	@ 0x60
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d3c:	f7fb fb12 	bl	8003364 <HAL_GetTick>
 8007d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d12e      	bne.n	8007dae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f88c 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d021      	beq.n	8007dae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e6      	bne.n	8007d6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e062      	b.n	8007e74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d149      	bne.n	8007e50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f856 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d03c      	beq.n	8007e50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	623b      	str	r3, [r7, #32]
   return(result);
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e6      	bne.n	8007dd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0301 	bic.w	r3, r3, #1
 8007e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e28:	61fa      	str	r2, [r7, #28]
 8007e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	69b9      	ldr	r1, [r7, #24]
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	617b      	str	r3, [r7, #20]
   return(result);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e5      	bne.n	8007e08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e011      	b.n	8007e74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3758      	adds	r7, #88	@ 0x58
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e8c:	e04f      	b.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e94:	d04b      	beq.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e96:	f7fb fa65 	bl	8003364 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d302      	bcc.n	8007eac <UART_WaitOnFlagUntilTimeout+0x30>
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e04e      	b.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d037      	beq.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b80      	cmp	r3, #128	@ 0x80
 8007ec2:	d034      	beq.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b40      	cmp	r3, #64	@ 0x40
 8007ec8:	d031      	beq.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d110      	bne.n	8007efa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2208      	movs	r2, #8
 8007ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f838 	bl	8007f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e029      	b.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f08:	d111      	bne.n	8007f2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f81e 	bl	8007f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e00f      	b.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	4013      	ands	r3, r2
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	2300      	movne	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d0a0      	beq.n	8007e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b095      	sub	sp, #84	@ 0x54
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3308      	adds	r3, #8
 8007f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e5      	bne.n	8007f90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d118      	bne.n	8007ffe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f023 0310 	bic.w	r3, r3, #16
 8007fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008012:	bf00      	nop
 8008014:	3754      	adds	r7, #84	@ 0x54
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b086      	sub	sp, #24
 8008022:	af00      	add	r7, sp, #0
 8008024:	60f8      	str	r0, [r7, #12]
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	607a      	str	r2, [r7, #4]
 800802a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e056      	b.n	80080e4 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7fb f82a 	bl	80030a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2224      	movs	r2, #36	@ 0x24
 8008050:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7ff fdbc 	bl	8007be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fb8d 	bl	8007790 <UART_SetConfig>
 8008076:	4603      	mov	r3, r0
 8008078:	2b01      	cmp	r3, #1
 800807a:	d101      	bne.n	8008080 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e031      	b.n	80080e4 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800808e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	055b      	lsls	r3, r3, #21
 80080a8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	041b      	lsls	r3, r3, #16
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80080be:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	6979      	ldr	r1, [r7, #20]
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f042 0201 	orr.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff fe25 	bl	8007d2c <UART_CheckIdleState>
 80080e2:	4603      	mov	r3, r0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <std>:
 80080ec:	2300      	movs	r3, #0
 80080ee:	b510      	push	{r4, lr}
 80080f0:	4604      	mov	r4, r0
 80080f2:	e9c0 3300 	strd	r3, r3, [r0]
 80080f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080fa:	6083      	str	r3, [r0, #8]
 80080fc:	8181      	strh	r1, [r0, #12]
 80080fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008100:	81c2      	strh	r2, [r0, #14]
 8008102:	6183      	str	r3, [r0, #24]
 8008104:	4619      	mov	r1, r3
 8008106:	2208      	movs	r2, #8
 8008108:	305c      	adds	r0, #92	@ 0x5c
 800810a:	f000 f8c3 	bl	8008294 <memset>
 800810e:	4b0d      	ldr	r3, [pc, #52]	@ (8008144 <std+0x58>)
 8008110:	6263      	str	r3, [r4, #36]	@ 0x24
 8008112:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <std+0x5c>)
 8008114:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008116:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <std+0x60>)
 8008118:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800811a:	4b0d      	ldr	r3, [pc, #52]	@ (8008150 <std+0x64>)
 800811c:	6323      	str	r3, [r4, #48]	@ 0x30
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <std+0x68>)
 8008120:	6224      	str	r4, [r4, #32]
 8008122:	429c      	cmp	r4, r3
 8008124:	d006      	beq.n	8008134 <std+0x48>
 8008126:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800812a:	4294      	cmp	r4, r2
 800812c:	d002      	beq.n	8008134 <std+0x48>
 800812e:	33d0      	adds	r3, #208	@ 0xd0
 8008130:	429c      	cmp	r4, r3
 8008132:	d105      	bne.n	8008140 <std+0x54>
 8008134:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800813c:	f000 b8dc 	b.w	80082f8 <__retarget_lock_init_recursive>
 8008140:	bd10      	pop	{r4, pc}
 8008142:	bf00      	nop
 8008144:	08008b4d 	.word	0x08008b4d
 8008148:	08008b6f 	.word	0x08008b6f
 800814c:	08008ba7 	.word	0x08008ba7
 8008150:	08008bcb 	.word	0x08008bcb
 8008154:	200028b8 	.word	0x200028b8

08008158 <stdio_exit_handler>:
 8008158:	4a02      	ldr	r2, [pc, #8]	@ (8008164 <stdio_exit_handler+0xc>)
 800815a:	4903      	ldr	r1, [pc, #12]	@ (8008168 <stdio_exit_handler+0x10>)
 800815c:	4803      	ldr	r0, [pc, #12]	@ (800816c <stdio_exit_handler+0x14>)
 800815e:	f000 b869 	b.w	8008234 <_fwalk_sglue>
 8008162:	bf00      	nop
 8008164:	2000000c 	.word	0x2000000c
 8008168:	08008ae5 	.word	0x08008ae5
 800816c:	2000001c 	.word	0x2000001c

08008170 <cleanup_stdio>:
 8008170:	6841      	ldr	r1, [r0, #4]
 8008172:	4b0c      	ldr	r3, [pc, #48]	@ (80081a4 <cleanup_stdio+0x34>)
 8008174:	4299      	cmp	r1, r3
 8008176:	b510      	push	{r4, lr}
 8008178:	4604      	mov	r4, r0
 800817a:	d001      	beq.n	8008180 <cleanup_stdio+0x10>
 800817c:	f000 fcb2 	bl	8008ae4 <_fflush_r>
 8008180:	68a1      	ldr	r1, [r4, #8]
 8008182:	4b09      	ldr	r3, [pc, #36]	@ (80081a8 <cleanup_stdio+0x38>)
 8008184:	4299      	cmp	r1, r3
 8008186:	d002      	beq.n	800818e <cleanup_stdio+0x1e>
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fcab 	bl	8008ae4 <_fflush_r>
 800818e:	68e1      	ldr	r1, [r4, #12]
 8008190:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <cleanup_stdio+0x3c>)
 8008192:	4299      	cmp	r1, r3
 8008194:	d004      	beq.n	80081a0 <cleanup_stdio+0x30>
 8008196:	4620      	mov	r0, r4
 8008198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800819c:	f000 bca2 	b.w	8008ae4 <_fflush_r>
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	bf00      	nop
 80081a4:	200028b8 	.word	0x200028b8
 80081a8:	20002920 	.word	0x20002920
 80081ac:	20002988 	.word	0x20002988

080081b0 <global_stdio_init.part.0>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	4b0b      	ldr	r3, [pc, #44]	@ (80081e0 <global_stdio_init.part.0+0x30>)
 80081b4:	4c0b      	ldr	r4, [pc, #44]	@ (80081e4 <global_stdio_init.part.0+0x34>)
 80081b6:	4a0c      	ldr	r2, [pc, #48]	@ (80081e8 <global_stdio_init.part.0+0x38>)
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	4620      	mov	r0, r4
 80081bc:	2200      	movs	r2, #0
 80081be:	2104      	movs	r1, #4
 80081c0:	f7ff ff94 	bl	80080ec <std>
 80081c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081c8:	2201      	movs	r2, #1
 80081ca:	2109      	movs	r1, #9
 80081cc:	f7ff ff8e 	bl	80080ec <std>
 80081d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081d4:	2202      	movs	r2, #2
 80081d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081da:	2112      	movs	r1, #18
 80081dc:	f7ff bf86 	b.w	80080ec <std>
 80081e0:	200029f0 	.word	0x200029f0
 80081e4:	200028b8 	.word	0x200028b8
 80081e8:	08008159 	.word	0x08008159

080081ec <__sfp_lock_acquire>:
 80081ec:	4801      	ldr	r0, [pc, #4]	@ (80081f4 <__sfp_lock_acquire+0x8>)
 80081ee:	f000 b884 	b.w	80082fa <__retarget_lock_acquire_recursive>
 80081f2:	bf00      	nop
 80081f4:	200029f5 	.word	0x200029f5

080081f8 <__sfp_lock_release>:
 80081f8:	4801      	ldr	r0, [pc, #4]	@ (8008200 <__sfp_lock_release+0x8>)
 80081fa:	f000 b87f 	b.w	80082fc <__retarget_lock_release_recursive>
 80081fe:	bf00      	nop
 8008200:	200029f5 	.word	0x200029f5

08008204 <__sinit>:
 8008204:	b510      	push	{r4, lr}
 8008206:	4604      	mov	r4, r0
 8008208:	f7ff fff0 	bl	80081ec <__sfp_lock_acquire>
 800820c:	6a23      	ldr	r3, [r4, #32]
 800820e:	b11b      	cbz	r3, 8008218 <__sinit+0x14>
 8008210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008214:	f7ff bff0 	b.w	80081f8 <__sfp_lock_release>
 8008218:	4b04      	ldr	r3, [pc, #16]	@ (800822c <__sinit+0x28>)
 800821a:	6223      	str	r3, [r4, #32]
 800821c:	4b04      	ldr	r3, [pc, #16]	@ (8008230 <__sinit+0x2c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f5      	bne.n	8008210 <__sinit+0xc>
 8008224:	f7ff ffc4 	bl	80081b0 <global_stdio_init.part.0>
 8008228:	e7f2      	b.n	8008210 <__sinit+0xc>
 800822a:	bf00      	nop
 800822c:	08008171 	.word	0x08008171
 8008230:	200029f0 	.word	0x200029f0

08008234 <_fwalk_sglue>:
 8008234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008238:	4607      	mov	r7, r0
 800823a:	4688      	mov	r8, r1
 800823c:	4614      	mov	r4, r2
 800823e:	2600      	movs	r6, #0
 8008240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008244:	f1b9 0901 	subs.w	r9, r9, #1
 8008248:	d505      	bpl.n	8008256 <_fwalk_sglue+0x22>
 800824a:	6824      	ldr	r4, [r4, #0]
 800824c:	2c00      	cmp	r4, #0
 800824e:	d1f7      	bne.n	8008240 <_fwalk_sglue+0xc>
 8008250:	4630      	mov	r0, r6
 8008252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008256:	89ab      	ldrh	r3, [r5, #12]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d907      	bls.n	800826c <_fwalk_sglue+0x38>
 800825c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008260:	3301      	adds	r3, #1
 8008262:	d003      	beq.n	800826c <_fwalk_sglue+0x38>
 8008264:	4629      	mov	r1, r5
 8008266:	4638      	mov	r0, r7
 8008268:	47c0      	blx	r8
 800826a:	4306      	orrs	r6, r0
 800826c:	3568      	adds	r5, #104	@ 0x68
 800826e:	e7e9      	b.n	8008244 <_fwalk_sglue+0x10>

08008270 <iprintf>:
 8008270:	b40f      	push	{r0, r1, r2, r3}
 8008272:	b507      	push	{r0, r1, r2, lr}
 8008274:	4906      	ldr	r1, [pc, #24]	@ (8008290 <iprintf+0x20>)
 8008276:	ab04      	add	r3, sp, #16
 8008278:	6808      	ldr	r0, [r1, #0]
 800827a:	f853 2b04 	ldr.w	r2, [r3], #4
 800827e:	6881      	ldr	r1, [r0, #8]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	f000 f865 	bl	8008350 <_vfiprintf_r>
 8008286:	b003      	add	sp, #12
 8008288:	f85d eb04 	ldr.w	lr, [sp], #4
 800828c:	b004      	add	sp, #16
 800828e:	4770      	bx	lr
 8008290:	20000018 	.word	0x20000018

08008294 <memset>:
 8008294:	4402      	add	r2, r0
 8008296:	4603      	mov	r3, r0
 8008298:	4293      	cmp	r3, r2
 800829a:	d100      	bne.n	800829e <memset+0xa>
 800829c:	4770      	bx	lr
 800829e:	f803 1b01 	strb.w	r1, [r3], #1
 80082a2:	e7f9      	b.n	8008298 <memset+0x4>

080082a4 <__errno>:
 80082a4:	4b01      	ldr	r3, [pc, #4]	@ (80082ac <__errno+0x8>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000018 	.word	0x20000018

080082b0 <__libc_init_array>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	4d0d      	ldr	r5, [pc, #52]	@ (80082e8 <__libc_init_array+0x38>)
 80082b4:	4c0d      	ldr	r4, [pc, #52]	@ (80082ec <__libc_init_array+0x3c>)
 80082b6:	1b64      	subs	r4, r4, r5
 80082b8:	10a4      	asrs	r4, r4, #2
 80082ba:	2600      	movs	r6, #0
 80082bc:	42a6      	cmp	r6, r4
 80082be:	d109      	bne.n	80082d4 <__libc_init_array+0x24>
 80082c0:	4d0b      	ldr	r5, [pc, #44]	@ (80082f0 <__libc_init_array+0x40>)
 80082c2:	4c0c      	ldr	r4, [pc, #48]	@ (80082f4 <__libc_init_array+0x44>)
 80082c4:	f001 fdc6 	bl	8009e54 <_init>
 80082c8:	1b64      	subs	r4, r4, r5
 80082ca:	10a4      	asrs	r4, r4, #2
 80082cc:	2600      	movs	r6, #0
 80082ce:	42a6      	cmp	r6, r4
 80082d0:	d105      	bne.n	80082de <__libc_init_array+0x2e>
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
 80082d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d8:	4798      	blx	r3
 80082da:	3601      	adds	r6, #1
 80082dc:	e7ee      	b.n	80082bc <__libc_init_array+0xc>
 80082de:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e2:	4798      	blx	r3
 80082e4:	3601      	adds	r6, #1
 80082e6:	e7f2      	b.n	80082ce <__libc_init_array+0x1e>
 80082e8:	08009f80 	.word	0x08009f80
 80082ec:	08009f80 	.word	0x08009f80
 80082f0:	08009f80 	.word	0x08009f80
 80082f4:	08009f84 	.word	0x08009f84

080082f8 <__retarget_lock_init_recursive>:
 80082f8:	4770      	bx	lr

080082fa <__retarget_lock_acquire_recursive>:
 80082fa:	4770      	bx	lr

080082fc <__retarget_lock_release_recursive>:
 80082fc:	4770      	bx	lr

080082fe <__sfputc_r>:
 80082fe:	6893      	ldr	r3, [r2, #8]
 8008300:	3b01      	subs	r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	b410      	push	{r4}
 8008306:	6093      	str	r3, [r2, #8]
 8008308:	da08      	bge.n	800831c <__sfputc_r+0x1e>
 800830a:	6994      	ldr	r4, [r2, #24]
 800830c:	42a3      	cmp	r3, r4
 800830e:	db01      	blt.n	8008314 <__sfputc_r+0x16>
 8008310:	290a      	cmp	r1, #10
 8008312:	d103      	bne.n	800831c <__sfputc_r+0x1e>
 8008314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008318:	f000 bc5b 	b.w	8008bd2 <__swbuf_r>
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	1c58      	adds	r0, r3, #1
 8008320:	6010      	str	r0, [r2, #0]
 8008322:	7019      	strb	r1, [r3, #0]
 8008324:	4608      	mov	r0, r1
 8008326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800832a:	4770      	bx	lr

0800832c <__sfputs_r>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	4614      	mov	r4, r2
 8008334:	18d5      	adds	r5, r2, r3
 8008336:	42ac      	cmp	r4, r5
 8008338:	d101      	bne.n	800833e <__sfputs_r+0x12>
 800833a:	2000      	movs	r0, #0
 800833c:	e007      	b.n	800834e <__sfputs_r+0x22>
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	463a      	mov	r2, r7
 8008344:	4630      	mov	r0, r6
 8008346:	f7ff ffda 	bl	80082fe <__sfputc_r>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d1f3      	bne.n	8008336 <__sfputs_r+0xa>
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008350 <_vfiprintf_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	460d      	mov	r5, r1
 8008356:	b09d      	sub	sp, #116	@ 0x74
 8008358:	4614      	mov	r4, r2
 800835a:	4698      	mov	r8, r3
 800835c:	4606      	mov	r6, r0
 800835e:	b118      	cbz	r0, 8008368 <_vfiprintf_r+0x18>
 8008360:	6a03      	ldr	r3, [r0, #32]
 8008362:	b90b      	cbnz	r3, 8008368 <_vfiprintf_r+0x18>
 8008364:	f7ff ff4e 	bl	8008204 <__sinit>
 8008368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800836a:	07d9      	lsls	r1, r3, #31
 800836c:	d405      	bmi.n	800837a <_vfiprintf_r+0x2a>
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	059a      	lsls	r2, r3, #22
 8008372:	d402      	bmi.n	800837a <_vfiprintf_r+0x2a>
 8008374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008376:	f7ff ffc0 	bl	80082fa <__retarget_lock_acquire_recursive>
 800837a:	89ab      	ldrh	r3, [r5, #12]
 800837c:	071b      	lsls	r3, r3, #28
 800837e:	d501      	bpl.n	8008384 <_vfiprintf_r+0x34>
 8008380:	692b      	ldr	r3, [r5, #16]
 8008382:	b99b      	cbnz	r3, 80083ac <_vfiprintf_r+0x5c>
 8008384:	4629      	mov	r1, r5
 8008386:	4630      	mov	r0, r6
 8008388:	f000 fc62 	bl	8008c50 <__swsetup_r>
 800838c:	b170      	cbz	r0, 80083ac <_vfiprintf_r+0x5c>
 800838e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008390:	07dc      	lsls	r4, r3, #31
 8008392:	d504      	bpl.n	800839e <_vfiprintf_r+0x4e>
 8008394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008398:	b01d      	add	sp, #116	@ 0x74
 800839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	0598      	lsls	r0, r3, #22
 80083a2:	d4f7      	bmi.n	8008394 <_vfiprintf_r+0x44>
 80083a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083a6:	f7ff ffa9 	bl	80082fc <__retarget_lock_release_recursive>
 80083aa:	e7f3      	b.n	8008394 <_vfiprintf_r+0x44>
 80083ac:	2300      	movs	r3, #0
 80083ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b0:	2320      	movs	r3, #32
 80083b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ba:	2330      	movs	r3, #48	@ 0x30
 80083bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800856c <_vfiprintf_r+0x21c>
 80083c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083c4:	f04f 0901 	mov.w	r9, #1
 80083c8:	4623      	mov	r3, r4
 80083ca:	469a      	mov	sl, r3
 80083cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d0:	b10a      	cbz	r2, 80083d6 <_vfiprintf_r+0x86>
 80083d2:	2a25      	cmp	r2, #37	@ 0x25
 80083d4:	d1f9      	bne.n	80083ca <_vfiprintf_r+0x7a>
 80083d6:	ebba 0b04 	subs.w	fp, sl, r4
 80083da:	d00b      	beq.n	80083f4 <_vfiprintf_r+0xa4>
 80083dc:	465b      	mov	r3, fp
 80083de:	4622      	mov	r2, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	4630      	mov	r0, r6
 80083e4:	f7ff ffa2 	bl	800832c <__sfputs_r>
 80083e8:	3001      	adds	r0, #1
 80083ea:	f000 80a7 	beq.w	800853c <_vfiprintf_r+0x1ec>
 80083ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083f0:	445a      	add	r2, fp
 80083f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083f4:	f89a 3000 	ldrb.w	r3, [sl]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 809f 	beq.w	800853c <_vfiprintf_r+0x1ec>
 80083fe:	2300      	movs	r3, #0
 8008400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008408:	f10a 0a01 	add.w	sl, sl, #1
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	9307      	str	r3, [sp, #28]
 8008410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008414:	931a      	str	r3, [sp, #104]	@ 0x68
 8008416:	4654      	mov	r4, sl
 8008418:	2205      	movs	r2, #5
 800841a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841e:	4853      	ldr	r0, [pc, #332]	@ (800856c <_vfiprintf_r+0x21c>)
 8008420:	f7f7 fed6 	bl	80001d0 <memchr>
 8008424:	9a04      	ldr	r2, [sp, #16]
 8008426:	b9d8      	cbnz	r0, 8008460 <_vfiprintf_r+0x110>
 8008428:	06d1      	lsls	r1, r2, #27
 800842a:	bf44      	itt	mi
 800842c:	2320      	movmi	r3, #32
 800842e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008432:	0713      	lsls	r3, r2, #28
 8008434:	bf44      	itt	mi
 8008436:	232b      	movmi	r3, #43	@ 0x2b
 8008438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800843c:	f89a 3000 	ldrb.w	r3, [sl]
 8008440:	2b2a      	cmp	r3, #42	@ 0x2a
 8008442:	d015      	beq.n	8008470 <_vfiprintf_r+0x120>
 8008444:	9a07      	ldr	r2, [sp, #28]
 8008446:	4654      	mov	r4, sl
 8008448:	2000      	movs	r0, #0
 800844a:	f04f 0c0a 	mov.w	ip, #10
 800844e:	4621      	mov	r1, r4
 8008450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008454:	3b30      	subs	r3, #48	@ 0x30
 8008456:	2b09      	cmp	r3, #9
 8008458:	d94b      	bls.n	80084f2 <_vfiprintf_r+0x1a2>
 800845a:	b1b0      	cbz	r0, 800848a <_vfiprintf_r+0x13a>
 800845c:	9207      	str	r2, [sp, #28]
 800845e:	e014      	b.n	800848a <_vfiprintf_r+0x13a>
 8008460:	eba0 0308 	sub.w	r3, r0, r8
 8008464:	fa09 f303 	lsl.w	r3, r9, r3
 8008468:	4313      	orrs	r3, r2
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	46a2      	mov	sl, r4
 800846e:	e7d2      	b.n	8008416 <_vfiprintf_r+0xc6>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	1d19      	adds	r1, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	9103      	str	r1, [sp, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	bfbb      	ittet	lt
 800847c:	425b      	neglt	r3, r3
 800847e:	f042 0202 	orrlt.w	r2, r2, #2
 8008482:	9307      	strge	r3, [sp, #28]
 8008484:	9307      	strlt	r3, [sp, #28]
 8008486:	bfb8      	it	lt
 8008488:	9204      	strlt	r2, [sp, #16]
 800848a:	7823      	ldrb	r3, [r4, #0]
 800848c:	2b2e      	cmp	r3, #46	@ 0x2e
 800848e:	d10a      	bne.n	80084a6 <_vfiprintf_r+0x156>
 8008490:	7863      	ldrb	r3, [r4, #1]
 8008492:	2b2a      	cmp	r3, #42	@ 0x2a
 8008494:	d132      	bne.n	80084fc <_vfiprintf_r+0x1ac>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	9203      	str	r2, [sp, #12]
 800849e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084a2:	3402      	adds	r4, #2
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800857c <_vfiprintf_r+0x22c>
 80084aa:	7821      	ldrb	r1, [r4, #0]
 80084ac:	2203      	movs	r2, #3
 80084ae:	4650      	mov	r0, sl
 80084b0:	f7f7 fe8e 	bl	80001d0 <memchr>
 80084b4:	b138      	cbz	r0, 80084c6 <_vfiprintf_r+0x176>
 80084b6:	9b04      	ldr	r3, [sp, #16]
 80084b8:	eba0 000a 	sub.w	r0, r0, sl
 80084bc:	2240      	movs	r2, #64	@ 0x40
 80084be:	4082      	lsls	r2, r0
 80084c0:	4313      	orrs	r3, r2
 80084c2:	3401      	adds	r4, #1
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ca:	4829      	ldr	r0, [pc, #164]	@ (8008570 <_vfiprintf_r+0x220>)
 80084cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084d0:	2206      	movs	r2, #6
 80084d2:	f7f7 fe7d 	bl	80001d0 <memchr>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d03f      	beq.n	800855a <_vfiprintf_r+0x20a>
 80084da:	4b26      	ldr	r3, [pc, #152]	@ (8008574 <_vfiprintf_r+0x224>)
 80084dc:	bb1b      	cbnz	r3, 8008526 <_vfiprintf_r+0x1d6>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	3307      	adds	r3, #7
 80084e2:	f023 0307 	bic.w	r3, r3, #7
 80084e6:	3308      	adds	r3, #8
 80084e8:	9303      	str	r3, [sp, #12]
 80084ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ec:	443b      	add	r3, r7
 80084ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f0:	e76a      	b.n	80083c8 <_vfiprintf_r+0x78>
 80084f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f6:	460c      	mov	r4, r1
 80084f8:	2001      	movs	r0, #1
 80084fa:	e7a8      	b.n	800844e <_vfiprintf_r+0xfe>
 80084fc:	2300      	movs	r3, #0
 80084fe:	3401      	adds	r4, #1
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	4619      	mov	r1, r3
 8008504:	f04f 0c0a 	mov.w	ip, #10
 8008508:	4620      	mov	r0, r4
 800850a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800850e:	3a30      	subs	r2, #48	@ 0x30
 8008510:	2a09      	cmp	r2, #9
 8008512:	d903      	bls.n	800851c <_vfiprintf_r+0x1cc>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0c6      	beq.n	80084a6 <_vfiprintf_r+0x156>
 8008518:	9105      	str	r1, [sp, #20]
 800851a:	e7c4      	b.n	80084a6 <_vfiprintf_r+0x156>
 800851c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008520:	4604      	mov	r4, r0
 8008522:	2301      	movs	r3, #1
 8008524:	e7f0      	b.n	8008508 <_vfiprintf_r+0x1b8>
 8008526:	ab03      	add	r3, sp, #12
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	462a      	mov	r2, r5
 800852c:	4b12      	ldr	r3, [pc, #72]	@ (8008578 <_vfiprintf_r+0x228>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	4630      	mov	r0, r6
 8008532:	f3af 8000 	nop.w
 8008536:	4607      	mov	r7, r0
 8008538:	1c78      	adds	r0, r7, #1
 800853a:	d1d6      	bne.n	80084ea <_vfiprintf_r+0x19a>
 800853c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800853e:	07d9      	lsls	r1, r3, #31
 8008540:	d405      	bmi.n	800854e <_vfiprintf_r+0x1fe>
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	059a      	lsls	r2, r3, #22
 8008546:	d402      	bmi.n	800854e <_vfiprintf_r+0x1fe>
 8008548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800854a:	f7ff fed7 	bl	80082fc <__retarget_lock_release_recursive>
 800854e:	89ab      	ldrh	r3, [r5, #12]
 8008550:	065b      	lsls	r3, r3, #25
 8008552:	f53f af1f 	bmi.w	8008394 <_vfiprintf_r+0x44>
 8008556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008558:	e71e      	b.n	8008398 <_vfiprintf_r+0x48>
 800855a:	ab03      	add	r3, sp, #12
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	462a      	mov	r2, r5
 8008560:	4b05      	ldr	r3, [pc, #20]	@ (8008578 <_vfiprintf_r+0x228>)
 8008562:	a904      	add	r1, sp, #16
 8008564:	4630      	mov	r0, r6
 8008566:	f000 f91b 	bl	80087a0 <_printf_i>
 800856a:	e7e4      	b.n	8008536 <_vfiprintf_r+0x1e6>
 800856c:	08009f00 	.word	0x08009f00
 8008570:	08009f0a 	.word	0x08009f0a
 8008574:	00000000 	.word	0x00000000
 8008578:	0800832d 	.word	0x0800832d
 800857c:	08009f06 	.word	0x08009f06

08008580 <sbrk_aligned>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	4e0f      	ldr	r6, [pc, #60]	@ (80085c0 <sbrk_aligned+0x40>)
 8008584:	460c      	mov	r4, r1
 8008586:	6831      	ldr	r1, [r6, #0]
 8008588:	4605      	mov	r5, r0
 800858a:	b911      	cbnz	r1, 8008592 <sbrk_aligned+0x12>
 800858c:	f000 fc4c 	bl	8008e28 <_sbrk_r>
 8008590:	6030      	str	r0, [r6, #0]
 8008592:	4621      	mov	r1, r4
 8008594:	4628      	mov	r0, r5
 8008596:	f000 fc47 	bl	8008e28 <_sbrk_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d103      	bne.n	80085a6 <sbrk_aligned+0x26>
 800859e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80085a2:	4620      	mov	r0, r4
 80085a4:	bd70      	pop	{r4, r5, r6, pc}
 80085a6:	1cc4      	adds	r4, r0, #3
 80085a8:	f024 0403 	bic.w	r4, r4, #3
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d0f8      	beq.n	80085a2 <sbrk_aligned+0x22>
 80085b0:	1a21      	subs	r1, r4, r0
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 fc38 	bl	8008e28 <_sbrk_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1f2      	bne.n	80085a2 <sbrk_aligned+0x22>
 80085bc:	e7ef      	b.n	800859e <sbrk_aligned+0x1e>
 80085be:	bf00      	nop
 80085c0:	200029f8 	.word	0x200029f8

080085c4 <_malloc_r>:
 80085c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c8:	1ccd      	adds	r5, r1, #3
 80085ca:	f025 0503 	bic.w	r5, r5, #3
 80085ce:	3508      	adds	r5, #8
 80085d0:	2d0c      	cmp	r5, #12
 80085d2:	bf38      	it	cc
 80085d4:	250c      	movcc	r5, #12
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	4606      	mov	r6, r0
 80085da:	db01      	blt.n	80085e0 <_malloc_r+0x1c>
 80085dc:	42a9      	cmp	r1, r5
 80085de:	d904      	bls.n	80085ea <_malloc_r+0x26>
 80085e0:	230c      	movs	r3, #12
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	2000      	movs	r0, #0
 80085e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086c0 <_malloc_r+0xfc>
 80085ee:	f000 faa1 	bl	8008b34 <__malloc_lock>
 80085f2:	f8d8 3000 	ldr.w	r3, [r8]
 80085f6:	461c      	mov	r4, r3
 80085f8:	bb44      	cbnz	r4, 800864c <_malloc_r+0x88>
 80085fa:	4629      	mov	r1, r5
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ffbf 	bl	8008580 <sbrk_aligned>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	4604      	mov	r4, r0
 8008606:	d158      	bne.n	80086ba <_malloc_r+0xf6>
 8008608:	f8d8 4000 	ldr.w	r4, [r8]
 800860c:	4627      	mov	r7, r4
 800860e:	2f00      	cmp	r7, #0
 8008610:	d143      	bne.n	800869a <_malloc_r+0xd6>
 8008612:	2c00      	cmp	r4, #0
 8008614:	d04b      	beq.n	80086ae <_malloc_r+0xea>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	4639      	mov	r1, r7
 800861a:	4630      	mov	r0, r6
 800861c:	eb04 0903 	add.w	r9, r4, r3
 8008620:	f000 fc02 	bl	8008e28 <_sbrk_r>
 8008624:	4581      	cmp	r9, r0
 8008626:	d142      	bne.n	80086ae <_malloc_r+0xea>
 8008628:	6821      	ldr	r1, [r4, #0]
 800862a:	1a6d      	subs	r5, r5, r1
 800862c:	4629      	mov	r1, r5
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ffa6 	bl	8008580 <sbrk_aligned>
 8008634:	3001      	adds	r0, #1
 8008636:	d03a      	beq.n	80086ae <_malloc_r+0xea>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	442b      	add	r3, r5
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	f8d8 3000 	ldr.w	r3, [r8]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	bb62      	cbnz	r2, 80086a0 <_malloc_r+0xdc>
 8008646:	f8c8 7000 	str.w	r7, [r8]
 800864a:	e00f      	b.n	800866c <_malloc_r+0xa8>
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	1b52      	subs	r2, r2, r5
 8008650:	d420      	bmi.n	8008694 <_malloc_r+0xd0>
 8008652:	2a0b      	cmp	r2, #11
 8008654:	d917      	bls.n	8008686 <_malloc_r+0xc2>
 8008656:	1961      	adds	r1, r4, r5
 8008658:	42a3      	cmp	r3, r4
 800865a:	6025      	str	r5, [r4, #0]
 800865c:	bf18      	it	ne
 800865e:	6059      	strne	r1, [r3, #4]
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	bf08      	it	eq
 8008664:	f8c8 1000 	streq.w	r1, [r8]
 8008668:	5162      	str	r2, [r4, r5]
 800866a:	604b      	str	r3, [r1, #4]
 800866c:	4630      	mov	r0, r6
 800866e:	f000 fa67 	bl	8008b40 <__malloc_unlock>
 8008672:	f104 000b 	add.w	r0, r4, #11
 8008676:	1d23      	adds	r3, r4, #4
 8008678:	f020 0007 	bic.w	r0, r0, #7
 800867c:	1ac2      	subs	r2, r0, r3
 800867e:	bf1c      	itt	ne
 8008680:	1a1b      	subne	r3, r3, r0
 8008682:	50a3      	strne	r3, [r4, r2]
 8008684:	e7af      	b.n	80085e6 <_malloc_r+0x22>
 8008686:	6862      	ldr	r2, [r4, #4]
 8008688:	42a3      	cmp	r3, r4
 800868a:	bf0c      	ite	eq
 800868c:	f8c8 2000 	streq.w	r2, [r8]
 8008690:	605a      	strne	r2, [r3, #4]
 8008692:	e7eb      	b.n	800866c <_malloc_r+0xa8>
 8008694:	4623      	mov	r3, r4
 8008696:	6864      	ldr	r4, [r4, #4]
 8008698:	e7ae      	b.n	80085f8 <_malloc_r+0x34>
 800869a:	463c      	mov	r4, r7
 800869c:	687f      	ldr	r7, [r7, #4]
 800869e:	e7b6      	b.n	800860e <_malloc_r+0x4a>
 80086a0:	461a      	mov	r2, r3
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d1fb      	bne.n	80086a0 <_malloc_r+0xdc>
 80086a8:	2300      	movs	r3, #0
 80086aa:	6053      	str	r3, [r2, #4]
 80086ac:	e7de      	b.n	800866c <_malloc_r+0xa8>
 80086ae:	230c      	movs	r3, #12
 80086b0:	6033      	str	r3, [r6, #0]
 80086b2:	4630      	mov	r0, r6
 80086b4:	f000 fa44 	bl	8008b40 <__malloc_unlock>
 80086b8:	e794      	b.n	80085e4 <_malloc_r+0x20>
 80086ba:	6005      	str	r5, [r0, #0]
 80086bc:	e7d6      	b.n	800866c <_malloc_r+0xa8>
 80086be:	bf00      	nop
 80086c0:	200029fc 	.word	0x200029fc

080086c4 <_printf_common>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	4616      	mov	r6, r2
 80086ca:	4698      	mov	r8, r3
 80086cc:	688a      	ldr	r2, [r1, #8]
 80086ce:	690b      	ldr	r3, [r1, #16]
 80086d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bfb8      	it	lt
 80086d8:	4613      	movlt	r3, r2
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086e0:	4607      	mov	r7, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b10a      	cbz	r2, 80086ea <_printf_common+0x26>
 80086e6:	3301      	adds	r3, #1
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	0699      	lsls	r1, r3, #26
 80086ee:	bf42      	ittt	mi
 80086f0:	6833      	ldrmi	r3, [r6, #0]
 80086f2:	3302      	addmi	r3, #2
 80086f4:	6033      	strmi	r3, [r6, #0]
 80086f6:	6825      	ldr	r5, [r4, #0]
 80086f8:	f015 0506 	ands.w	r5, r5, #6
 80086fc:	d106      	bne.n	800870c <_printf_common+0x48>
 80086fe:	f104 0a19 	add.w	sl, r4, #25
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	6832      	ldr	r2, [r6, #0]
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc26      	bgt.n	800875a <_printf_common+0x96>
 800870c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	3b00      	subs	r3, #0
 8008714:	bf18      	it	ne
 8008716:	2301      	movne	r3, #1
 8008718:	0692      	lsls	r2, r2, #26
 800871a:	d42b      	bmi.n	8008774 <_printf_common+0xb0>
 800871c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008720:	4641      	mov	r1, r8
 8008722:	4638      	mov	r0, r7
 8008724:	47c8      	blx	r9
 8008726:	3001      	adds	r0, #1
 8008728:	d01e      	beq.n	8008768 <_printf_common+0xa4>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	f003 0306 	and.w	r3, r3, #6
 8008732:	2b04      	cmp	r3, #4
 8008734:	bf02      	ittt	eq
 8008736:	68e5      	ldreq	r5, [r4, #12]
 8008738:	6833      	ldreq	r3, [r6, #0]
 800873a:	1aed      	subeq	r5, r5, r3
 800873c:	68a3      	ldr	r3, [r4, #8]
 800873e:	bf0c      	ite	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	2500      	movne	r5, #0
 8008746:	4293      	cmp	r3, r2
 8008748:	bfc4      	itt	gt
 800874a:	1a9b      	subgt	r3, r3, r2
 800874c:	18ed      	addgt	r5, r5, r3
 800874e:	2600      	movs	r6, #0
 8008750:	341a      	adds	r4, #26
 8008752:	42b5      	cmp	r5, r6
 8008754:	d11a      	bne.n	800878c <_printf_common+0xc8>
 8008756:	2000      	movs	r0, #0
 8008758:	e008      	b.n	800876c <_printf_common+0xa8>
 800875a:	2301      	movs	r3, #1
 800875c:	4652      	mov	r2, sl
 800875e:	4641      	mov	r1, r8
 8008760:	4638      	mov	r0, r7
 8008762:	47c8      	blx	r9
 8008764:	3001      	adds	r0, #1
 8008766:	d103      	bne.n	8008770 <_printf_common+0xac>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	3501      	adds	r5, #1
 8008772:	e7c6      	b.n	8008702 <_printf_common+0x3e>
 8008774:	18e1      	adds	r1, r4, r3
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	2030      	movs	r0, #48	@ 0x30
 800877a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800877e:	4422      	add	r2, r4
 8008780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008788:	3302      	adds	r3, #2
 800878a:	e7c7      	b.n	800871c <_printf_common+0x58>
 800878c:	2301      	movs	r3, #1
 800878e:	4622      	mov	r2, r4
 8008790:	4641      	mov	r1, r8
 8008792:	4638      	mov	r0, r7
 8008794:	47c8      	blx	r9
 8008796:	3001      	adds	r0, #1
 8008798:	d0e6      	beq.n	8008768 <_printf_common+0xa4>
 800879a:	3601      	adds	r6, #1
 800879c:	e7d9      	b.n	8008752 <_printf_common+0x8e>
	...

080087a0 <_printf_i>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	7e0f      	ldrb	r7, [r1, #24]
 80087a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087a8:	2f78      	cmp	r7, #120	@ 0x78
 80087aa:	4691      	mov	r9, r2
 80087ac:	4680      	mov	r8, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	469a      	mov	sl, r3
 80087b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087b6:	d807      	bhi.n	80087c8 <_printf_i+0x28>
 80087b8:	2f62      	cmp	r7, #98	@ 0x62
 80087ba:	d80a      	bhi.n	80087d2 <_printf_i+0x32>
 80087bc:	2f00      	cmp	r7, #0
 80087be:	f000 80d1 	beq.w	8008964 <_printf_i+0x1c4>
 80087c2:	2f58      	cmp	r7, #88	@ 0x58
 80087c4:	f000 80b8 	beq.w	8008938 <_printf_i+0x198>
 80087c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087d0:	e03a      	b.n	8008848 <_printf_i+0xa8>
 80087d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087d6:	2b15      	cmp	r3, #21
 80087d8:	d8f6      	bhi.n	80087c8 <_printf_i+0x28>
 80087da:	a101      	add	r1, pc, #4	@ (adr r1, 80087e0 <_printf_i+0x40>)
 80087dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e0:	08008839 	.word	0x08008839
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	080087c9 	.word	0x080087c9
 80087ec:	080087c9 	.word	0x080087c9
 80087f0:	080087c9 	.word	0x080087c9
 80087f4:	080087c9 	.word	0x080087c9
 80087f8:	0800884d 	.word	0x0800884d
 80087fc:	080087c9 	.word	0x080087c9
 8008800:	080087c9 	.word	0x080087c9
 8008804:	080087c9 	.word	0x080087c9
 8008808:	080087c9 	.word	0x080087c9
 800880c:	0800894b 	.word	0x0800894b
 8008810:	08008877 	.word	0x08008877
 8008814:	08008905 	.word	0x08008905
 8008818:	080087c9 	.word	0x080087c9
 800881c:	080087c9 	.word	0x080087c9
 8008820:	0800896d 	.word	0x0800896d
 8008824:	080087c9 	.word	0x080087c9
 8008828:	08008877 	.word	0x08008877
 800882c:	080087c9 	.word	0x080087c9
 8008830:	080087c9 	.word	0x080087c9
 8008834:	0800890d 	.word	0x0800890d
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6032      	str	r2, [r6, #0]
 8008840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008848:	2301      	movs	r3, #1
 800884a:	e09c      	b.n	8008986 <_printf_i+0x1e6>
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	1d19      	adds	r1, r3, #4
 8008852:	6031      	str	r1, [r6, #0]
 8008854:	0606      	lsls	r6, r0, #24
 8008856:	d501      	bpl.n	800885c <_printf_i+0xbc>
 8008858:	681d      	ldr	r5, [r3, #0]
 800885a:	e003      	b.n	8008864 <_printf_i+0xc4>
 800885c:	0645      	lsls	r5, r0, #25
 800885e:	d5fb      	bpl.n	8008858 <_printf_i+0xb8>
 8008860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008864:	2d00      	cmp	r5, #0
 8008866:	da03      	bge.n	8008870 <_printf_i+0xd0>
 8008868:	232d      	movs	r3, #45	@ 0x2d
 800886a:	426d      	negs	r5, r5
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008870:	4858      	ldr	r0, [pc, #352]	@ (80089d4 <_printf_i+0x234>)
 8008872:	230a      	movs	r3, #10
 8008874:	e011      	b.n	800889a <_printf_i+0xfa>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	6833      	ldr	r3, [r6, #0]
 800887a:	0608      	lsls	r0, r1, #24
 800887c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008880:	d402      	bmi.n	8008888 <_printf_i+0xe8>
 8008882:	0649      	lsls	r1, r1, #25
 8008884:	bf48      	it	mi
 8008886:	b2ad      	uxthmi	r5, r5
 8008888:	2f6f      	cmp	r7, #111	@ 0x6f
 800888a:	4852      	ldr	r0, [pc, #328]	@ (80089d4 <_printf_i+0x234>)
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	bf14      	ite	ne
 8008890:	230a      	movne	r3, #10
 8008892:	2308      	moveq	r3, #8
 8008894:	2100      	movs	r1, #0
 8008896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800889a:	6866      	ldr	r6, [r4, #4]
 800889c:	60a6      	str	r6, [r4, #8]
 800889e:	2e00      	cmp	r6, #0
 80088a0:	db05      	blt.n	80088ae <_printf_i+0x10e>
 80088a2:	6821      	ldr	r1, [r4, #0]
 80088a4:	432e      	orrs	r6, r5
 80088a6:	f021 0104 	bic.w	r1, r1, #4
 80088aa:	6021      	str	r1, [r4, #0]
 80088ac:	d04b      	beq.n	8008946 <_printf_i+0x1a6>
 80088ae:	4616      	mov	r6, r2
 80088b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80088b4:	fb03 5711 	mls	r7, r3, r1, r5
 80088b8:	5dc7      	ldrb	r7, [r0, r7]
 80088ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088be:	462f      	mov	r7, r5
 80088c0:	42bb      	cmp	r3, r7
 80088c2:	460d      	mov	r5, r1
 80088c4:	d9f4      	bls.n	80088b0 <_printf_i+0x110>
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d10b      	bne.n	80088e2 <_printf_i+0x142>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	07df      	lsls	r7, r3, #31
 80088ce:	d508      	bpl.n	80088e2 <_printf_i+0x142>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	6861      	ldr	r1, [r4, #4]
 80088d4:	4299      	cmp	r1, r3
 80088d6:	bfde      	ittt	le
 80088d8:	2330      	movle	r3, #48	@ 0x30
 80088da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088de:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80088e2:	1b92      	subs	r2, r2, r6
 80088e4:	6122      	str	r2, [r4, #16]
 80088e6:	f8cd a000 	str.w	sl, [sp]
 80088ea:	464b      	mov	r3, r9
 80088ec:	aa03      	add	r2, sp, #12
 80088ee:	4621      	mov	r1, r4
 80088f0:	4640      	mov	r0, r8
 80088f2:	f7ff fee7 	bl	80086c4 <_printf_common>
 80088f6:	3001      	adds	r0, #1
 80088f8:	d14a      	bne.n	8008990 <_printf_i+0x1f0>
 80088fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088fe:	b004      	add	sp, #16
 8008900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	f043 0320 	orr.w	r3, r3, #32
 800890a:	6023      	str	r3, [r4, #0]
 800890c:	4832      	ldr	r0, [pc, #200]	@ (80089d8 <_printf_i+0x238>)
 800890e:	2778      	movs	r7, #120	@ 0x78
 8008910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	6831      	ldr	r1, [r6, #0]
 8008918:	061f      	lsls	r7, r3, #24
 800891a:	f851 5b04 	ldr.w	r5, [r1], #4
 800891e:	d402      	bmi.n	8008926 <_printf_i+0x186>
 8008920:	065f      	lsls	r7, r3, #25
 8008922:	bf48      	it	mi
 8008924:	b2ad      	uxthmi	r5, r5
 8008926:	6031      	str	r1, [r6, #0]
 8008928:	07d9      	lsls	r1, r3, #31
 800892a:	bf44      	itt	mi
 800892c:	f043 0320 	orrmi.w	r3, r3, #32
 8008930:	6023      	strmi	r3, [r4, #0]
 8008932:	b11d      	cbz	r5, 800893c <_printf_i+0x19c>
 8008934:	2310      	movs	r3, #16
 8008936:	e7ad      	b.n	8008894 <_printf_i+0xf4>
 8008938:	4826      	ldr	r0, [pc, #152]	@ (80089d4 <_printf_i+0x234>)
 800893a:	e7e9      	b.n	8008910 <_printf_i+0x170>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	f023 0320 	bic.w	r3, r3, #32
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	e7f6      	b.n	8008934 <_printf_i+0x194>
 8008946:	4616      	mov	r6, r2
 8008948:	e7bd      	b.n	80088c6 <_printf_i+0x126>
 800894a:	6833      	ldr	r3, [r6, #0]
 800894c:	6825      	ldr	r5, [r4, #0]
 800894e:	6961      	ldr	r1, [r4, #20]
 8008950:	1d18      	adds	r0, r3, #4
 8008952:	6030      	str	r0, [r6, #0]
 8008954:	062e      	lsls	r6, r5, #24
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	d501      	bpl.n	800895e <_printf_i+0x1be>
 800895a:	6019      	str	r1, [r3, #0]
 800895c:	e002      	b.n	8008964 <_printf_i+0x1c4>
 800895e:	0668      	lsls	r0, r5, #25
 8008960:	d5fb      	bpl.n	800895a <_printf_i+0x1ba>
 8008962:	8019      	strh	r1, [r3, #0]
 8008964:	2300      	movs	r3, #0
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	4616      	mov	r6, r2
 800896a:	e7bc      	b.n	80088e6 <_printf_i+0x146>
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	1d1a      	adds	r2, r3, #4
 8008970:	6032      	str	r2, [r6, #0]
 8008972:	681e      	ldr	r6, [r3, #0]
 8008974:	6862      	ldr	r2, [r4, #4]
 8008976:	2100      	movs	r1, #0
 8008978:	4630      	mov	r0, r6
 800897a:	f7f7 fc29 	bl	80001d0 <memchr>
 800897e:	b108      	cbz	r0, 8008984 <_printf_i+0x1e4>
 8008980:	1b80      	subs	r0, r0, r6
 8008982:	6060      	str	r0, [r4, #4]
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	6123      	str	r3, [r4, #16]
 8008988:	2300      	movs	r3, #0
 800898a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800898e:	e7aa      	b.n	80088e6 <_printf_i+0x146>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	4632      	mov	r2, r6
 8008994:	4649      	mov	r1, r9
 8008996:	4640      	mov	r0, r8
 8008998:	47d0      	blx	sl
 800899a:	3001      	adds	r0, #1
 800899c:	d0ad      	beq.n	80088fa <_printf_i+0x15a>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	079b      	lsls	r3, r3, #30
 80089a2:	d413      	bmi.n	80089cc <_printf_i+0x22c>
 80089a4:	68e0      	ldr	r0, [r4, #12]
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	4298      	cmp	r0, r3
 80089aa:	bfb8      	it	lt
 80089ac:	4618      	movlt	r0, r3
 80089ae:	e7a6      	b.n	80088fe <_printf_i+0x15e>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4632      	mov	r2, r6
 80089b4:	4649      	mov	r1, r9
 80089b6:	4640      	mov	r0, r8
 80089b8:	47d0      	blx	sl
 80089ba:	3001      	adds	r0, #1
 80089bc:	d09d      	beq.n	80088fa <_printf_i+0x15a>
 80089be:	3501      	adds	r5, #1
 80089c0:	68e3      	ldr	r3, [r4, #12]
 80089c2:	9903      	ldr	r1, [sp, #12]
 80089c4:	1a5b      	subs	r3, r3, r1
 80089c6:	42ab      	cmp	r3, r5
 80089c8:	dcf2      	bgt.n	80089b0 <_printf_i+0x210>
 80089ca:	e7eb      	b.n	80089a4 <_printf_i+0x204>
 80089cc:	2500      	movs	r5, #0
 80089ce:	f104 0619 	add.w	r6, r4, #25
 80089d2:	e7f5      	b.n	80089c0 <_printf_i+0x220>
 80089d4:	08009f11 	.word	0x08009f11
 80089d8:	08009f22 	.word	0x08009f22

080089dc <__sflush_r>:
 80089dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e4:	0716      	lsls	r6, r2, #28
 80089e6:	4605      	mov	r5, r0
 80089e8:	460c      	mov	r4, r1
 80089ea:	d454      	bmi.n	8008a96 <__sflush_r+0xba>
 80089ec:	684b      	ldr	r3, [r1, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	dc02      	bgt.n	80089f8 <__sflush_r+0x1c>
 80089f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dd48      	ble.n	8008a8a <__sflush_r+0xae>
 80089f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089fa:	2e00      	cmp	r6, #0
 80089fc:	d045      	beq.n	8008a8a <__sflush_r+0xae>
 80089fe:	2300      	movs	r3, #0
 8008a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a04:	682f      	ldr	r7, [r5, #0]
 8008a06:	6a21      	ldr	r1, [r4, #32]
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	d030      	beq.n	8008a6e <__sflush_r+0x92>
 8008a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	0759      	lsls	r1, r3, #29
 8008a12:	d505      	bpl.n	8008a20 <__sflush_r+0x44>
 8008a14:	6863      	ldr	r3, [r4, #4]
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a1a:	b10b      	cbz	r3, 8008a20 <__sflush_r+0x44>
 8008a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	2300      	movs	r3, #0
 8008a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a24:	6a21      	ldr	r1, [r4, #32]
 8008a26:	4628      	mov	r0, r5
 8008a28:	47b0      	blx	r6
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	d106      	bne.n	8008a3e <__sflush_r+0x62>
 8008a30:	6829      	ldr	r1, [r5, #0]
 8008a32:	291d      	cmp	r1, #29
 8008a34:	d82b      	bhi.n	8008a8e <__sflush_r+0xb2>
 8008a36:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae0 <__sflush_r+0x104>)
 8008a38:	40ca      	lsrs	r2, r1
 8008a3a:	07d6      	lsls	r6, r2, #31
 8008a3c:	d527      	bpl.n	8008a8e <__sflush_r+0xb2>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	6062      	str	r2, [r4, #4]
 8008a42:	04d9      	lsls	r1, r3, #19
 8008a44:	6922      	ldr	r2, [r4, #16]
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	d504      	bpl.n	8008a54 <__sflush_r+0x78>
 8008a4a:	1c42      	adds	r2, r0, #1
 8008a4c:	d101      	bne.n	8008a52 <__sflush_r+0x76>
 8008a4e:	682b      	ldr	r3, [r5, #0]
 8008a50:	b903      	cbnz	r3, 8008a54 <__sflush_r+0x78>
 8008a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a56:	602f      	str	r7, [r5, #0]
 8008a58:	b1b9      	cbz	r1, 8008a8a <__sflush_r+0xae>
 8008a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a5e:	4299      	cmp	r1, r3
 8008a60:	d002      	beq.n	8008a68 <__sflush_r+0x8c>
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 fa24 	bl	8008eb0 <_free_r>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a6c:	e00d      	b.n	8008a8a <__sflush_r+0xae>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b0      	blx	r6
 8008a74:	4602      	mov	r2, r0
 8008a76:	1c50      	adds	r0, r2, #1
 8008a78:	d1c9      	bne.n	8008a0e <__sflush_r+0x32>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0c6      	beq.n	8008a0e <__sflush_r+0x32>
 8008a80:	2b1d      	cmp	r3, #29
 8008a82:	d001      	beq.n	8008a88 <__sflush_r+0xac>
 8008a84:	2b16      	cmp	r3, #22
 8008a86:	d11e      	bne.n	8008ac6 <__sflush_r+0xea>
 8008a88:	602f      	str	r7, [r5, #0]
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e022      	b.n	8008ad4 <__sflush_r+0xf8>
 8008a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a92:	b21b      	sxth	r3, r3
 8008a94:	e01b      	b.n	8008ace <__sflush_r+0xf2>
 8008a96:	690f      	ldr	r7, [r1, #16]
 8008a98:	2f00      	cmp	r7, #0
 8008a9a:	d0f6      	beq.n	8008a8a <__sflush_r+0xae>
 8008a9c:	0793      	lsls	r3, r2, #30
 8008a9e:	680e      	ldr	r6, [r1, #0]
 8008aa0:	bf08      	it	eq
 8008aa2:	694b      	ldreq	r3, [r1, #20]
 8008aa4:	600f      	str	r7, [r1, #0]
 8008aa6:	bf18      	it	ne
 8008aa8:	2300      	movne	r3, #0
 8008aaa:	eba6 0807 	sub.w	r8, r6, r7
 8008aae:	608b      	str	r3, [r1, #8]
 8008ab0:	f1b8 0f00 	cmp.w	r8, #0
 8008ab4:	dde9      	ble.n	8008a8a <__sflush_r+0xae>
 8008ab6:	6a21      	ldr	r1, [r4, #32]
 8008ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008aba:	4643      	mov	r3, r8
 8008abc:	463a      	mov	r2, r7
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b0      	blx	r6
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	dc08      	bgt.n	8008ad8 <__sflush_r+0xfc>
 8008ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad8:	4407      	add	r7, r0
 8008ada:	eba8 0800 	sub.w	r8, r8, r0
 8008ade:	e7e7      	b.n	8008ab0 <__sflush_r+0xd4>
 8008ae0:	20400001 	.word	0x20400001

08008ae4 <_fflush_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	690b      	ldr	r3, [r1, #16]
 8008ae8:	4605      	mov	r5, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	b913      	cbnz	r3, 8008af4 <_fflush_r+0x10>
 8008aee:	2500      	movs	r5, #0
 8008af0:	4628      	mov	r0, r5
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	b118      	cbz	r0, 8008afe <_fflush_r+0x1a>
 8008af6:	6a03      	ldr	r3, [r0, #32]
 8008af8:	b90b      	cbnz	r3, 8008afe <_fflush_r+0x1a>
 8008afa:	f7ff fb83 	bl	8008204 <__sinit>
 8008afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0f3      	beq.n	8008aee <_fflush_r+0xa>
 8008b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b08:	07d0      	lsls	r0, r2, #31
 8008b0a:	d404      	bmi.n	8008b16 <_fflush_r+0x32>
 8008b0c:	0599      	lsls	r1, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <_fflush_r+0x32>
 8008b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b12:	f7ff fbf2 	bl	80082fa <__retarget_lock_acquire_recursive>
 8008b16:	4628      	mov	r0, r5
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f7ff ff5f 	bl	80089dc <__sflush_r>
 8008b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b20:	07da      	lsls	r2, r3, #31
 8008b22:	4605      	mov	r5, r0
 8008b24:	d4e4      	bmi.n	8008af0 <_fflush_r+0xc>
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	059b      	lsls	r3, r3, #22
 8008b2a:	d4e1      	bmi.n	8008af0 <_fflush_r+0xc>
 8008b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b2e:	f7ff fbe5 	bl	80082fc <__retarget_lock_release_recursive>
 8008b32:	e7dd      	b.n	8008af0 <_fflush_r+0xc>

08008b34 <__malloc_lock>:
 8008b34:	4801      	ldr	r0, [pc, #4]	@ (8008b3c <__malloc_lock+0x8>)
 8008b36:	f7ff bbe0 	b.w	80082fa <__retarget_lock_acquire_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	200029f4 	.word	0x200029f4

08008b40 <__malloc_unlock>:
 8008b40:	4801      	ldr	r0, [pc, #4]	@ (8008b48 <__malloc_unlock+0x8>)
 8008b42:	f7ff bbdb 	b.w	80082fc <__retarget_lock_release_recursive>
 8008b46:	bf00      	nop
 8008b48:	200029f4 	.word	0x200029f4

08008b4c <__sread>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	460c      	mov	r4, r1
 8008b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b54:	f000 f956 	bl	8008e04 <_read_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	bfab      	itete	ge
 8008b5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b60:	181b      	addge	r3, r3, r0
 8008b62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b66:	bfac      	ite	ge
 8008b68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b6a:	81a3      	strhlt	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__swrite>:
 8008b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b72:	461f      	mov	r7, r3
 8008b74:	898b      	ldrh	r3, [r1, #12]
 8008b76:	05db      	lsls	r3, r3, #23
 8008b78:	4605      	mov	r5, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	d505      	bpl.n	8008b8c <__swrite+0x1e>
 8008b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b84:	2302      	movs	r3, #2
 8008b86:	2200      	movs	r2, #0
 8008b88:	f000 f92a 	bl	8008de0 <_lseek_r>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	4632      	mov	r2, r6
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	f000 b951 	b.w	8008e48 <_write_r>

08008ba6 <__sseek>:
 8008ba6:	b510      	push	{r4, lr}
 8008ba8:	460c      	mov	r4, r1
 8008baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bae:	f000 f917 	bl	8008de0 <_lseek_r>
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	bf15      	itete	ne
 8008bb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bc2:	81a3      	strheq	r3, [r4, #12]
 8008bc4:	bf18      	it	ne
 8008bc6:	81a3      	strhne	r3, [r4, #12]
 8008bc8:	bd10      	pop	{r4, pc}

08008bca <__sclose>:
 8008bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bce:	f000 b94d 	b.w	8008e6c <_close_r>

08008bd2 <__swbuf_r>:
 8008bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd4:	460e      	mov	r6, r1
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	4605      	mov	r5, r0
 8008bda:	b118      	cbz	r0, 8008be4 <__swbuf_r+0x12>
 8008bdc:	6a03      	ldr	r3, [r0, #32]
 8008bde:	b90b      	cbnz	r3, 8008be4 <__swbuf_r+0x12>
 8008be0:	f7ff fb10 	bl	8008204 <__sinit>
 8008be4:	69a3      	ldr	r3, [r4, #24]
 8008be6:	60a3      	str	r3, [r4, #8]
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	071a      	lsls	r2, r3, #28
 8008bec:	d501      	bpl.n	8008bf2 <__swbuf_r+0x20>
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	b943      	cbnz	r3, 8008c04 <__swbuf_r+0x32>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f000 f82b 	bl	8008c50 <__swsetup_r>
 8008bfa:	b118      	cbz	r0, 8008c04 <__swbuf_r+0x32>
 8008bfc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008c00:	4638      	mov	r0, r7
 8008c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	6922      	ldr	r2, [r4, #16]
 8008c08:	1a98      	subs	r0, r3, r2
 8008c0a:	6963      	ldr	r3, [r4, #20]
 8008c0c:	b2f6      	uxtb	r6, r6
 8008c0e:	4283      	cmp	r3, r0
 8008c10:	4637      	mov	r7, r6
 8008c12:	dc05      	bgt.n	8008c20 <__swbuf_r+0x4e>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7ff ff64 	bl	8008ae4 <_fflush_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d1ed      	bne.n	8008bfc <__swbuf_r+0x2a>
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	60a3      	str	r3, [r4, #8]
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	701e      	strb	r6, [r3, #0]
 8008c2e:	6962      	ldr	r2, [r4, #20]
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d004      	beq.n	8008c40 <__swbuf_r+0x6e>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	07db      	lsls	r3, r3, #31
 8008c3a:	d5e1      	bpl.n	8008c00 <__swbuf_r+0x2e>
 8008c3c:	2e0a      	cmp	r6, #10
 8008c3e:	d1df      	bne.n	8008c00 <__swbuf_r+0x2e>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4628      	mov	r0, r5
 8008c44:	f7ff ff4e 	bl	8008ae4 <_fflush_r>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d0d9      	beq.n	8008c00 <__swbuf_r+0x2e>
 8008c4c:	e7d6      	b.n	8008bfc <__swbuf_r+0x2a>
	...

08008c50 <__swsetup_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4b29      	ldr	r3, [pc, #164]	@ (8008cf8 <__swsetup_r+0xa8>)
 8008c54:	4605      	mov	r5, r0
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	460c      	mov	r4, r1
 8008c5a:	b118      	cbz	r0, 8008c64 <__swsetup_r+0x14>
 8008c5c:	6a03      	ldr	r3, [r0, #32]
 8008c5e:	b90b      	cbnz	r3, 8008c64 <__swsetup_r+0x14>
 8008c60:	f7ff fad0 	bl	8008204 <__sinit>
 8008c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c68:	0719      	lsls	r1, r3, #28
 8008c6a:	d422      	bmi.n	8008cb2 <__swsetup_r+0x62>
 8008c6c:	06da      	lsls	r2, r3, #27
 8008c6e:	d407      	bmi.n	8008c80 <__swsetup_r+0x30>
 8008c70:	2209      	movs	r2, #9
 8008c72:	602a      	str	r2, [r5, #0]
 8008c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c7e:	e033      	b.n	8008ce8 <__swsetup_r+0x98>
 8008c80:	0758      	lsls	r0, r3, #29
 8008c82:	d512      	bpl.n	8008caa <__swsetup_r+0x5a>
 8008c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c86:	b141      	cbz	r1, 8008c9a <__swsetup_r+0x4a>
 8008c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c8c:	4299      	cmp	r1, r3
 8008c8e:	d002      	beq.n	8008c96 <__swsetup_r+0x46>
 8008c90:	4628      	mov	r0, r5
 8008c92:	f000 f90d 	bl	8008eb0 <_free_r>
 8008c96:	2300      	movs	r3, #0
 8008c98:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f043 0308 	orr.w	r3, r3, #8
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	b94b      	cbnz	r3, 8008cca <__swsetup_r+0x7a>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cc0:	d003      	beq.n	8008cca <__swsetup_r+0x7a>
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f000 f83f 	bl	8008d48 <__smakebuf_r>
 8008cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cce:	f013 0201 	ands.w	r2, r3, #1
 8008cd2:	d00a      	beq.n	8008cea <__swsetup_r+0x9a>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	60a2      	str	r2, [r4, #8]
 8008cd8:	6962      	ldr	r2, [r4, #20]
 8008cda:	4252      	negs	r2, r2
 8008cdc:	61a2      	str	r2, [r4, #24]
 8008cde:	6922      	ldr	r2, [r4, #16]
 8008ce0:	b942      	cbnz	r2, 8008cf4 <__swsetup_r+0xa4>
 8008ce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ce6:	d1c5      	bne.n	8008c74 <__swsetup_r+0x24>
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	0799      	lsls	r1, r3, #30
 8008cec:	bf58      	it	pl
 8008cee:	6962      	ldrpl	r2, [r4, #20]
 8008cf0:	60a2      	str	r2, [r4, #8]
 8008cf2:	e7f4      	b.n	8008cde <__swsetup_r+0x8e>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e7f7      	b.n	8008ce8 <__swsetup_r+0x98>
 8008cf8:	20000018 	.word	0x20000018

08008cfc <__swhatbuf_r>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	460c      	mov	r4, r1
 8008d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d04:	2900      	cmp	r1, #0
 8008d06:	b096      	sub	sp, #88	@ 0x58
 8008d08:	4615      	mov	r5, r2
 8008d0a:	461e      	mov	r6, r3
 8008d0c:	da0d      	bge.n	8008d2a <__swhatbuf_r+0x2e>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d14:	f04f 0100 	mov.w	r1, #0
 8008d18:	bf14      	ite	ne
 8008d1a:	2340      	movne	r3, #64	@ 0x40
 8008d1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d20:	2000      	movs	r0, #0
 8008d22:	6031      	str	r1, [r6, #0]
 8008d24:	602b      	str	r3, [r5, #0]
 8008d26:	b016      	add	sp, #88	@ 0x58
 8008d28:	bd70      	pop	{r4, r5, r6, pc}
 8008d2a:	466a      	mov	r2, sp
 8008d2c:	f000 f8ae 	bl	8008e8c <_fstat_r>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	dbec      	blt.n	8008d0e <__swhatbuf_r+0x12>
 8008d34:	9901      	ldr	r1, [sp, #4]
 8008d36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d3e:	4259      	negs	r1, r3
 8008d40:	4159      	adcs	r1, r3
 8008d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d46:	e7eb      	b.n	8008d20 <__swhatbuf_r+0x24>

08008d48 <__smakebuf_r>:
 8008d48:	898b      	ldrh	r3, [r1, #12]
 8008d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d4c:	079d      	lsls	r5, r3, #30
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460c      	mov	r4, r1
 8008d52:	d507      	bpl.n	8008d64 <__smakebuf_r+0x1c>
 8008d54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	6163      	str	r3, [r4, #20]
 8008d60:	b003      	add	sp, #12
 8008d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d64:	ab01      	add	r3, sp, #4
 8008d66:	466a      	mov	r2, sp
 8008d68:	f7ff ffc8 	bl	8008cfc <__swhatbuf_r>
 8008d6c:	9f00      	ldr	r7, [sp, #0]
 8008d6e:	4605      	mov	r5, r0
 8008d70:	4639      	mov	r1, r7
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff fc26 	bl	80085c4 <_malloc_r>
 8008d78:	b948      	cbnz	r0, 8008d8e <__smakebuf_r+0x46>
 8008d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7e:	059a      	lsls	r2, r3, #22
 8008d80:	d4ee      	bmi.n	8008d60 <__smakebuf_r+0x18>
 8008d82:	f023 0303 	bic.w	r3, r3, #3
 8008d86:	f043 0302 	orr.w	r3, r3, #2
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	e7e2      	b.n	8008d54 <__smakebuf_r+0xc>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	6020      	str	r0, [r4, #0]
 8008d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d9e:	b15b      	cbz	r3, 8008db8 <__smakebuf_r+0x70>
 8008da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008da4:	4630      	mov	r0, r6
 8008da6:	f000 f80b 	bl	8008dc0 <_isatty_r>
 8008daa:	b128      	cbz	r0, 8008db8 <__smakebuf_r+0x70>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	431d      	orrs	r5, r3
 8008dbc:	81a5      	strh	r5, [r4, #12]
 8008dbe:	e7cf      	b.n	8008d60 <__smakebuf_r+0x18>

08008dc0 <_isatty_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d06      	ldr	r5, [pc, #24]	@ (8008ddc <_isatty_r+0x1c>)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	f7fa f832 	bl	8002e34 <_isatty>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_isatty_r+0x1a>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_isatty_r+0x1a>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20002a00 	.word	0x20002a00

08008de0 <_lseek_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d07      	ldr	r5, [pc, #28]	@ (8008e00 <_lseek_r+0x20>)
 8008de4:	4604      	mov	r4, r0
 8008de6:	4608      	mov	r0, r1
 8008de8:	4611      	mov	r1, r2
 8008dea:	2200      	movs	r2, #0
 8008dec:	602a      	str	r2, [r5, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f7fa f82b 	bl	8002e4a <_lseek>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_lseek_r+0x1e>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_lseek_r+0x1e>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20002a00 	.word	0x20002a00

08008e04 <_read_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d07      	ldr	r5, [pc, #28]	@ (8008e24 <_read_r+0x20>)
 8008e08:	4604      	mov	r4, r0
 8008e0a:	4608      	mov	r0, r1
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	602a      	str	r2, [r5, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f7f9 ffb9 	bl	8002d8a <_read>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_read_r+0x1e>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_read_r+0x1e>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	20002a00 	.word	0x20002a00

08008e28 <_sbrk_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d06      	ldr	r5, [pc, #24]	@ (8008e44 <_sbrk_r+0x1c>)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4604      	mov	r4, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	f7fa f816 	bl	8002e64 <_sbrk>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_sbrk_r+0x1a>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_sbrk_r+0x1a>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	20002a00 	.word	0x20002a00

08008e48 <_write_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	@ (8008e68 <_write_r+0x20>)
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f9 ffb4 	bl	8002dc4 <_write>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_write_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_write_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20002a00 	.word	0x20002a00

08008e6c <_close_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4d06      	ldr	r5, [pc, #24]	@ (8008e88 <_close_r+0x1c>)
 8008e70:	2300      	movs	r3, #0
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	602b      	str	r3, [r5, #0]
 8008e78:	f7f9 ffc0 	bl	8002dfc <_close>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_close_r+0x1a>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_close_r+0x1a>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	20002a00 	.word	0x20002a00

08008e8c <_fstat_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	@ (8008eac <_fstat_r+0x20>)
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	f7f9 ffbb 	bl	8002e14 <_fstat>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d102      	bne.n	8008ea8 <_fstat_r+0x1c>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	b103      	cbz	r3, 8008ea8 <_fstat_r+0x1c>
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	bf00      	nop
 8008eac:	20002a00 	.word	0x20002a00

08008eb0 <_free_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	d041      	beq.n	8008f3c <_free_r+0x8c>
 8008eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ebc:	1f0c      	subs	r4, r1, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfb8      	it	lt
 8008ec2:	18e4      	addlt	r4, r4, r3
 8008ec4:	f7ff fe36 	bl	8008b34 <__malloc_lock>
 8008ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f40 <_free_r+0x90>)
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	b933      	cbnz	r3, 8008edc <_free_r+0x2c>
 8008ece:	6063      	str	r3, [r4, #4]
 8008ed0:	6014      	str	r4, [r2, #0]
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed8:	f7ff be32 	b.w	8008b40 <__malloc_unlock>
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d908      	bls.n	8008ef2 <_free_r+0x42>
 8008ee0:	6820      	ldr	r0, [r4, #0]
 8008ee2:	1821      	adds	r1, r4, r0
 8008ee4:	428b      	cmp	r3, r1
 8008ee6:	bf01      	itttt	eq
 8008ee8:	6819      	ldreq	r1, [r3, #0]
 8008eea:	685b      	ldreq	r3, [r3, #4]
 8008eec:	1809      	addeq	r1, r1, r0
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	e7ed      	b.n	8008ece <_free_r+0x1e>
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	b10b      	cbz	r3, 8008efc <_free_r+0x4c>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d9fa      	bls.n	8008ef2 <_free_r+0x42>
 8008efc:	6811      	ldr	r1, [r2, #0]
 8008efe:	1850      	adds	r0, r2, r1
 8008f00:	42a0      	cmp	r0, r4
 8008f02:	d10b      	bne.n	8008f1c <_free_r+0x6c>
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	4401      	add	r1, r0
 8008f08:	1850      	adds	r0, r2, r1
 8008f0a:	4283      	cmp	r3, r0
 8008f0c:	6011      	str	r1, [r2, #0]
 8008f0e:	d1e0      	bne.n	8008ed2 <_free_r+0x22>
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	6053      	str	r3, [r2, #4]
 8008f16:	4408      	add	r0, r1
 8008f18:	6010      	str	r0, [r2, #0]
 8008f1a:	e7da      	b.n	8008ed2 <_free_r+0x22>
 8008f1c:	d902      	bls.n	8008f24 <_free_r+0x74>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	e7d6      	b.n	8008ed2 <_free_r+0x22>
 8008f24:	6820      	ldr	r0, [r4, #0]
 8008f26:	1821      	adds	r1, r4, r0
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	bf04      	itt	eq
 8008f2c:	6819      	ldreq	r1, [r3, #0]
 8008f2e:	685b      	ldreq	r3, [r3, #4]
 8008f30:	6063      	str	r3, [r4, #4]
 8008f32:	bf04      	itt	eq
 8008f34:	1809      	addeq	r1, r1, r0
 8008f36:	6021      	streq	r1, [r4, #0]
 8008f38:	6054      	str	r4, [r2, #4]
 8008f3a:	e7ca      	b.n	8008ed2 <_free_r+0x22>
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop
 8008f40:	200029fc 	.word	0x200029fc

08008f44 <pow>:
 8008f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f46:	ed2d 8b02 	vpush	{d8}
 8008f4a:	eeb0 8a40 	vmov.f32	s16, s0
 8008f4e:	eef0 8a60 	vmov.f32	s17, s1
 8008f52:	ec55 4b11 	vmov	r4, r5, d1
 8008f56:	f000 f973 	bl	8009240 <__ieee754_pow>
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	ec57 6b10 	vmov	r6, r7, d0
 8008f66:	f7f7 fdd9 	bl	8000b1c <__aeabi_dcmpun>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d13b      	bne.n	8008fe6 <pow+0xa2>
 8008f6e:	ec51 0b18 	vmov	r0, r1, d8
 8008f72:	2200      	movs	r2, #0
 8008f74:	2300      	movs	r3, #0
 8008f76:	f7f7 fd9f 	bl	8000ab8 <__aeabi_dcmpeq>
 8008f7a:	b1b8      	cbz	r0, 8008fac <pow+0x68>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 fd98 	bl	8000ab8 <__aeabi_dcmpeq>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d146      	bne.n	800901a <pow+0xd6>
 8008f8c:	ec45 4b10 	vmov	d0, r4, r5
 8008f90:	f000 f874 	bl	800907c <finite>
 8008f94:	b338      	cbz	r0, 8008fe6 <pow+0xa2>
 8008f96:	2200      	movs	r2, #0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 fd95 	bl	8000acc <__aeabi_dcmplt>
 8008fa2:	b300      	cbz	r0, 8008fe6 <pow+0xa2>
 8008fa4:	f7ff f97e 	bl	80082a4 <__errno>
 8008fa8:	2322      	movs	r3, #34	@ 0x22
 8008faa:	e01b      	b.n	8008fe4 <pow+0xa0>
 8008fac:	ec47 6b10 	vmov	d0, r6, r7
 8008fb0:	f000 f864 	bl	800907c <finite>
 8008fb4:	b9e0      	cbnz	r0, 8008ff0 <pow+0xac>
 8008fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8008fba:	eef0 0a68 	vmov.f32	s1, s17
 8008fbe:	f000 f85d 	bl	800907c <finite>
 8008fc2:	b1a8      	cbz	r0, 8008ff0 <pow+0xac>
 8008fc4:	ec45 4b10 	vmov	d0, r4, r5
 8008fc8:	f000 f858 	bl	800907c <finite>
 8008fcc:	b180      	cbz	r0, 8008ff0 <pow+0xac>
 8008fce:	4632      	mov	r2, r6
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	4639      	mov	r1, r7
 8008fd6:	f7f7 fda1 	bl	8000b1c <__aeabi_dcmpun>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d0e2      	beq.n	8008fa4 <pow+0x60>
 8008fde:	f7ff f961 	bl	80082a4 <__errno>
 8008fe2:	2321      	movs	r3, #33	@ 0x21
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	ecbd 8b02 	vpop	{d8}
 8008fea:	ec47 6b10 	vmov	d0, r6, r7
 8008fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 fd5e 	bl	8000ab8 <__aeabi_dcmpeq>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d0f2      	beq.n	8008fe6 <pow+0xa2>
 8009000:	eeb0 0a48 	vmov.f32	s0, s16
 8009004:	eef0 0a68 	vmov.f32	s1, s17
 8009008:	f000 f838 	bl	800907c <finite>
 800900c:	2800      	cmp	r0, #0
 800900e:	d0ea      	beq.n	8008fe6 <pow+0xa2>
 8009010:	ec45 4b10 	vmov	d0, r4, r5
 8009014:	f000 f832 	bl	800907c <finite>
 8009018:	e7c3      	b.n	8008fa2 <pow+0x5e>
 800901a:	4f01      	ldr	r7, [pc, #4]	@ (8009020 <pow+0xdc>)
 800901c:	2600      	movs	r6, #0
 800901e:	e7e2      	b.n	8008fe6 <pow+0xa2>
 8009020:	3ff00000 	.word	0x3ff00000

08009024 <sqrt>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	ed2d 8b02 	vpush	{d8}
 800902a:	ec55 4b10 	vmov	r4, r5, d0
 800902e:	f000 f831 	bl	8009094 <__ieee754_sqrt>
 8009032:	4622      	mov	r2, r4
 8009034:	462b      	mov	r3, r5
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	eeb0 8a40 	vmov.f32	s16, s0
 800903e:	eef0 8a60 	vmov.f32	s17, s1
 8009042:	f7f7 fd6b 	bl	8000b1c <__aeabi_dcmpun>
 8009046:	b990      	cbnz	r0, 800906e <sqrt+0x4a>
 8009048:	2200      	movs	r2, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 fd3c 	bl	8000acc <__aeabi_dcmplt>
 8009054:	b158      	cbz	r0, 800906e <sqrt+0x4a>
 8009056:	f7ff f925 	bl	80082a4 <__errno>
 800905a:	2321      	movs	r3, #33	@ 0x21
 800905c:	6003      	str	r3, [r0, #0]
 800905e:	2200      	movs	r2, #0
 8009060:	2300      	movs	r3, #0
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	f7f7 fbe9 	bl	800083c <__aeabi_ddiv>
 800906a:	ec41 0b18 	vmov	d8, r0, r1
 800906e:	eeb0 0a48 	vmov.f32	s0, s16
 8009072:	eef0 0a68 	vmov.f32	s1, s17
 8009076:	ecbd 8b02 	vpop	{d8}
 800907a:	bd38      	pop	{r3, r4, r5, pc}

0800907c <finite>:
 800907c:	b082      	sub	sp, #8
 800907e:	ed8d 0b00 	vstr	d0, [sp]
 8009082:	9801      	ldr	r0, [sp, #4]
 8009084:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009088:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800908c:	0fc0      	lsrs	r0, r0, #31
 800908e:	b002      	add	sp, #8
 8009090:	4770      	bx	lr
	...

08009094 <__ieee754_sqrt>:
 8009094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	4a66      	ldr	r2, [pc, #408]	@ (8009234 <__ieee754_sqrt+0x1a0>)
 800909a:	ec55 4b10 	vmov	r4, r5, d0
 800909e:	43aa      	bics	r2, r5
 80090a0:	462b      	mov	r3, r5
 80090a2:	4621      	mov	r1, r4
 80090a4:	d110      	bne.n	80090c8 <__ieee754_sqrt+0x34>
 80090a6:	4622      	mov	r2, r4
 80090a8:	4620      	mov	r0, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7f7 fa9c 	bl	80005e8 <__aeabi_dmul>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4620      	mov	r0, r4
 80090b6:	4629      	mov	r1, r5
 80090b8:	f7f7 f8e0 	bl	800027c <__adddf3>
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	ec45 4b10 	vmov	d0, r4, r5
 80090c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	2d00      	cmp	r5, #0
 80090ca:	dc0e      	bgt.n	80090ea <__ieee754_sqrt+0x56>
 80090cc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80090d0:	4322      	orrs	r2, r4
 80090d2:	d0f5      	beq.n	80090c0 <__ieee754_sqrt+0x2c>
 80090d4:	b19d      	cbz	r5, 80090fe <__ieee754_sqrt+0x6a>
 80090d6:	4622      	mov	r2, r4
 80090d8:	4620      	mov	r0, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	f7f7 f8cc 	bl	8000278 <__aeabi_dsub>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	f7f7 fbaa 	bl	800083c <__aeabi_ddiv>
 80090e8:	e7e8      	b.n	80090bc <__ieee754_sqrt+0x28>
 80090ea:	152a      	asrs	r2, r5, #20
 80090ec:	d115      	bne.n	800911a <__ieee754_sqrt+0x86>
 80090ee:	2000      	movs	r0, #0
 80090f0:	e009      	b.n	8009106 <__ieee754_sqrt+0x72>
 80090f2:	0acb      	lsrs	r3, r1, #11
 80090f4:	3a15      	subs	r2, #21
 80090f6:	0549      	lsls	r1, r1, #21
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0fa      	beq.n	80090f2 <__ieee754_sqrt+0x5e>
 80090fc:	e7f7      	b.n	80090ee <__ieee754_sqrt+0x5a>
 80090fe:	462a      	mov	r2, r5
 8009100:	e7fa      	b.n	80090f8 <__ieee754_sqrt+0x64>
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	3001      	adds	r0, #1
 8009106:	02dc      	lsls	r4, r3, #11
 8009108:	d5fb      	bpl.n	8009102 <__ieee754_sqrt+0x6e>
 800910a:	1e44      	subs	r4, r0, #1
 800910c:	1b12      	subs	r2, r2, r4
 800910e:	f1c0 0420 	rsb	r4, r0, #32
 8009112:	fa21 f404 	lsr.w	r4, r1, r4
 8009116:	4323      	orrs	r3, r4
 8009118:	4081      	lsls	r1, r0
 800911a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800911e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009126:	07d2      	lsls	r2, r2, #31
 8009128:	bf5c      	itt	pl
 800912a:	005b      	lslpl	r3, r3, #1
 800912c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009130:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009134:	bf58      	it	pl
 8009136:	0049      	lslpl	r1, r1, #1
 8009138:	2600      	movs	r6, #0
 800913a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800913e:	107f      	asrs	r7, r7, #1
 8009140:	0049      	lsls	r1, r1, #1
 8009142:	2016      	movs	r0, #22
 8009144:	4632      	mov	r2, r6
 8009146:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800914a:	1915      	adds	r5, r2, r4
 800914c:	429d      	cmp	r5, r3
 800914e:	bfde      	ittt	le
 8009150:	192a      	addle	r2, r5, r4
 8009152:	1b5b      	suble	r3, r3, r5
 8009154:	1936      	addle	r6, r6, r4
 8009156:	0fcd      	lsrs	r5, r1, #31
 8009158:	3801      	subs	r0, #1
 800915a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800915e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009162:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009166:	d1f0      	bne.n	800914a <__ieee754_sqrt+0xb6>
 8009168:	4605      	mov	r5, r0
 800916a:	2420      	movs	r4, #32
 800916c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009170:	4293      	cmp	r3, r2
 8009172:	eb0c 0e00 	add.w	lr, ip, r0
 8009176:	dc02      	bgt.n	800917e <__ieee754_sqrt+0xea>
 8009178:	d113      	bne.n	80091a2 <__ieee754_sqrt+0x10e>
 800917a:	458e      	cmp	lr, r1
 800917c:	d811      	bhi.n	80091a2 <__ieee754_sqrt+0x10e>
 800917e:	f1be 0f00 	cmp.w	lr, #0
 8009182:	eb0e 000c 	add.w	r0, lr, ip
 8009186:	da3f      	bge.n	8009208 <__ieee754_sqrt+0x174>
 8009188:	2800      	cmp	r0, #0
 800918a:	db3d      	blt.n	8009208 <__ieee754_sqrt+0x174>
 800918c:	f102 0801 	add.w	r8, r2, #1
 8009190:	1a9b      	subs	r3, r3, r2
 8009192:	458e      	cmp	lr, r1
 8009194:	bf88      	it	hi
 8009196:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800919a:	eba1 010e 	sub.w	r1, r1, lr
 800919e:	4465      	add	r5, ip
 80091a0:	4642      	mov	r2, r8
 80091a2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80091a6:	3c01      	subs	r4, #1
 80091a8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80091ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80091b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80091b4:	d1dc      	bne.n	8009170 <__ieee754_sqrt+0xdc>
 80091b6:	4319      	orrs	r1, r3
 80091b8:	d01b      	beq.n	80091f2 <__ieee754_sqrt+0x15e>
 80091ba:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8009238 <__ieee754_sqrt+0x1a4>
 80091be:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800923c <__ieee754_sqrt+0x1a8>
 80091c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80091c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80091ca:	f7f7 f855 	bl	8000278 <__aeabi_dsub>
 80091ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4640      	mov	r0, r8
 80091d8:	4649      	mov	r1, r9
 80091da:	f7f7 fc81 	bl	8000ae0 <__aeabi_dcmple>
 80091de:	b140      	cbz	r0, 80091f2 <__ieee754_sqrt+0x15e>
 80091e0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80091e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80091e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80091ec:	d10e      	bne.n	800920c <__ieee754_sqrt+0x178>
 80091ee:	3601      	adds	r6, #1
 80091f0:	4625      	mov	r5, r4
 80091f2:	1073      	asrs	r3, r6, #1
 80091f4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80091f8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80091fc:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8009200:	086b      	lsrs	r3, r5, #1
 8009202:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8009206:	e759      	b.n	80090bc <__ieee754_sqrt+0x28>
 8009208:	4690      	mov	r8, r2
 800920a:	e7c1      	b.n	8009190 <__ieee754_sqrt+0xfc>
 800920c:	f7f7 f836 	bl	800027c <__adddf3>
 8009210:	e9da 8900 	ldrd	r8, r9, [sl]
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 fc56 	bl	8000acc <__aeabi_dcmplt>
 8009220:	b120      	cbz	r0, 800922c <__ieee754_sqrt+0x198>
 8009222:	1cab      	adds	r3, r5, #2
 8009224:	bf08      	it	eq
 8009226:	3601      	addeq	r6, #1
 8009228:	3502      	adds	r5, #2
 800922a:	e7e2      	b.n	80091f2 <__ieee754_sqrt+0x15e>
 800922c:	1c6b      	adds	r3, r5, #1
 800922e:	f023 0501 	bic.w	r5, r3, #1
 8009232:	e7de      	b.n	80091f2 <__ieee754_sqrt+0x15e>
 8009234:	7ff00000 	.word	0x7ff00000
 8009238:	08009f40 	.word	0x08009f40
 800923c:	08009f38 	.word	0x08009f38

08009240 <__ieee754_pow>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	b091      	sub	sp, #68	@ 0x44
 8009246:	ed8d 1b00 	vstr	d1, [sp]
 800924a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800924e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009252:	ea5a 0001 	orrs.w	r0, sl, r1
 8009256:	ec57 6b10 	vmov	r6, r7, d0
 800925a:	d113      	bne.n	8009284 <__ieee754_pow+0x44>
 800925c:	19b3      	adds	r3, r6, r6
 800925e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009262:	4152      	adcs	r2, r2
 8009264:	4298      	cmp	r0, r3
 8009266:	4b9a      	ldr	r3, [pc, #616]	@ (80094d0 <__ieee754_pow+0x290>)
 8009268:	4193      	sbcs	r3, r2
 800926a:	f080 84ee 	bcs.w	8009c4a <__ieee754_pow+0xa0a>
 800926e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 f801 	bl	800027c <__adddf3>
 800927a:	ec41 0b10 	vmov	d0, r0, r1
 800927e:	b011      	add	sp, #68	@ 0x44
 8009280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009284:	4a93      	ldr	r2, [pc, #588]	@ (80094d4 <__ieee754_pow+0x294>)
 8009286:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800928a:	4295      	cmp	r5, r2
 800928c:	46b8      	mov	r8, r7
 800928e:	4633      	mov	r3, r6
 8009290:	d80a      	bhi.n	80092a8 <__ieee754_pow+0x68>
 8009292:	d104      	bne.n	800929e <__ieee754_pow+0x5e>
 8009294:	2e00      	cmp	r6, #0
 8009296:	d1ea      	bne.n	800926e <__ieee754_pow+0x2e>
 8009298:	45aa      	cmp	sl, r5
 800929a:	d8e8      	bhi.n	800926e <__ieee754_pow+0x2e>
 800929c:	e001      	b.n	80092a2 <__ieee754_pow+0x62>
 800929e:	4592      	cmp	sl, r2
 80092a0:	d802      	bhi.n	80092a8 <__ieee754_pow+0x68>
 80092a2:	4592      	cmp	sl, r2
 80092a4:	d10f      	bne.n	80092c6 <__ieee754_pow+0x86>
 80092a6:	b171      	cbz	r1, 80092c6 <__ieee754_pow+0x86>
 80092a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80092ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80092b0:	ea58 0803 	orrs.w	r8, r8, r3
 80092b4:	d1db      	bne.n	800926e <__ieee754_pow+0x2e>
 80092b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092ba:	18db      	adds	r3, r3, r3
 80092bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80092c0:	4152      	adcs	r2, r2
 80092c2:	4598      	cmp	r8, r3
 80092c4:	e7cf      	b.n	8009266 <__ieee754_pow+0x26>
 80092c6:	f1b8 0f00 	cmp.w	r8, #0
 80092ca:	46ab      	mov	fp, r5
 80092cc:	da43      	bge.n	8009356 <__ieee754_pow+0x116>
 80092ce:	4a82      	ldr	r2, [pc, #520]	@ (80094d8 <__ieee754_pow+0x298>)
 80092d0:	4592      	cmp	sl, r2
 80092d2:	d856      	bhi.n	8009382 <__ieee754_pow+0x142>
 80092d4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80092d8:	4592      	cmp	sl, r2
 80092da:	f240 84c5 	bls.w	8009c68 <__ieee754_pow+0xa28>
 80092de:	ea4f 522a 	mov.w	r2, sl, asr #20
 80092e2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80092e6:	2a14      	cmp	r2, #20
 80092e8:	dd18      	ble.n	800931c <__ieee754_pow+0xdc>
 80092ea:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80092ee:	fa21 f402 	lsr.w	r4, r1, r2
 80092f2:	fa04 f202 	lsl.w	r2, r4, r2
 80092f6:	428a      	cmp	r2, r1
 80092f8:	f040 84b6 	bne.w	8009c68 <__ieee754_pow+0xa28>
 80092fc:	f004 0401 	and.w	r4, r4, #1
 8009300:	f1c4 0402 	rsb	r4, r4, #2
 8009304:	2900      	cmp	r1, #0
 8009306:	d159      	bne.n	80093bc <__ieee754_pow+0x17c>
 8009308:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800930c:	d148      	bne.n	80093a0 <__ieee754_pow+0x160>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f7 f967 	bl	80005e8 <__aeabi_dmul>
 800931a:	e7ae      	b.n	800927a <__ieee754_pow+0x3a>
 800931c:	2900      	cmp	r1, #0
 800931e:	d14c      	bne.n	80093ba <__ieee754_pow+0x17a>
 8009320:	f1c2 0214 	rsb	r2, r2, #20
 8009324:	fa4a f402 	asr.w	r4, sl, r2
 8009328:	fa04 f202 	lsl.w	r2, r4, r2
 800932c:	4552      	cmp	r2, sl
 800932e:	f040 8498 	bne.w	8009c62 <__ieee754_pow+0xa22>
 8009332:	f004 0401 	and.w	r4, r4, #1
 8009336:	f1c4 0402 	rsb	r4, r4, #2
 800933a:	4a68      	ldr	r2, [pc, #416]	@ (80094dc <__ieee754_pow+0x29c>)
 800933c:	4592      	cmp	sl, r2
 800933e:	d1e3      	bne.n	8009308 <__ieee754_pow+0xc8>
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	f280 8489 	bge.w	8009c5a <__ieee754_pow+0xa1a>
 8009348:	4964      	ldr	r1, [pc, #400]	@ (80094dc <__ieee754_pow+0x29c>)
 800934a:	4632      	mov	r2, r6
 800934c:	463b      	mov	r3, r7
 800934e:	2000      	movs	r0, #0
 8009350:	f7f7 fa74 	bl	800083c <__aeabi_ddiv>
 8009354:	e791      	b.n	800927a <__ieee754_pow+0x3a>
 8009356:	2400      	movs	r4, #0
 8009358:	bb81      	cbnz	r1, 80093bc <__ieee754_pow+0x17c>
 800935a:	4a5e      	ldr	r2, [pc, #376]	@ (80094d4 <__ieee754_pow+0x294>)
 800935c:	4592      	cmp	sl, r2
 800935e:	d1ec      	bne.n	800933a <__ieee754_pow+0xfa>
 8009360:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009364:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009368:	431a      	orrs	r2, r3
 800936a:	f000 846e 	beq.w	8009c4a <__ieee754_pow+0xa0a>
 800936e:	4b5c      	ldr	r3, [pc, #368]	@ (80094e0 <__ieee754_pow+0x2a0>)
 8009370:	429d      	cmp	r5, r3
 8009372:	d908      	bls.n	8009386 <__ieee754_pow+0x146>
 8009374:	f1b9 0f00 	cmp.w	r9, #0
 8009378:	f280 846b 	bge.w	8009c52 <__ieee754_pow+0xa12>
 800937c:	2000      	movs	r0, #0
 800937e:	2100      	movs	r1, #0
 8009380:	e77b      	b.n	800927a <__ieee754_pow+0x3a>
 8009382:	2402      	movs	r4, #2
 8009384:	e7e8      	b.n	8009358 <__ieee754_pow+0x118>
 8009386:	f1b9 0f00 	cmp.w	r9, #0
 800938a:	f04f 0000 	mov.w	r0, #0
 800938e:	f04f 0100 	mov.w	r1, #0
 8009392:	f6bf af72 	bge.w	800927a <__ieee754_pow+0x3a>
 8009396:	e9dd 0300 	ldrd	r0, r3, [sp]
 800939a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800939e:	e76c      	b.n	800927a <__ieee754_pow+0x3a>
 80093a0:	4a50      	ldr	r2, [pc, #320]	@ (80094e4 <__ieee754_pow+0x2a4>)
 80093a2:	4591      	cmp	r9, r2
 80093a4:	d10a      	bne.n	80093bc <__ieee754_pow+0x17c>
 80093a6:	f1b8 0f00 	cmp.w	r8, #0
 80093aa:	db07      	blt.n	80093bc <__ieee754_pow+0x17c>
 80093ac:	ec47 6b10 	vmov	d0, r6, r7
 80093b0:	b011      	add	sp, #68	@ 0x44
 80093b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b6:	f7ff be6d 	b.w	8009094 <__ieee754_sqrt>
 80093ba:	2400      	movs	r4, #0
 80093bc:	ec47 6b10 	vmov	d0, r6, r7
 80093c0:	9302      	str	r3, [sp, #8]
 80093c2:	f000 fcc5 	bl	8009d50 <fabs>
 80093c6:	9b02      	ldr	r3, [sp, #8]
 80093c8:	ec51 0b10 	vmov	r0, r1, d0
 80093cc:	bb43      	cbnz	r3, 8009420 <__ieee754_pow+0x1e0>
 80093ce:	4b43      	ldr	r3, [pc, #268]	@ (80094dc <__ieee754_pow+0x29c>)
 80093d0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d000      	beq.n	80093da <__ieee754_pow+0x19a>
 80093d8:	bb15      	cbnz	r5, 8009420 <__ieee754_pow+0x1e0>
 80093da:	f1b9 0f00 	cmp.w	r9, #0
 80093de:	da05      	bge.n	80093ec <__ieee754_pow+0x1ac>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	2000      	movs	r0, #0
 80093e6:	493d      	ldr	r1, [pc, #244]	@ (80094dc <__ieee754_pow+0x29c>)
 80093e8:	f7f7 fa28 	bl	800083c <__aeabi_ddiv>
 80093ec:	f1b8 0f00 	cmp.w	r8, #0
 80093f0:	f6bf af43 	bge.w	800927a <__ieee754_pow+0x3a>
 80093f4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80093f8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80093fc:	4325      	orrs	r5, r4
 80093fe:	d108      	bne.n	8009412 <__ieee754_pow+0x1d2>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4610      	mov	r0, r2
 8009406:	4619      	mov	r1, r3
 8009408:	f7f6 ff36 	bl	8000278 <__aeabi_dsub>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	e79e      	b.n	8009350 <__ieee754_pow+0x110>
 8009412:	2c01      	cmp	r4, #1
 8009414:	f47f af31 	bne.w	800927a <__ieee754_pow+0x3a>
 8009418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800941c:	4619      	mov	r1, r3
 800941e:	e72c      	b.n	800927a <__ieee754_pow+0x3a>
 8009420:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009424:	3b01      	subs	r3, #1
 8009426:	ea53 0204 	orrs.w	r2, r3, r4
 800942a:	d102      	bne.n	8009432 <__ieee754_pow+0x1f2>
 800942c:	4632      	mov	r2, r6
 800942e:	463b      	mov	r3, r7
 8009430:	e7e8      	b.n	8009404 <__ieee754_pow+0x1c4>
 8009432:	3c01      	subs	r4, #1
 8009434:	431c      	orrs	r4, r3
 8009436:	d016      	beq.n	8009466 <__ieee754_pow+0x226>
 8009438:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80094c0 <__ieee754_pow+0x280>
 800943c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009440:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009444:	f240 8110 	bls.w	8009668 <__ieee754_pow+0x428>
 8009448:	4b27      	ldr	r3, [pc, #156]	@ (80094e8 <__ieee754_pow+0x2a8>)
 800944a:	459a      	cmp	sl, r3
 800944c:	4b24      	ldr	r3, [pc, #144]	@ (80094e0 <__ieee754_pow+0x2a0>)
 800944e:	d916      	bls.n	800947e <__ieee754_pow+0x23e>
 8009450:	429d      	cmp	r5, r3
 8009452:	d80b      	bhi.n	800946c <__ieee754_pow+0x22c>
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	da0b      	bge.n	8009472 <__ieee754_pow+0x232>
 800945a:	2000      	movs	r0, #0
 800945c:	b011      	add	sp, #68	@ 0x44
 800945e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009462:	f000 bc6d 	b.w	8009d40 <__math_oflow>
 8009466:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80094c8 <__ieee754_pow+0x288>
 800946a:	e7e7      	b.n	800943c <__ieee754_pow+0x1fc>
 800946c:	f1b9 0f00 	cmp.w	r9, #0
 8009470:	dcf3      	bgt.n	800945a <__ieee754_pow+0x21a>
 8009472:	2000      	movs	r0, #0
 8009474:	b011      	add	sp, #68	@ 0x44
 8009476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947a:	f000 bc59 	b.w	8009d30 <__math_uflow>
 800947e:	429d      	cmp	r5, r3
 8009480:	d20c      	bcs.n	800949c <__ieee754_pow+0x25c>
 8009482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009486:	2200      	movs	r2, #0
 8009488:	2300      	movs	r3, #0
 800948a:	f7f7 fb1f 	bl	8000acc <__aeabi_dcmplt>
 800948e:	3800      	subs	r0, #0
 8009490:	bf18      	it	ne
 8009492:	2001      	movne	r0, #1
 8009494:	f1b9 0f00 	cmp.w	r9, #0
 8009498:	daec      	bge.n	8009474 <__ieee754_pow+0x234>
 800949a:	e7df      	b.n	800945c <__ieee754_pow+0x21c>
 800949c:	4b0f      	ldr	r3, [pc, #60]	@ (80094dc <__ieee754_pow+0x29c>)
 800949e:	429d      	cmp	r5, r3
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	d922      	bls.n	80094ec <__ieee754_pow+0x2ac>
 80094a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094aa:	2300      	movs	r3, #0
 80094ac:	f7f7 fb0e 	bl	8000acc <__aeabi_dcmplt>
 80094b0:	3800      	subs	r0, #0
 80094b2:	bf18      	it	ne
 80094b4:	2001      	movne	r0, #1
 80094b6:	f1b9 0f00 	cmp.w	r9, #0
 80094ba:	dccf      	bgt.n	800945c <__ieee754_pow+0x21c>
 80094bc:	e7da      	b.n	8009474 <__ieee754_pow+0x234>
 80094be:	bf00      	nop
 80094c0:	00000000 	.word	0x00000000
 80094c4:	3ff00000 	.word	0x3ff00000
 80094c8:	00000000 	.word	0x00000000
 80094cc:	bff00000 	.word	0xbff00000
 80094d0:	fff00000 	.word	0xfff00000
 80094d4:	7ff00000 	.word	0x7ff00000
 80094d8:	433fffff 	.word	0x433fffff
 80094dc:	3ff00000 	.word	0x3ff00000
 80094e0:	3fefffff 	.word	0x3fefffff
 80094e4:	3fe00000 	.word	0x3fe00000
 80094e8:	43f00000 	.word	0x43f00000
 80094ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009658 <__ieee754_pow+0x418>)
 80094ee:	f7f6 fec3 	bl	8000278 <__aeabi_dsub>
 80094f2:	a351      	add	r3, pc, #324	@ (adr r3, 8009638 <__ieee754_pow+0x3f8>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	4604      	mov	r4, r0
 80094fa:	460d      	mov	r5, r1
 80094fc:	f7f7 f874 	bl	80005e8 <__aeabi_dmul>
 8009500:	a34f      	add	r3, pc, #316	@ (adr r3, 8009640 <__ieee754_pow+0x400>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	4620      	mov	r0, r4
 800950c:	4629      	mov	r1, r5
 800950e:	f7f7 f86b 	bl	80005e8 <__aeabi_dmul>
 8009512:	4b52      	ldr	r3, [pc, #328]	@ (800965c <__ieee754_pow+0x41c>)
 8009514:	4682      	mov	sl, r0
 8009516:	468b      	mov	fp, r1
 8009518:	2200      	movs	r2, #0
 800951a:	4620      	mov	r0, r4
 800951c:	4629      	mov	r1, r5
 800951e:	f7f7 f863 	bl	80005e8 <__aeabi_dmul>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	a148      	add	r1, pc, #288	@ (adr r1, 8009648 <__ieee754_pow+0x408>)
 8009528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952c:	f7f6 fea4 	bl	8000278 <__aeabi_dsub>
 8009530:	4622      	mov	r2, r4
 8009532:	462b      	mov	r3, r5
 8009534:	f7f7 f858 	bl	80005e8 <__aeabi_dmul>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	2000      	movs	r0, #0
 800953e:	4948      	ldr	r1, [pc, #288]	@ (8009660 <__ieee754_pow+0x420>)
 8009540:	f7f6 fe9a 	bl	8000278 <__aeabi_dsub>
 8009544:	4622      	mov	r2, r4
 8009546:	4680      	mov	r8, r0
 8009548:	4689      	mov	r9, r1
 800954a:	462b      	mov	r3, r5
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f7 f84a 	bl	80005e8 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f7 f844 	bl	80005e8 <__aeabi_dmul>
 8009560:	a33b      	add	r3, pc, #236	@ (adr r3, 8009650 <__ieee754_pow+0x410>)
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f7f7 f83f 	bl	80005e8 <__aeabi_dmul>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4650      	mov	r0, sl
 8009570:	4659      	mov	r1, fp
 8009572:	f7f6 fe81 	bl	8000278 <__aeabi_dsub>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4680      	mov	r8, r0
 800957c:	4689      	mov	r9, r1
 800957e:	4630      	mov	r0, r6
 8009580:	4639      	mov	r1, r7
 8009582:	f7f6 fe7b 	bl	800027c <__adddf3>
 8009586:	2400      	movs	r4, #0
 8009588:	4632      	mov	r2, r6
 800958a:	463b      	mov	r3, r7
 800958c:	4620      	mov	r0, r4
 800958e:	460d      	mov	r5, r1
 8009590:	f7f6 fe72 	bl	8000278 <__aeabi_dsub>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4640      	mov	r0, r8
 800959a:	4649      	mov	r1, r9
 800959c:	f7f6 fe6c 	bl	8000278 <__aeabi_dsub>
 80095a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095a8:	2300      	movs	r3, #0
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80095b0:	4606      	mov	r6, r0
 80095b2:	460f      	mov	r7, r1
 80095b4:	465b      	mov	r3, fp
 80095b6:	4652      	mov	r2, sl
 80095b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095bc:	f7f6 fe5c 	bl	8000278 <__aeabi_dsub>
 80095c0:	4622      	mov	r2, r4
 80095c2:	462b      	mov	r3, r5
 80095c4:	f7f7 f810 	bl	80005e8 <__aeabi_dmul>
 80095c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095cc:	4680      	mov	r8, r0
 80095ce:	4689      	mov	r9, r1
 80095d0:	4630      	mov	r0, r6
 80095d2:	4639      	mov	r1, r7
 80095d4:	f7f7 f808 	bl	80005e8 <__aeabi_dmul>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4640      	mov	r0, r8
 80095de:	4649      	mov	r1, r9
 80095e0:	f7f6 fe4c 	bl	800027c <__adddf3>
 80095e4:	465b      	mov	r3, fp
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	4652      	mov	r2, sl
 80095ec:	4620      	mov	r0, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	f7f6 fffa 	bl	80005e8 <__aeabi_dmul>
 80095f4:	460b      	mov	r3, r1
 80095f6:	4602      	mov	r2, r0
 80095f8:	4680      	mov	r8, r0
 80095fa:	4689      	mov	r9, r1
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f6 fe3c 	bl	800027c <__adddf3>
 8009604:	4b17      	ldr	r3, [pc, #92]	@ (8009664 <__ieee754_pow+0x424>)
 8009606:	4299      	cmp	r1, r3
 8009608:	4604      	mov	r4, r0
 800960a:	460d      	mov	r5, r1
 800960c:	468b      	mov	fp, r1
 800960e:	f340 820b 	ble.w	8009a28 <__ieee754_pow+0x7e8>
 8009612:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009616:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800961a:	4303      	orrs	r3, r0
 800961c:	f000 81ea 	beq.w	80099f4 <__ieee754_pow+0x7b4>
 8009620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009624:	2200      	movs	r2, #0
 8009626:	2300      	movs	r3, #0
 8009628:	f7f7 fa50 	bl	8000acc <__aeabi_dcmplt>
 800962c:	3800      	subs	r0, #0
 800962e:	bf18      	it	ne
 8009630:	2001      	movne	r0, #1
 8009632:	e713      	b.n	800945c <__ieee754_pow+0x21c>
 8009634:	f3af 8000 	nop.w
 8009638:	60000000 	.word	0x60000000
 800963c:	3ff71547 	.word	0x3ff71547
 8009640:	f85ddf44 	.word	0xf85ddf44
 8009644:	3e54ae0b 	.word	0x3e54ae0b
 8009648:	55555555 	.word	0x55555555
 800964c:	3fd55555 	.word	0x3fd55555
 8009650:	652b82fe 	.word	0x652b82fe
 8009654:	3ff71547 	.word	0x3ff71547
 8009658:	3ff00000 	.word	0x3ff00000
 800965c:	3fd00000 	.word	0x3fd00000
 8009660:	3fe00000 	.word	0x3fe00000
 8009664:	408fffff 	.word	0x408fffff
 8009668:	4bd5      	ldr	r3, [pc, #852]	@ (80099c0 <__ieee754_pow+0x780>)
 800966a:	ea08 0303 	and.w	r3, r8, r3
 800966e:	2200      	movs	r2, #0
 8009670:	b92b      	cbnz	r3, 800967e <__ieee754_pow+0x43e>
 8009672:	4bd4      	ldr	r3, [pc, #848]	@ (80099c4 <__ieee754_pow+0x784>)
 8009674:	f7f6 ffb8 	bl	80005e8 <__aeabi_dmul>
 8009678:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800967c:	468b      	mov	fp, r1
 800967e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009682:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009686:	4413      	add	r3, r2
 8009688:	930a      	str	r3, [sp, #40]	@ 0x28
 800968a:	4bcf      	ldr	r3, [pc, #828]	@ (80099c8 <__ieee754_pow+0x788>)
 800968c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009690:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009694:	459b      	cmp	fp, r3
 8009696:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800969a:	dd08      	ble.n	80096ae <__ieee754_pow+0x46e>
 800969c:	4bcb      	ldr	r3, [pc, #812]	@ (80099cc <__ieee754_pow+0x78c>)
 800969e:	459b      	cmp	fp, r3
 80096a0:	f340 81a5 	ble.w	80099ee <__ieee754_pow+0x7ae>
 80096a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a6:	3301      	adds	r3, #1
 80096a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80096aa:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80096ae:	f04f 0a00 	mov.w	sl, #0
 80096b2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80096b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096b8:	4bc5      	ldr	r3, [pc, #788]	@ (80099d0 <__ieee754_pow+0x790>)
 80096ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096be:	ed93 7b00 	vldr	d7, [r3]
 80096c2:	4629      	mov	r1, r5
 80096c4:	ec53 2b17 	vmov	r2, r3, d7
 80096c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80096d0:	f7f6 fdd2 	bl	8000278 <__aeabi_dsub>
 80096d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096d8:	4606      	mov	r6, r0
 80096da:	460f      	mov	r7, r1
 80096dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096e0:	f7f6 fdcc 	bl	800027c <__adddf3>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	2000      	movs	r0, #0
 80096ea:	49ba      	ldr	r1, [pc, #744]	@ (80099d4 <__ieee754_pow+0x794>)
 80096ec:	f7f7 f8a6 	bl	800083c <__aeabi_ddiv>
 80096f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f6 ff74 	bl	80005e8 <__aeabi_dmul>
 8009700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009704:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009708:	106d      	asrs	r5, r5, #1
 800970a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800970e:	f04f 0b00 	mov.w	fp, #0
 8009712:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009716:	4661      	mov	r1, ip
 8009718:	2200      	movs	r2, #0
 800971a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800971e:	4658      	mov	r0, fp
 8009720:	46e1      	mov	r9, ip
 8009722:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009726:	4614      	mov	r4, r2
 8009728:	461d      	mov	r5, r3
 800972a:	f7f6 ff5d 	bl	80005e8 <__aeabi_dmul>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4630      	mov	r0, r6
 8009734:	4639      	mov	r1, r7
 8009736:	f7f6 fd9f 	bl	8000278 <__aeabi_dsub>
 800973a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	4620      	mov	r0, r4
 8009744:	4629      	mov	r1, r5
 8009746:	f7f6 fd97 	bl	8000278 <__aeabi_dsub>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009752:	f7f6 fd91 	bl	8000278 <__aeabi_dsub>
 8009756:	465a      	mov	r2, fp
 8009758:	464b      	mov	r3, r9
 800975a:	f7f6 ff45 	bl	80005e8 <__aeabi_dmul>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f6 fd87 	bl	8000278 <__aeabi_dsub>
 800976a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800976e:	f7f6 ff3b 	bl	80005e8 <__aeabi_dmul>
 8009772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009776:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800977a:	4610      	mov	r0, r2
 800977c:	4619      	mov	r1, r3
 800977e:	f7f6 ff33 	bl	80005e8 <__aeabi_dmul>
 8009782:	a37d      	add	r3, pc, #500	@ (adr r3, 8009978 <__ieee754_pow+0x738>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	4604      	mov	r4, r0
 800978a:	460d      	mov	r5, r1
 800978c:	f7f6 ff2c 	bl	80005e8 <__aeabi_dmul>
 8009790:	a37b      	add	r3, pc, #492	@ (adr r3, 8009980 <__ieee754_pow+0x740>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fd71 	bl	800027c <__adddf3>
 800979a:	4622      	mov	r2, r4
 800979c:	462b      	mov	r3, r5
 800979e:	f7f6 ff23 	bl	80005e8 <__aeabi_dmul>
 80097a2:	a379      	add	r3, pc, #484	@ (adr r3, 8009988 <__ieee754_pow+0x748>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fd68 	bl	800027c <__adddf3>
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	f7f6 ff1a 	bl	80005e8 <__aeabi_dmul>
 80097b4:	a376      	add	r3, pc, #472	@ (adr r3, 8009990 <__ieee754_pow+0x750>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 fd5f 	bl	800027c <__adddf3>
 80097be:	4622      	mov	r2, r4
 80097c0:	462b      	mov	r3, r5
 80097c2:	f7f6 ff11 	bl	80005e8 <__aeabi_dmul>
 80097c6:	a374      	add	r3, pc, #464	@ (adr r3, 8009998 <__ieee754_pow+0x758>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 fd56 	bl	800027c <__adddf3>
 80097d0:	4622      	mov	r2, r4
 80097d2:	462b      	mov	r3, r5
 80097d4:	f7f6 ff08 	bl	80005e8 <__aeabi_dmul>
 80097d8:	a371      	add	r3, pc, #452	@ (adr r3, 80099a0 <__ieee754_pow+0x760>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 fd4d 	bl	800027c <__adddf3>
 80097e2:	4622      	mov	r2, r4
 80097e4:	4606      	mov	r6, r0
 80097e6:	460f      	mov	r7, r1
 80097e8:	462b      	mov	r3, r5
 80097ea:	4620      	mov	r0, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 fefb 	bl	80005e8 <__aeabi_dmul>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f6 fef5 	bl	80005e8 <__aeabi_dmul>
 80097fe:	465a      	mov	r2, fp
 8009800:	4604      	mov	r4, r0
 8009802:	460d      	mov	r5, r1
 8009804:	464b      	mov	r3, r9
 8009806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800980a:	f7f6 fd37 	bl	800027c <__adddf3>
 800980e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009812:	f7f6 fee9 	bl	80005e8 <__aeabi_dmul>
 8009816:	4622      	mov	r2, r4
 8009818:	462b      	mov	r3, r5
 800981a:	f7f6 fd2f 	bl	800027c <__adddf3>
 800981e:	465a      	mov	r2, fp
 8009820:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009824:	464b      	mov	r3, r9
 8009826:	4658      	mov	r0, fp
 8009828:	4649      	mov	r1, r9
 800982a:	f7f6 fedd 	bl	80005e8 <__aeabi_dmul>
 800982e:	4b6a      	ldr	r3, [pc, #424]	@ (80099d8 <__ieee754_pow+0x798>)
 8009830:	2200      	movs	r2, #0
 8009832:	4606      	mov	r6, r0
 8009834:	460f      	mov	r7, r1
 8009836:	f7f6 fd21 	bl	800027c <__adddf3>
 800983a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800983e:	f7f6 fd1d 	bl	800027c <__adddf3>
 8009842:	46d8      	mov	r8, fp
 8009844:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009848:	460d      	mov	r5, r1
 800984a:	465a      	mov	r2, fp
 800984c:	460b      	mov	r3, r1
 800984e:	4640      	mov	r0, r8
 8009850:	4649      	mov	r1, r9
 8009852:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009856:	f7f6 fec7 	bl	80005e8 <__aeabi_dmul>
 800985a:	465c      	mov	r4, fp
 800985c:	4680      	mov	r8, r0
 800985e:	4689      	mov	r9, r1
 8009860:	4b5d      	ldr	r3, [pc, #372]	@ (80099d8 <__ieee754_pow+0x798>)
 8009862:	2200      	movs	r2, #0
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd06 	bl	8000278 <__aeabi_dsub>
 800986c:	4632      	mov	r2, r6
 800986e:	463b      	mov	r3, r7
 8009870:	f7f6 fd02 	bl	8000278 <__aeabi_dsub>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800987c:	f7f6 fcfc 	bl	8000278 <__aeabi_dsub>
 8009880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009884:	f7f6 feb0 	bl	80005e8 <__aeabi_dmul>
 8009888:	4622      	mov	r2, r4
 800988a:	4606      	mov	r6, r0
 800988c:	460f      	mov	r7, r1
 800988e:	462b      	mov	r3, r5
 8009890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009894:	f7f6 fea8 	bl	80005e8 <__aeabi_dmul>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f6 fcec 	bl	800027c <__adddf3>
 80098a4:	4606      	mov	r6, r0
 80098a6:	460f      	mov	r7, r1
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4640      	mov	r0, r8
 80098ae:	4649      	mov	r1, r9
 80098b0:	f7f6 fce4 	bl	800027c <__adddf3>
 80098b4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80098b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80099a8 <__ieee754_pow+0x768>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	4658      	mov	r0, fp
 80098c0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80098c4:	460d      	mov	r5, r1
 80098c6:	f7f6 fe8f 	bl	80005e8 <__aeabi_dmul>
 80098ca:	465c      	mov	r4, fp
 80098cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098d0:	4642      	mov	r2, r8
 80098d2:	464b      	mov	r3, r9
 80098d4:	4620      	mov	r0, r4
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7f6 fcce 	bl	8000278 <__aeabi_dsub>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f6 fcc8 	bl	8000278 <__aeabi_dsub>
 80098e8:	a331      	add	r3, pc, #196	@ (adr r3, 80099b0 <__ieee754_pow+0x770>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f6 fe7b 	bl	80005e8 <__aeabi_dmul>
 80098f2:	a331      	add	r3, pc, #196	@ (adr r3, 80099b8 <__ieee754_pow+0x778>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	4606      	mov	r6, r0
 80098fa:	460f      	mov	r7, r1
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f6 fe72 	bl	80005e8 <__aeabi_dmul>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f6 fcb6 	bl	800027c <__adddf3>
 8009910:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009912:	4b32      	ldr	r3, [pc, #200]	@ (80099dc <__ieee754_pow+0x79c>)
 8009914:	4413      	add	r3, r2
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fcaf 	bl	800027c <__adddf3>
 800991e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009922:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009924:	f7f6 fdf6 	bl	8000514 <__aeabi_i2d>
 8009928:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800992a:	4b2d      	ldr	r3, [pc, #180]	@ (80099e0 <__ieee754_pow+0x7a0>)
 800992c:	4413      	add	r3, r2
 800992e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009932:	4606      	mov	r6, r0
 8009934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009938:	460f      	mov	r7, r1
 800993a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993e:	f7f6 fc9d 	bl	800027c <__adddf3>
 8009942:	4642      	mov	r2, r8
 8009944:	464b      	mov	r3, r9
 8009946:	f7f6 fc99 	bl	800027c <__adddf3>
 800994a:	4632      	mov	r2, r6
 800994c:	463b      	mov	r3, r7
 800994e:	f7f6 fc95 	bl	800027c <__adddf3>
 8009952:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009956:	4632      	mov	r2, r6
 8009958:	463b      	mov	r3, r7
 800995a:	4658      	mov	r0, fp
 800995c:	460d      	mov	r5, r1
 800995e:	f7f6 fc8b 	bl	8000278 <__aeabi_dsub>
 8009962:	4642      	mov	r2, r8
 8009964:	464b      	mov	r3, r9
 8009966:	f7f6 fc87 	bl	8000278 <__aeabi_dsub>
 800996a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800996e:	f7f6 fc83 	bl	8000278 <__aeabi_dsub>
 8009972:	465c      	mov	r4, fp
 8009974:	e036      	b.n	80099e4 <__ieee754_pow+0x7a4>
 8009976:	bf00      	nop
 8009978:	4a454eef 	.word	0x4a454eef
 800997c:	3fca7e28 	.word	0x3fca7e28
 8009980:	93c9db65 	.word	0x93c9db65
 8009984:	3fcd864a 	.word	0x3fcd864a
 8009988:	a91d4101 	.word	0xa91d4101
 800998c:	3fd17460 	.word	0x3fd17460
 8009990:	518f264d 	.word	0x518f264d
 8009994:	3fd55555 	.word	0x3fd55555
 8009998:	db6fabff 	.word	0xdb6fabff
 800999c:	3fdb6db6 	.word	0x3fdb6db6
 80099a0:	33333303 	.word	0x33333303
 80099a4:	3fe33333 	.word	0x3fe33333
 80099a8:	e0000000 	.word	0xe0000000
 80099ac:	3feec709 	.word	0x3feec709
 80099b0:	dc3a03fd 	.word	0xdc3a03fd
 80099b4:	3feec709 	.word	0x3feec709
 80099b8:	145b01f5 	.word	0x145b01f5
 80099bc:	be3e2fe0 	.word	0xbe3e2fe0
 80099c0:	7ff00000 	.word	0x7ff00000
 80099c4:	43400000 	.word	0x43400000
 80099c8:	0003988e 	.word	0x0003988e
 80099cc:	000bb679 	.word	0x000bb679
 80099d0:	08009f68 	.word	0x08009f68
 80099d4:	3ff00000 	.word	0x3ff00000
 80099d8:	40080000 	.word	0x40080000
 80099dc:	08009f48 	.word	0x08009f48
 80099e0:	08009f58 	.word	0x08009f58
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ec:	e5d6      	b.n	800959c <__ieee754_pow+0x35c>
 80099ee:	f04f 0a01 	mov.w	sl, #1
 80099f2:	e65e      	b.n	80096b2 <__ieee754_pow+0x472>
 80099f4:	a3b5      	add	r3, pc, #724	@ (adr r3, 8009ccc <__ieee754_pow+0xa8c>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 fc3d 	bl	800027c <__adddf3>
 8009a02:	4642      	mov	r2, r8
 8009a04:	e9cd 0100 	strd	r0, r1, [sp]
 8009a08:	464b      	mov	r3, r9
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	f7f6 fc33 	bl	8000278 <__aeabi_dsub>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a1a:	f7f7 f875 	bl	8000b08 <__aeabi_dcmpgt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f47f adfe 	bne.w	8009620 <__ieee754_pow+0x3e0>
 8009a24:	4ba2      	ldr	r3, [pc, #648]	@ (8009cb0 <__ieee754_pow+0xa70>)
 8009a26:	e022      	b.n	8009a6e <__ieee754_pow+0x82e>
 8009a28:	4ca2      	ldr	r4, [pc, #648]	@ (8009cb4 <__ieee754_pow+0xa74>)
 8009a2a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a2e:	42a3      	cmp	r3, r4
 8009a30:	d919      	bls.n	8009a66 <__ieee754_pow+0x826>
 8009a32:	4ba1      	ldr	r3, [pc, #644]	@ (8009cb8 <__ieee754_pow+0xa78>)
 8009a34:	440b      	add	r3, r1
 8009a36:	4303      	orrs	r3, r0
 8009a38:	d009      	beq.n	8009a4e <__ieee754_pow+0x80e>
 8009a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2300      	movs	r3, #0
 8009a42:	f7f7 f843 	bl	8000acc <__aeabi_dcmplt>
 8009a46:	3800      	subs	r0, #0
 8009a48:	bf18      	it	ne
 8009a4a:	2001      	movne	r0, #1
 8009a4c:	e512      	b.n	8009474 <__ieee754_pow+0x234>
 8009a4e:	4642      	mov	r2, r8
 8009a50:	464b      	mov	r3, r9
 8009a52:	f7f6 fc11 	bl	8000278 <__aeabi_dsub>
 8009a56:	4632      	mov	r2, r6
 8009a58:	463b      	mov	r3, r7
 8009a5a:	f7f7 f84b 	bl	8000af4 <__aeabi_dcmpge>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d1eb      	bne.n	8009a3a <__ieee754_pow+0x7fa>
 8009a62:	4b96      	ldr	r3, [pc, #600]	@ (8009cbc <__ieee754_pow+0xa7c>)
 8009a64:	e003      	b.n	8009a6e <__ieee754_pow+0x82e>
 8009a66:	4a96      	ldr	r2, [pc, #600]	@ (8009cc0 <__ieee754_pow+0xa80>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	f240 80e7 	bls.w	8009c3c <__ieee754_pow+0x9fc>
 8009a6e:	151b      	asrs	r3, r3, #20
 8009a70:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8009a74:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8009a78:	fa4a fa03 	asr.w	sl, sl, r3
 8009a7c:	44da      	add	sl, fp
 8009a7e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009a82:	4890      	ldr	r0, [pc, #576]	@ (8009cc4 <__ieee754_pow+0xa84>)
 8009a84:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009a88:	4108      	asrs	r0, r1
 8009a8a:	ea00 030a 	and.w	r3, r0, sl
 8009a8e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009a92:	f1c1 0114 	rsb	r1, r1, #20
 8009a96:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009a9a:	fa4a fa01 	asr.w	sl, sl, r1
 8009a9e:	f1bb 0f00 	cmp.w	fp, #0
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	f04f 0200 	mov.w	r2, #0
 8009aaa:	bfb8      	it	lt
 8009aac:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ab0:	f7f6 fbe2 	bl	8000278 <__aeabi_dsub>
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4689      	mov	r9, r1
 8009ab8:	4632      	mov	r2, r6
 8009aba:	463b      	mov	r3, r7
 8009abc:	4640      	mov	r0, r8
 8009abe:	4649      	mov	r1, r9
 8009ac0:	f7f6 fbdc 	bl	800027c <__adddf3>
 8009ac4:	2400      	movs	r4, #0
 8009ac6:	a36a      	add	r3, pc, #424	@ (adr r3, 8009c70 <__ieee754_pow+0xa30>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	4620      	mov	r0, r4
 8009ace:	460d      	mov	r5, r1
 8009ad0:	f7f6 fd8a 	bl	80005e8 <__aeabi_dmul>
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	e9cd 0100 	strd	r0, r1, [sp]
 8009ada:	464b      	mov	r3, r9
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fbca 	bl	8000278 <__aeabi_dsub>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	f7f6 fbc4 	bl	8000278 <__aeabi_dsub>
 8009af0:	a361      	add	r3, pc, #388	@ (adr r3, 8009c78 <__ieee754_pow+0xa38>)
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	f7f6 fd77 	bl	80005e8 <__aeabi_dmul>
 8009afa:	a361      	add	r3, pc, #388	@ (adr r3, 8009c80 <__ieee754_pow+0xa40>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	4680      	mov	r8, r0
 8009b02:	4689      	mov	r9, r1
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 fd6e 	bl	80005e8 <__aeabi_dmul>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f6 fbb2 	bl	800027c <__adddf3>
 8009b18:	4604      	mov	r4, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b24:	f7f6 fbaa 	bl	800027c <__adddf3>
 8009b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4689      	mov	r9, r1
 8009b30:	f7f6 fba2 	bl	8000278 <__aeabi_dsub>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4620      	mov	r0, r4
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 fb9c 	bl	8000278 <__aeabi_dsub>
 8009b40:	4642      	mov	r2, r8
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	464b      	mov	r3, r9
 8009b48:	4640      	mov	r0, r8
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	f7f6 fd4c 	bl	80005e8 <__aeabi_dmul>
 8009b50:	a34d      	add	r3, pc, #308	@ (adr r3, 8009c88 <__ieee754_pow+0xa48>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	4604      	mov	r4, r0
 8009b58:	460d      	mov	r5, r1
 8009b5a:	f7f6 fd45 	bl	80005e8 <__aeabi_dmul>
 8009b5e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009c90 <__ieee754_pow+0xa50>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f7f6 fb88 	bl	8000278 <__aeabi_dsub>
 8009b68:	4622      	mov	r2, r4
 8009b6a:	462b      	mov	r3, r5
 8009b6c:	f7f6 fd3c 	bl	80005e8 <__aeabi_dmul>
 8009b70:	a349      	add	r3, pc, #292	@ (adr r3, 8009c98 <__ieee754_pow+0xa58>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f7f6 fb81 	bl	800027c <__adddf3>
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	462b      	mov	r3, r5
 8009b7e:	f7f6 fd33 	bl	80005e8 <__aeabi_dmul>
 8009b82:	a347      	add	r3, pc, #284	@ (adr r3, 8009ca0 <__ieee754_pow+0xa60>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f7f6 fb76 	bl	8000278 <__aeabi_dsub>
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	462b      	mov	r3, r5
 8009b90:	f7f6 fd2a 	bl	80005e8 <__aeabi_dmul>
 8009b94:	a344      	add	r3, pc, #272	@ (adr r3, 8009ca8 <__ieee754_pow+0xa68>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f7f6 fb6f 	bl	800027c <__adddf3>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	f7f6 fd21 	bl	80005e8 <__aeabi_dmul>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	f7f6 fb63 	bl	8000278 <__aeabi_dsub>
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	f7f6 fd13 	bl	80005e8 <__aeabi_dmul>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8009bc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f7f6 fb52 	bl	8000278 <__aeabi_dsub>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bdc:	f7f6 fe2e 	bl	800083c <__aeabi_ddiv>
 8009be0:	4632      	mov	r2, r6
 8009be2:	4604      	mov	r4, r0
 8009be4:	460d      	mov	r5, r1
 8009be6:	463b      	mov	r3, r7
 8009be8:	4640      	mov	r0, r8
 8009bea:	4649      	mov	r1, r9
 8009bec:	f7f6 fcfc 	bl	80005e8 <__aeabi_dmul>
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	463b      	mov	r3, r7
 8009bf4:	f7f6 fb42 	bl	800027c <__adddf3>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fb3a 	bl	8000278 <__aeabi_dsub>
 8009c04:	4642      	mov	r2, r8
 8009c06:	464b      	mov	r3, r9
 8009c08:	f7f6 fb36 	bl	8000278 <__aeabi_dsub>
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4602      	mov	r2, r0
 8009c10:	492d      	ldr	r1, [pc, #180]	@ (8009cc8 <__ieee754_pow+0xa88>)
 8009c12:	2000      	movs	r0, #0
 8009c14:	f7f6 fb30 	bl	8000278 <__aeabi_dsub>
 8009c18:	ec41 0b10 	vmov	d0, r0, r1
 8009c1c:	ee10 3a90 	vmov	r3, s1
 8009c20:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c28:	da0b      	bge.n	8009c42 <__ieee754_pow+0xa02>
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	f000 f898 	bl	8009d60 <scalbn>
 8009c30:	ec51 0b10 	vmov	r0, r1, d0
 8009c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c38:	f7ff bb6d 	b.w	8009316 <__ieee754_pow+0xd6>
 8009c3c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009c40:	e73a      	b.n	8009ab8 <__ieee754_pow+0x878>
 8009c42:	ec51 0b10 	vmov	r0, r1, d0
 8009c46:	4619      	mov	r1, r3
 8009c48:	e7f4      	b.n	8009c34 <__ieee754_pow+0x9f4>
 8009c4a:	491f      	ldr	r1, [pc, #124]	@ (8009cc8 <__ieee754_pow+0xa88>)
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f7ff bb14 	b.w	800927a <__ieee754_pow+0x3a>
 8009c52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c56:	f7ff bb10 	b.w	800927a <__ieee754_pow+0x3a>
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	f7ff bb0c 	b.w	800927a <__ieee754_pow+0x3a>
 8009c62:	460c      	mov	r4, r1
 8009c64:	f7ff bb69 	b.w	800933a <__ieee754_pow+0xfa>
 8009c68:	2400      	movs	r4, #0
 8009c6a:	f7ff bb4b 	b.w	8009304 <__ieee754_pow+0xc4>
 8009c6e:	bf00      	nop
 8009c70:	00000000 	.word	0x00000000
 8009c74:	3fe62e43 	.word	0x3fe62e43
 8009c78:	fefa39ef 	.word	0xfefa39ef
 8009c7c:	3fe62e42 	.word	0x3fe62e42
 8009c80:	0ca86c39 	.word	0x0ca86c39
 8009c84:	be205c61 	.word	0xbe205c61
 8009c88:	72bea4d0 	.word	0x72bea4d0
 8009c8c:	3e663769 	.word	0x3e663769
 8009c90:	c5d26bf1 	.word	0xc5d26bf1
 8009c94:	3ebbbd41 	.word	0x3ebbbd41
 8009c98:	af25de2c 	.word	0xaf25de2c
 8009c9c:	3f11566a 	.word	0x3f11566a
 8009ca0:	16bebd93 	.word	0x16bebd93
 8009ca4:	3f66c16c 	.word	0x3f66c16c
 8009ca8:	5555553e 	.word	0x5555553e
 8009cac:	3fc55555 	.word	0x3fc55555
 8009cb0:	40900000 	.word	0x40900000
 8009cb4:	4090cbff 	.word	0x4090cbff
 8009cb8:	3f6f3400 	.word	0x3f6f3400
 8009cbc:	4090cc00 	.word	0x4090cc00
 8009cc0:	3fe00000 	.word	0x3fe00000
 8009cc4:	fff00000 	.word	0xfff00000
 8009cc8:	3ff00000 	.word	0x3ff00000
 8009ccc:	652b82fe 	.word	0x652b82fe
 8009cd0:	3c971547 	.word	0x3c971547

08009cd4 <with_errno>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	ed2d 8b02 	vpush	{d8}
 8009cda:	eeb0 8a40 	vmov.f32	s16, s0
 8009cde:	eef0 8a60 	vmov.f32	s17, s1
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	f7fe fade 	bl	80082a4 <__errno>
 8009ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8009cec:	eef0 0a68 	vmov.f32	s1, s17
 8009cf0:	ecbd 8b02 	vpop	{d8}
 8009cf4:	6004      	str	r4, [r0, #0]
 8009cf6:	bd10      	pop	{r4, pc}

08009cf8 <xflow>:
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	b507      	push	{r0, r1, r2, lr}
 8009cfc:	ec51 0b10 	vmov	r0, r1, d0
 8009d00:	b183      	cbz	r3, 8009d24 <xflow+0x2c>
 8009d02:	4602      	mov	r2, r0
 8009d04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d08:	e9cd 2300 	strd	r2, r3, [sp]
 8009d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d10:	f7f6 fc6a 	bl	80005e8 <__aeabi_dmul>
 8009d14:	ec41 0b10 	vmov	d0, r0, r1
 8009d18:	2022      	movs	r0, #34	@ 0x22
 8009d1a:	b003      	add	sp, #12
 8009d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d20:	f7ff bfd8 	b.w	8009cd4 <with_errno>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	e7ee      	b.n	8009d08 <xflow+0x10>
 8009d2a:	0000      	movs	r0, r0
 8009d2c:	0000      	movs	r0, r0
	...

08009d30 <__math_uflow>:
 8009d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009d38 <__math_uflow+0x8>
 8009d34:	f7ff bfe0 	b.w	8009cf8 <xflow>
 8009d38:	00000000 	.word	0x00000000
 8009d3c:	10000000 	.word	0x10000000

08009d40 <__math_oflow>:
 8009d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009d48 <__math_oflow+0x8>
 8009d44:	f7ff bfd8 	b.w	8009cf8 <xflow>
 8009d48:	00000000 	.word	0x00000000
 8009d4c:	70000000 	.word	0x70000000

08009d50 <fabs>:
 8009d50:	ec51 0b10 	vmov	r0, r1, d0
 8009d54:	4602      	mov	r2, r0
 8009d56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d5a:	ec43 2b10 	vmov	d0, r2, r3
 8009d5e:	4770      	bx	lr

08009d60 <scalbn>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	ec55 4b10 	vmov	r4, r5, d0
 8009d66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	b991      	cbnz	r1, 8009d96 <scalbn+0x36>
 8009d70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009d74:	4323      	orrs	r3, r4
 8009d76:	d03b      	beq.n	8009df0 <scalbn+0x90>
 8009d78:	4b33      	ldr	r3, [pc, #204]	@ (8009e48 <scalbn+0xe8>)
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f7f6 fc32 	bl	80005e8 <__aeabi_dmul>
 8009d84:	4b31      	ldr	r3, [pc, #196]	@ (8009e4c <scalbn+0xec>)
 8009d86:	429e      	cmp	r6, r3
 8009d88:	4604      	mov	r4, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	da0f      	bge.n	8009dae <scalbn+0x4e>
 8009d8e:	a326      	add	r3, pc, #152	@ (adr r3, 8009e28 <scalbn+0xc8>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	e01e      	b.n	8009dd4 <scalbn+0x74>
 8009d96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009d9a:	4291      	cmp	r1, r2
 8009d9c:	d10b      	bne.n	8009db6 <scalbn+0x56>
 8009d9e:	4622      	mov	r2, r4
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7f6 fa6a 	bl	800027c <__adddf3>
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	e020      	b.n	8009df0 <scalbn+0x90>
 8009dae:	460b      	mov	r3, r1
 8009db0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009db4:	3936      	subs	r1, #54	@ 0x36
 8009db6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009dba:	4296      	cmp	r6, r2
 8009dbc:	dd0d      	ble.n	8009dda <scalbn+0x7a>
 8009dbe:	2d00      	cmp	r5, #0
 8009dc0:	a11b      	add	r1, pc, #108	@ (adr r1, 8009e30 <scalbn+0xd0>)
 8009dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc6:	da02      	bge.n	8009dce <scalbn+0x6e>
 8009dc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8009e38 <scalbn+0xd8>)
 8009dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dce:	a318      	add	r3, pc, #96	@ (adr r3, 8009e30 <scalbn+0xd0>)
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f7f6 fc08 	bl	80005e8 <__aeabi_dmul>
 8009dd8:	e7e6      	b.n	8009da8 <scalbn+0x48>
 8009dda:	1872      	adds	r2, r6, r1
 8009ddc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009de0:	428a      	cmp	r2, r1
 8009de2:	dcec      	bgt.n	8009dbe <scalbn+0x5e>
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	dd06      	ble.n	8009df6 <scalbn+0x96>
 8009de8:	f36f 531e 	bfc	r3, #20, #11
 8009dec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009df0:	ec45 4b10 	vmov	d0, r4, r5
 8009df4:	bd70      	pop	{r4, r5, r6, pc}
 8009df6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009dfa:	da08      	bge.n	8009e0e <scalbn+0xae>
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	a10a      	add	r1, pc, #40	@ (adr r1, 8009e28 <scalbn+0xc8>)
 8009e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e04:	dac3      	bge.n	8009d8e <scalbn+0x2e>
 8009e06:	a10e      	add	r1, pc, #56	@ (adr r1, 8009e40 <scalbn+0xe0>)
 8009e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0c:	e7bf      	b.n	8009d8e <scalbn+0x2e>
 8009e0e:	3236      	adds	r2, #54	@ 0x36
 8009e10:	f36f 531e 	bfc	r3, #20, #11
 8009e14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009e18:	4620      	mov	r0, r4
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e50 <scalbn+0xf0>)
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	2200      	movs	r2, #0
 8009e20:	e7d8      	b.n	8009dd4 <scalbn+0x74>
 8009e22:	bf00      	nop
 8009e24:	f3af 8000 	nop.w
 8009e28:	c2f8f359 	.word	0xc2f8f359
 8009e2c:	01a56e1f 	.word	0x01a56e1f
 8009e30:	8800759c 	.word	0x8800759c
 8009e34:	7e37e43c 	.word	0x7e37e43c
 8009e38:	8800759c 	.word	0x8800759c
 8009e3c:	fe37e43c 	.word	0xfe37e43c
 8009e40:	c2f8f359 	.word	0xc2f8f359
 8009e44:	81a56e1f 	.word	0x81a56e1f
 8009e48:	43500000 	.word	0x43500000
 8009e4c:	ffff3cb0 	.word	0xffff3cb0
 8009e50:	3c900000 	.word	0x3c900000

08009e54 <_init>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr

08009e60 <_fini>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr
