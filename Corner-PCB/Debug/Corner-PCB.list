
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08005d30  08005d30  00006d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f78  08005f78  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f78  08005f78  00006f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f80  08005f80  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f80  08005f80  00006f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f84  08005f84  00006f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005f88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000000c  08005f94  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005f94  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b091  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cb  00000000  00000000  000220cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00025498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d8  00000000  00000000  00026ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002441d  00000000  00000000  00027f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d105  00000000  00000000  0004c395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e4a  00000000  00000000  0006949a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b2e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a4  00000000  00000000  0014b328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00151acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005d18 	.word	0x08005d18

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005d18 	.word	0x08005d18

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <CANTransmitMinion>:
#include "can.h"
#include "dataframes.h"



HAL_StatusTypeDef CANTransmitMinion (CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef TXStatusOut = HAL_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	77fb      	strb	r3, [r7, #31]
	//	printf("sending ID ");
	//	printf((uint32_t)(header->StdId));
	int i = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
	uint32_t mailbox = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000510:	e012      	b.n	8000538 <CANTransmitMinion+0x40>
		while(HAL_CAN_GetTxMailboxesFreeLevel(canport) < 1) {
 8000512:	bf00      	nop
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	f002 fd1e 	bl	8002f56 <HAL_CAN_GetTxMailboxesFreeLevel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f9      	beq.n	8000514 <CANTransmitMinion+0x1c>
					//wait until a new mailbox gets freed up
		//			printf("\n\rwaiting\n\r");
				}
		TXStatusOut = HAL_CAN_AddTxMessage(canport, header, dataArray, &mailbox);
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	68b9      	ldr	r1, [r7, #8]
 8000528:	68f8      	ldr	r0, [r7, #12]
 800052a:	f002 fc44 	bl	8002db6 <HAL_CAN_AddTxMessage>
 800052e:	4603      	mov	r3, r0
 8000530:	77fb      	strb	r3, [r7, #31]

		i++;
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	3301      	adds	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	2b02      	cmp	r3, #2
 800053c:	dc02      	bgt.n	8000544 <CANTransmitMinion+0x4c>
 800053e:	7ffb      	ldrb	r3, [r7, #31]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1e6      	bne.n	8000512 <CANTransmitMinion+0x1a>
//	if (TXStatusOut != HAL_OK) {
//		mailbox = 0;
//
//	}
	//	printf("\n\r");
	return TXStatusOut;
 8000544:	7ffb      	ldrb	r3, [r7, #31]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <clearEflagsHelper>:

void clearEflagsHelper(CORNER_CAN_CONTEXT *CANCONTEXT) {
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	CANCONTEXT->misc_dataframe.data.eflags.ADCErrorBit = 0;
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800055c:	f023 0301 	bic.w	r3, r3, #1
 8000560:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.BrakeTempErrorBit = 0;
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800056a:	f023 0302 	bic.w	r3, r3, #2
 800056e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = 0;
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000578:	f023 0308 	bic.w	r3, r3, #8
 800057c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = 0;
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000586:	f023 0304 	bic.w	r3, r3, #4
 800058a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = 0;
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000594:	f023 0310 	bic.w	r3, r3, #16
 8000598:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = 0;
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80005a2:	f023 0320 	bic.w	r3, r3, #32
 80005a6:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = 0;
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80005b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005b4:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = 0;
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80005be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005c2:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b

}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <CANMailman>:

void CANMailman(CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, CORNER_CAN_CONTEXT *CANCONTEXT) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
	clearEflagsHelper(CANCONTEXT);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffb5 	bl	800054e <clearEflagsHelper>
	HAL_StatusTypeDef txstatus;
	/*** BEGIN SEND MISC MESSAGE (btemp, whs, board temp, error flags, shock travel) */

	if (HAL_GetTick() - CANCONTEXT->ms_since_miscmsg_broadcast > MISC_DATA_TRANSMISSION_PERIOD) {
 80005e4:	f001 f906 	bl	80017f4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	2b15      	cmp	r3, #21
 80005f2:	d923      	bls.n	800063c <CANMailman+0x6a>
		header->StdId = MISC_DATA_ID;
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	f240 7215 	movw	r2, #1813	@ 0x715
 80005fa:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion(canport, header, CANCONTEXT->misc_dataframe.array);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3334      	adds	r3, #52	@ 0x34
 8000600:	461a      	mov	r2, r3
 8000602:	68b9      	ldr	r1, [r7, #8]
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	f7ff ff77 	bl	80004f8 <CANTransmitMinion>
 800060a:	4603      	mov	r3, r0
 800060c:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 800060e:	7dfb      	ldrb	r3, [r7, #23]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d007      	beq.n	8000624 <CANMailman+0x52>
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = true;
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8000622:	e006      	b.n	8000632 <CANMailman+0x60>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = false;
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800062a:	f023 0304 	bic.w	r3, r3, #4
 800062e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_miscmsg_broadcast = HAL_GetTick();
 8000632:	f001 f8df 	bl	80017f4 <HAL_GetTick>
 8000636:	4602      	mov	r2, r0
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	631a      	str	r2, [r3, #48]	@ 0x30




	/**** BEGIN SEND STRAIN GAUGE DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_strain_broadcast > STRAIN_GAUGE_TRANSMISSION_PERIOD) {
 800063c:	f001 f8da 	bl	80017f4 <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	2b03      	cmp	r3, #3
 800064a:	d923      	bls.n	8000694 <CANMailman+0xc2>
		header->StdId = STRAIN_GAUGE_ID;
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8000652:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->straingauge_dataframe.array);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3304      	adds	r3, #4
 8000658:	461a      	mov	r2, r3
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ff4b 	bl	80004f8 <CANTransmitMinion>
 8000662:	4603      	mov	r3, r0
 8000664:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8000666:	7dfb      	ldrb	r3, [r7, #23]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d007      	beq.n	800067c <CANMailman+0xaa>
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = true;
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 800067a:	e006      	b.n	800068a <CANMailman+0xb8>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = false;
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000682:	f023 0308 	bic.w	r3, r3, #8
 8000686:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_strain_broadcast = HAL_GetTick();
 800068a:	f001 f8b3 	bl	80017f4 <HAL_GetTick>
 800068e:	4602      	mov	r2, r0
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
	/**** END SEND STRAIN GAUGE DATA ****/



	/**** BEGIN SEND TIRE TEMP DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_ttemp_broadcast > TIRE_TEMP_TRANSMISSION_PERIOD) {
 8000694:	f001 f8ae 	bl	80017f4 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80006a4:	f0c0 8081 	bcc.w	80007aa <CANMailman+0x1d8>
		//		CTXHeader.IDE = CAN_ID_STD;
		//		CTXHeader.RTR = CAN_RTR_DATA;
		//		CTXHeader.DLC = 8;
		//		ms_since_ttemp_broadcast = HAL_GetTick();

		header->StdId = TIRE_TEMP_MSG1_ID;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	f240 7211 	movw	r2, #1809	@ 0x711
 80006ae:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[0].array);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3310      	adds	r3, #16
 80006b4:	461a      	mov	r2, r3
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff1d 	bl	80004f8 <CANTransmitMinion>
 80006be:	4603      	mov	r3, r0
 80006c0:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d007      	beq.n	80006d8 <CANMailman+0x106>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = true;
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 80006d6:	e006      	b.n	80006e6 <CANMailman+0x114>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = false;
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80006de:	f023 0310 	bic.w	r3, r3, #16
 80006e2:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG2_ID;
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	f240 7212 	movw	r2, #1810	@ 0x712
 80006ec:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[1].array);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3318      	adds	r3, #24
 80006f2:	461a      	mov	r2, r3
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff fefe 	bl	80004f8 <CANTransmitMinion>
 80006fc:	4603      	mov	r3, r0
 80006fe:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d007      	beq.n	8000716 <CANMailman+0x144>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = true;
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800070c:	f043 0320 	orr.w	r3, r3, #32
 8000710:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8000714:	e006      	b.n	8000724 <CANMailman+0x152>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = false;
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800071c:	f023 0320 	bic.w	r3, r3, #32
 8000720:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG3_ID;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	f240 7213 	movw	r2, #1811	@ 0x713
 800072a:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[2].array);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3320      	adds	r3, #32
 8000730:	461a      	mov	r2, r3
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f7ff fedf 	bl	80004f8 <CANTransmitMinion>
 800073a:	4603      	mov	r3, r0
 800073c:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d007      	beq.n	8000754 <CANMailman+0x182>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = true;
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800074a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8000752:	e006      	b.n	8000762 <CANMailman+0x190>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = false;
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800075a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800075e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG4_ID;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	f240 7214 	movw	r2, #1812	@ 0x714
 8000768:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[3].array);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3328      	adds	r3, #40	@ 0x28
 800076e:	461a      	mov	r2, r3
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f7ff fec0 	bl	80004f8 <CANTransmitMinion>
 8000778:	4603      	mov	r3, r0
 800077a:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d007      	beq.n	8000792 <CANMailman+0x1c0>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = true;
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8000790:	e006      	b.n	80007a0 <CANMailman+0x1ce>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = false;
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800079c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_ttemp_broadcast = HAL_GetTick();
 80007a0:	f001 f828 	bl	80017f4 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	60da      	str	r2, [r3, #12]
	}

	/**** END SEND TIRE TEMP DATA ****/
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <sendBrakeTempData>:
#include "ct1000n.h"

// MASTER QUERY: DEVICE ID, FUNCTION CODE, REGISTER ADDR (2 BYTES), # OF POINTS TO READ (2 BYTES), CRC (2 BYTES)
// CONFIRM WE GET THE CORRECT ADDRESS

HAL_StatusTypeDef sendBrakeTempData(uint8_t* data, UART_HandleTypeDef *uartPort) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(MAX485_EN_PORT, MAX485_EN_PIN, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2108      	movs	r1, #8
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <sendBrakeTempData+0x44>)
 80007c4:	f002 fef4 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef out = HAL_UART_Transmit(uartPort, data, 8, HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2208      	movs	r2, #8
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	6838      	ldr	r0, [r7, #0]
 80007d2:	f004 fd3d 	bl	8005250 <HAL_UART_Transmit>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(MAX485_EN_PORT, MAX485_EN_PIN, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <sendBrakeTempData+0x44>)
 80007e0:	f002 fee6 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e8:	f001 f810 	bl	800180c <HAL_Delay>

	return out;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	48000400 	.word	0x48000400

080007fc <computeCRC16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t computeCRC16(uint8_t *buf, uint16_t buffer_length)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000808:	23ff      	movs	r3, #255	@ 0xff
 800080a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800080c:	23ff      	movs	r3, #255	@ 0xff
 800080e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000810:	e013      	b.n	800083a <computeCRC16+0x3e>
        i = crc_lo ^ *buf++; /* calculate the CRC  */
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	4053      	eors	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <computeCRC16+0x68>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	4053      	eors	r3, r2
 800082e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <computeCRC16+0x6c>)
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	807a      	strh	r2, [r7, #2]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1e6      	bne.n	8000812 <computeCRC16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	b21b      	sxth	r3, r3
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21b      	sxth	r3, r3
 8000854:	b29b      	uxth	r3, r3
}
 8000856:	4618      	mov	r0, r3
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08005d30 	.word	0x08005d30
 8000868:	08005e30 	.word	0x08005e30

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 ff57 	bl	8001722 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f852 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f000 fa9e 	bl	8000db8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800087c:	f000 f8a0 	bl	80009c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000880:	f000 f9e0 	bl	8000c44 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000884:	f000 f900 	bl	8000a88 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000888:	f000 f95e 	bl	8000b48 <MX_I2C1_Init>
  MX_SPI1_Init();
 800088c:	f000 f99c 	bl	8000bc8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000890:	f000 fa2c 	bl	8000cec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000894:	f000 fa5c 	bl	8000d50 <MX_USART2_UART_Init>
		//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

		//		spamCan();

		//read the sensors
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8000898:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <main+0x74>)
 800089a:	4912      	ldr	r1, [pc, #72]	@ (80008e4 <main+0x78>)
 800089c:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <main+0x7c>)
 800089e:	f000 faf5 	bl	8000e8c <readLinearPotentiometer>
		readBrakeTemp(&ms_since_btemp_read, &(CANCONTEXT.misc_dataframe), &huart1);
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <main+0x80>)
 80008a4:	490e      	ldr	r1, [pc, #56]	@ (80008e0 <main+0x74>)
 80008a6:	4812      	ldr	r0, [pc, #72]	@ (80008f0 <main+0x84>)
 80008a8:	f000 fb14 	bl	8000ed4 <readBrakeTemp>
		readTireTemp(&ms_since_ttemp_read, (CANCONTEXT.ttemp_dataframes));
 80008ac:	4911      	ldr	r1, [pc, #68]	@ (80008f4 <main+0x88>)
 80008ae:	4812      	ldr	r0, [pc, #72]	@ (80008f8 <main+0x8c>)
 80008b0:	f000 fb4e 	bl	8000f50 <readTireTemp>
		readStrainGauges(&hspi1, &ms_since_strain_read, &(CANCONTEXT.straingauge_dataframe));
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <main+0x90>)
 80008b6:	4912      	ldr	r1, [pc, #72]	@ (8000900 <main+0x94>)
 80008b8:	4812      	ldr	r0, [pc, #72]	@ (8000904 <main+0x98>)
 80008ba:	f000 fbbf 	bl	800103c <readStrainGauges>
		readWheelSpeed(&ms_since_whs_read, &(CANCONTEXT.misc_dataframe));
 80008be:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <main+0x74>)
 80008c0:	4811      	ldr	r0, [pc, #68]	@ (8000908 <main+0x9c>)
 80008c2:	f000 fbdf 	bl	8001084 <readWheelSpeed>
		readBoardTemp(&hspi1, &ms_since_boardtemp_read, &(CANCONTEXT.misc_dataframe));
 80008c6:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <main+0x74>)
 80008c8:	4910      	ldr	r1, [pc, #64]	@ (800090c <main+0xa0>)
 80008ca:	480e      	ldr	r0, [pc, #56]	@ (8000904 <main+0x98>)
 80008cc:	f000 fc3c 	bl	8001148 <readBoardTemp>


		//send out the sensors
		CANMailman(&hcan1, &CTXHeader, &CANCONTEXT);
 80008d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000910 <main+0xa4>)
 80008d2:	4910      	ldr	r1, [pc, #64]	@ (8000914 <main+0xa8>)
 80008d4:	4810      	ldr	r0, [pc, #64]	@ (8000918 <main+0xac>)
 80008d6:	f7ff fe7c 	bl	80005d2 <CANMailman>
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 80008da:	bf00      	nop
 80008dc:	e7dc      	b.n	8000898 <main+0x2c>
 80008de:	bf00      	nop
 80008e0:	200002fc 	.word	0x200002fc
 80008e4:	20000304 	.word	0x20000304
 80008e8:	20000028 	.word	0x20000028
 80008ec:	200001b8 	.word	0x200001b8
 80008f0:	20000310 	.word	0x20000310
 80008f4:	200002d8 	.word	0x200002d8
 80008f8:	2000030c 	.word	0x2000030c
 80008fc:	200002cc 	.word	0x200002cc
 8000900:	20000308 	.word	0x20000308
 8000904:	20000108 	.word	0x20000108
 8000908:	20000314 	.word	0x20000314
 800090c:	20000318 	.word	0x20000318
 8000910:	200002c8 	.word	0x200002c8
 8000914:	2000031c 	.word	0x2000031c
 8000918:	2000008c 	.word	0x2000008c

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	@ 0x58
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2244      	movs	r2, #68	@ 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f005 f9c8 	bl	8005cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000942:	f002 ff8d 	bl	8003860 <HAL_PWREx_ControlVoltageScaling>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800094c:	f000 fa98 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000962:	2302      	movs	r3, #2
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800096a:	230a      	movs	r3, #10
 800096c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800096e:	2307      	movs	r3, #7
 8000970:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000972:	2302      	movs	r3, #2
 8000974:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f002 ffc4 	bl	800390c <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800098a:	f000 fa79 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2104      	movs	r1, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fbc4 	bl	8004134 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009b2:	f000 fa65 	bl	8000e80 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3758      	adds	r7, #88	@ 0x58
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d6:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 80009d8:	4a29      	ldr	r2, [pc, #164]	@ (8000a80 <MX_ADC1_Init+0xc0>)
 80009da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009dc:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e2:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e8:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ee:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009fa:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a36:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a38:	f001 f8d4 	bl	8001be4 <HAL_ADC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000a42:	f000 fa1d 	bl	8000e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_ADC1_Init+0xc4>)
 8000a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a52:	237f      	movs	r3, #127	@ 0x7f
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a56:	2304      	movs	r3, #4
 8000a58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_ADC1_Init+0xbc>)
 8000a64:	f001 faa2 	bl	8001fac <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a6e:	f000 fa07 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000028 	.word	0x20000028
 8000a80:	50040000 	.word	0x50040000
 8000a84:	19200040 	.word	0x19200040

08000a88 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000a90:	4a2b      	ldr	r2, [pc, #172]	@ (8000b40 <MX_CAN1_Init+0xb8>)
 8000a92:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000a94:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000a96:	220a      	movs	r2, #10
 8000a98:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a9a:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aa0:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000aa6:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000aa8:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000aac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000aae:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000ab0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ab4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ada:	4818      	ldr	r0, [pc, #96]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000adc:	f001 ff62 	bl	80029a4 <HAL_CAN_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000ae6:	f000 f9cb 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* INITIALIZE CAN PARAMETERS */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 1;                       // value between 0 to 13 for JUST Master Mode (CAN1)
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;   // for filtering Identifiers
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 8000af2:	2301      	movs	r3, #1
 8000af4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = (0x541) << 5;          // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000af6:	f64a 0320 	movw	r3, #43040	@ 0xa820
 8000afa:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x00;                   // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x00;              // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x00;               // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;  // specify FIFO0 or FIFO1
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = CAN_FILTER_DISABLE; // Enable filtering
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]

	CTXHeader.IDE = CAN_ID_STD;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_CAN1_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
	CTXHeader.RTR = CAN_RTR_DATA;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_CAN1_Init+0xbc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
	CTXHeader.DLC = 8;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_CAN1_Init+0xbc>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000b28:	f002 f837 	bl	8002b9a <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <MX_CAN1_Init+0xb4>)
 8000b2e:	f002 f8fe 	bl	8002d2e <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	40006400 	.word	0x40006400
 8000b44:	2000031c 	.word	0x2000031c

08000b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc0 <MX_I2C1_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b54:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc4 <MX_I2C1_Init+0x7c>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b84:	f002 fd2c 	bl	80035e0 <HAL_I2C_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8e:	f000 f977 	bl	8000e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b96:	f002 fdbe 	bl	8003716 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f000 f96e 	bl	8000e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000ba8:	f002 fe00 	bl	80037ac <HAL_I2CEx_ConfigDigitalFilter>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f000 f965 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000b4 	.word	0x200000b4
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	10d19ce4 	.word	0x10d19ce4

08000bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bce:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <MX_SPI1_Init+0x78>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000be2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bf6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000bfe:	2228      	movs	r2, #40	@ 0x28
 8000c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_SPI1_Init+0x74>)
 8000c28:	f003 ff90 	bl	8004b4c <HAL_SPI_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f925 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000108 	.word	0x20000108
 8000c40:	40013000 	.word	0x40013000

08000c44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c62:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c64:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <MX_TIM1_Init+0xa4>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c8e:	4815      	ldr	r0, [pc, #84]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000c90:	f003 ffff 	bl	8004c92 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c9a:	f000 f8f1 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000cac:	f004 f848 	bl	8004d40 <HAL_TIM_ConfigClockSource>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cb6:	f000 f8e3 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <MX_TIM1_Init+0xa0>)
 8000ccc:	f004 fa0c 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cd6:	f000 f8d3 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000016c 	.word	0x2000016c
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000cf2:	4a16      	ldr	r2, [pc, #88]	@ (8000d4c <MX_USART1_UART_Init+0x60>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000cf8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <MX_USART1_UART_Init+0x5c>)
 8000d36:	f004 ff5c 	bl	8005bf2 <HAL_RS485Ex_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d40:	f000 f89e 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001b8 	.word	0x200001b8
 8000d4c:	40013800 	.word	0x40013800

08000d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_UART_MspInit(&huart2);
 8000d54:	4816      	ldr	r0, [pc, #88]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d56:	f000 fba9 	bl	80014ac <HAL_UART_MspInit>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d5c:	4a15      	ldr	r2, [pc, #84]	@ (8000db4 <MX_USART2_UART_Init+0x64>)
 8000d5e:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d62:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d66:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_USART2_UART_Init+0x60>)
 8000d9c:	f004 fa0a 	bl	80051b4 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000da6:	f000 f86b 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000240 	.word	0x20000240
 8000db4:	40004400 	.word	0x40004400

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a29      	ldr	r2, [pc, #164]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_GPIO_Init+0xc0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_FAULT_GPIO_Port, GEN_FAULT_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4818      	ldr	r0, [pc, #96]	@ (8000e7c <MX_GPIO_Init+0xc4>)
 8000e1c:	f002 fbc8 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e20:	2308      	movs	r3, #8
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e36:	f002 fa39 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_FAULT_Pin */
  GPIO_InitStruct.Pin = GEN_FAULT_Pin;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEN_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480a      	ldr	r0, [pc, #40]	@ (8000e7c <MX_GPIO_Init+0xc4>)
 8000e52:	f002 fa2b 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 8000e56:	2310      	movs	r3, #16
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_GPIO_Init+0xc4>)
 8000e6a:	f002 fa1f 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	48000400 	.word	0x48000400

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <Error_Handler+0x8>

08000e8c <readLinearPotentiometer>:
 *      Author: antho
 */

#include "sensor_read_helpers.h"

void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS,  MISC_DATAFRAME *dataframe) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	uint32_t ADC_Read[1];
	uint32_t ADC_BUFFER = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
	//		HAL_ADC_PollForConversion(&hadc1, 100);
	//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

	HAL_ADC_Start_DMA(hadc, ADC_Read, ADC_BUFFER);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 ffdf 	bl	8001e68 <HAL_ADC_Start_DMA>
	if(HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD){
 8000eaa:	f000 fca3 	bl	80017f4 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b15      	cmp	r3, #21
 8000eb8:	d908      	bls.n	8000ecc <readLinearPotentiometer+0x40>
		dataframe->data.shockTravel = ADC_Read[0];
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	809a      	strh	r2, [r3, #4]

		*lastReadMS = HAL_GetTick();
 8000ec2:	f000 fc97 	bl	80017f4 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
	}

	//todo: convert counts to travel
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <readBrakeTemp>:

void readBrakeTemp(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe, UART_HandleTypeDef *uartPort) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	uint8_t txData[8];


	if(HAL_GetTick() - *lastReadMS > BRAKE_TEMP_SAMPLE_PERIOD){
 8000ee0:	f000 fc88 	bl	80017f4 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b65      	cmp	r3, #101	@ 0x65
 8000eee:	d92b      	bls.n	8000f48 <readBrakeTemp+0x74>
		//send data
//		for (int i = 1; i < 200; i++) {
			txData[0] = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	753b      	strb	r3, [r7, #20]
			txData[1] = 0x03;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	757b      	strb	r3, [r7, #21]
			txData[2] = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	75bb      	strb	r3, [r7, #22]
			txData[3] = 0x02;
 8000efc:	2302      	movs	r3, #2
 8000efe:	75fb      	strb	r3, [r7, #23]
			txData[4] = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	763b      	strb	r3, [r7, #24]
			txData[5] = 0x01;
 8000f04:	2301      	movs	r3, #1
 8000f06:	767b      	strb	r3, [r7, #25]
			uint16_t crc = computeCRC16(txData, 6);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2106      	movs	r1, #6
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fc74 	bl	80007fc <computeCRC16>
 8000f14:	4603      	mov	r3, r0
 8000f16:	83fb      	strh	r3, [r7, #30]
			txData[6] = crc & 0xFF;
 8000f18:	8bfb      	ldrh	r3, [r7, #30]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	76bb      	strb	r3, [r7, #26]
			txData[7] = (crc >> 8) & 0xFF;
 8000f1e:	8bfb      	ldrh	r3, [r7, #30]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	76fb      	strb	r3, [r7, #27]



			dataframe->data.brakeTemp = sendBrakeTempData(txData, uartPort)+30;
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fc40 	bl	80007b4 <sendBrakeTempData>
 8000f34:	4603      	mov	r3, r0
 8000f36:	331e      	adds	r3, #30
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	805a      	strh	r2, [r3, #2]
			//todo: actual brake temp sensor read code
			*lastReadMS = HAL_GetTick();
 8000f3e:	f000 fc59 	bl	80017f4 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	601a      	str	r2, [r3, #0]
//		}
	}

	//todo: convert to deg C
}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <readTireTemp>:

void readTireTemp(uint32_t *lastReadMS, TTEMP_DATAFRAME *dataframes) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > TIRE_TEMP_SAMPLE_PERIOD){
 8000f5a:	f000 fc4b 	bl	80017f4 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8000f6a:	d363      	bcc.n	8001034 <readTireTemp+0xe4>
		for(int i = 0; i < 4; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	e058      	b.n	8001024 <readTireTemp+0xd4>
			dataframes[i].data.pix0 = 1 + (4*i);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	440b      	add	r3, r1
 8000f82:	3201      	adds	r2, #1
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix1 = 2 + (4*i);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	6839      	ldr	r1, [r7, #0]
 8000f96:	440b      	add	r3, r1
 8000f98:	3202      	adds	r2, #2
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	705a      	strb	r2, [r3, #1]
			dataframes[i].data.pix2 = 3 + (4*i);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	440b      	add	r3, r1
 8000fae:	3203      	adds	r2, #3
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	709a      	strb	r2, [r3, #2]
			dataframes[i].data.pix3 = 4 + (4*i);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	70da      	strb	r2, [r3, #3]
			dataframes[i].data.pix4 = 5 + (4*i);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	6839      	ldr	r1, [r7, #0]
 8000fd6:	440b      	add	r3, r1
 8000fd8:	3205      	adds	r2, #5
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	711a      	strb	r2, [r3, #4]
			dataframes[i].data.pix5 = 6 + (4*i);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	6839      	ldr	r1, [r7, #0]
 8000fec:	440b      	add	r3, r1
 8000fee:	3206      	adds	r2, #6
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	715a      	strb	r2, [r3, #5]
			dataframes[i].data.pix6 = 7 + (4*i);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	440b      	add	r3, r1
 8001004:	3207      	adds	r2, #7
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	719a      	strb	r2, [r3, #6]
			dataframes[i].data.pix7 = 8 + (4*i);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3302      	adds	r3, #2
 800100e:	b2da      	uxtb	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	440b      	add	r3, r1
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	71da      	strb	r2, [r3, #7]
		for(int i = 0; i < 4; i++) {
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b03      	cmp	r3, #3
 8001028:	dda3      	ble.n	8000f72 <readTireTemp+0x22>
		}


		//todo: actual tire temp sensor read code
		*lastReadMS = HAL_GetTick();
 800102a:	f000 fbe3 	bl	80017f4 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
	}
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <readStrainGauges>:
void readStrainGauges(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, SG_DATAFRAME *dataframe) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8001048:	f000 fbd4 	bl	80017f4 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b03      	cmp	r3, #3
 8001056:	d910      	bls.n	800107a <readStrainGauges+0x3e>
		dataframe->data.SG0 = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
		dataframe->data.SG1 = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	805a      	strh	r2, [r3, #2]
		dataframe->data.SG2 = 0;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	809a      	strh	r2, [r3, #4]
		dataframe->data.SG3 = 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	80da      	strh	r2, [r3, #6]

		//todo: actual strain gauge sensor read code
		//todo: convert counts to newtons
		*lastReadMS = HAL_GetTick();
 8001070:	f000 fbc0 	bl	80017f4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	601a      	str	r2, [r3, #0]
	}
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <readWheelSpeed>:

void readWheelSpeed(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > WHEEL_SPEED_SAMPLE_PERIOD){
 800108e:	f000 fbb1 	bl	80017f4 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b0b      	cmp	r3, #11
 800109c:	d94b      	bls.n	8001136 <readWheelSpeed+0xb2>

		uint8_t prevWHSLogicLevel = GPIO_PIN_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]
		uint8_t edges = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75bb      	strb	r3, [r7, #22]
		uint8_t readBeginMS = HAL_GetTick(); //possilbly a good idea to lower tick period to like 10us or sth
 80010a6:	f000 fba5 	bl	80017f4 <HAL_GetTick>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	e015      	b.n	80010e0 <readWheelSpeed+0x5c>

			/* if whs pin is logic high and prev_whs_logic_level is opposite, add one to edges */

			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != prevWHSLogicLevel) {
 80010b4:	2110      	movs	r1, #16
 80010b6:	4822      	ldr	r0, [pc, #136]	@ (8001140 <readWheelSpeed+0xbc>)
 80010b8:	f002 fa62 	bl	8003580 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d009      	beq.n	80010da <readWheelSpeed+0x56>
				edges++;
 80010c6:	7dbb      	ldrb	r3, [r7, #22]
 80010c8:	3301      	adds	r3, #1
 80010ca:	75bb      	strb	r3, [r7, #22]
				prevWHSLogicLevel = !prevWHSLogicLevel;
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3301      	adds	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010e6:	dbe5      	blt.n	80010b4 <readWheelSpeed+0x30>
			}
		}

		uint8_t readEndMS = HAL_GetTick();
 80010e8:	f000 fb84 	bl	80017f4 <HAL_GetTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73bb      	strb	r3, [r7, #14]
		//convert to rpm
		/*
		 * edges/msec * 1/(edges/rotation) * msec/sec = rotations/msec
		 * 1/(edges/rotation) * msec/sec = 1/24 * 1/1000 =
		 */
		dataframe->data.wheelRPM = ( ((float)(edges)) / ((float)(readEndMS)-(float)(readBeginMS)) ) * (float)(1/24000);
 80010f0:	7dbb      	ldrb	r3, [r7, #22]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001144 <readWheelSpeed+0xc0>
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001122:	ee17 3a90 	vmov	r3, s15
 8001126:	b29a      	uxth	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	801a      	strh	r2, [r3, #0]


		*lastReadMS = HAL_GetTick();
 800112c:	f000 fb62 	bl	80017f4 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
	}
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	48000400 	.word	0x48000400
 8001144:	00000000 	.word	0x00000000

08001148 <readBoardTemp>:

void readBoardTemp(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8001154:	f000 fb4e 	bl	80017f4 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d907      	bls.n	8001174 <readBoardTemp+0x2c>
		dataframe->data.boardTemp = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	719a      	strb	r2, [r3, #6]


		//todo: use ads1118, same chip as the shits, to read board temp
		//todo: convert counts to deg.C
		*lastReadMS = HAL_GetTick();
 800116a:	f000 fb43 	bl	80017f4 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	601a      	str	r2, [r3, #0]
	}
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_MspInit+0x44>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6613      	str	r3, [r2, #96]	@ 0x60
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_MspInit+0x44>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b09e      	sub	sp, #120	@ 0x78
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2254      	movs	r2, #84	@ 0x54
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fd6b 	bl	8005cc0 <memset>
  if(hadc->Instance==ADC1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a25      	ldr	r2, [pc, #148]	@ (8001284 <HAL_ADC_MspInit+0xc0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d143      	bne.n	800127c <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001208:	2308      	movs	r3, #8
 800120a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800120c:	2307      	movs	r3, #7
 800120e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4618      	mov	r0, r3
 8001224:	f003 f9aa 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800122e:	f7ff fe27 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_ADC_MspInit+0xc4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <HAL_ADC_MspInit+0xc4>)
 8001238:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_ADC_MspInit+0xc4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_ADC_MspInit+0xc4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_ADC_MspInit+0xc4>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_ADC_MspInit+0xc4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001262:	2302      	movs	r3, #2
 8001264:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001266:	230b      	movs	r3, #11
 8001268:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001278:	f002 f818 	bl	80032ac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800127c:	bf00      	nop
 800127e:	3778      	adds	r7, #120	@ 0x78
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	50040000 	.word	0x50040000
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <HAL_CAN_MspInit+0xa4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d13b      	bne.n	8001326 <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_CAN_MspInit+0xa8>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <HAL_CAN_MspInit+0xa8>)
 80012b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <HAL_CAN_MspInit+0xa8>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_CAN_MspInit+0xa8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001334 <HAL_CAN_MspInit+0xa8>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_CAN_MspInit+0xa8>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012f0:	2309      	movs	r3, #9
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f001 ffd5 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001314:	2309      	movs	r3, #9
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001322:	f001 ffc3 	bl	80032ac <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	@ 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40006400 	.word	0x40006400
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b09e      	sub	sp, #120	@ 0x78
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2254      	movs	r2, #84	@ 0x54
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fcb1 	bl	8005cc0 <memset>
  if(hi2c->Instance==I2C1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_I2C_MspInit+0xa4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d135      	bne.n	80013d4 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001368:	2340      	movs	r3, #64	@ 0x40
 800136a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800136c:	2300      	movs	r3, #0
 800136e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f901 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001380:	f7ff fd7e 	bl	8000e80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <HAL_I2C_MspInit+0xa8>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	4a15      	ldr	r2, [pc, #84]	@ (80013e0 <HAL_I2C_MspInit+0xa8>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_I2C_MspInit+0xa8>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139c:	23c0      	movs	r3, #192	@ 0xc0
 800139e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a0:	2312      	movs	r3, #18
 80013a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013b4:	4619      	mov	r1, r3
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <HAL_I2C_MspInit+0xac>)
 80013b8:	f001 ff78 	bl	80032ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_I2C_MspInit+0xa8>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_I2C_MspInit+0xa8>)
 80013c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_I2C_MspInit+0xa8>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013d4:	bf00      	nop
 80013d6:	3778      	adds	r7, #120	@ 0x78
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000400 	.word	0x48000400

080013e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <HAL_SPI_MspInit+0x7c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d128      	bne.n	800145c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	4a16      	ldr	r2, [pc, #88]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001414:	6613      	str	r3, [r2, #96]	@ 0x60
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_SPI_MspInit+0x80>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800143a:	23f0      	movs	r3, #240	@ 0xf0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144a:	2305      	movs	r3, #5
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f001 ff28 	bl	80032ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40013000 	.word	0x40013000
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_TIM_Base_MspInit+0x38>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10b      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001484:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001488:	6613      	str	r3, [r2, #96]	@ 0x60
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <HAL_TIM_Base_MspInit+0x3c>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40012c00 	.word	0x40012c00
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0a2      	sub	sp, #136	@ 0x88
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	2254      	movs	r2, #84	@ 0x54
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fbf7 	bl	8005cc0 <memset>
  if(huart->Instance==USART1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a59      	ldr	r2, [pc, #356]	@ (800163c <HAL_UART_MspInit+0x190>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d158      	bne.n	800158e <HAL_UART_MspInit+0xe2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014dc:	2301      	movs	r3, #1
 80014de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e0:	2300      	movs	r3, #0
 80014e2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f847 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f4:	f7ff fcc4 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f8:	4b51      	ldr	r3, [pc, #324]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fc:	4a50      	ldr	r2, [pc, #320]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80014fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001502:	6613      	str	r3, [r2, #96]	@ 0x60
 8001504:	4b4e      	ldr	r3, [pc, #312]	@ (8001640 <HAL_UART_MspInit+0x194>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b4b      	ldr	r3, [pc, #300]	@ (8001640 <HAL_UART_MspInit+0x194>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001514:	4a4a      	ldr	r2, [pc, #296]	@ (8001640 <HAL_UART_MspInit+0x194>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151c:	4b48      	ldr	r3, [pc, #288]	@ (8001640 <HAL_UART_MspInit+0x194>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b45      	ldr	r3, [pc, #276]	@ (8001640 <HAL_UART_MspInit+0x194>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a44      	ldr	r2, [pc, #272]	@ (8001640 <HAL_UART_MspInit+0x194>)
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b42      	ldr	r3, [pc, #264]	@ (8001640 <HAL_UART_MspInit+0x194>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB3 (JTDO-TRACESWO)     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001540:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001544:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001554:	2307      	movs	r3, #7
 8001556:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001564:	f001 fea2 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001568:	2308      	movs	r3, #8
 800156a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001570:	2301      	movs	r3, #1
 8001572:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800157a:	2307      	movs	r3, #7
 800157c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001584:	4619      	mov	r1, r3
 8001586:	482f      	ldr	r0, [pc, #188]	@ (8001644 <HAL_UART_MspInit+0x198>)
 8001588:	f001 fe90 	bl	80032ac <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800158c:	e051      	b.n	8001632 <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2d      	ldr	r2, [pc, #180]	@ (8001648 <HAL_UART_MspInit+0x19c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d14c      	bne.n	8001632 <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800159c:	2300      	movs	r3, #0
 800159e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 ffe9 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80015b0:	f7ff fc66 	bl	8000e80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80015ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015be:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d8:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_UART_MspInit+0x194>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015e4:	2304      	movs	r3, #4
 80015e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f6:	2307      	movs	r3, #7
 80015f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001606:	f001 fe51 	bl	80032ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800160a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800160e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800161e:	2303      	movs	r3, #3
 8001620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162e:	f001 fe3d 	bl	80032ac <HAL_GPIO_Init>
}
 8001632:	bf00      	nop
 8001634:	3788      	adds	r7, #136	@ 0x88
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013800 	.word	0x40013800
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400
 8001648:	40004400 	.word	0x40004400

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a2:	f000 f893 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d4:	f7ff ffea 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <LoopForever+0x6>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	@ (8001710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <LoopForever+0xe>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	@ (800171c <LoopForever+0x16>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f004 fae7 	bl	8005cd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001702:	f7ff f8b3 	bl	800086c <main>

08001706 <LoopForever>:

LoopForever:
    b LoopForever
 8001706:	e7fe      	b.n	8001706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001708:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001714:	08005f88 	.word	0x08005f88
  ldr r2, =_sbss
 8001718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800171c:	20000338 	.word	0x20000338

08001720 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_IRQHandler>

08001722 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f001 fcf9 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f80e 	bl	8001754 <HAL_InitTick>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	e001      	b.n	8001748 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001744:	f7ff fd1a 	bl	800117c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001748:	79fb      	ldrb	r3, [r7, #7]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_InitTick+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d023      	beq.n	80017b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001768:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <HAL_InitTick+0x70>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <HAL_InitTick+0x6c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fcf7 	bl	8003172 <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10f      	bne.n	80017aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d809      	bhi.n	80017a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f001 fccf 	bl	800313a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800179c:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <HAL_InitTick+0x74>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e007      	b.n	80017b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e004      	b.n	80017b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e001      	b.n	80017b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20000334 	.word	0x20000334

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000334 	.word	0x20000334

0800180c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff ffee 	bl	80017f4 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d005      	beq.n	8001832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001826:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <HAL_Delay+0x44>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001832:	bf00      	nop
 8001834:	f7ff ffde 	bl	80017f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d8f7      	bhi.n	8001834 <HAL_Delay+0x28>
  {
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008

08001854 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3360      	adds	r3, #96	@ 0x60
 80018ce:	461a      	mov	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <LL_ADC_SetOffset+0x44>)
 80018de:	4013      	ands	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	4313      	orrs	r3, r2
 80018ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	03fff000 	.word	0x03fff000

08001904 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3360      	adds	r3, #96	@ 0x60
 8001912:	461a      	mov	r2, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3360      	adds	r3, #96	@ 0x60
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	431a      	orrs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3330      	adds	r3, #48	@ 0x30
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	4413      	add	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	211f      	movs	r1, #31
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	0e9b      	lsrs	r3, r3, #26
 80019c4:	f003 011f 	and.w	r1, r3, #31
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d8:	bf00      	nop
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3314      	adds	r3, #20
 80019f4:	461a      	mov	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0e5b      	lsrs	r3, r3, #25
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2107      	movs	r1, #7
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0d1b      	lsrs	r3, r3, #20
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0318 	and.w	r3, r3, #24
 8001a5e:	4908      	ldr	r1, [pc, #32]	@ (8001a80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	400b      	ands	r3, r1
 8001a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	0007ffff 	.word	0x0007ffff

08001a84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6093      	str	r3, [r2, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ae0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ae4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <LL_ADC_IsEnabled+0x18>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_ADC_IsEnabled+0x1a>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b82:	f043 0204 	orr.w	r2, r3, #4
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d101      	bne.n	8001bae <LL_ADC_REG_IsConversionOngoing+0x18>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d101      	bne.n	8001bd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e126      	b.n	8001e4c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fad9 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff3f 	bl	8001aa8 <LL_ADC_IsDeepPowerDownEnabled>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff25 	bl	8001a84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff5a 	bl	8001af8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d115      	bne.n	8001c76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff3e 	bl	8001ad0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c54:	4b7f      	ldr	r3, [pc, #508]	@ (8001e54 <HAL_ADC_Init+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	4a7f      	ldr	r2, [pc, #508]	@ (8001e58 <HAL_ADC_Init+0x274>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	3301      	adds	r3, #1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c68:	e002      	b.n	8001c70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f9      	bne.n	8001c6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff3c 	bl	8001af8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10d      	bne.n	8001ca2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	f043 0210 	orr.w	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff75 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 8001cac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 80bf 	bne.w	8001e3a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f040 80bb 	bne.w	8001e3a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ccc:	f043 0202 	orr.w	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff35 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10b      	bne.n	8001cfc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ce4:	485d      	ldr	r0, [pc, #372]	@ (8001e5c <HAL_ADC_Init+0x278>)
 8001ce6:	f7ff ff2f 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	485a      	ldr	r0, [pc, #360]	@ (8001e60 <HAL_ADC_Init+0x27c>)
 8001cf8:	f7ff fdac 	bl	8001854 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e5b      	ldrb	r3, [r3, #25]
 8001d00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	045b      	lsls	r3, r3, #17
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <HAL_ADC_Init+0x280>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff25 	bl	8001bbc <LL_ADC_INJ_IsConversionOngoing>
 8001d72:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d13d      	bne.n	8001df6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13a      	bne.n	8001df6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d84:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d8c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d9c:	f023 0302 	bic.w	r3, r3, #2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	69b9      	ldr	r1, [r7, #24]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d118      	bne.n	8001de6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	e007      	b.n	8001df6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10c      	bne.n	8001e18 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f023 010f 	bic.w	r1, r3, #15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e16:	e007      	b.n	8001e28 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020f 	bic.w	r2, r2, #15
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e38:	e007      	b.n	8001e4a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	053e2d63 	.word	0x053e2d63
 8001e5c:	50040000 	.word	0x50040000
 8001e60:	50040300 	.word	0x50040300
 8001e64:	fff0c007 	.word	0xfff0c007

08001e68 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fe8c 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d167      	bne.n	8001f54 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Start_DMA+0x2a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e063      	b.n	8001f5a <HAL_ADC_Start_DMA+0xf2>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fc68 	bl	8002770 <ADC_Enable>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d14f      	bne.n	8001f4a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f023 0206 	bic.w	r2, r3, #6
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ed6:	e002      	b.n	8001ede <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	4a20      	ldr	r2, [pc, #128]	@ (8001f64 <HAL_ADC_Start_DMA+0xfc>)
 8001ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_ADC_Start_DMA+0x100>)
 8001eec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_ADC_Start_DMA+0x104>)
 8001ef4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	221c      	movs	r2, #28
 8001efc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0210 	orr.w	r2, r2, #16
 8001f14:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3340      	adds	r3, #64	@ 0x40
 8001f30:	4619      	mov	r1, r3
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f001 f928 	bl	800318a <HAL_DMA_Start_IT>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe13 	bl	8001b6e <LL_ADC_REG_StartConversion>
 8001f48:	e006      	b.n	8001f58 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001f52:	e001      	b.n	8001f58 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
 8001f56:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	0800287d 	.word	0x0800287d
 8001f68:	08002955 	.word	0x08002955
 8001f6c:	08002971 	.word	0x08002971

08001f70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0b6      	sub	sp, #216	@ 0xd8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x22>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e3bb      	b.n	8002746 <HAL_ADC_ConfigChannel+0x79a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fddb 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 83a0 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d824      	bhi.n	8002042 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	3b02      	subs	r3, #2
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d81b      	bhi.n	800203a <HAL_ADC_ConfigChannel+0x8e>
 8002002:	a201      	add	r2, pc, #4	@ (adr r2, 8002008 <HAL_ADC_ConfigChannel+0x5c>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002019 	.word	0x08002019
 800200c:	08002021 	.word	0x08002021
 8002010:	08002029 	.word	0x08002029
 8002014:	08002031 	.word	0x08002031
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002018:	230c      	movs	r3, #12
 800201a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800201e:	e010      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002020:	2312      	movs	r3, #18
 8002022:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002026:	e00c      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002028:	2318      	movs	r3, #24
 800202a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800202e:	e008      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800203a:	2306      	movs	r3, #6
 800203c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002040:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002050:	f7ff fc9c 	bl	800198c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fd9c 	bl	8001b96 <LL_ADC_REG_IsConversionOngoing>
 800205e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fda8 	bl	8001bbc <LL_ADC_INJ_IsConversionOngoing>
 800206c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 81a4 	bne.w	80023c2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800207a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 819f 	bne.w	80023c2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	461a      	mov	r2, r3
 8002092:	f7ff fca7 	bl	80019e4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00a      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020c8:	f7ff fbf8 	bl	80018bc <LL_ADC_SetOffset>
 80020cc:	e179      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fc15 	bl	8001904 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x14e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fc0a 	bl	8001904 <LL_ADC_GetOffsetChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	0e9b      	lsrs	r3, r3, #26
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	e01e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x18c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fbff 	bl	8001904 <LL_ADC_GetOffsetChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800211c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e004      	b.n	8002136 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800212c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1a4>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	e018      	b.n	8002182 <HAL_ADC_ConfigChannel+0x1d6>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800216c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e004      	b.n	8002182 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002182:	429a      	cmp	r2, r3
 8002184:	d106      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fbce 	bl	8001930 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fbb2 	bl	8001904 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x214>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fba7 	bl	8001904 <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	f003 021f 	and.w	r2, r3, #31
 80021be:	e01e      	b.n	80021fe <HAL_ADC_ConfigChannel+0x252>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fb9c 	bl	8001904 <LL_ADC_GetOffsetChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80021de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80021e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e004      	b.n	80021fc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	2b00      	cmp	r3, #0
 8002208:	d105      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x26a>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	e018      	b.n	8002248 <HAL_ADC_ConfigChannel+0x29c>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800222a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800222e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002232:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e004      	b.n	8002248 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800223e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	2101      	movs	r1, #1
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fb6b 	bl	8001930 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2102      	movs	r1, #2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fb4f 	bl	8001904 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x2da>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2102      	movs	r1, #2
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fb44 	bl	8001904 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	e01e      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x318>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2102      	movs	r1, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fb39 	bl	8001904 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80022a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80022ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e004      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x330>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	e014      	b.n	8002306 <HAL_ADC_ConfigChannel+0x35a>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80022ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80022f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e004      	b.n	8002306 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80022fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002306:	429a      	cmp	r2, r3
 8002308:	d106      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	2102      	movs	r1, #2
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fb0c 	bl	8001930 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2103      	movs	r1, #3
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff faf0 	bl	8001904 <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x398>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2103      	movs	r1, #3
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fae5 	bl	8001904 <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 021f 	and.w	r2, r3, #31
 8002342:	e017      	b.n	8002374 <HAL_ADC_ConfigChannel+0x3c8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2103      	movs	r1, #3
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fada 	bl	8001904 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800235c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800236a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_ADC_ConfigChannel+0x3e0>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	e011      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x404>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800239a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800239c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800239e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2103      	movs	r1, #3
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fab7 	bl	8001930 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fbbe 	bl	8001b48 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 8140 	bne.w	8002654 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f7ff fb2b 	bl	8001a3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a8f      	ldr	r2, [pc, #572]	@ (8002628 <HAL_ADC_ConfigChannel+0x67c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	f040 8131 	bne.w	8002654 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10b      	bne.n	800241a <HAL_ADC_ConfigChannel+0x46e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	3301      	adds	r3, #1
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b09      	cmp	r3, #9
 8002410:	bf94      	ite	ls
 8002412:	2301      	movls	r3, #1
 8002414:	2300      	movhi	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e019      	b.n	800244e <HAL_ADC_ConfigChannel+0x4a2>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800242c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2b09      	cmp	r3, #9
 8002446:	bf94      	ite	ls
 8002448:	2301      	movls	r3, #1
 800244a:	2300      	movhi	r3, #0
 800244c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244e:	2b00      	cmp	r3, #0
 8002450:	d079      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_ADC_ConfigChannel+0x4c2>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	3301      	adds	r3, #1
 8002466:	069b      	lsls	r3, r3, #26
 8002468:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800246c:	e015      	b.n	800249a <HAL_ADC_ConfigChannel+0x4ee>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800247c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e003      	b.n	8002492 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800248a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3301      	adds	r3, #1
 8002494:	069b      	lsls	r3, r3, #26
 8002496:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x50e>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	e017      	b.n	80024ea <HAL_ADC_ConfigChannel+0x53e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e003      	b.n	80024de <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	ea42 0103 	orr.w	r1, r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x564>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	3301      	adds	r3, #1
 8002502:	f003 021f 	and.w	r2, r3, #31
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	051b      	lsls	r3, r3, #20
 800250e:	e018      	b.n	8002542 <HAL_ADC_ConfigChannel+0x596>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800251e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002520:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f003 021f 	and.w	r2, r3, #31
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002542:	430b      	orrs	r3, r1
 8002544:	e081      	b.n	800264a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x5b6>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	3301      	adds	r3, #1
 800255a:	069b      	lsls	r3, r3, #26
 800255c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002560:	e015      	b.n	800258e <HAL_ADC_ConfigChannel+0x5e2>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e003      	b.n	8002586 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	069b      	lsls	r3, r3, #26
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x602>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	e017      	b.n	80025de <HAL_ADC_ConfigChannel+0x632>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	61bb      	str	r3, [r7, #24]
  return result;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	ea42 0103 	orr.w	r1, r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_ADC_ConfigChannel+0x65e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 021f 	and.w	r2, r3, #31
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	3b1e      	subs	r3, #30
 8002602:	051b      	lsls	r3, r3, #20
 8002604:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002608:	e01e      	b.n	8002648 <HAL_ADC_ConfigChannel+0x69c>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	60fb      	str	r3, [r7, #12]
  return result;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e006      	b.n	8002634 <HAL_ADC_ConfigChannel+0x688>
 8002626:	bf00      	nop
 8002628:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f003 021f 	and.w	r2, r3, #31
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	3b1e      	subs	r3, #30
 8002642:	051b      	lsls	r3, r3, #20
 8002644:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002648:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264e:	4619      	mov	r1, r3
 8002650:	f7ff f9c8 	bl	80019e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <HAL_ADC_ConfigChannel+0x7a4>)
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d06c      	beq.n	800273a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002660:	483c      	ldr	r0, [pc, #240]	@ (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 8002662:	f7ff f91d 	bl	80018a0 <LL_ADC_GetCommonPathInternalCh>
 8002666:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3a      	ldr	r2, [pc, #232]	@ (8002758 <HAL_ADC_ConfigChannel+0x7ac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d127      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a35      	ldr	r2, [pc, #212]	@ (800275c <HAL_ADC_ConfigChannel+0x7b0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d157      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800268a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800268e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002692:	4619      	mov	r1, r3
 8002694:	482f      	ldr	r0, [pc, #188]	@ (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 8002696:	f7ff f8f0 	bl	800187a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269a:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <HAL_ADC_ConfigChannel+0x7b4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	4a30      	ldr	r2, [pc, #192]	@ (8002764 <HAL_ADC_ConfigChannel+0x7b8>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c2:	e03a      	b.n	800273a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a27      	ldr	r2, [pc, #156]	@ (8002768 <HAL_ADC_ConfigChannel+0x7bc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d113      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1f      	ldr	r2, [pc, #124]	@ (800275c <HAL_ADC_ConfigChannel+0x7b0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d12a      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ec:	4619      	mov	r1, r3
 80026ee:	4819      	ldr	r0, [pc, #100]	@ (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 80026f0:	f7ff f8c3 	bl	800187a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f4:	e021      	b.n	800273a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <HAL_ADC_ConfigChannel+0x7c0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d11c      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a12      	ldr	r2, [pc, #72]	@ (800275c <HAL_ADC_ConfigChannel+0x7b0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d111      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800271a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800271e:	4619      	mov	r1, r3
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 8002722:	f7ff f8aa 	bl	800187a <LL_ADC_SetCommonPathInternalCh>
 8002726:	e008      	b.n	800273a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002742:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002746:	4618      	mov	r0, r3
 8002748:	37d8      	adds	r7, #216	@ 0xd8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	80080000 	.word	0x80080000
 8002754:	50040300 	.word	0x50040300
 8002758:	c7520000 	.word	0xc7520000
 800275c:	50040000 	.word	0x50040000
 8002760:	20000000 	.word	0x20000000
 8002764:	053e2d63 	.word	0x053e2d63
 8002768:	cb840000 	.word	0xcb840000
 800276c:	80000001 	.word	0x80000001

08002770 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f9e1 	bl	8001b48 <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d169      	bne.n	8002860 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	4b36      	ldr	r3, [pc, #216]	@ (800286c <ADC_Enable+0xfc>)
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e055      	b.n	8002862 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f9b0 	bl	8001b20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027c0:	482b      	ldr	r0, [pc, #172]	@ (8002870 <ADC_Enable+0x100>)
 80027c2:	f7ff f86d 	bl	80018a0 <LL_ADC_GetCommonPathInternalCh>
 80027c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d0:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <ADC_Enable+0x104>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	4a28      	ldr	r2, [pc, #160]	@ (8002878 <ADC_Enable+0x108>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ea:	e002      	b.n	80027f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fffc 	bl	80017f4 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027fe:	e028      	b.n	8002852 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f99f 	bl	8001b48 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f983 	bl	8001b20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800281a:	f7fe ffeb 	bl	80017f4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d914      	bls.n	8002852 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d00d      	beq.n	8002852 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e007      	b.n	8002862 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d1cf      	bne.n	8002800 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	8000003f 	.word	0x8000003f
 8002870:	50040300 	.word	0x50040300
 8002874:	20000000 	.word	0x20000000
 8002878:	053e2d63 	.word	0x053e2d63

0800287c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d14b      	bne.n	800292e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d021      	beq.n	80028f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f856 	bl	8001966 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d032      	beq.n	8002926 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d12b      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11f      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80028f2:	e018      	b.n	8002926 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d111      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fb22 	bl	8001f70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800292c:	e00e      	b.n	800294c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff fb2c 	bl	8001f98 <HAL_ADC_ErrorCallback>
}
 8002940:	e004      	b.n	800294c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fb0e 	bl	8001f84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002982:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	f043 0204 	orr.w	r2, r3, #4
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff fafe 	bl	8001f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0ed      	b.n	8002b92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fc62 	bl	800128c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d8:	f7fe ff0c 	bl	80017f4 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029de:	e012      	b.n	8002a06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e0:	f7fe ff08 	bl	80017f4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b0a      	cmp	r3, #10
 80029ec:	d90b      	bls.n	8002a06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2205      	movs	r2, #5
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0c5      	b.n	8002b92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0e5      	beq.n	80029e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0202 	bic.w	r2, r2, #2
 8002a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a24:	f7fe fee6 	bl	80017f4 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a2a:	e012      	b.n	8002a52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a2c:	f7fe fee2 	bl	80017f4 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b0a      	cmp	r3, #10
 8002a38:	d90b      	bls.n	8002a52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2205      	movs	r2, #5
 8002a4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e09f      	b.n	8002b92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e5      	bne.n	8002a2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7e1b      	ldrb	r3, [r3, #24]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d108      	bne.n	8002a7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e007      	b.n	8002a8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7e5b      	ldrb	r3, [r3, #25]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e007      	b.n	8002ab4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7e9b      	ldrb	r3, [r3, #26]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0220 	orr.w	r2, r2, #32
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e007      	b.n	8002ade <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0220 	bic.w	r2, r2, #32
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7edb      	ldrb	r3, [r3, #27]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0210 	bic.w	r2, r2, #16
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e007      	b.n	8002b08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0210 	orr.w	r2, r2, #16
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7f1b      	ldrb	r3, [r3, #28]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d108      	bne.n	8002b22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0208 	orr.w	r2, r2, #8
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e007      	b.n	8002b32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0208 	bic.w	r2, r2, #8
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7f5b      	ldrb	r3, [r3, #29]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0204 	orr.w	r2, r2, #4
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e007      	b.n	8002b5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	ea42 0103 	orr.w	r1, r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d003      	beq.n	8002bc0 <HAL_CAN_ConfigFilter+0x26>
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	f040 80aa 	bne.w	8002d14 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2201      	movs	r2, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d123      	bne.n	8002c42 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	401a      	ands	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3248      	adds	r2, #72	@ 0x48
 8002c22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c38:	6979      	ldr	r1, [r7, #20]
 8002c3a:	3348      	adds	r3, #72	@ 0x48
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d122      	bne.n	8002c90 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3248      	adds	r2, #72	@ 0x48
 8002c70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c86:	6979      	ldr	r1, [r7, #20]
 8002c88:	3348      	adds	r3, #72	@ 0x48
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002cd6:	e007      	b.n	8002ce8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e006      	b.n	8002d22 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d12e      	bne.n	8002da0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5a:	f7fe fd4b 	bl	80017f4 <HAL_GetTick>
 8002d5e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d60:	e012      	b.n	8002d88 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d62:	f7fe fd47 	bl	80017f4 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b0a      	cmp	r3, #10
 8002d6e:	d90b      	bls.n	8002d88 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2205      	movs	r2, #5
 8002d80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e012      	b.n	8002dae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e5      	bne.n	8002d62 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e006      	b.n	8002dae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b089      	sub	sp, #36	@ 0x24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dd4:	7ffb      	ldrb	r3, [r7, #31]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d003      	beq.n	8002de2 <HAL_CAN_AddTxMessage+0x2c>
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f040 80ad 	bne.w	8002f3c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8095 	beq.w	8002f2c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	0e1b      	lsrs	r3, r3, #24
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	409a      	lsls	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	6809      	ldr	r1, [r1, #0]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3318      	adds	r3, #24
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	440b      	add	r3, r1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e00f      	b.n	8002e5a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e4a:	68f9      	ldr	r1, [r7, #12]
 8002e4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3318      	adds	r3, #24
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	440b      	add	r3, r1
 8002e58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3318      	adds	r3, #24
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	440b      	add	r3, r1
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	7d1b      	ldrb	r3, [r3, #20]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d111      	bne.n	8002e9a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	4413      	add	r3, r2
 8002e82:	3304      	adds	r3, #4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	6811      	ldr	r1, [r2, #0]
 8002e8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3318      	adds	r3, #24
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	440b      	add	r3, r1
 8002e96:	3304      	adds	r3, #4
 8002e98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3307      	adds	r3, #7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	061a      	lsls	r2, r3, #24
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3306      	adds	r3, #6
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3305      	adds	r3, #5
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	3204      	adds	r2, #4
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	6811      	ldr	r1, [r2, #0]
 8002ec2:	ea43 0200 	orr.w	r2, r3, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	440b      	add	r3, r1
 8002ecc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ed0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	061a      	lsls	r2, r3, #24
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3302      	adds	r3, #2
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	4313      	orrs	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	ea43 0200 	orr.w	r2, r3, r0
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	440b      	add	r3, r1
 8002f02:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002f06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3318      	adds	r3, #24
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	4413      	add	r3, r2
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	6811      	ldr	r1, [r2, #0]
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3318      	adds	r3, #24
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	440b      	add	r3, r1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e00e      	b.n	8002f4a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e006      	b.n	8002f4a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	@ 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f68:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d002      	beq.n	8002f76 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d11d      	bne.n	8002fb2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	@ (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	@ (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff8e 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff47 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff5c 	bl	8003008 <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff8e 	bl	8003078 <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5d 	bl	8003024 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffb0 	bl	80030e0 <SysTick_Config>
 8003180:	4603      	mov	r3, r0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Start_IT+0x20>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e04b      	b.n	8003242 <HAL_DMA_Start_IT+0xb8>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d13a      	bne.n	8003234 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f831 	bl	800324a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 020e 	orr.w	r2, r2, #14
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e00f      	b.n	8003222 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0204 	bic.w	r2, r2, #4
 8003210:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 020a 	orr.w	r2, r2, #10
 8003220:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e005      	b.n	8003240 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800324a:	b480      	push	{r7}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f003 021c 	and.w	r2, r3, #28
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b10      	cmp	r3, #16
 800327a:	d108      	bne.n	800328e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800328c:	e007      	b.n	800329e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	60da      	str	r2, [r3, #12]
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ba:	e148      	b.n	800354e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 813a 	beq.w	8003548 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d005      	beq.n	80032ec <HAL_GPIO_Init+0x40>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d130      	bne.n	800334e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003322:	2201      	movs	r2, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 0201 	and.w	r2, r3, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b03      	cmp	r3, #3
 8003358:	d017      	beq.n	800338a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d123      	bne.n	80033de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	6939      	ldr	r1, [r7, #16]
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0203 	and.w	r2, r3, #3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8094 	beq.w	8003548 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003420:	4b52      	ldr	r3, [pc, #328]	@ (800356c <HAL_GPIO_Init+0x2c0>)
 8003422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003424:	4a51      	ldr	r2, [pc, #324]	@ (800356c <HAL_GPIO_Init+0x2c0>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6613      	str	r3, [r2, #96]	@ 0x60
 800342c:	4b4f      	ldr	r3, [pc, #316]	@ (800356c <HAL_GPIO_Init+0x2c0>)
 800342e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003438:	4a4d      	ldr	r2, [pc, #308]	@ (8003570 <HAL_GPIO_Init+0x2c4>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	220f      	movs	r2, #15
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x1d4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a43      	ldr	r2, [pc, #268]	@ (8003574 <HAL_GPIO_Init+0x2c8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1d0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a42      	ldr	r2, [pc, #264]	@ (8003578 <HAL_GPIO_Init+0x2cc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x1cc>
 8003474:	2302      	movs	r3, #2
 8003476:	e004      	b.n	8003482 <HAL_GPIO_Init+0x1d6>
 8003478:	2307      	movs	r3, #7
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x1d6>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x1d6>
 8003480:	2300      	movs	r3, #0
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4093      	lsls	r3, r2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003492:	4937      	ldr	r1, [pc, #220]	@ (8003570 <HAL_GPIO_Init+0x2c4>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034a0:	4b36      	ldr	r3, [pc, #216]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034c4:	4a2d      	ldr	r2, [pc, #180]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ca:	4b2c      	ldr	r3, [pc, #176]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034ee:	4a23      	ldr	r2, [pc, #140]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034f4:	4b21      	ldr	r3, [pc, #132]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003518:	4a18      	ldr	r2, [pc, #96]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800351e:	4b17      	ldr	r3, [pc, #92]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003542:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <HAL_GPIO_Init+0x2d0>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3301      	adds	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f aeaf 	bne.w	80032bc <HAL_GPIO_Init+0x10>
  }
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	40010000 	.word	0x40010000
 8003574:	48000400 	.word	0x48000400
 8003578:	48000800 	.word	0x48000800
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e001      	b.n	80035a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e08d      	b.n	800370e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fe96 	bl	8001338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	@ 0x24
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003630:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003640:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e006      	b.n	8003668 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003666:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d108      	bne.n	8003682 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	e007      	b.n	8003692 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69d9      	ldr	r1, [r3, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	d138      	bne.n	800379e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003736:	2302      	movs	r3, #2
 8003738:	e032      	b.n	80037a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	@ 0x24
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003768:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d139      	bne.n	8003836 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e033      	b.n	8003838 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	@ 0x24
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003848:	4b04      	ldr	r3, [pc, #16]	@ (800385c <HAL_PWREx_GetVoltageRange+0x18>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40007000 	.word	0x40007000

08003860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800386e:	d130      	bne.n	80038d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003870:	4b23      	ldr	r3, [pc, #140]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800387c:	d038      	beq.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800387e:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003886:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003888:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800388c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800388e:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2232      	movs	r2, #50	@ 0x32
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	4a1b      	ldr	r2, [pc, #108]	@ (8003908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9b      	lsrs	r3, r3, #18
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a4:	e002      	b.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ac:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b8:	d102      	bne.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f2      	bne.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d110      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e00f      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038de:	d007      	beq.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038e0:	4b07      	ldr	r3, [pc, #28]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038e8:	4a05      	ldr	r2, [pc, #20]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40007000 	.word	0x40007000
 8003904:	20000000 	.word	0x20000000
 8003908:	431bde83 	.word	0x431bde83

0800390c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f000 bc02 	b.w	8004124 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003920:	4b96      	ldr	r3, [pc, #600]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392a:	4b94      	ldr	r3, [pc, #592]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80e4 	beq.w	8003b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_RCC_OscConfig+0x4c>
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	f040 808b 	bne.w	8003a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b01      	cmp	r3, #1
 8003954:	f040 8087 	bne.w	8003a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003958:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_OscConfig+0x64>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e3d9      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	4b81      	ldr	r3, [pc, #516]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_RCC_OscConfig+0x7e>
 8003980:	4b7e      	ldr	r3, [pc, #504]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003988:	e005      	b.n	8003996 <HAL_RCC_OscConfig+0x8a>
 800398a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 800398c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003996:	4293      	cmp	r3, r2
 8003998:	d223      	bcs.n	80039e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd8c 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e3ba      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ae:	4b73      	ldr	r3, [pc, #460]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a72      	ldr	r2, [pc, #456]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b70      	ldr	r3, [pc, #448]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	496d      	ldr	r1, [pc, #436]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039cc:	4b6b      	ldr	r3, [pc, #428]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	4968      	ldr	r1, [pc, #416]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	e025      	b.n	8003a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e2:	4b66      	ldr	r3, [pc, #408]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a65      	ldr	r2, [pc, #404]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b63      	ldr	r3, [pc, #396]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4960      	ldr	r1, [pc, #384]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a00:	4b5e      	ldr	r3, [pc, #376]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	495b      	ldr	r1, [pc, #364]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd4c 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e37a      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2e:	f000 fc81 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b51      	ldr	r3, [pc, #324]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	4950      	ldr	r1, [pc, #320]	@ (8003b80 <HAL_RCC_OscConfig+0x274>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8003b88 <HAL_RCC_OscConfig+0x27c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fe7e 	bl	8001754 <HAL_InitTick>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d052      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	e35e      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d032      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a6e:	4b43      	ldr	r3, [pc, #268]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a42      	ldr	r2, [pc, #264]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a7a:	f7fd febb 	bl	80017f4 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a82:	f7fd feb7 	bl	80017f4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e347      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a94:	4b39      	ldr	r3, [pc, #228]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa0:	4b36      	ldr	r3, [pc, #216]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a35      	ldr	r2, [pc, #212]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b33      	ldr	r3, [pc, #204]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4930      	ldr	r1, [pc, #192]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003abe:	4b2f      	ldr	r3, [pc, #188]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	492b      	ldr	r1, [pc, #172]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e01a      	b.n	8003b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad4:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fe88 	bl	80017f4 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fe84 	bl	80017f4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e314      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003afa:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1dc>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d073      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_OscConfig+0x21c>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d10e      	bne.n	8003b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d063      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d15f      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e2f1      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x24c>
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e025      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b60:	d114      	bne.n	8003b8c <HAL_RCC_OscConfig+0x280>
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a05      	ldr	r2, [pc, #20]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a02      	ldr	r2, [pc, #8]	@ (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e013      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08005f30 	.word	0x08005f30
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004
 8003b8c:	4ba0      	ldr	r3, [pc, #640]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a9f      	ldr	r2, [pc, #636]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b9d      	ldr	r3, [pc, #628]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a9c      	ldr	r2, [pc, #624]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd fe22 	bl	80017f4 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fe1e 	bl	80017f4 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	@ 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e2ae      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc6:	4b92      	ldr	r3, [pc, #584]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2a8>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fe0e 	bl	80017f4 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fe0a 	bl	80017f4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e29a      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bee:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2d0>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d060      	beq.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x310>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d116      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_OscConfig+0x328>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e277      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b76      	ldr	r3, [pc, #472]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4973      	ldr	r1, [pc, #460]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	e040      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d023      	beq.n	8003c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c52:	4b6f      	ldr	r3, [pc, #444]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6e      	ldr	r2, [pc, #440]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fdc9 	bl	80017f4 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fd fdc5 	bl	80017f4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e255      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c78:	4b65      	ldr	r3, [pc, #404]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b62      	ldr	r3, [pc, #392]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	495f      	ldr	r1, [pc, #380]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
 8003c98:	e018      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fd fda5 	bl	80017f4 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fd fda1 	bl	80017f4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e231      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce6:	4a4a      	ldr	r2, [pc, #296]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fd80 	bl	80017f4 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fd7c 	bl	80017f4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e20c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d0a:	4b41      	ldr	r3, [pc, #260]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ef      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x3ec>
 8003d18:	e01b      	b.n	8003d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d20:	4a3b      	ldr	r2, [pc, #236]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd fd63 	bl	80017f4 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d32:	f7fd fd5f 	bl	80017f4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1ef      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d44:	4b32      	ldr	r3, [pc, #200]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ef      	bne.n	8003d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80a6 	beq.w	8003eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d64:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	4a26      	ldr	r2, [pc, #152]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7c:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8c:	4b21      	ldr	r3, [pc, #132]	@ (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d118      	bne.n	8003dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d98:	4b1e      	ldr	r3, [pc, #120]	@ (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da4:	f7fd fd26 	bl	80017f4 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd fd22 	bl	80017f4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1b2      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbe:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d108      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4d8>
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de2:	e029      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d115      	bne.n	8003e18 <HAL_RCC_OscConfig+0x50c>
 8003dec:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a07      	ldr	r2, [pc, #28]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a03      	ldr	r2, [pc, #12]	@ (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	4b9a      	ldr	r3, [pc, #616]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	4a99      	ldr	r2, [pc, #612]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e28:	4b96      	ldr	r3, [pc, #600]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	4a95      	ldr	r2, [pc, #596]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fcd8 	bl	80017f4 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd fcd4 	bl	80017f4 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e162      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	4b89      	ldr	r3, [pc, #548]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ed      	beq.n	8003e48 <HAL_RCC_OscConfig+0x53c>
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fcc1 	bl	80017f4 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd fcbd 	bl	80017f4 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e14b      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8c:	4b7d      	ldr	r3, [pc, #500]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ed      	bne.n	8003e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b78      	ldr	r3, [pc, #480]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	4a77      	ldr	r2, [pc, #476]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d03c      	beq.n	8003f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01c      	beq.n	8003efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec0:	4b70      	ldr	r3, [pc, #448]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec6:	4a6f      	ldr	r2, [pc, #444]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fc90 	bl	80017f4 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed8:	f7fd fc8c 	bl	80017f4 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e11c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eea:	4b66      	ldr	r3, [pc, #408]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ef      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x5cc>
 8003ef8:	e01b      	b.n	8003f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003efa:	4b62      	ldr	r3, [pc, #392]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f00:	4a60      	ldr	r2, [pc, #384]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0a:	f7fd fc73 	bl	80017f4 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f12:	f7fd fc6f 	bl	80017f4 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0ff      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f24:	4b57      	ldr	r3, [pc, #348]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ef      	bne.n	8003f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80f3 	beq.w	8004122 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f040 80c9 	bne.w	80040d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f46:	4b4f      	ldr	r3, [pc, #316]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0203 	and.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d12c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	3b01      	subs	r3, #1
 8003f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d123      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d113      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	3b01      	subs	r3, #1
 8003fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d06b      	beq.n	800408c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d062      	beq.n	8004080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fba:	4b32      	ldr	r3, [pc, #200]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0ac      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fca:	4b2e      	ldr	r3, [pc, #184]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2d      	ldr	r2, [pc, #180]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd6:	f7fd fc0d 	bl	80017f4 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd fc09 	bl	80017f4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e099      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff0:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffc:	4b21      	ldr	r3, [pc, #132]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	4b21      	ldr	r3, [pc, #132]	@ (8004088 <HAL_RCC_OscConfig+0x77c>)
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800400c:	3a01      	subs	r2, #1
 800400e:	0112      	lsls	r2, r2, #4
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004016:	0212      	lsls	r2, r2, #8
 8004018:	4311      	orrs	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800401e:	0852      	lsrs	r2, r2, #1
 8004020:	3a01      	subs	r2, #1
 8004022:	0552      	lsls	r2, r2, #21
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800402a:	0852      	lsrs	r2, r2, #1
 800402c:	3a01      	subs	r2, #1
 800402e:	0652      	lsls	r2, r2, #25
 8004030:	4311      	orrs	r1, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004036:	06d2      	lsls	r2, r2, #27
 8004038:	430a      	orrs	r2, r1
 800403a:	4912      	ldr	r1, [pc, #72]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 800403c:	4313      	orrs	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0f      	ldr	r2, [pc, #60]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a0c      	ldr	r2, [pc, #48]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004058:	f7fd fbcc 	bl	80017f4 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fd fbc8 	bl	80017f4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e058      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004072:	4b04      	ldr	r3, [pc, #16]	@ (8004084 <HAL_RCC_OscConfig+0x778>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407e:	e050      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e04f      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
 8004084:	40021000 	.word	0x40021000
 8004088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408c:	4b27      	ldr	r3, [pc, #156]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d144      	bne.n	8004122 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004098:	4b24      	ldr	r3, [pc, #144]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a23      	ldr	r2, [pc, #140]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a4:	4b21      	ldr	r3, [pc, #132]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a20      	ldr	r2, [pc, #128]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 80040aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b0:	f7fd fba0 	bl	80017f4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd fb9c 	bl	80017f4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e02c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	4b18      	ldr	r3, [pc, #96]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x7ac>
 80040d6:	e024      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d01f      	beq.n	800411e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b13      	ldr	r3, [pc, #76]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a12      	ldr	r2, [pc, #72]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 80040e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd fb83 	bl	80017f4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd fb7f 	bl	80017f4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004104:	4b09      	ldr	r3, [pc, #36]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004110:	4b06      	ldr	r3, [pc, #24]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4905      	ldr	r1, [pc, #20]	@ (800412c <HAL_RCC_OscConfig+0x820>)
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_RCC_OscConfig+0x824>)
 8004118:	4013      	ands	r3, r2
 800411a:	60cb      	str	r3, [r1, #12]
 800411c:	e001      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	feeefffc 	.word	0xfeeefffc

08004134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0e7      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b75      	ldr	r3, [pc, #468]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b72      	ldr	r3, [pc, #456]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4970      	ldr	r1, [pc, #448]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b6e      	ldr	r3, [pc, #440]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cf      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4b66      	ldr	r3, [pc, #408]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004190:	429a      	cmp	r2, r3
 8004192:	d908      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004194:	4b63      	ldr	r3, [pc, #396]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4960      	ldr	r1, [pc, #384]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04c      	beq.n	800424c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	4b5a      	ldr	r3, [pc, #360]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d121      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0a6      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d2:	4b54      	ldr	r3, [pc, #336]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e09a      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e08e      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e086      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b46      	ldr	r3, [pc, #280]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4943      	ldr	r1, [pc, #268]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd faea 	bl	80017f4 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fd fae6 	bl	80017f4 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e06e      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b3a      	ldr	r3, [pc, #232]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	4b31      	ldr	r3, [pc, #196]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004264:	429a      	cmp	r2, r3
 8004266:	d208      	bcs.n	800427a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b2e      	ldr	r3, [pc, #184]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	492b      	ldr	r1, [pc, #172]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800427a:	4b29      	ldr	r3, [pc, #164]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d210      	bcs.n	80042aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	4b25      	ldr	r3, [pc, #148]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 0207 	bic.w	r2, r3, #7
 8004290:	4923      	ldr	r1, [pc, #140]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004298:	4b21      	ldr	r3, [pc, #132]	@ (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e036      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	4918      	ldr	r1, [pc, #96]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d4:	4b13      	ldr	r3, [pc, #76]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4910      	ldr	r1, [pc, #64]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e8:	f000 f824 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	490b      	ldr	r1, [pc, #44]	@ (8004328 <HAL_RCC_ClockConfig+0x1f4>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	4a09      	ldr	r2, [pc, #36]	@ (800432c <HAL_RCC_ClockConfig+0x1f8>)
 8004306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004308:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_RCC_ClockConfig+0x1fc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fa21 	bl	8001754 <HAL_InitTick>
 8004312:	4603      	mov	r3, r0
 8004314:	72fb      	strb	r3, [r7, #11]

  return status;
 8004316:	7afb      	ldrb	r3, [r7, #11]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40022000 	.word	0x40022000
 8004324:	40021000 	.word	0x40021000
 8004328:	08005f30 	.word	0x08005f30
 800432c:	20000000 	.word	0x20000000
 8004330:	20000004 	.word	0x20000004

08004334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	@ 0x24
 8004338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004342:	4b3e      	ldr	r3, [pc, #248]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434c:	4b3b      	ldr	r3, [pc, #236]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x34>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d121      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d11e      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004368:	4b34      	ldr	r3, [pc, #208]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004374:	4b31      	ldr	r3, [pc, #196]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e005      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004384:	4b2d      	ldr	r3, [pc, #180]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004390:	4a2b      	ldr	r2, [pc, #172]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043ac:	4b25      	ldr	r3, [pc, #148]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e004      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b8:	4b23      	ldr	r3, [pc, #140]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d134      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c2:	4b1e      	ldr	r3, [pc, #120]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0xa6>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d003      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0xac>
 80043d8:	e005      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043da:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043dc:	617b      	str	r3, [r7, #20]
      break;
 80043de:	e005      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043e0:	4b19      	ldr	r3, [pc, #100]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043e2:	617b      	str	r3, [r7, #20]
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	617b      	str	r3, [r7, #20]
      break;
 80043ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	fb03 f202 	mul.w	r2, r3, r2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	0e5b      	lsrs	r3, r3, #25
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	3301      	adds	r3, #1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800442c:	69bb      	ldr	r3, [r7, #24]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	@ 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	08005f48 	.word	0x08005f48
 8004444:	00f42400 	.word	0x00f42400
 8004448:	007a1200 	.word	0x007a1200

0800444c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <HAL_RCC_GetHCLKFreq+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000000 	.word	0x20000000

08004464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004468:	f7ff fff0 	bl	800444c <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4904      	ldr	r1, [pc, #16]	@ (800448c <HAL_RCC_GetPCLK1Freq+0x28>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	08005f40 	.word	0x08005f40

08004490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004494:	f7ff ffda 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0adb      	lsrs	r3, r3, #11
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4904      	ldr	r1, [pc, #16]	@ (80044b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	08005f40 	.word	0x08005f40

080044bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044d4:	f7ff f9b6 	bl	8003844 <HAL_PWREx_GetVoltageRange>
 80044d8:	6178      	str	r0, [r7, #20]
 80044da:	e014      	b.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e0:	4a24      	ldr	r2, [pc, #144]	@ (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e8:	4b22      	ldr	r3, [pc, #136]	@ (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044f4:	f7ff f9a6 	bl	8003844 <HAL_PWREx_GetVoltageRange>
 80044f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004504:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800450c:	d10b      	bne.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b80      	cmp	r3, #128	@ 0x80
 8004512:	d919      	bls.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2ba0      	cmp	r3, #160	@ 0xa0
 8004518:	d902      	bls.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451a:	2302      	movs	r3, #2
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e013      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e010      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	@ 0x80
 800452a:	d902      	bls.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800452c:	2303      	movs	r3, #3
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e00a      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b80      	cmp	r3, #128	@ 0x80
 8004536:	d102      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004538:	2302      	movs	r3, #2
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e004      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b70      	cmp	r3, #112	@ 0x70
 8004542:	d101      	bne.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004544:	2301      	movs	r3, #1
 8004546:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 0207 	bic.w	r2, r3, #7
 8004550:	4909      	ldr	r1, [pc, #36]	@ (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004558:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	40022000 	.word	0x40022000

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004584:	2300      	movs	r3, #0
 8004586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004588:	2300      	movs	r3, #0
 800458a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004594:	2b00      	cmp	r3, #0
 8004596:	d031      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045a0:	d01a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045a6:	d814      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045be:	e00c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f9ce 	bl	8004968 <RCCEx_PLLSAI1_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d0:	e003      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	74fb      	strb	r3, [r7, #19]
      break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e0:	4b51      	ldr	r3, [pc, #324]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ee:	494e      	ldr	r1, [pc, #312]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045f6:	e001      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 809e 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800460e:	4b46      	ldr	r3, [pc, #280]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	4b40      	ldr	r3, [pc, #256]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004628:	4a3f      	ldr	r2, [pc, #252]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800462e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004630:	4b3d      	ldr	r3, [pc, #244]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463c:	2301      	movs	r3, #1
 800463e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004640:	4b3a      	ldr	r3, [pc, #232]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a39      	ldr	r2, [pc, #228]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800464c:	f7fd f8d2 	bl	80017f4 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004652:	e009      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fd f8ce 	bl	80017f4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d902      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	74fb      	strb	r3, [r7, #19]
        break;
 8004666:	e005      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004668:	4b30      	ldr	r3, [pc, #192]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ef      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d15a      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800467a:	4b2b      	ldr	r3, [pc, #172]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01e      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	429a      	cmp	r2, r3
 8004694:	d019      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	4b21      	ldr	r3, [pc, #132]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046c2:	4a19      	ldr	r2, [pc, #100]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd f88e 	bl	80017f4 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046da:	e00b      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fd f88a 	bl	80017f4 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d902      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	74fb      	strb	r3, [r7, #19]
            break;
 80046f2:	e006      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ec      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004708:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	4904      	ldr	r1, [pc, #16]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004720:	7cfb      	ldrb	r3, [r7, #19]
 8004722:	74bb      	strb	r3, [r7, #18]
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004734:	7c7b      	ldrb	r3, [r7, #17]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d105      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473a:	4b8a      	ldr	r3, [pc, #552]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473e:	4a89      	ldr	r2, [pc, #548]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004744:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004752:	4b84      	ldr	r3, [pc, #528]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f023 0203 	bic.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4980      	ldr	r1, [pc, #512]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004774:	4b7b      	ldr	r3, [pc, #492]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477a:	f023 020c 	bic.w	r2, r3, #12
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	4978      	ldr	r1, [pc, #480]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004796:	4b73      	ldr	r3, [pc, #460]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	496f      	ldr	r1, [pc, #444]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047be:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c6:	4967      	ldr	r1, [pc, #412]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047da:	4b62      	ldr	r3, [pc, #392]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	495e      	ldr	r1, [pc, #376]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047fc:	4b59      	ldr	r3, [pc, #356]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004802:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480a:	4956      	ldr	r1, [pc, #344]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481e:	4b51      	ldr	r3, [pc, #324]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482c:	494d      	ldr	r1, [pc, #308]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d028      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004840:	4b48      	ldr	r3, [pc, #288]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	4945      	ldr	r1, [pc, #276]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800485e:	d106      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004860:	4b40      	ldr	r3, [pc, #256]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a3f      	ldr	r2, [pc, #252]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800486a:	60d3      	str	r3, [r2, #12]
 800486c:	e011      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004876:	d10c      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2101      	movs	r1, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f872 	bl	8004968 <RCCEx_PLLSAI1_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d028      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800489e:	4b31      	ldr	r3, [pc, #196]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ac:	492d      	ldr	r1, [pc, #180]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048bc:	d106      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048be:	4b29      	ldr	r3, [pc, #164]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	4a28      	ldr	r2, [pc, #160]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c8:	60d3      	str	r3, [r2, #12]
 80048ca:	e011      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f843 	bl	8004968 <RCCEx_PLLSAI1_Config>
 80048e2:	4603      	mov	r3, r0
 80048e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01c      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048fc:	4b19      	ldr	r3, [pc, #100]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490a:	4916      	ldr	r1, [pc, #88]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800491a:	d10c      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f820 	bl	8004968 <RCCEx_PLLSAI1_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004948:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004950:	4904      	ldr	r1, [pc, #16]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004958:	7cbb      	ldrb	r3, [r7, #18]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000

08004968 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004976:	4b74      	ldr	r3, [pc, #464]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004982:	4b71      	ldr	r3, [pc, #452]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0203 	and.w	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d10d      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
       ||
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800499a:	4b6b      	ldr	r3, [pc, #428]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
       ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d047      	beq.n	8004a3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	e044      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d018      	beq.n	80049ee <RCCEx_PLLSAI1_Config+0x86>
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d825      	bhi.n	8004a0c <RCCEx_PLLSAI1_Config+0xa4>
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d002      	beq.n	80049ca <RCCEx_PLLSAI1_Config+0x62>
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d009      	beq.n	80049dc <RCCEx_PLLSAI1_Config+0x74>
 80049c8:	e020      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11d      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049da:	e01a      	b.n	8004a12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d116      	bne.n	8004a16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ec:	e013      	b.n	8004a16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ee:	4b56      	ldr	r3, [pc, #344]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049fa:	4b53      	ldr	r3, [pc, #332]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a0a:	e006      	b.n	8004a1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a10:	e004      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a12:	bf00      	nop
 8004a14:	e002      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a16:	bf00      	nop
 8004a18:	e000      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10d      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a22:	4b49      	ldr	r3, [pc, #292]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	430b      	orrs	r3, r1
 8004a38:	4943      	ldr	r1, [pc, #268]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d17c      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a44:	4b40      	ldr	r3, [pc, #256]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a3f      	ldr	r2, [pc, #252]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a50:	f7fc fed0 	bl	80017f4 <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a56:	e009      	b.n	8004a6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a58:	f7fc fecc 	bl	80017f4 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	73fb      	strb	r3, [r7, #15]
        break;
 8004a6a:	e005      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a6c:	4b36      	ldr	r3, [pc, #216]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ef      	bne.n	8004a58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d15f      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d110      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a84:	4b30      	ldr	r3, [pc, #192]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6892      	ldr	r2, [r2, #8]
 8004a94:	0211      	lsls	r1, r2, #8
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68d2      	ldr	r2, [r2, #12]
 8004a9a:	06d2      	lsls	r2, r2, #27
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	492a      	ldr	r1, [pc, #168]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	610b      	str	r3, [r1, #16]
 8004aa4:	e027      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d112      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aac:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ab4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6892      	ldr	r2, [r2, #8]
 8004abc:	0211      	lsls	r1, r2, #8
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6912      	ldr	r2, [r2, #16]
 8004ac2:	0852      	lsrs	r2, r2, #1
 8004ac4:	3a01      	subs	r2, #1
 8004ac6:	0552      	lsls	r2, r2, #21
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	491f      	ldr	r1, [pc, #124]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	610b      	str	r3, [r1, #16]
 8004ad0:	e011      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ada:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
 8004ae2:	0211      	lsls	r1, r2, #8
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6952      	ldr	r2, [r2, #20]
 8004ae8:	0852      	lsrs	r2, r2, #1
 8004aea:	3a01      	subs	r2, #1
 8004aec:	0652      	lsls	r2, r2, #25
 8004aee:	430a      	orrs	r2, r1
 8004af0:	4915      	ldr	r1, [pc, #84]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a13      	ldr	r2, [pc, #76]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fc fe77 	bl	80017f4 <HAL_GetTick>
 8004b06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b08:	e009      	b.n	8004b1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b0a:	f7fc fe73 	bl	80017f4 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d902      	bls.n	8004b1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b1c:	e005      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ef      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4903      	ldr	r1, [pc, #12]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000

08004b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e095      	b.n	8004c8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d108      	bne.n	8004b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b6e:	d009      	beq.n	8004b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	61da      	str	r2, [r3, #28]
 8004b76:	e005      	b.n	8004b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc fc22 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bc4:	d902      	bls.n	8004bcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e002      	b.n	8004bd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004bda:	d007      	beq.n	8004bec <HAL_SPI_Init+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2e:	ea42 0103 	orr.w	r1, r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 0204 	and.w	r2, r3, #4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c68:	ea42 0103 	orr.w	r1, r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e049      	b.n	8004d38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fc fbd7 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f000 f8ff 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0b6      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x18a>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d98:	d03e      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0xd8>
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9e:	f200 8087 	bhi.w	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_TIM_ConfigClockSource+0x176>
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dae:	d87f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004db0:	2b70      	cmp	r3, #112	@ 0x70
 8004db2:	d01a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0xaa>
 8004db4:	2b70      	cmp	r3, #112	@ 0x70
 8004db6:	d87b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004db8:	2b60      	cmp	r3, #96	@ 0x60
 8004dba:	d050      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x11e>
 8004dbc:	2b60      	cmp	r3, #96	@ 0x60
 8004dbe:	d877      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dc0:	2b50      	cmp	r3, #80	@ 0x50
 8004dc2:	d03c      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xfe>
 8004dc4:	2b50      	cmp	r3, #80	@ 0x50
 8004dc6:	d873      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d058      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x13e>
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d86f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dd0:	2b30      	cmp	r3, #48	@ 0x30
 8004dd2:	d064      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004dd4:	2b30      	cmp	r3, #48	@ 0x30
 8004dd6:	d86b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d060      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d867      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d05c      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d05a      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15e>
 8004de8:	e062      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dfa:	f000 f955 	bl	80050a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	609a      	str	r2, [r3, #8]
      break;
 8004e16:	e04f      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	f000 f93e 	bl	80050a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e3a:	609a      	str	r2, [r3, #8]
      break;
 8004e3c:	e03c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 f8b2 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2150      	movs	r1, #80	@ 0x50
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f90b 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e02c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 f8d1 	bl	8005012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2160      	movs	r1, #96	@ 0x60
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f8fb 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e01c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 f892 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2140      	movs	r1, #64	@ 0x40
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f8eb 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e00c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f000 f8e2 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004eae:	e003      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a30      	ldr	r2, [pc, #192]	@ (8004fa8 <TIM_Base_SetConfig+0xd4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0x20>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef2:	d108      	bne.n	8004f06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a27      	ldr	r2, [pc, #156]	@ (8004fa8 <TIM_Base_SetConfig+0xd4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_Base_SetConfig+0x52>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f14:	d007      	beq.n	8004f26 <TIM_Base_SetConfig+0x52>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a24      	ldr	r2, [pc, #144]	@ (8004fac <TIM_Base_SetConfig+0xd8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_Base_SetConfig+0x52>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a23      	ldr	r2, [pc, #140]	@ (8004fb0 <TIM_Base_SetConfig+0xdc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d108      	bne.n	8004f38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a12      	ldr	r2, [pc, #72]	@ (8004fa8 <TIM_Base_SetConfig+0xd4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0xa0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <TIM_Base_SetConfig+0xd8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0xa0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a10      	ldr	r2, [pc, #64]	@ (8004fb0 <TIM_Base_SetConfig+0xdc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d103      	bne.n	8004f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d105      	bne.n	8004f9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	611a      	str	r2, [r3, #16]
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400

08004fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 030a 	bic.w	r3, r3, #10
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f023 0210 	bic.w	r2, r3, #16
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800503c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	031b      	lsls	r3, r3, #12
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800504e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	f043 0307 	orr.w	r3, r3, #7
 8005094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	021a      	lsls	r2, r3, #8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e04f      	b.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a21      	ldr	r2, [pc, #132]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005130:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a14      	ldr	r2, [pc, #80]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005168:	d004      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a10      	ldr	r2, [pc, #64]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10c      	bne.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800517a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40014000 	.word	0x40014000

080051b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e040      	b.n	8005248 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fc f968 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	@ 0x24
 80051e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fade 	bl	80057bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f8af 	bl	8005364 <UART_SetConfig>
 8005206:	4603      	mov	r3, r0
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e01b      	b.n	8005248 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800521e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800522e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb5d 	bl	8005900 <UART_CheckIdleState>
 8005246:	4603      	mov	r3, r0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	@ 0x28
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005264:	2b20      	cmp	r3, #32
 8005266:	d177      	bne.n	8005358 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_UART_Transmit+0x24>
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e070      	b.n	800535a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2221      	movs	r2, #33	@ 0x21
 8005284:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005286:	f7fc fab5 	bl	80017f4 <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a4:	d108      	bne.n	80052b8 <HAL_UART_Transmit+0x68>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	e003      	b.n	80052c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052c0:	e02f      	b.n	8005322 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2180      	movs	r1, #128	@ 0x80
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fbbf 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e03b      	b.n	800535a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	881a      	ldrh	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f4:	b292      	uxth	r2, r2
 80052f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	3302      	adds	r3, #2
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e007      	b.n	8005310 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3301      	adds	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1c9      	bne.n	80052c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2200      	movs	r2, #0
 8005336:	2140      	movs	r1, #64	@ 0x40
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fb89 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e005      	b.n	800535a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	e000      	b.n	800535a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b08a      	sub	sp, #40	@ 0x28
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	431a      	orrs	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	431a      	orrs	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4313      	orrs	r3, r2
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4bb4      	ldr	r3, [pc, #720]	@ (8005664 <UART_SetConfig+0x300>)
 8005394:	4013      	ands	r3, r2
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800539c:	430b      	orrs	r3, r1
 800539e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4aa9      	ldr	r2, [pc, #676]	@ (8005668 <UART_SetConfig+0x304>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053cc:	4313      	orrs	r3, r2
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e0:	430a      	orrs	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4aa0      	ldr	r2, [pc, #640]	@ (800566c <UART_SetConfig+0x308>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d126      	bne.n	800543c <UART_SetConfig+0xd8>
 80053ee:	4ba0      	ldr	r3, [pc, #640]	@ (8005670 <UART_SetConfig+0x30c>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d81b      	bhi.n	8005434 <UART_SetConfig+0xd0>
 80053fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005404 <UART_SetConfig+0xa0>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005415 	.word	0x08005415
 8005408:	08005425 	.word	0x08005425
 800540c:	0800541d 	.word	0x0800541d
 8005410:	0800542d 	.word	0x0800542d
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541a:	e080      	b.n	800551e <UART_SetConfig+0x1ba>
 800541c:	2302      	movs	r3, #2
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005422:	e07c      	b.n	800551e <UART_SetConfig+0x1ba>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800542a:	e078      	b.n	800551e <UART_SetConfig+0x1ba>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005432:	e074      	b.n	800551e <UART_SetConfig+0x1ba>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543a:	e070      	b.n	800551e <UART_SetConfig+0x1ba>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a8c      	ldr	r2, [pc, #560]	@ (8005674 <UART_SetConfig+0x310>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d138      	bne.n	80054b8 <UART_SetConfig+0x154>
 8005446:	4b8a      	ldr	r3, [pc, #552]	@ (8005670 <UART_SetConfig+0x30c>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544c:	f003 030c 	and.w	r3, r3, #12
 8005450:	2b0c      	cmp	r3, #12
 8005452:	d82d      	bhi.n	80054b0 <UART_SetConfig+0x14c>
 8005454:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <UART_SetConfig+0xf8>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005491 	.word	0x08005491
 8005460:	080054b1 	.word	0x080054b1
 8005464:	080054b1 	.word	0x080054b1
 8005468:	080054b1 	.word	0x080054b1
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054b1 	.word	0x080054b1
 8005474:	080054b1 	.word	0x080054b1
 8005478:	080054b1 	.word	0x080054b1
 800547c:	08005499 	.word	0x08005499
 8005480:	080054b1 	.word	0x080054b1
 8005484:	080054b1 	.word	0x080054b1
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054a9 	.word	0x080054a9
 8005490:	2300      	movs	r3, #0
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005496:	e042      	b.n	800551e <UART_SetConfig+0x1ba>
 8005498:	2302      	movs	r3, #2
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549e:	e03e      	b.n	800551e <UART_SetConfig+0x1ba>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a6:	e03a      	b.n	800551e <UART_SetConfig+0x1ba>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ae:	e036      	b.n	800551e <UART_SetConfig+0x1ba>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b6:	e032      	b.n	800551e <UART_SetConfig+0x1ba>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a6a      	ldr	r2, [pc, #424]	@ (8005668 <UART_SetConfig+0x304>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d12a      	bne.n	8005518 <UART_SetConfig+0x1b4>
 80054c2:	4b6b      	ldr	r3, [pc, #428]	@ (8005670 <UART_SetConfig+0x30c>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054d0:	d01a      	beq.n	8005508 <UART_SetConfig+0x1a4>
 80054d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054d6:	d81b      	bhi.n	8005510 <UART_SetConfig+0x1ac>
 80054d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054dc:	d00c      	beq.n	80054f8 <UART_SetConfig+0x194>
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e2:	d815      	bhi.n	8005510 <UART_SetConfig+0x1ac>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <UART_SetConfig+0x18c>
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ec:	d008      	beq.n	8005500 <UART_SetConfig+0x19c>
 80054ee:	e00f      	b.n	8005510 <UART_SetConfig+0x1ac>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f6:	e012      	b.n	800551e <UART_SetConfig+0x1ba>
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fe:	e00e      	b.n	800551e <UART_SetConfig+0x1ba>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005506:	e00a      	b.n	800551e <UART_SetConfig+0x1ba>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550e:	e006      	b.n	800551e <UART_SetConfig+0x1ba>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005516:	e002      	b.n	800551e <UART_SetConfig+0x1ba>
 8005518:	2310      	movs	r3, #16
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a51      	ldr	r2, [pc, #324]	@ (8005668 <UART_SetConfig+0x304>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d17a      	bne.n	800561e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005528:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800552c:	2b08      	cmp	r3, #8
 800552e:	d824      	bhi.n	800557a <UART_SetConfig+0x216>
 8005530:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <UART_SetConfig+0x1d4>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800555d 	.word	0x0800555d
 800553c:	0800557b 	.word	0x0800557b
 8005540:	08005565 	.word	0x08005565
 8005544:	0800557b 	.word	0x0800557b
 8005548:	0800556b 	.word	0x0800556b
 800554c:	0800557b 	.word	0x0800557b
 8005550:	0800557b 	.word	0x0800557b
 8005554:	0800557b 	.word	0x0800557b
 8005558:	08005573 	.word	0x08005573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800555c:	f7fe ff82 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 8005560:	61f8      	str	r0, [r7, #28]
        break;
 8005562:	e010      	b.n	8005586 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b44      	ldr	r3, [pc, #272]	@ (8005678 <UART_SetConfig+0x314>)
 8005566:	61fb      	str	r3, [r7, #28]
        break;
 8005568:	e00d      	b.n	8005586 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7fe fee3 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 800556e:	61f8      	str	r0, [r7, #28]
        break;
 8005570:	e009      	b.n	8005586 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005576:	61fb      	str	r3, [r7, #28]
        break;
 8005578:	e005      	b.n	8005586 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005584:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8107 	beq.w	800579c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	429a      	cmp	r2, r3
 800559c:	d305      	bcc.n	80055aa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d903      	bls.n	80055b2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055b0:	e0f4      	b.n	800579c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	2200      	movs	r2, #0
 80055b6:	461c      	mov	r4, r3
 80055b8:	4615      	mov	r5, r2
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	022b      	lsls	r3, r5, #8
 80055c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055c8:	0222      	lsls	r2, r4, #8
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	6849      	ldr	r1, [r1, #4]
 80055ce:	0849      	lsrs	r1, r1, #1
 80055d0:	2000      	movs	r0, #0
 80055d2:	4688      	mov	r8, r1
 80055d4:	4681      	mov	r9, r0
 80055d6:	eb12 0a08 	adds.w	sl, r2, r8
 80055da:	eb43 0b09 	adc.w	fp, r3, r9
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ec:	4650      	mov	r0, sl
 80055ee:	4659      	mov	r1, fp
 80055f0:	f7fa fdec 	bl	80001cc <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4613      	mov	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005602:	d308      	bcc.n	8005616 <UART_SetConfig+0x2b2>
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800560a:	d204      	bcs.n	8005616 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	e0c2      	b.n	800579c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800561c:	e0be      	b.n	800579c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005626:	d16a      	bne.n	80056fe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800562c:	2b08      	cmp	r3, #8
 800562e:	d834      	bhi.n	800569a <UART_SetConfig+0x336>
 8005630:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <UART_SetConfig+0x2d4>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800565d 	.word	0x0800565d
 800563c:	0800567d 	.word	0x0800567d
 8005640:	08005685 	.word	0x08005685
 8005644:	0800569b 	.word	0x0800569b
 8005648:	0800568b 	.word	0x0800568b
 800564c:	0800569b 	.word	0x0800569b
 8005650:	0800569b 	.word	0x0800569b
 8005654:	0800569b 	.word	0x0800569b
 8005658:	08005693 	.word	0x08005693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800565c:	f7fe ff02 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 8005660:	61f8      	str	r0, [r7, #28]
        break;
 8005662:	e020      	b.n	80056a6 <UART_SetConfig+0x342>
 8005664:	efff69f3 	.word	0xefff69f3
 8005668:	40008000 	.word	0x40008000
 800566c:	40013800 	.word	0x40013800
 8005670:	40021000 	.word	0x40021000
 8005674:	40004400 	.word	0x40004400
 8005678:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fe ff08 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 8005680:	61f8      	str	r0, [r7, #28]
        break;
 8005682:	e010      	b.n	80056a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005684:	4b4c      	ldr	r3, [pc, #304]	@ (80057b8 <UART_SetConfig+0x454>)
 8005686:	61fb      	str	r3, [r7, #28]
        break;
 8005688:	e00d      	b.n	80056a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568a:	f7fe fe53 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 800568e:	61f8      	str	r0, [r7, #28]
        break;
 8005690:	e009      	b.n	80056a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005696:	61fb      	str	r3, [r7, #28]
        break;
 8005698:	e005      	b.n	80056a6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d077      	beq.n	800579c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005a      	lsls	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	441a      	add	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b0f      	cmp	r3, #15
 80056c6:	d916      	bls.n	80056f6 <UART_SetConfig+0x392>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ce:	d212      	bcs.n	80056f6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f023 030f 	bic.w	r3, r3, #15
 80056d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	8afb      	ldrh	r3, [r7, #22]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	8afa      	ldrh	r2, [r7, #22]
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	e052      	b.n	800579c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056fc:	e04e      	b.n	800579c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005702:	2b08      	cmp	r3, #8
 8005704:	d827      	bhi.n	8005756 <UART_SetConfig+0x3f2>
 8005706:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <UART_SetConfig+0x3a8>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005731 	.word	0x08005731
 8005710:	08005739 	.word	0x08005739
 8005714:	08005741 	.word	0x08005741
 8005718:	08005757 	.word	0x08005757
 800571c:	08005747 	.word	0x08005747
 8005720:	08005757 	.word	0x08005757
 8005724:	08005757 	.word	0x08005757
 8005728:	08005757 	.word	0x08005757
 800572c:	0800574f 	.word	0x0800574f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005730:	f7fe fe98 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 8005734:	61f8      	str	r0, [r7, #28]
        break;
 8005736:	e014      	b.n	8005762 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7fe feaa 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 800573c:	61f8      	str	r0, [r7, #28]
        break;
 800573e:	e010      	b.n	8005762 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005740:	4b1d      	ldr	r3, [pc, #116]	@ (80057b8 <UART_SetConfig+0x454>)
 8005742:	61fb      	str	r3, [r7, #28]
        break;
 8005744:	e00d      	b.n	8005762 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7fe fdf5 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 800574a:	61f8      	str	r0, [r7, #28]
        break;
 800574c:	e009      	b.n	8005762 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005752:	61fb      	str	r3, [r7, #28]
        break;
 8005754:	e005      	b.n	8005762 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005760:	bf00      	nop
    }

    if (pclk != 0U)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d019      	beq.n	800579c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	085a      	lsrs	r2, r3, #1
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d909      	bls.n	8005796 <UART_SetConfig+0x432>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005788:	d205      	bcs.n	8005796 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60da      	str	r2, [r3, #12]
 8005794:	e002      	b.n	800579c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3728      	adds	r7, #40	@ 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b6:	bf00      	nop
 80057b8:	00f42400 	.word	0x00f42400

080057bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ba:	d10a      	bne.n	80058d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b098      	sub	sp, #96	@ 0x60
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005910:	f7fb ff70 	bl	80017f4 <HAL_GetTick>
 8005914:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b08      	cmp	r3, #8
 8005922:	d12e      	bne.n	8005982 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592c:	2200      	movs	r2, #0
 800592e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f88c 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d021      	beq.n	8005982 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005952:	653b      	str	r3, [r7, #80]	@ 0x50
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800595c:	647b      	str	r3, [r7, #68]	@ 0x44
 800595e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800596a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e6      	bne.n	800593e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e062      	b.n	8005a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d149      	bne.n	8005a24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005990:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005998:	2200      	movs	r2, #0
 800599a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f856 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d03c      	beq.n	8005a24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	623b      	str	r3, [r7, #32]
   return(result);
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fc:	61fa      	str	r2, [r7, #28]
 80059fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e011      	b.n	8005a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3758      	adds	r7, #88	@ 0x58
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a60:	e04f      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d04b      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fb fec3 	bl	80017f4 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e04e      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d037      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b80      	cmp	r3, #128	@ 0x80
 8005a96:	d034      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d031      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d110      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f838 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2208      	movs	r2, #8
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e029      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005adc:	d111      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f81e 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e00f      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d0a0      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b095      	sub	sp, #84	@ 0x54
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b50:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d118      	bne.n	8005bd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f023 0310 	bic.w	r3, r3, #16
 8005bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005be6:	bf00      	nop
 8005be8:	3754      	adds	r7, #84	@ 0x54
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e056      	b.n	8005cb8 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7fb fc46 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2224      	movs	r2, #36	@ 0x24
 8005c24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fdbc 	bl	80057bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff fb8d 	bl	8005364 <UART_SetConfig>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e031      	b.n	8005cb8 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c62:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	055b      	lsls	r3, r3, #21
 8005c7c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8005c92:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	6979      	ldr	r1, [r7, #20]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fe25 	bl	8005900 <UART_CheckIdleState>
 8005cb6:	4603      	mov	r3, r0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <memset>:
 8005cc0:	4402      	add	r2, r0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d100      	bne.n	8005cca <memset+0xa>
 8005cc8:	4770      	bx	lr
 8005cca:	f803 1b01 	strb.w	r1, [r3], #1
 8005cce:	e7f9      	b.n	8005cc4 <memset+0x4>

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005d08 <__libc_init_array+0x38>)
 8005cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8005d0c <__libc_init_array+0x3c>)
 8005cd6:	1b64      	subs	r4, r4, r5
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	2600      	movs	r6, #0
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8005d10 <__libc_init_array+0x40>)
 8005ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8005d14 <__libc_init_array+0x44>)
 8005ce4:	f000 f818 	bl	8005d18 <_init>
 8005ce8:	1b64      	subs	r4, r4, r5
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	2600      	movs	r6, #0
 8005cee:	42a6      	cmp	r6, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf8:	4798      	blx	r3
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d02:	4798      	blx	r3
 8005d04:	3601      	adds	r6, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	08005f80 	.word	0x08005f80
 8005d0c:	08005f80 	.word	0x08005f80
 8005d10:	08005f80 	.word	0x08005f80
 8005d14:	08005f84 	.word	0x08005f84

08005d18 <_init>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	bf00      	nop
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr

08005d24 <_fini>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	bf00      	nop
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr
