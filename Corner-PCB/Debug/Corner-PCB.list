
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a8c  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c64  08005c64  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c64  08005c64  00006c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c6c  08005c6c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c6c  08005c6c  00006c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005c74  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08005c80  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005c80  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2aa  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9a  00000000  00000000  000222e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00025e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ea  00000000  00000000  000276c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004565  00000000  00000000  000289b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea8a  00000000  00000000  0002cf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2a03  00000000  00000000  0004b9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  0012e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00134bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c04 	.word	0x08005c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08005c04 	.word	0x08005c04

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a20:	f000 b988 	b.w	8000d34 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	468e      	mov	lr, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	4688      	mov	r8, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d962      	bls.n	8000b18 <__udivmoddi4+0xdc>
 8000a52:	fab2 f682 	clz	r6, r2
 8000a56:	b14e      	cbz	r6, 8000a6c <__udivmoddi4+0x30>
 8000a58:	f1c6 0320 	rsb	r3, r6, #32
 8000a5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a60:	fa20 f303 	lsr.w	r3, r0, r3
 8000a64:	40b7      	lsls	r7, r6
 8000a66:	ea43 0808 	orr.w	r8, r3, r8
 8000a6a:	40b4      	lsls	r4, r6
 8000a6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a78:	0c23      	lsrs	r3, r4, #16
 8000a7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fb01 f20c 	mul.w	r2, r1, ip
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d909      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a90:	f080 80ea 	bcs.w	8000c68 <__udivmoddi4+0x22c>
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f240 80e7 	bls.w	8000c68 <__udivmoddi4+0x22c>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	443b      	add	r3, r7
 8000a9e:	1a9a      	subs	r2, r3, r2
 8000aa0:	b2a3      	uxth	r3, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab2:	459c      	cmp	ip, r3
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0x8e>
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000abc:	f080 80d6 	bcs.w	8000c6c <__udivmoddi4+0x230>
 8000ac0:	459c      	cmp	ip, r3
 8000ac2:	f240 80d3 	bls.w	8000c6c <__udivmoddi4+0x230>
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3802      	subs	r0, #2
 8000aca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ace:	eba3 030c 	sub.w	r3, r3, ip
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11d      	cbz	r5, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40f3      	lsrs	r3, r6
 8000ad8:	2200      	movs	r2, #0
 8000ada:	e9c5 3200 	strd	r3, r2, [r5]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d905      	bls.n	8000af2 <__udivmoddi4+0xb6>
 8000ae6:	b10d      	cbz	r5, 8000aec <__udivmoddi4+0xb0>
 8000ae8:	e9c5 0100 	strd	r0, r1, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4608      	mov	r0, r1
 8000af0:	e7f5      	b.n	8000ade <__udivmoddi4+0xa2>
 8000af2:	fab3 f183 	clz	r1, r3
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d146      	bne.n	8000b88 <__udivmoddi4+0x14c>
 8000afa:	4573      	cmp	r3, lr
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xc8>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 8105 	bhi.w	8000d0e <__udivmoddi4+0x2d2>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d0e5      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b12:	e9c5 4800 	strd	r4, r8, [r5]
 8000b16:	e7e2      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	f000 8090 	beq.w	8000c3e <__udivmoddi4+0x202>
 8000b1e:	fab2 f682 	clz	r6, r2
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	f040 80a4 	bne.w	8000c70 <__udivmoddi4+0x234>
 8000b28:	1a8a      	subs	r2, r1, r2
 8000b2a:	0c03      	lsrs	r3, r0, #16
 8000b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b30:	b280      	uxth	r0, r0
 8000b32:	b2bc      	uxth	r4, r7
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b42:	fb04 f20c 	mul.w	r2, r4, ip
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d907      	bls.n	8000b5a <__udivmoddi4+0x11e>
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b50:	d202      	bcs.n	8000b58 <__udivmoddi4+0x11c>
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f200 80e0 	bhi.w	8000d18 <__udivmoddi4+0x2dc>
 8000b58:	46c4      	mov	ip, r8
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b68:	fb02 f404 	mul.w	r4, r2, r4
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x144>
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x142>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f200 80ca 	bhi.w	8000d12 <__udivmoddi4+0x2d6>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	1b1b      	subs	r3, r3, r4
 8000b82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b88:	f1c1 0620 	rsb	r6, r1, #32
 8000b8c:	408b      	lsls	r3, r1
 8000b8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b92:	431f      	orrs	r7, r3
 8000b94:	fa0e f401 	lsl.w	r4, lr, r1
 8000b98:	fa20 f306 	lsr.w	r3, r0, r6
 8000b9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ba0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	fa1f fc87 	uxth.w	ip, r7
 8000bae:	fbbe f0f9 	udiv	r0, lr, r9
 8000bb2:	0c1c      	lsrs	r4, r3, #16
 8000bb4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x1a0>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000bce:	f080 809c 	bcs.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f240 8099 	bls.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	fa1f fe83 	uxth.w	lr, r3
 8000be4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bf0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf4:	45a4      	cmp	ip, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x1ce>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000bfe:	f080 8082 	bcs.w	8000d06 <__udivmoddi4+0x2ca>
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d97f      	bls.n	8000d06 <__udivmoddi4+0x2ca>
 8000c06:	3b02      	subs	r3, #2
 8000c08:	443c      	add	r4, r7
 8000c0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c16:	4564      	cmp	r4, ip
 8000c18:	4673      	mov	r3, lr
 8000c1a:	46e1      	mov	r9, ip
 8000c1c:	d362      	bcc.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c1e:	d05f      	beq.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c20:	b15d      	cbz	r5, 8000c3a <__udivmoddi4+0x1fe>
 8000c22:	ebb8 0203 	subs.w	r2, r8, r3
 8000c26:	eb64 0409 	sbc.w	r4, r4, r9
 8000c2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c32:	431e      	orrs	r6, r3
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	e74f      	b.n	8000ade <__udivmoddi4+0xa2>
 8000c3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c42:	0c01      	lsrs	r1, r0, #16
 8000c44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4638      	mov	r0, r7
 8000c52:	463c      	mov	r4, r7
 8000c54:	46b8      	mov	r8, r7
 8000c56:	46be      	mov	lr, r7
 8000c58:	2620      	movs	r6, #32
 8000c5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c5e:	eba2 0208 	sub.w	r2, r2, r8
 8000c62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c66:	e766      	b.n	8000b36 <__udivmoddi4+0xfa>
 8000c68:	4601      	mov	r1, r0
 8000c6a:	e718      	b.n	8000a9e <__udivmoddi4+0x62>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	e72c      	b.n	8000aca <__udivmoddi4+0x8e>
 8000c70:	f1c6 0220 	rsb	r2, r6, #32
 8000c74:	fa2e f302 	lsr.w	r3, lr, r2
 8000c78:	40b7      	lsls	r7, r6
 8000c7a:	40b1      	lsls	r1, r6
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	430a      	orrs	r2, r1
 8000c86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb08 f904 	mul.w	r9, r8, r4
 8000c9a:	40b0      	lsls	r0, r6
 8000c9c:	4589      	cmp	r9, r1
 8000c9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ca2:	b280      	uxth	r0, r0
 8000ca4:	d93e      	bls.n	8000d24 <__udivmoddi4+0x2e8>
 8000ca6:	1879      	adds	r1, r7, r1
 8000ca8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cac:	d201      	bcs.n	8000cb2 <__udivmoddi4+0x276>
 8000cae:	4589      	cmp	r9, r1
 8000cb0:	d81f      	bhi.n	8000cf2 <__udivmoddi4+0x2b6>
 8000cb2:	eba1 0109 	sub.w	r1, r1, r9
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc2:	b292      	uxth	r2, r2
 8000cc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc8:	4542      	cmp	r2, r8
 8000cca:	d229      	bcs.n	8000d20 <__udivmoddi4+0x2e4>
 8000ccc:	18ba      	adds	r2, r7, r2
 8000cce:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000cd2:	d2c4      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd4:	4542      	cmp	r2, r8
 8000cd6:	d2c2      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd8:	f1a9 0102 	sub.w	r1, r9, #2
 8000cdc:	443a      	add	r2, r7
 8000cde:	e7be      	b.n	8000c5e <__udivmoddi4+0x222>
 8000ce0:	45f0      	cmp	r8, lr
 8000ce2:	d29d      	bcs.n	8000c20 <__udivmoddi4+0x1e4>
 8000ce4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cec:	3801      	subs	r0, #1
 8000cee:	46e1      	mov	r9, ip
 8000cf0:	e796      	b.n	8000c20 <__udivmoddi4+0x1e4>
 8000cf2:	eba7 0909 	sub.w	r9, r7, r9
 8000cf6:	4449      	add	r1, r9
 8000cf8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cfc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d00:	fb09 f804 	mul.w	r8, r9, r4
 8000d04:	e7db      	b.n	8000cbe <__udivmoddi4+0x282>
 8000d06:	4673      	mov	r3, lr
 8000d08:	e77f      	b.n	8000c0a <__udivmoddi4+0x1ce>
 8000d0a:	4650      	mov	r0, sl
 8000d0c:	e766      	b.n	8000bdc <__udivmoddi4+0x1a0>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e6fd      	b.n	8000b0e <__udivmoddi4+0xd2>
 8000d12:	443b      	add	r3, r7
 8000d14:	3a02      	subs	r2, #2
 8000d16:	e733      	b.n	8000b80 <__udivmoddi4+0x144>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	443b      	add	r3, r7
 8000d1e:	e71c      	b.n	8000b5a <__udivmoddi4+0x11e>
 8000d20:	4649      	mov	r1, r9
 8000d22:	e79c      	b.n	8000c5e <__udivmoddi4+0x222>
 8000d24:	eba1 0109 	sub.w	r1, r1, r9
 8000d28:	46c4      	mov	ip, r8
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fb09 f804 	mul.w	r8, r9, r4
 8000d32:	e7c4      	b.n	8000cbe <__udivmoddi4+0x282>

08000d34 <__aeabi_idiv0>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d50:	4a29      	ldr	r2, [pc, #164]	@ (8000df8 <MX_ADC1_Init+0xc0>)
 8000d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d54:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dae:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000db0:	f001 f814 	bl	8001ddc <HAL_ADC_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000dba:	f000 fae6 	bl	800138a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_ADC1_Init+0xc4>)
 8000dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dca:	237f      	movs	r3, #127	@ 0x7f
 8000dcc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000ddc:	f001 f9e2 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000de6:	f000 fad0 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000028 	.word	0x20000028
 8000df8:	50040000 	.word	0x50040000
 8000dfc:	19200040 	.word	0x19200040

08000e00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09e      	sub	sp, #120	@ 0x78
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2254      	movs	r2, #84	@ 0x54
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fec2 	bl	8005baa <memset>
  if(adcHandle->Instance==ADC1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f18 <HAL_ADC_MspInit+0x118>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d16e      	bne.n	8000f0e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e44:	2308      	movs	r3, #8
 8000e46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fbf2 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e6a:	f000 fa8e 	bl	800138a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a2a      	ldr	r2, [pc, #168]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = LIN_POT_IN_Pin;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(LIN_POT_IN_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb4:	f002 fa78 	bl	80033a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000eba:	4a1a      	ldr	r2, [pc, #104]	@ (8000f24 <HAL_ADC_MspInit+0x124>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000edc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ee8:	2220      	movs	r2, #32
 8000eea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ef2:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ef4:	f002 f860 	bl	8002fb8 <HAL_DMA_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000efe:	f000 fa44 	bl	800138a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000f06:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f08:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3778      	adds	r7, #120	@ 0x78
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	50040000 	.word	0x50040000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	40020008 	.word	0x40020008

08000f28 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	@ (8000f90 <MX_CAN1_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f46:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000f4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f52:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f7a:	f001 fe0f 	bl	8002b9c <HAL_CAN_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f84:	f000 fa01 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000d4 	.word	0x200000d4
 8000f90:	40006400 	.word	0x40006400

08000f94 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <HAL_CAN_MspInit+0xa4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d13b      	bne.n	800102e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	4a20      	ldr	r2, [pc, #128]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fe6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff8:	2309      	movs	r3, #9
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f002 f9cf 	bl	80033a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800101c:	2309      	movs	r3, #9
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102a:	f002 f9bd 	bl	80033a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40006400 	.word	0x40006400
 800103c:	40021000 	.word	0x40021000

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_DMA_Init+0x38>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <MX_DMA_Init+0x38>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_DMA_Init+0x38>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200b      	movs	r0, #11
 8001064:	f001 ff71 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001068:	200b      	movs	r0, #11
 800106a:	f001 ff8a 	bl	8002f82 <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <MX_GPIO_Init+0xd0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <MX_GPIO_Init+0xd0>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109e:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a27      	ldr	r2, [pc, #156]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a21      	ldr	r2, [pc, #132]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_EN_GPIO_Port, ADS_EN_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2110      	movs	r1, #16
 80010de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e2:	f002 facb 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4819      	ldr	r0, [pc, #100]	@ (8001150 <MX_GPIO_Init+0xd4>)
 80010ec:	f002 fac6 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADS_EN_Pin */
  GPIO_InitStruct.Pin = ADS_EN_Pin;
 80010f0:	2310      	movs	r3, #16
 80010f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADS_EN_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110a:	f002 f94d 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4619      	mov	r1, r3
 8001124:	480a      	ldr	r0, [pc, #40]	@ (8001150 <MX_GPIO_Init+0xd4>)
 8001126:	f002 f93f 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 800112a:	2310      	movs	r3, #16
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <MX_GPIO_Init+0xd4>)
 800113e:	f002 f933 	bl	80033a8 <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800115a:	4a1c      	ldr	r2, [pc, #112]	@ (80011cc <MX_I2C1_Init+0x78>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001160:	4a1b      	ldr	r2, [pc, #108]	@ (80011d0 <MX_I2C1_Init+0x7c>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800116c:	2201      	movs	r2, #1
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118e:	480e      	ldr	r0, [pc, #56]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001190:	f002 fa8c 	bl	80036ac <HAL_I2C_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800119a:	f000 f8f6 	bl	800138a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <MX_I2C1_Init+0x74>)
 80011a2:	f002 fb1e 	bl	80037e2 <HAL_I2CEx_ConfigAnalogFilter>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 f8ed 	bl	800138a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_I2C1_Init+0x74>)
 80011b4:	f002 fb60 	bl	8003878 <HAL_I2CEx_ConfigDigitalFilter>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 f8e4 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000fc 	.word	0x200000fc
 80011cc:	40005400 	.word	0x40005400
 80011d0:	00f12981 	.word	0x00f12981

080011d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b09e      	sub	sp, #120	@ 0x78
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2254      	movs	r2, #84	@ 0x54
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fcd8 	bl	8005baa <memset>
  if(i2cHandle->Instance==I2C1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001278 <HAL_I2C_MspInit+0xa4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d135      	bne.n	8001270 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fa19 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800121c:	f000 f8b5 	bl	800138a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4a15      	ldr	r2, [pc, #84]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001238:	23c0      	movs	r3, #192	@ 0xc0
 800123a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123c:	2312      	movs	r3, #18
 800123e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001248:	2304      	movs	r3, #4
 800124a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001250:	4619      	mov	r1, r3
 8001252:	480b      	ldr	r0, [pc, #44]	@ (8001280 <HAL_I2C_MspInit+0xac>)
 8001254:	f002 f8a8 	bl	80033a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125c:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 800125e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001262:	6593      	str	r3, [r2, #88]	@ 0x58
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3778      	adds	r7, #120	@ 0x78
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40005400 	.word	0x40005400
 800127c:	40021000 	.word	0x40021000
 8001280:	48000400 	.word	0x48000400

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f000 fb6b 	bl	8001962 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 f82c 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f7ff fef4 	bl	800107c <MX_GPIO_Init>
  MX_DMA_Init();
 8001294:	f7ff fed4 	bl	8001040 <MX_DMA_Init>
  MX_ADC1_Init();
 8001298:	f7ff fd4e 	bl	8000d38 <MX_ADC1_Init>
  MX_TIM1_Init();
 800129c:	f000 f9ba 	bl	8001614 <MX_TIM1_Init>
  MX_CAN1_Init();
 80012a0:	f7ff fe42 	bl	8000f28 <MX_CAN1_Init>
  MX_I2C1_Init();
 80012a4:	f7ff ff56 	bl	8001154 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012a8:	f000 f8c4 	bl	8001434 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80012ac:	f000 fa26 	bl	80016fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012b0:	f000 fa54 	bl	800175c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  linpot_status = initializeLinPot(&hadc1);
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <main+0x58>)
 80012b6:	f000 f86f 	bl	8001398 <initializeLinPot>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <main+0x5c>)
 80012c0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		initializeLinPot(&hadc1);
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <main+0x58>)
 80012c4:	f000 f868 	bl	8001398 <initializeLinPot>
		linpot_reading = getLinPotTravel();
 80012c8:	f000 f87e 	bl	80013c8 <getLinPotTravel>
 80012cc:	eef0 7a40 	vmov.f32	s15, s0
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <main+0x60>)
 80012d2:	edc3 7a00 	vstr	s15, [r3]
		initializeLinPot(&hadc1);
 80012d6:	bf00      	nop
 80012d8:	e7f3      	b.n	80012c2 <main+0x3e>
 80012da:	bf00      	nop
 80012dc:	20000028 	.word	0x20000028
 80012e0:	20000150 	.word	0x20000150
 80012e4:	20000154 	.word	0x20000154

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b096      	sub	sp, #88	@ 0x58
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2244      	movs	r2, #68	@ 0x44
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fc57 	bl	8005baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800130a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800130e:	f002 fb0d 	bl	800392c <HAL_PWREx_ControlVoltageScaling>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001318:	f000 f837 	bl	800138a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001324:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2310      	movs	r3, #16
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132e:	2302      	movs	r3, #2
 8001330:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001336:	230a      	movs	r3, #10
 8001338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800133a:	2307      	movs	r3, #7
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fb44 	bl	80039d8 <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001356:	f000 f818 	bl	800138a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2303      	movs	r3, #3
 8001360:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f002 ff44 	bl	8004200 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137e:	f000 f804 	bl	800138a <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3758      	adds	r7, #88	@ 0x58
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138e:	b672      	cpsid	i
}
 8001390:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001392:	bf00      	nop
 8001394:	e7fd      	b.n	8001392 <Error_Handler+0x8>
	...

08001398 <initializeLinPot>:
uint8_t MLX_sample[32];

uint16_t adcBuffer[1];
//float linpot_reading;

bool initializeLinPot(ADC_HandleTypeDef* adcInstance) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_Start_DMA(adcInstance, (uint32_t*) adcBuffer, 1) != HAL_OK) {
 80013a0:	2201      	movs	r2, #1
 80013a2:	4907      	ldr	r1, [pc, #28]	@ (80013c0 <initializeLinPot+0x28>)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fe5b 	bl	8002060 <HAL_ADC_Start_DMA>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <initializeLinPot+0x1c>
		return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e000      	b.n	80013b6 <initializeLinPot+0x1e>
	}
	return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000158 	.word	0x20000158
 80013c4:	00000000 	.word	0x00000000

080013c8 <getLinPotTravel>:
	float strain = (voltageReading/3.3*SG_GF);
	float stress = strain*YG_MODULUS;
	return (10*stress*crossSectionalArea);
}

float getLinPotTravel() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	float position_mm = ((float)adcBuffer[0] / 4095.0) * LINPOT_STROKE_LENGTH;
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <getLinPotTravel+0x68>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013da:	ee17 0a90 	vmov	r0, s15
 80013de:	f7ff f85b 	bl	8000498 <__aeabi_f2d>
 80013e2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001420 <getLinPotTravel+0x58>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f9d8 	bl	800079c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	a30c      	add	r3, pc, #48	@ (adr r3, 8001428 <getLinPotTravel+0x60>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fab1 	bl	800096c <__aeabi_d2f>
 800140a:	4603      	mov	r3, r0
 800140c:	607b      	str	r3, [r7, #4]
	return position_mm;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	00000000 	.word	0x00000000
 8001424:	40affe00 	.word	0x40affe00
 8001428:	00000000 	.word	0x00000000
 800142c:	4052c000 	.word	0x4052c000
 8001430:	20000158 	.word	0x20000158

08001434 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <MX_SPI1_Init+0x74>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ac <MX_SPI1_Init+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001440:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <MX_SPI1_Init+0x74>)
 800144e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001452:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <MX_SPI1_Init+0x74>)
 800145c:	2201      	movs	r2, #1
 800145e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001466:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_SPI1_Init+0x74>)
 800146a:	2220      	movs	r2, #32
 800146c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_SPI1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001482:	2207      	movs	r2, #7
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_SPI1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_SPI1_Init+0x74>)
 8001494:	f003 fbc0 	bl	8004c18 <HAL_SPI_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800149e:	f7ff ff74 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000015c 	.word	0x2000015c
 80014ac:	40013000 	.word	0x40013000

080014b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_SPI_MspInit+0x7c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d128      	bne.n	8001524 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_SPI_MspInit+0x80>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d6:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <HAL_SPI_MspInit+0x80>)
 80014d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_SPI_MspInit+0x80>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_SPI_MspInit+0x80>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <HAL_SPI_MspInit+0x80>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_SPI_MspInit+0x80>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001502:	23e0      	movs	r3, #224	@ 0xe0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001512:	2305      	movs	r3, #5
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001520:	f001 ff42 	bl	80033a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	@ 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40013000 	.word	0x40013000
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <HAL_MspInit+0x44>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6613      	str	r3, [r2, #96]	@ 0x60
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_MspInit+0x44>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_MspInit+0x44>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	@ 0x58
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_MspInit+0x44>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <MemManage_Handler+0x4>

08001594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 fa1b 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <DMA1_Channel1_IRQHandler+0x10>)
 80015e2:	f001 fe01 	bl	80031e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000008c 	.word	0x2000008c

080015f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001634:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <MX_TIM1_Init+0xa4>)
 8001636:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800163a:	2204      	movs	r2, #4
 800163c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800165e:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001660:	f003 fb7d 	bl	8004d5e <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800166a:	f7ff fe8e 	bl	800138a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800167c:	f003 fbc6 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001686:	f7ff fe80 	bl	800138a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800169c:	f003 fd8a 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016a6:	f7ff fe70 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200001c0 	.word	0x200001c0
 80016b8:	40012c00 	.word	0x40012c00

080016bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <HAL_TIM_Base_MspInit+0x38>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10b      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_TIM_Base_MspInit+0x3c>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d2:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <HAL_TIM_Base_MspInit+0x3c>)
 80016d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <HAL_TIM_Base_MspInit+0x3c>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000

080016fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001702:	4a15      	ldr	r2, [pc, #84]	@ (8001758 <MX_USART1_UART_Init+0x5c>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001706:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_USART1_UART_Init+0x58>)
 8001740:	f003 fd9e 	bl	8005280 <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800174a:	f7ff fe1e 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000020c 	.word	0x2000020c
 8001758:	40013800 	.word	0x40013800

0800175c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <MX_USART2_UART_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 80017a0:	f003 fd6e 	bl	8005280 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017aa:	f7ff fdee 	bl	800138a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000294 	.word	0x20000294
 80017b8:	40004400 	.word	0x40004400

080017bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0a0      	sub	sp, #128	@ 0x80
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	2254      	movs	r2, #84	@ 0x54
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 f9e4 	bl	8005baa <memset>
  if(uartHandle->Instance==USART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a47      	ldr	r2, [pc, #284]	@ (8001904 <HAL_UART_MspInit+0x148>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d138      	bne.n	800185e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 ff25 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001804:	f7ff fdc1 	bl	800138a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001808:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800180c:	4a3e      	ldr	r2, [pc, #248]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 800180e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001812:	6613      	str	r3, [r2, #96]	@ 0x60
 8001814:	4b3c      	ldr	r3, [pc, #240]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001824:	4a38      	ldr	r2, [pc, #224]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182c:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001838:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800183c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800184a:	2307      	movs	r3, #7
 800184c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001858:	f001 fda6 	bl	80033a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800185c:	e04d      	b.n	80018fa <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2a      	ldr	r2, [pc, #168]	@ (800190c <HAL_UART_MspInit+0x150>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d148      	bne.n	80018fa <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800186c:	2300      	movs	r3, #0
 800186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fee7 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001880:	f7ff fd83 	bl	800138a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001884:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 800188a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800188e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001890:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a0:	4a19      	ldr	r2, [pc, #100]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a8:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <HAL_UART_MspInit+0x14c>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c4:	2307      	movs	r3, #7
 80018c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d2:	f001 fd69 	bl	80033a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018e8:	2303      	movs	r3, #3
 80018ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f001 fd57 	bl	80033a8 <HAL_GPIO_Init>
}
 80018fa:	bf00      	nop
 80018fc:	3780      	adds	r7, #128	@ 0x80
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40013800 	.word	0x40013800
 8001908:	40021000 	.word	0x40021000
 800190c:	40004400 	.word	0x40004400

08001910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001914:	f7ff fe6c 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <LoopForever+0x6>)
  ldr r1, =_edata
 800191a:	490d      	ldr	r1, [pc, #52]	@ (8001950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <LoopForever+0xe>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001930:	4c0a      	ldr	r4, [pc, #40]	@ (800195c <LoopForever+0x16>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f004 f93d 	bl	8005bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001942:	f7ff fc9f 	bl	8001284 <main>

08001946 <LoopForever>:

LoopForever:
    b LoopForever
 8001946:	e7fe      	b.n	8001946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001948:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001954:	08005c74 	.word	0x08005c74
  ldr r2, =_sbss
 8001958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800195c:	20000320 	.word	0x20000320

08001960 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC1_IRQHandler>

08001962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f001 fae1 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f80e 	bl	8001994 <HAL_InitTick>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	e001      	b.n	8001988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001984:	f7ff fdd6 	bl	8001534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001988:	79fb      	ldrb	r3, [r7, #7]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a0:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_InitTick+0x6c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_InitTick+0x70>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_InitTick+0x6c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 faed 	bl	8002f9e <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d809      	bhi.n	80019e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019d8:	f001 fab7 	bl	8002f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_InitTick+0x74>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e004      	b.n	80019f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e001      	b.n	80019f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	2000031c 	.word	0x2000031c

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000031c 	.word	0x2000031c

08001a4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3360      	adds	r3, #96	@ 0x60
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <LL_ADC_SetOffset+0x44>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	03fff000 	.word	0x03fff000

08001afc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3360      	adds	r3, #96	@ 0x60
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3360      	adds	r3, #96	@ 0x60
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3330      	adds	r3, #48	@ 0x30
 8001b94:	461a      	mov	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	4413      	add	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	211f      	movs	r1, #31
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0e9b      	lsrs	r3, r3, #26
 8001bbc:	f003 011f 	and.w	r1, r3, #31
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3314      	adds	r3, #20
 8001bec:	461a      	mov	r2, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	0e5b      	lsrs	r3, r3, #25
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	0d1b      	lsrs	r3, r3, #20
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2107      	movs	r1, #7
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	401a      	ands	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	0d1b      	lsrs	r3, r3, #20
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	431a      	orrs	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c26:	bf00      	nop
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0318 	and.w	r3, r3, #24
 8001c56:	4908      	ldr	r1, [pc, #32]	@ (8001c78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c58:	40d9      	lsrs	r1, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	431a      	orrs	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	0007ffff 	.word	0x0007ffff

08001c7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6093      	str	r3, [r2, #8]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cb4:	d101      	bne.n	8001cba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cdc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d04:	d101      	bne.n	8001d0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <LL_ADC_IsEnabled+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_ADC_IsEnabled+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d7a:	f043 0204 	orr.w	r2, r3, #4
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d101      	bne.n	8001dcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e126      	b.n	8002044 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fffb 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff3f 	bl	8001ca0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff25 	bl	8001c7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff5a 	bl	8001cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff3e 	bl	8001cc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e4c:	4b7f      	ldr	r3, [pc, #508]	@ (800204c <HAL_ADC_Init+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	4a7f      	ldr	r2, [pc, #508]	@ (8002050 <HAL_ADC_Init+0x274>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f9      	bne.n	8001e62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff3c 	bl	8001cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	f043 0210 	orr.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff75 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80bf 	bne.w	8002032 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 80bb 	bne.w	8002032 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ec4:	f043 0202 	orr.w	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff35 	bl	8001d40 <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001edc:	485d      	ldr	r0, [pc, #372]	@ (8002054 <HAL_ADC_Init+0x278>)
 8001ede:	f7ff ff2f 	bl	8001d40 <LL_ADC_IsEnabled>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4619      	mov	r1, r3
 8001eee:	485a      	ldr	r0, [pc, #360]	@ (8002058 <HAL_ADC_Init+0x27c>)
 8001ef0:	f7ff fdac 	bl	8001a4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7e5b      	ldrb	r3, [r3, #25]
 8001ef8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001efe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f04:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f0a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	3b01      	subs	r3, #1
 8001f28:	045b      	lsls	r3, r3, #17
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d009      	beq.n	8001f4c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b42      	ldr	r3, [pc, #264]	@ (800205c <HAL_ADC_Init+0x280>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff25 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 8001f6a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d13d      	bne.n	8001fee <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d13a      	bne.n	8001fee <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f7c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f84:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f94:	f023 0302 	bic.w	r3, r3, #2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	69b9      	ldr	r1, [r7, #24]
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d118      	bne.n	8001fde <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fb6:	f023 0304 	bic.w	r3, r3, #4
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	e007      	b.n	8001fee <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10c      	bne.n	8002010 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f023 010f 	bic.w	r1, r3, #15
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
 800200e:	e007      	b.n	8002020 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020f 	bic.w	r2, r2, #15
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	f023 0303 	bic.w	r3, r3, #3
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002042:	7ffb      	ldrb	r3, [r7, #31]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000000 	.word	0x20000000
 8002050:	053e2d63 	.word	0x053e2d63
 8002054:	50040000 	.word	0x50040000
 8002058:	50040300 	.word	0x50040300
 800205c:	fff0c007 	.word	0xfff0c007

08002060 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fe8c 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d167      	bne.n	800214c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_Start_DMA+0x2a>
 8002086:	2302      	movs	r3, #2
 8002088:	e063      	b.n	8002152 <HAL_ADC_Start_DMA+0xf2>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fc68 	bl	8002968 <ADC_Enable>
 8002098:	4603      	mov	r3, r0
 800209a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d14f      	bne.n	8002142 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	f023 0206 	bic.w	r2, r3, #6
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80020ce:	e002      	b.n	80020d6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	4a20      	ldr	r2, [pc, #128]	@ (800215c <HAL_ADC_Start_DMA+0xfc>)
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <HAL_ADC_Start_DMA+0x100>)
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002164 <HAL_ADC_Start_DMA+0x104>)
 80020ec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	221c      	movs	r2, #28
 80020f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0210 	orr.w	r2, r2, #16
 800210c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3340      	adds	r3, #64	@ 0x40
 8002128:	4619      	mov	r1, r3
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f000 fffb 	bl	8003128 <HAL_DMA_Start_IT>
 8002132:	4603      	mov	r3, r0
 8002134:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fe13 	bl	8001d66 <LL_ADC_REG_StartConversion>
 8002140:	e006      	b.n	8002150 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800214a:	e001      	b.n	8002150 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800214c:	2302      	movs	r3, #2
 800214e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002150:	7dfb      	ldrb	r3, [r7, #23]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	08002a75 	.word	0x08002a75
 8002160:	08002b4d 	.word	0x08002b4d
 8002164:	08002b69 	.word	0x08002b69

08002168 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0b6      	sub	sp, #216	@ 0xd8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x22>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e3bb      	b.n	800293e <HAL_ADC_ConfigChannel+0x79a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fddb 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 83a0 	bne.w	8002920 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d824      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	3b02      	subs	r3, #2
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d81b      	bhi.n	8002232 <HAL_ADC_ConfigChannel+0x8e>
 80021fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002200 <HAL_ADC_ConfigChannel+0x5c>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	08002219 	.word	0x08002219
 8002208:	08002221 	.word	0x08002221
 800220c:	08002229 	.word	0x08002229
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002210:	230c      	movs	r3, #12
 8002212:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002216:	e010      	b.n	800223a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002218:	2312      	movs	r3, #18
 800221a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800221e:	e00c      	b.n	800223a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002220:	2318      	movs	r3, #24
 8002222:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002226:	e008      	b.n	800223a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800222c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002230:	e003      	b.n	800223a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002232:	2306      	movs	r3, #6
 8002234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002238:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002248:	f7ff fc9c 	bl	8001b84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fd9c 	bl	8001d8e <LL_ADC_REG_IsConversionOngoing>
 8002256:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fda8 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 8002264:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 81a4 	bne.w	80025ba <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 819f 	bne.w	80025ba <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	461a      	mov	r2, r3
 800228a:	f7ff fca7 	bl	8001bdc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00a      	beq.n	80022c6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6919      	ldr	r1, [r3, #16]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022c0:	f7ff fbf8 	bl	8001ab4 <LL_ADC_SetOffset>
 80022c4:	e179      	b.n	80025ba <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fc15 	bl	8001afc <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x14e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc0a 	bl	8001afc <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	e01e      	b.n	8002330 <HAL_ADC_ConfigChannel+0x18c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fbff 	bl	8001afc <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002310:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002318:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e004      	b.n	800232e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x1a4>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	e018      	b.n	800237a <HAL_ADC_ConfigChannel+0x1d6>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800235c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800236c:	2320      	movs	r3, #32
 800236e:	e004      	b.n	800237a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800237a:	429a      	cmp	r2, r3
 800237c:	d106      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fbce 	bl	8001b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fbb2 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x214>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fba7 	bl	8001afc <LL_ADC_GetOffsetChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	f003 021f 	and.w	r2, r3, #31
 80023b6:	e01e      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x252>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fb9c 	bl	8001afc <LL_ADC_GetOffsetChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80023de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e004      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <HAL_ADC_ConfigChannel+0x26a>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	e018      	b.n	8002440 <HAL_ADC_ConfigChannel+0x29c>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002422:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002426:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800242a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e004      	b.n	8002440 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002436:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fb6b 	bl	8001b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2102      	movs	r1, #2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fb4f 	bl	8001afc <LL_ADC_GetOffsetChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <HAL_ADC_ConfigChannel+0x2da>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2102      	movs	r1, #2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fb44 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	e01e      	b.n	80024bc <HAL_ADC_ConfigChannel+0x318>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb39 	bl	8001afc <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800249c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80024a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e004      	b.n	80024ba <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80024b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x330>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	e014      	b.n	80024fe <HAL_ADC_ConfigChannel+0x35a>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80024e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80024e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e004      	b.n	80024fe <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80024f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024fe:	429a      	cmp	r2, r3
 8002500:	d106      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	2102      	movs	r1, #2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fb0c 	bl	8001b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2103      	movs	r1, #3
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff faf0 	bl	8001afc <LL_ADC_GetOffsetChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <HAL_ADC_ConfigChannel+0x398>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2103      	movs	r1, #3
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fae5 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	f003 021f 	and.w	r2, r3, #31
 800253a:	e017      	b.n	800256c <HAL_ADC_ConfigChannel+0x3c8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2103      	movs	r1, #3
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fada 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002556:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800255e:	2320      	movs	r3, #32
 8002560:	e003      	b.n	800256a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002562:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x3e0>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	e011      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x404>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002594:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d106      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2103      	movs	r1, #3
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fab7 	bl	8001b28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fbbe 	bl	8001d40 <LL_ADC_IsEnabled>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 8140 	bne.w	800284c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	461a      	mov	r2, r3
 80025da:	f7ff fb2b 	bl	8001c34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a8f      	ldr	r2, [pc, #572]	@ (8002820 <HAL_ADC_ConfigChannel+0x67c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	f040 8131 	bne.w	800284c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x46e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	3301      	adds	r3, #1
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2b09      	cmp	r3, #9
 8002608:	bf94      	ite	ls
 800260a:	2301      	movls	r3, #1
 800260c:	2300      	movhi	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e019      	b.n	8002646 <HAL_ADC_ConfigChannel+0x4a2>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002622:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800262e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2b09      	cmp	r3, #9
 800263e:	bf94      	ite	ls
 8002640:	2301      	movls	r3, #1
 8002642:	2300      	movhi	r3, #0
 8002644:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002646:	2b00      	cmp	r3, #0
 8002648:	d079      	beq.n	800273e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x4c2>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002664:	e015      	b.n	8002692 <HAL_ADC_ConfigChannel+0x4ee>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002676:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x50e>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	e017      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x53e>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x564>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 021f 	and.w	r2, r3, #31
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	e018      	b.n	800273a <HAL_ADC_ConfigChannel+0x596>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002718:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e003      	b.n	800272c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f003 021f 	and.w	r2, r3, #31
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273a:	430b      	orrs	r3, r1
 800273c:	e081      	b.n	8002842 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5b6>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	3301      	adds	r3, #1
 8002752:	069b      	lsls	r3, r3, #26
 8002754:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002758:	e015      	b.n	8002786 <HAL_ADC_ConfigChannel+0x5e2>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e003      	b.n	800277e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3301      	adds	r3, #1
 8002780:	069b      	lsls	r3, r3, #26
 8002782:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x602>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	3301      	adds	r3, #1
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	e017      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x632>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	61bb      	str	r3, [r7, #24]
  return result;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e003      	b.n	80027ca <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2101      	movs	r1, #1
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	ea42 0103 	orr.w	r1, r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x65e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0e9b      	lsrs	r3, r3, #26
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 021f 	and.w	r2, r3, #31
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	3b1e      	subs	r3, #30
 80027fa:	051b      	lsls	r3, r3, #20
 80027fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002800:	e01e      	b.n	8002840 <HAL_ADC_ConfigChannel+0x69c>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	60fb      	str	r3, [r7, #12]
  return result;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d104      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e006      	b.n	800282c <HAL_ADC_ConfigChannel+0x688>
 800281e:	bf00      	nop
 8002820:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f003 021f 	and.w	r2, r3, #31
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	3b1e      	subs	r3, #30
 800283a:	051b      	lsls	r3, r3, #20
 800283c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002840:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002846:	4619      	mov	r1, r3
 8002848:	f7ff f9c8 	bl	8001bdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b3d      	ldr	r3, [pc, #244]	@ (8002948 <HAL_ADC_ConfigChannel+0x7a4>)
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d06c      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002858:	483c      	ldr	r0, [pc, #240]	@ (800294c <HAL_ADC_ConfigChannel+0x7a8>)
 800285a:	f7ff f91d 	bl	8001a98 <LL_ADC_GetCommonPathInternalCh>
 800285e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3a      	ldr	r2, [pc, #232]	@ (8002950 <HAL_ADC_ConfigChannel+0x7ac>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d127      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800286c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002870:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d121      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a35      	ldr	r2, [pc, #212]	@ (8002954 <HAL_ADC_ConfigChannel+0x7b0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d157      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002886:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800288a:	4619      	mov	r1, r3
 800288c:	482f      	ldr	r0, [pc, #188]	@ (800294c <HAL_ADC_ConfigChannel+0x7a8>)
 800288e:	f7ff f8f0 	bl	8001a72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_ADC_ConfigChannel+0x7b4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	4a30      	ldr	r2, [pc, #192]	@ (800295c <HAL_ADC_ConfigChannel+0x7b8>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028ac:	e002      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f9      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ba:	e03a      	b.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <HAL_ADC_ConfigChannel+0x7bc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d113      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10d      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002954 <HAL_ADC_ConfigChannel+0x7b0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d12a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e4:	4619      	mov	r1, r3
 80028e6:	4819      	ldr	r0, [pc, #100]	@ (800294c <HAL_ADC_ConfigChannel+0x7a8>)
 80028e8:	f7ff f8c3 	bl	8001a72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ec:	e021      	b.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <HAL_ADC_ConfigChannel+0x7c0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d11c      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d116      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <HAL_ADC_ConfigChannel+0x7b0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d111      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002912:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002916:	4619      	mov	r1, r3
 8002918:	480c      	ldr	r0, [pc, #48]	@ (800294c <HAL_ADC_ConfigChannel+0x7a8>)
 800291a:	f7ff f8aa 	bl	8001a72 <LL_ADC_SetCommonPathInternalCh>
 800291e:	e008      	b.n	8002932 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800293a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800293e:	4618      	mov	r0, r3
 8002940:	37d8      	adds	r7, #216	@ 0xd8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	80080000 	.word	0x80080000
 800294c:	50040300 	.word	0x50040300
 8002950:	c7520000 	.word	0xc7520000
 8002954:	50040000 	.word	0x50040000
 8002958:	20000000 	.word	0x20000000
 800295c:	053e2d63 	.word	0x053e2d63
 8002960:	cb840000 	.word	0xcb840000
 8002964:	80000001 	.word	0x80000001

08002968 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f9e1 	bl	8001d40 <LL_ADC_IsEnabled>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d169      	bne.n	8002a58 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	4b36      	ldr	r3, [pc, #216]	@ (8002a64 <ADC_Enable+0xfc>)
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	f043 0210 	orr.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e055      	b.n	8002a5a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f9b0 	bl	8001d18 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029b8:	482b      	ldr	r0, [pc, #172]	@ (8002a68 <ADC_Enable+0x100>)
 80029ba:	f7ff f86d 	bl	8001a98 <LL_ADC_GetCommonPathInternalCh>
 80029be:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c8:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <ADC_Enable+0x104>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <ADC_Enable+0x108>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029e2:	e002      	b.n	80029ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029f0:	f7ff f820 	bl	8001a34 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029f6:	e028      	b.n	8002a4a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f99f 	bl	8001d40 <LL_ADC_IsEnabled>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d104      	bne.n	8002a12 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f983 	bl	8001d18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a12:	f7ff f80f 	bl	8001a34 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d914      	bls.n	8002a4a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d00d      	beq.n	8002a4a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	f043 0210 	orr.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e007      	b.n	8002a5a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d1cf      	bne.n	80029f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	8000003f 	.word	0x8000003f
 8002a68:	50040300 	.word	0x50040300
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	053e2d63 	.word	0x053e2d63

08002a74 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a86:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d14b      	bne.n	8002b26 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d021      	beq.n	8002aec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f856 	bl	8001b5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d032      	beq.n	8002b1e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d12b      	bne.n	8002b1e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11f      	bne.n	8002b1e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aea:	e018      	b.n	8002b1e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d111      	bne.n	8002b1e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff fb22 	bl	8002168 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b24:	e00e      	b.n	8002b44 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff fb2c 	bl	8002190 <HAL_ADC_ErrorCallback>
}
 8002b38:	e004      	b.n	8002b44 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff fb0e 	bl	800217c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	f043 0204 	orr.w	r2, r3, #4
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff fafe 	bl	8002190 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0ed      	b.n	8002d8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f9ea 	bl	8000f94 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd0:	f7fe ff30 	bl	8001a34 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bd6:	e012      	b.n	8002bfe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bd8:	f7fe ff2c 	bl	8001a34 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b0a      	cmp	r3, #10
 8002be4:	d90b      	bls.n	8002bfe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2205      	movs	r2, #5
 8002bf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0c5      	b.n	8002d8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0e5      	beq.n	8002bd8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0202 	bic.w	r2, r2, #2
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c1c:	f7fe ff0a 	bl	8001a34 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c22:	e012      	b.n	8002c4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c24:	f7fe ff06 	bl	8001a34 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b0a      	cmp	r3, #10
 8002c30:	d90b      	bls.n	8002c4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2205      	movs	r2, #5
 8002c42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e09f      	b.n	8002d8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e5      	bne.n	8002c24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7e1b      	ldrb	r3, [r3, #24]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d108      	bne.n	8002c72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7e5b      	ldrb	r3, [r3, #25]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e007      	b.n	8002cac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7e9b      	ldrb	r3, [r3, #26]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d108      	bne.n	8002cc6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0220 	orr.w	r2, r2, #32
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e007      	b.n	8002cd6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0220 	bic.w	r2, r2, #32
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7edb      	ldrb	r3, [r3, #27]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d108      	bne.n	8002cf0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0210 	bic.w	r2, r2, #16
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e007      	b.n	8002d00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0210 	orr.w	r2, r2, #16
 8002cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7f1b      	ldrb	r3, [r3, #28]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d108      	bne.n	8002d1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e007      	b.n	8002d2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0208 	bic.w	r2, r2, #8
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7f5b      	ldrb	r3, [r3, #29]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d108      	bne.n	8002d44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0204 	orr.w	r2, r2, #4
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e007      	b.n	8002d54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	ea42 0103 	orr.w	r1, r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	1e5a      	subs	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	@ (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	@ (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	@ 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff3e 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff8e 	bl	8002e88 <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5d 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff31 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa2 	bl	8002ef0 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e098      	b.n	80030fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8003108 <HAL_DMA_Init+0x150>)
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d80f      	bhi.n	8002ff6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800310c <HAL_DMA_Init+0x154>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8003110 <HAL_DMA_Init+0x158>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a48      	ldr	r2, [pc, #288]	@ (8003114 <HAL_DMA_Init+0x15c>)
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ff4:	e00e      	b.n	8003014 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <HAL_DMA_Init+0x160>)
 8002ffe:	4413      	add	r3, r2
 8003000:	4a43      	ldr	r2, [pc, #268]	@ (8003110 <HAL_DMA_Init+0x158>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a42      	ldr	r2, [pc, #264]	@ (800311c <HAL_DMA_Init+0x164>)
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800302a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800306e:	d039      	beq.n	80030e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	4a27      	ldr	r2, [pc, #156]	@ (8003114 <HAL_DMA_Init+0x15c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d11a      	bne.n	80030b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800307a:	4b29      	ldr	r3, [pc, #164]	@ (8003120 <HAL_DMA_Init+0x168>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f003 031c 	and.w	r3, r3, #28
 8003086:	210f      	movs	r1, #15
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	4924      	ldr	r1, [pc, #144]	@ (8003120 <HAL_DMA_Init+0x168>)
 8003090:	4013      	ands	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003094:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <HAL_DMA_Init+0x168>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a0:	f003 031c 	and.w	r3, r3, #28
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	491d      	ldr	r1, [pc, #116]	@ (8003120 <HAL_DMA_Init+0x168>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	e019      	b.n	80030e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <HAL_DMA_Init+0x16c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b8:	f003 031c 	and.w	r3, r3, #28
 80030bc:	210f      	movs	r1, #15
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4917      	ldr	r1, [pc, #92]	@ (8003124 <HAL_DMA_Init+0x16c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030ca:	4b16      	ldr	r3, [pc, #88]	@ (8003124 <HAL_DMA_Init+0x16c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f003 031c 	and.w	r3, r3, #28
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	4911      	ldr	r1, [pc, #68]	@ (8003124 <HAL_DMA_Init+0x16c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40020407 	.word	0x40020407
 800310c:	bffdfff8 	.word	0xbffdfff8
 8003110:	cccccccd 	.word	0xcccccccd
 8003114:	40020000 	.word	0x40020000
 8003118:	bffdfbf8 	.word	0xbffdfbf8
 800311c:	40020400 	.word	0x40020400
 8003120:	400200a8 	.word	0x400200a8
 8003124:	400204a8 	.word	0x400204a8

08003128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_DMA_Start_IT+0x20>
 8003144:	2302      	movs	r3, #2
 8003146:	e04b      	b.n	80031e0 <HAL_DMA_Start_IT+0xb8>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d13a      	bne.n	80031d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f8e0 	bl	8003346 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 020e 	orr.w	r2, r2, #14
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e00f      	b.n	80031c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0204 	bic.w	r2, r2, #4
 80031ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 020a 	orr.w	r2, r2, #10
 80031be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e005      	b.n	80031de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003204:	f003 031c 	and.w	r3, r3, #28
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d026      	beq.n	8003262 <HAL_DMA_IRQHandler+0x7a>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d021      	beq.n	8003262 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003240:	f003 021c 	and.w	r2, r3, #28
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	2104      	movs	r1, #4
 800324a:	fa01 f202 	lsl.w	r2, r1, r2
 800324e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	2b00      	cmp	r3, #0
 8003256:	d071      	beq.n	800333c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003260:	e06c      	b.n	800333c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f003 031c 	and.w	r3, r3, #28
 800326a:	2202      	movs	r2, #2
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02e      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xec>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d029      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 020a 	bic.w	r2, r2, #10
 800329c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f003 021c 	and.w	r2, r3, #28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2102      	movs	r1, #2
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d038      	beq.n	800333c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032d2:	e033      	b.n	800333c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	f003 031c 	and.w	r3, r3, #28
 80032dc:	2208      	movs	r2, #8
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02a      	beq.n	800333e <HAL_DMA_IRQHandler+0x156>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d025      	beq.n	800333e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 020e 	bic.w	r2, r2, #14
 8003300:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 021c 	and.w	r2, r3, #28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800333c:	bf00      	nop
 800333e:	bf00      	nop
}
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003358:	f003 021c 	and.w	r2, r3, #28
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f202 	lsl.w	r2, r1, r2
 8003366:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b10      	cmp	r3, #16
 8003376:	d108      	bne.n	800338a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003388:	e007      	b.n	800339a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	60da      	str	r2, [r3, #12]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b6:	e148      	b.n	800364a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 813a 	beq.w	8003644 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d005      	beq.n	80033e8 <HAL_GPIO_Init+0x40>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d130      	bne.n	800344a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341e:	2201      	movs	r2, #1
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0201 	and.w	r2, r3, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b03      	cmp	r3, #3
 8003454:	d017      	beq.n	8003486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d123      	bne.n	80034da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	6939      	ldr	r1, [r7, #16]
 80034d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0203 	and.w	r2, r3, #3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8094 	beq.w	8003644 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351c:	4b52      	ldr	r3, [pc, #328]	@ (8003668 <HAL_GPIO_Init+0x2c0>)
 800351e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003520:	4a51      	ldr	r2, [pc, #324]	@ (8003668 <HAL_GPIO_Init+0x2c0>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6613      	str	r3, [r2, #96]	@ 0x60
 8003528:	4b4f      	ldr	r3, [pc, #316]	@ (8003668 <HAL_GPIO_Init+0x2c0>)
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003534:	4a4d      	ldr	r2, [pc, #308]	@ (800366c <HAL_GPIO_Init+0x2c4>)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	220f      	movs	r2, #15
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800355e:	d00d      	beq.n	800357c <HAL_GPIO_Init+0x1d4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a43      	ldr	r2, [pc, #268]	@ (8003670 <HAL_GPIO_Init+0x2c8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <HAL_GPIO_Init+0x1d0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a42      	ldr	r2, [pc, #264]	@ (8003674 <HAL_GPIO_Init+0x2cc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_GPIO_Init+0x1cc>
 8003570:	2302      	movs	r3, #2
 8003572:	e004      	b.n	800357e <HAL_GPIO_Init+0x1d6>
 8003574:	2307      	movs	r3, #7
 8003576:	e002      	b.n	800357e <HAL_GPIO_Init+0x1d6>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_GPIO_Init+0x1d6>
 800357c:	2300      	movs	r3, #0
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	f002 0203 	and.w	r2, r2, #3
 8003584:	0092      	lsls	r2, r2, #2
 8003586:	4093      	lsls	r3, r2
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800358e:	4937      	ldr	r1, [pc, #220]	@ (800366c <HAL_GPIO_Init+0x2c4>)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800359c:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ea:	4a23      	ldr	r2, [pc, #140]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035f0:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003614:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800361a:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363e:	4a0e      	ldr	r2, [pc, #56]	@ (8003678 <HAL_GPIO_Init+0x2d0>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3301      	adds	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f aeaf 	bne.w	80033b8 <HAL_GPIO_Init+0x10>
  }
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	40010400 	.word	0x40010400

0800367c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
 8003688:	4613      	mov	r3, r2
 800368a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800368c:	787b      	ldrb	r3, [r7, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e08d      	b.n	80037da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fd7e 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	@ 0x24
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800370c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e006      	b.n	8003734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d108      	bne.n	800374e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	e007      	b.n	800375e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800375c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800376c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d138      	bne.n	800386a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003802:	2302      	movs	r3, #2
 8003804:	e032      	b.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2224      	movs	r2, #36	@ 0x24
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003834:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6819      	ldr	r1, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	d139      	bne.n	8003902 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003898:	2302      	movs	r3, #2
 800389a:	e033      	b.n	8003904 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	@ 0x24
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <HAL_PWREx_GetVoltageRange+0x18>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40007000 	.word	0x40007000

0800392c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800393a:	d130      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800393c:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003948:	d038      	beq.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800394a:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003952:	4a1e      	ldr	r2, [pc, #120]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003954:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800395a:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2232      	movs	r2, #50	@ 0x32
 8003960:	fb02 f303 	mul.w	r3, r2, r3
 8003964:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9b      	lsrs	r3, r3, #18
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003970:	e002      	b.n	8003978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3b01      	subs	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003978:	4b14      	ldr	r3, [pc, #80]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003984:	d102      	bne.n	800398c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f2      	bne.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800398c:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003998:	d110      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e00f      	b.n	80039be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039aa:	d007      	beq.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039b4:	4a05      	ldr	r2, [pc, #20]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40007000 	.word	0x40007000
 80039d0:	20000000 	.word	0x20000000
 80039d4:	431bde83 	.word	0x431bde83

080039d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f000 bc02 	b.w	80041f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ec:	4b96      	ldr	r3, [pc, #600]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f6:	4b94      	ldr	r3, [pc, #592]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80e4 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4c>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	f040 808b 	bne.w	8003b32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f040 8087 	bne.w	8003b32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a24:	4b88      	ldr	r3, [pc, #544]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_OscConfig+0x64>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e3d9      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	4b81      	ldr	r3, [pc, #516]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCC_OscConfig+0x7e>
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a54:	e005      	b.n	8003a62 <HAL_RCC_OscConfig+0x8a>
 8003a56:	4b7c      	ldr	r3, [pc, #496]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d223      	bcs.n	8003aae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fd8c 	bl	8004588 <RCC_SetFlashLatencyFromMSIRange>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e3ba      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a7a:	4b73      	ldr	r3, [pc, #460]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a72      	ldr	r2, [pc, #456]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b70      	ldr	r3, [pc, #448]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	496d      	ldr	r1, [pc, #436]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a98:	4b6b      	ldr	r3, [pc, #428]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	4968      	ldr	r1, [pc, #416]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
 8003aac:	e025      	b.n	8003afa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aae:	4b66      	ldr	r3, [pc, #408]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a65      	ldr	r2, [pc, #404]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	f043 0308 	orr.w	r3, r3, #8
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b63      	ldr	r3, [pc, #396]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4960      	ldr	r1, [pc, #384]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003acc:	4b5e      	ldr	r3, [pc, #376]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	495b      	ldr	r1, [pc, #364]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fd4c 	bl	8004588 <RCC_SetFlashLatencyFromMSIRange>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e37a      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003afa:	f000 fc81 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b51      	ldr	r3, [pc, #324]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4950      	ldr	r1, [pc, #320]	@ (8003c4c <HAL_RCC_OscConfig+0x274>)
 8003b0c:	5ccb      	ldrb	r3, [r1, r3]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a4e      	ldr	r2, [pc, #312]	@ (8003c50 <HAL_RCC_OscConfig+0x278>)
 8003b18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd ff38 	bl	8001994 <HAL_InitTick>
 8003b24:	4603      	mov	r3, r0
 8003b26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d052      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	e35e      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d032      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b3a:	4b43      	ldr	r3, [pc, #268]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a42      	ldr	r2, [pc, #264]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b46:	f7fd ff75 	bl	8001a34 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b4e:	f7fd ff71 	bl	8001a34 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e347      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b60:	4b39      	ldr	r3, [pc, #228]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b6c:	4b36      	ldr	r3, [pc, #216]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a35      	ldr	r2, [pc, #212]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b72:	f043 0308 	orr.w	r3, r3, #8
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b33      	ldr	r3, [pc, #204]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4930      	ldr	r1, [pc, #192]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	492b      	ldr	r1, [pc, #172]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]
 8003b9e:	e01a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ba0:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a28      	ldr	r2, [pc, #160]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bac:	f7fd ff42 	bl	8001a34 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bb4:	f7fd ff3e 	bl	8001a34 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e314      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x1dc>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d073      	beq.n	8003cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x21c>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d10e      	bne.n	8003c0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d063      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x2f0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d15f      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e2f1      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x24c>
 8003c16:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e025      	b.n	8003c70 <HAL_RCC_OscConfig+0x298>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c2c:	d114      	bne.n	8003c58 <HAL_RCC_OscConfig+0x280>
 8003c2e:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a05      	ldr	r2, [pc, #20]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a02      	ldr	r2, [pc, #8]	@ (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e013      	b.n	8003c70 <HAL_RCC_OscConfig+0x298>
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08005c1c 	.word	0x08005c1c
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000004 	.word	0x20000004
 8003c58:	4ba0      	ldr	r3, [pc, #640]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a9f      	ldr	r2, [pc, #636]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b9d      	ldr	r3, [pc, #628]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a9c      	ldr	r2, [pc, #624]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fedc 	bl	8001a34 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fd fed8 	bl	8001a34 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e2ae      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c92:	4b92      	ldr	r3, [pc, #584]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x2a8>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fec8 	bl	8001a34 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fec4 	bl	8001a34 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	@ 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e29a      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cba:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2d0>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d060      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x310>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d119      	bne.n	8003d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d116      	bne.n	8003d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce8:	4b7c      	ldr	r3, [pc, #496]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_OscConfig+0x328>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e277      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d00:	4b76      	ldr	r3, [pc, #472]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	4973      	ldr	r1, [pc, #460]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d14:	e040      	b.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d023      	beq.n	8003d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6e      	ldr	r2, [pc, #440]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fe83 	bl	8001a34 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fe7f 	bl	8001a34 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e255      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d44:	4b65      	ldr	r3, [pc, #404]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b62      	ldr	r3, [pc, #392]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	495f      	ldr	r1, [pc, #380]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
 8003d64:	e018      	b.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b5d      	ldr	r3, [pc, #372]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fd fe5f 	bl	8001a34 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7fd fe5b 	bl	8001a34 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e231      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d8c:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d03c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dac:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db2:	4a4a      	ldr	r2, [pc, #296]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd fe3a 	bl	8001a34 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fd fe36 	bl	8001a34 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e20c      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd6:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ef      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x3ec>
 8003de4:	e01b      	b.n	8003e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de6:	4b3d      	ldr	r3, [pc, #244]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dec:	4a3b      	ldr	r2, [pc, #236]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fd fe1d 	bl	8001a34 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fd fe19 	bl	8001a34 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e1ef      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e10:	4b32      	ldr	r3, [pc, #200]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ef      	bne.n	8003dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a6 	beq.w	8003f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e30:	4b2a      	ldr	r3, [pc, #168]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b27      	ldr	r3, [pc, #156]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e40:	4a26      	ldr	r2, [pc, #152]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e48:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e58:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d118      	bne.n	8003e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e70:	f7fd fde0 	bl	8001a34 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fd fddc 	bl	8001a34 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1b2      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d108      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4d8>
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eae:	e029      	b.n	8003f04 <HAL_RCC_OscConfig+0x52c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d115      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x50c>
 8003eb8:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	4a07      	ldr	r2, [pc, #28]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f043 0304 	orr.w	r3, r3, #4
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	4a03      	ldr	r2, [pc, #12]	@ (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ed8:	e014      	b.n	8003f04 <HAL_RCC_OscConfig+0x52c>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	4b9a      	ldr	r3, [pc, #616]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	4a99      	ldr	r2, [pc, #612]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ef4:	4b96      	ldr	r3, [pc, #600]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	4a95      	ldr	r2, [pc, #596]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d016      	beq.n	8003f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fd fd92 	bl	8001a34 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fd fd8e 	bl	8001a34 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e162      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2a:	4b89      	ldr	r3, [pc, #548]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ed      	beq.n	8003f14 <HAL_RCC_OscConfig+0x53c>
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fd fd7b 	bl	8001a34 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fd fd77 	bl	8001a34 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e14b      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f58:	4b7d      	ldr	r3, [pc, #500]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1ed      	bne.n	8003f42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6c:	4b78      	ldr	r3, [pc, #480]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f70:	4a77      	ldr	r2, [pc, #476]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d03c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01c      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f8c:	4b70      	ldr	r3, [pc, #448]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f92:	4a6f      	ldr	r2, [pc, #444]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fd fd4a 	bl	8001a34 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fa4:	f7fd fd46 	bl	8001a34 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e11c      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fb6:	4b66      	ldr	r3, [pc, #408]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ef      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x5cc>
 8003fc4:	e01b      	b.n	8003ffe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fc6:	4b62      	ldr	r3, [pc, #392]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fcc:	4a60      	ldr	r2, [pc, #384]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fd2d 	bl	8001a34 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fde:	f7fd fd29 	bl	8001a34 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0ff      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff0:	4b57      	ldr	r3, [pc, #348]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8003ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ef      	bne.n	8003fde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80f3 	beq.w	80041ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400c:	2b02      	cmp	r3, #2
 800400e:	f040 80c9 	bne.w	80041a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004012:	4b4f      	ldr	r3, [pc, #316]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f003 0203 	and.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d12c      	bne.n	8004080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	3b01      	subs	r3, #1
 8004032:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d123      	bne.n	8004080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004042:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d11b      	bne.n	8004080 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d113      	bne.n	8004080 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	3b01      	subs	r3, #1
 8004066:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d109      	bne.n	8004080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	3b01      	subs	r3, #1
 800407a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d06b      	beq.n	8004158 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d062      	beq.n	800414c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004086:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0ac      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004096:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2d      	ldr	r2, [pc, #180]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 800409c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040a2:	f7fd fcc7 	bl	8001a34 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd fcc3 	bl	8001a34 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e099      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040bc:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c8:	4b21      	ldr	r3, [pc, #132]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	4b21      	ldr	r3, [pc, #132]	@ (8004154 <HAL_RCC_OscConfig+0x77c>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040d8:	3a01      	subs	r2, #1
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	4311      	orrs	r1, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040e2:	0212      	lsls	r2, r2, #8
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040ea:	0852      	lsrs	r2, r2, #1
 80040ec:	3a01      	subs	r2, #1
 80040ee:	0552      	lsls	r2, r2, #21
 80040f0:	4311      	orrs	r1, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040f6:	0852      	lsrs	r2, r2, #1
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0652      	lsls	r2, r2, #25
 80040fc:	4311      	orrs	r1, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004102:	06d2      	lsls	r2, r2, #27
 8004104:	430a      	orrs	r2, r1
 8004106:	4912      	ldr	r1, [pc, #72]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8004108:	4313      	orrs	r3, r2
 800410a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800410c:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0f      	ldr	r2, [pc, #60]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8004112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004116:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004118:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a0c      	ldr	r2, [pc, #48]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 800411e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004122:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004124:	f7fd fc86 	bl	8001a34 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fd fc82 	bl	8001a34 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e058      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <HAL_RCC_OscConfig+0x778>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800414a:	e050      	b.n	80041ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e04f      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
 8004150:	40021000 	.word	0x40021000
 8004154:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004158:	4b27      	ldr	r3, [pc, #156]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d144      	bne.n	80041ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004164:	4b24      	ldr	r3, [pc, #144]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a23      	ldr	r2, [pc, #140]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 800416a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004170:	4b21      	ldr	r3, [pc, #132]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a20      	ldr	r2, [pc, #128]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 8004176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800417c:	f7fd fc5a 	bl	8001a34 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd fc56 	bl	8001a34 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e02c      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004196:	4b18      	ldr	r3, [pc, #96]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x7ac>
 80041a2:	e024      	b.n	80041ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d01f      	beq.n	80041ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041aa:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a12      	ldr	r2, [pc, #72]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 80041b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fd fc3d 	bl	8001a34 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041be:	f7fd fc39 	bl	8001a34 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e00f      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d0:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	4905      	ldr	r1, [pc, #20]	@ (80041f8 <HAL_RCC_OscConfig+0x820>)
 80041e2:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_RCC_OscConfig+0x824>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	60cb      	str	r3, [r1, #12]
 80041e8:	e001      	b.n	80041ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021000 	.word	0x40021000
 80041fc:	feeefffc 	.word	0xfeeefffc

08004200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0e7      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004214:	4b75      	ldr	r3, [pc, #468]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d910      	bls.n	8004244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b72      	ldr	r3, [pc, #456]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	4970      	ldr	r1, [pc, #448]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b6e      	ldr	r3, [pc, #440]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0cf      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d010      	beq.n	8004272 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	4b66      	ldr	r3, [pc, #408]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800425c:	429a      	cmp	r2, r3
 800425e:	d908      	bls.n	8004272 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004260:	4b63      	ldr	r3, [pc, #396]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4960      	ldr	r1, [pc, #384]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d04c      	beq.n	8004318 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004286:	4b5a      	ldr	r3, [pc, #360]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d121      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0a6      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429e:	4b54      	ldr	r3, [pc, #336]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d115      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e09a      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b6:	4b4e      	ldr	r3, [pc, #312]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e08e      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c6:	4b4a      	ldr	r3, [pc, #296]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e086      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b46      	ldr	r3, [pc, #280]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4943      	ldr	r1, [pc, #268]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e8:	f7fd fba4 	bl	8001a34 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fd fba0 	bl	8001a34 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e06e      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b3a      	ldr	r3, [pc, #232]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	4b31      	ldr	r3, [pc, #196]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004330:	429a      	cmp	r2, r3
 8004332:	d208      	bcs.n	8004346 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004334:	4b2e      	ldr	r3, [pc, #184]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	492b      	ldr	r1, [pc, #172]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004346:	4b29      	ldr	r3, [pc, #164]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d210      	bcs.n	8004376 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004354:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f023 0207 	bic.w	r2, r3, #7
 800435c:	4923      	ldr	r1, [pc, #140]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	4313      	orrs	r3, r2
 8004362:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <HAL_RCC_ClockConfig+0x1ec>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d001      	beq.n	8004376 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e036      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004382:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4918      	ldr	r1, [pc, #96]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d009      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a0:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4910      	ldr	r1, [pc, #64]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b4:	f000 f824 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b0d      	ldr	r3, [pc, #52]	@ (80043f0 <HAL_RCC_ClockConfig+0x1f0>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	490b      	ldr	r1, [pc, #44]	@ (80043f4 <HAL_RCC_ClockConfig+0x1f4>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <HAL_RCC_ClockConfig+0x1f8>)
 80043d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCC_ClockConfig+0x1fc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fd fadb 	bl	8001994 <HAL_InitTick>
 80043de:	4603      	mov	r3, r0
 80043e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80043e2:	7afb      	ldrb	r3, [r7, #11]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40022000 	.word	0x40022000
 80043f0:	40021000 	.word	0x40021000
 80043f4:	08005c1c 	.word	0x08005c1c
 80043f8:	20000000 	.word	0x20000000
 80043fc:	20000004 	.word	0x20000004

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	@ 0x24
 8004404:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440e:	4b3e      	ldr	r3, [pc, #248]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004418:	4b3b      	ldr	r3, [pc, #236]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x34>
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d121      	bne.n	8004472 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d11e      	bne.n	8004472 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004434:	4b34      	ldr	r3, [pc, #208]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d107      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004440:	4b31      	ldr	r3, [pc, #196]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 8004442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	e005      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004450:	4b2d      	ldr	r3, [pc, #180]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800445c:	4a2b      	ldr	r2, [pc, #172]	@ (800450c <HAL_RCC_GetSysClockFreq+0x10c>)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004464:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10d      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d102      	bne.n	800447e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004478:	4b25      	ldr	r3, [pc, #148]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x110>)
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	e004      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d101      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004484:	4b23      	ldr	r3, [pc, #140]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x114>)
 8004486:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d134      	bne.n	80044f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800448e:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d003      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0xac>
 80044a4:	e005      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x110>)
 80044a8:	617b      	str	r3, [r7, #20]
      break;
 80044aa:	e005      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ae:	617b      	str	r3, [r7, #20]
      break;
 80044b0:	e002      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	617b      	str	r3, [r7, #20]
      break;
 80044b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b8:	4b13      	ldr	r3, [pc, #76]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	3301      	adds	r3, #1
 80044c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044c6:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	fb03 f202 	mul.w	r2, r3, r2
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044de:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	0e5b      	lsrs	r3, r3, #25
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	3301      	adds	r3, #1
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044f8:	69bb      	ldr	r3, [r7, #24]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3724      	adds	r7, #36	@ 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000
 800450c:	08005c34 	.word	0x08005c34
 8004510:	00f42400 	.word	0x00f42400
 8004514:	007a1200 	.word	0x007a1200

08004518 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800451c:	4b03      	ldr	r3, [pc, #12]	@ (800452c <HAL_RCC_GetHCLKFreq+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000000 	.word	0x20000000

08004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004534:	f7ff fff0 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4904      	ldr	r1, [pc, #16]	@ (8004558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	08005c2c 	.word	0x08005c2c

0800455c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004560:	f7ff ffda 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0adb      	lsrs	r3, r3, #11
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4904      	ldr	r1, [pc, #16]	@ (8004584 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	08005c2c 	.word	0x08005c2c

08004588 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004594:	4b2a      	ldr	r3, [pc, #168]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045a0:	f7ff f9b6 	bl	8003910 <HAL_PWREx_GetVoltageRange>
 80045a4:	6178      	str	r0, [r7, #20]
 80045a6:	e014      	b.n	80045d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	4b25      	ldr	r3, [pc, #148]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045b4:	4b22      	ldr	r3, [pc, #136]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045c0:	f7ff f9a6 	bl	8003910 <HAL_PWREx_GetVoltageRange>
 80045c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004640 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d8:	d10b      	bne.n	80045f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b80      	cmp	r3, #128	@ 0x80
 80045de:	d919      	bls.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80045e4:	d902      	bls.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045e6:	2302      	movs	r3, #2
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	e013      	b.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045ec:	2301      	movs	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	e010      	b.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b80      	cmp	r3, #128	@ 0x80
 80045f6:	d902      	bls.n	80045fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045f8:	2303      	movs	r3, #3
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e00a      	b.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b80      	cmp	r3, #128	@ 0x80
 8004602:	d102      	bne.n	800460a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004604:	2302      	movs	r3, #2
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	e004      	b.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b70      	cmp	r3, #112	@ 0x70
 800460e:	d101      	bne.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004610:	2301      	movs	r3, #1
 8004612:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004614:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f023 0207 	bic.w	r2, r3, #7
 800461c:	4909      	ldr	r1, [pc, #36]	@ (8004644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000
 8004644:	40022000 	.word	0x40022000

08004648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004650:	2300      	movs	r3, #0
 8004652:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004654:	2300      	movs	r3, #0
 8004656:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004660:	2b00      	cmp	r3, #0
 8004662:	d031      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004668:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800466c:	d01a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800466e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004672:	d814      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004678:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800467c:	d10f      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800467e:	4b5d      	ldr	r3, [pc, #372]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4a5c      	ldr	r2, [pc, #368]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004688:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800468a:	e00c      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f9ce 	bl	8004a34 <RCCEx_PLLSAI1_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	74fb      	strb	r3, [r7, #19]
      break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80046a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ac:	4b51      	ldr	r3, [pc, #324]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ba:	494e      	ldr	r1, [pc, #312]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046c2:	e001      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 809e 	beq.w	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2300      	movs	r3, #0
 80046d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046da:	4b46      	ldr	r3, [pc, #280]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f0:	4b40      	ldr	r3, [pc, #256]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f4:	4a3f      	ldr	r2, [pc, #252]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80046fc:	4b3d      	ldr	r3, [pc, #244]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004708:	2301      	movs	r3, #1
 800470a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470c:	4b3a      	ldr	r3, [pc, #232]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a39      	ldr	r2, [pc, #228]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004718:	f7fd f98c 	bl	8001a34 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004720:	f7fd f988 	bl	8001a34 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d902      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	74fb      	strb	r3, [r7, #19]
        break;
 8004732:	e005      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004734:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ef      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d15a      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004746:	4b2b      	ldr	r3, [pc, #172]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01e      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	429a      	cmp	r2, r3
 8004760:	d019      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800476e:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800477e:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800478e:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d016      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd f948 	bl	8001a34 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a6:	e00b      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fd f944 	bl	8001a34 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d902      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	74fb      	strb	r3, [r7, #19]
            break;
 80047be:	e006      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c0:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ec      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d4:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e2:	4904      	ldr	r1, [pc, #16]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047ea:	e009      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	74bb      	strb	r3, [r7, #18]
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004800:	7c7b      	ldrb	r3, [r7, #17]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004806:	4b8a      	ldr	r3, [pc, #552]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	4a89      	ldr	r2, [pc, #548]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004810:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481e:	4b84      	ldr	r3, [pc, #528]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f023 0203 	bic.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	4980      	ldr	r1, [pc, #512]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004840:	4b7b      	ldr	r3, [pc, #492]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f023 020c 	bic.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	4978      	ldr	r1, [pc, #480]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004862:	4b73      	ldr	r3, [pc, #460]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004868:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	496f      	ldr	r1, [pc, #444]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004884:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004892:	4967      	ldr	r1, [pc, #412]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a6:	4b62      	ldr	r3, [pc, #392]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	495e      	ldr	r1, [pc, #376]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c8:	4b59      	ldr	r3, [pc, #356]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	4956      	ldr	r1, [pc, #344]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ea:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	494d      	ldr	r1, [pc, #308]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d028      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800490c:	4b48      	ldr	r3, [pc, #288]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	4945      	ldr	r1, [pc, #276]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800492a:	d106      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492c:	4b40      	ldr	r3, [pc, #256]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a3f      	ldr	r2, [pc, #252]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004936:	60d3      	str	r3, [r2, #12]
 8004938:	e011      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004942:	d10c      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f872 	bl	8004a34 <RCCEx_PLLSAI1_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d028      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800496a:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004970:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	492d      	ldr	r1, [pc, #180]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004988:	d106      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498a:	4b29      	ldr	r3, [pc, #164]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4a28      	ldr	r2, [pc, #160]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004990:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004994:	60d3      	str	r3, [r2, #12]
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	2101      	movs	r1, #1
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f843 	bl	8004a34 <RCCEx_PLLSAI1_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01c      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c8:	4b19      	ldr	r3, [pc, #100]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d6:	4916      	ldr	r1, [pc, #88]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	2102      	movs	r1, #2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f820 	bl	8004a34 <RCCEx_PLLSAI1_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a0e:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a14:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1c:	4904      	ldr	r1, [pc, #16]	@ (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a24:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000

08004a34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a42:	4b74      	ldr	r3, [pc, #464]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d018      	beq.n	8004a80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a4e:	4b71      	ldr	r3, [pc, #452]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0203 	and.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d10d      	bne.n	8004a7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
       ||
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a66:	4b6b      	ldr	r3, [pc, #428]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
       ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d047      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	73fb      	strb	r3, [r7, #15]
 8004a7e:	e044      	b.n	8004b0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d018      	beq.n	8004aba <RCCEx_PLLSAI1_Config+0x86>
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d825      	bhi.n	8004ad8 <RCCEx_PLLSAI1_Config+0xa4>
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d002      	beq.n	8004a96 <RCCEx_PLLSAI1_Config+0x62>
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d009      	beq.n	8004aa8 <RCCEx_PLLSAI1_Config+0x74>
 8004a94:	e020      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a96:	4b5f      	ldr	r3, [pc, #380]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11d      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa6:	e01a      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d116      	bne.n	8004ae2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab8:	e013      	b.n	8004ae2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aba:	4b56      	ldr	r3, [pc, #344]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10f      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ac6:	4b53      	ldr	r3, [pc, #332]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ad6:	e006      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
      break;
 8004adc:	e004      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e002      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e000      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aee:	4b49      	ldr	r3, [pc, #292]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6819      	ldr	r1, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	430b      	orrs	r3, r1
 8004b04:	4943      	ldr	r1, [pc, #268]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d17c      	bne.n	8004c0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b10:	4b40      	ldr	r3, [pc, #256]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3f      	ldr	r2, [pc, #252]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1c:	f7fc ff8a 	bl	8001a34 <HAL_GetTick>
 8004b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b22:	e009      	b.n	8004b38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b24:	f7fc ff86 	bl	8001a34 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	73fb      	strb	r3, [r7, #15]
        break;
 8004b36:	e005      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b38:	4b36      	ldr	r3, [pc, #216]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ef      	bne.n	8004b24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d15f      	bne.n	8004c0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d110      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b50:	4b30      	ldr	r3, [pc, #192]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004b58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6892      	ldr	r2, [r2, #8]
 8004b60:	0211      	lsls	r1, r2, #8
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68d2      	ldr	r2, [r2, #12]
 8004b66:	06d2      	lsls	r2, r2, #27
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	492a      	ldr	r1, [pc, #168]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	610b      	str	r3, [r1, #16]
 8004b70:	e027      	b.n	8004bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d112      	bne.n	8004b9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b78:	4b26      	ldr	r3, [pc, #152]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6892      	ldr	r2, [r2, #8]
 8004b88:	0211      	lsls	r1, r2, #8
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6912      	ldr	r2, [r2, #16]
 8004b8e:	0852      	lsrs	r2, r2, #1
 8004b90:	3a01      	subs	r2, #1
 8004b92:	0552      	lsls	r2, r2, #21
 8004b94:	430a      	orrs	r2, r1
 8004b96:	491f      	ldr	r1, [pc, #124]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	610b      	str	r3, [r1, #16]
 8004b9c:	e011      	b.n	8004bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ba6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6892      	ldr	r2, [r2, #8]
 8004bae:	0211      	lsls	r1, r2, #8
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6952      	ldr	r2, [r2, #20]
 8004bb4:	0852      	lsrs	r2, r2, #1
 8004bb6:	3a01      	subs	r2, #1
 8004bb8:	0652      	lsls	r2, r2, #25
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	4915      	ldr	r1, [pc, #84]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bc2:	4b14      	ldr	r3, [pc, #80]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bce:	f7fc ff31 	bl	8001a34 <HAL_GetTick>
 8004bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bd4:	e009      	b.n	8004bea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bd6:	f7fc ff2d 	bl	8001a34 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d902      	bls.n	8004bea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	73fb      	strb	r3, [r7, #15]
          break;
 8004be8:	e005      	b.n	8004bf6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bea:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0ef      	beq.n	8004bd6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000

08004c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e095      	b.n	8004d56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fc20 	bl	80014b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c90:	d902      	bls.n	8004c98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e002      	b.n	8004c9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004ca6:	d007      	beq.n	8004cb8 <HAL_SPI_Init+0xa0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	ea42 0103 	orr.w	r1, r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	f003 0204 	and.w	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e049      	b.n	8004e04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fc fc99 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 f8ff 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIM_ConfigClockSource+0x1c>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e0b6      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x18a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e64:	d03e      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0xd8>
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6a:	f200 8087 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e72:	f000 8086 	beq.w	8004f82 <HAL_TIM_ConfigClockSource+0x176>
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7a:	d87f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004e7c:	2b70      	cmp	r3, #112	@ 0x70
 8004e7e:	d01a      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0xaa>
 8004e80:	2b70      	cmp	r3, #112	@ 0x70
 8004e82:	d87b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004e84:	2b60      	cmp	r3, #96	@ 0x60
 8004e86:	d050      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x11e>
 8004e88:	2b60      	cmp	r3, #96	@ 0x60
 8004e8a:	d877      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004e8c:	2b50      	cmp	r3, #80	@ 0x50
 8004e8e:	d03c      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0xfe>
 8004e90:	2b50      	cmp	r3, #80	@ 0x50
 8004e92:	d873      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d058      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x13e>
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d86f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004e9c:	2b30      	cmp	r3, #48	@ 0x30
 8004e9e:	d064      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15e>
 8004ea0:	2b30      	cmp	r3, #48	@ 0x30
 8004ea2:	d86b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d060      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15e>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d867      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05c      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15e>
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d05a      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15e>
 8004eb4:	e062      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ec6:	f000 f955 	bl	8005174 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	609a      	str	r2, [r3, #8]
      break;
 8004ee2:	e04f      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ef4:	f000 f93e 	bl	8005174 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f06:	609a      	str	r2, [r3, #8]
      break;
 8004f08:	e03c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 f8b2 	bl	8005080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2150      	movs	r1, #80	@ 0x50
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f90b 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004f28:	e02c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 f8d1 	bl	80050de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2160      	movs	r1, #96	@ 0x60
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f8fb 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004f48:	e01c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 f892 	bl	8005080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2140      	movs	r1, #64	@ 0x40
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f8eb 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004f68:	e00c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f000 f8e2 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004f7a:	e003      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e000      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a30      	ldr	r2, [pc, #192]	@ (8005074 <TIM_Base_SetConfig+0xd4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x20>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a27      	ldr	r2, [pc, #156]	@ (8005074 <TIM_Base_SetConfig+0xd4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	@ (8005078 <TIM_Base_SetConfig+0xd8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a23      	ldr	r2, [pc, #140]	@ (800507c <TIM_Base_SetConfig+0xdc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a12      	ldr	r2, [pc, #72]	@ (8005074 <TIM_Base_SetConfig+0xd4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_Base_SetConfig+0xa0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a11      	ldr	r2, [pc, #68]	@ (8005078 <TIM_Base_SetConfig+0xd8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0xa0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a10      	ldr	r2, [pc, #64]	@ (800507c <TIM_Base_SetConfig+0xdc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d103      	bne.n	8005048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]
  }
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400

08005080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 030a 	bic.w	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 0210 	bic.w	r2, r3, #16
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800511a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	f043 0307 	orr.w	r3, r3, #7
 8005160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800518e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	431a      	orrs	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e04f      	b.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d108      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a14      	ldr	r2, [pc, #80]	@ (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005234:	d004      	beq.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a10      	ldr	r2, [pc, #64]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10c      	bne.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005246:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40014000 	.word	0x40014000

08005280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e040      	b.n	8005314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fa8a 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	@ 0x24
 80052ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa54 	bl	8005774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f825 	bl	800531c <UART_SetConfig>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e01b      	b.n	8005314 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fad3 	bl	80058b8 <UART_CheckIdleState>
 8005312:	4603      	mov	r3, r0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800531c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005320:	b08a      	sub	sp, #40	@ 0x28
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	431a      	orrs	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	4313      	orrs	r3, r2
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4bb4      	ldr	r3, [pc, #720]	@ (800561c <UART_SetConfig+0x300>)
 800534c:	4013      	ands	r3, r2
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005354:	430b      	orrs	r3, r1
 8005356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4aa9      	ldr	r2, [pc, #676]	@ (8005620 <UART_SetConfig+0x304>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005384:	4313      	orrs	r3, r2
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005398:	430a      	orrs	r2, r1
 800539a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4aa0      	ldr	r2, [pc, #640]	@ (8005624 <UART_SetConfig+0x308>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d126      	bne.n	80053f4 <UART_SetConfig+0xd8>
 80053a6:	4ba0      	ldr	r3, [pc, #640]	@ (8005628 <UART_SetConfig+0x30c>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d81b      	bhi.n	80053ec <UART_SetConfig+0xd0>
 80053b4:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <UART_SetConfig+0xa0>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	080053cd 	.word	0x080053cd
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053e5 	.word	0x080053e5
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d2:	e080      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053da:	e07c      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e2:	e078      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ea:	e074      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f2:	e070      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a8c      	ldr	r2, [pc, #560]	@ (800562c <UART_SetConfig+0x310>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d138      	bne.n	8005470 <UART_SetConfig+0x154>
 80053fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005628 <UART_SetConfig+0x30c>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d82d      	bhi.n	8005468 <UART_SetConfig+0x14c>
 800540c:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <UART_SetConfig+0xf8>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	08005449 	.word	0x08005449
 8005418:	08005469 	.word	0x08005469
 800541c:	08005469 	.word	0x08005469
 8005420:	08005469 	.word	0x08005469
 8005424:	08005459 	.word	0x08005459
 8005428:	08005469 	.word	0x08005469
 800542c:	08005469 	.word	0x08005469
 8005430:	08005469 	.word	0x08005469
 8005434:	08005451 	.word	0x08005451
 8005438:	08005469 	.word	0x08005469
 800543c:	08005469 	.word	0x08005469
 8005440:	08005469 	.word	0x08005469
 8005444:	08005461 	.word	0x08005461
 8005448:	2300      	movs	r3, #0
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544e:	e042      	b.n	80054d6 <UART_SetConfig+0x1ba>
 8005450:	2302      	movs	r3, #2
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005456:	e03e      	b.n	80054d6 <UART_SetConfig+0x1ba>
 8005458:	2304      	movs	r3, #4
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545e:	e03a      	b.n	80054d6 <UART_SetConfig+0x1ba>
 8005460:	2308      	movs	r3, #8
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005466:	e036      	b.n	80054d6 <UART_SetConfig+0x1ba>
 8005468:	2310      	movs	r3, #16
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546e:	e032      	b.n	80054d6 <UART_SetConfig+0x1ba>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a6a      	ldr	r2, [pc, #424]	@ (8005620 <UART_SetConfig+0x304>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d12a      	bne.n	80054d0 <UART_SetConfig+0x1b4>
 800547a:	4b6b      	ldr	r3, [pc, #428]	@ (8005628 <UART_SetConfig+0x30c>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005480:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005484:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005488:	d01a      	beq.n	80054c0 <UART_SetConfig+0x1a4>
 800548a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800548e:	d81b      	bhi.n	80054c8 <UART_SetConfig+0x1ac>
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005494:	d00c      	beq.n	80054b0 <UART_SetConfig+0x194>
 8005496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800549a:	d815      	bhi.n	80054c8 <UART_SetConfig+0x1ac>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <UART_SetConfig+0x18c>
 80054a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a4:	d008      	beq.n	80054b8 <UART_SetConfig+0x19c>
 80054a6:	e00f      	b.n	80054c8 <UART_SetConfig+0x1ac>
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ae:	e012      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80054b0:	2302      	movs	r3, #2
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b6:	e00e      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80054b8:	2304      	movs	r3, #4
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054be:	e00a      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80054c0:	2308      	movs	r3, #8
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c6:	e006      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80054c8:	2310      	movs	r3, #16
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ce:	e002      	b.n	80054d6 <UART_SetConfig+0x1ba>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a51      	ldr	r2, [pc, #324]	@ (8005620 <UART_SetConfig+0x304>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d17a      	bne.n	80055d6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d824      	bhi.n	8005532 <UART_SetConfig+0x216>
 80054e8:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x1d4>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005515 	.word	0x08005515
 80054f4:	08005533 	.word	0x08005533
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005533 	.word	0x08005533
 8005500:	08005523 	.word	0x08005523
 8005504:	08005533 	.word	0x08005533
 8005508:	08005533 	.word	0x08005533
 800550c:	08005533 	.word	0x08005533
 8005510:	0800552b 	.word	0x0800552b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7ff f80c 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 8005518:	61f8      	str	r0, [r7, #28]
        break;
 800551a:	e010      	b.n	800553e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800551c:	4b44      	ldr	r3, [pc, #272]	@ (8005630 <UART_SetConfig+0x314>)
 800551e:	61fb      	str	r3, [r7, #28]
        break;
 8005520:	e00d      	b.n	800553e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005522:	f7fe ff6d 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8005526:	61f8      	str	r0, [r7, #28]
        break;
 8005528:	e009      	b.n	800553e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800552e:	61fb      	str	r3, [r7, #28]
        break;
 8005530:	e005      	b.n	800553e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800553c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8107 	beq.w	8005754 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	429a      	cmp	r2, r3
 8005554:	d305      	bcc.n	8005562 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	429a      	cmp	r2, r3
 8005560:	d903      	bls.n	800556a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005568:	e0f4      	b.n	8005754 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2200      	movs	r2, #0
 800556e:	461c      	mov	r4, r3
 8005570:	4615      	mov	r5, r2
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	022b      	lsls	r3, r5, #8
 800557c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005580:	0222      	lsls	r2, r4, #8
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	6849      	ldr	r1, [r1, #4]
 8005586:	0849      	lsrs	r1, r1, #1
 8005588:	2000      	movs	r0, #0
 800558a:	4688      	mov	r8, r1
 800558c:	4681      	mov	r9, r0
 800558e:	eb12 0a08 	adds.w	sl, r2, r8
 8005592:	eb43 0b09 	adc.w	fp, r3, r9
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a4:	4650      	mov	r0, sl
 80055a6:	4659      	mov	r1, fp
 80055a8:	f7fb fa30 	bl	8000a0c <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ba:	d308      	bcc.n	80055ce <UART_SetConfig+0x2b2>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055c2:	d204      	bcs.n	80055ce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	60da      	str	r2, [r3, #12]
 80055cc:	e0c2      	b.n	8005754 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055d4:	e0be      	b.n	8005754 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055de:	d16a      	bne.n	80056b6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80055e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d834      	bhi.n	8005652 <UART_SetConfig+0x336>
 80055e8:	a201      	add	r2, pc, #4	@ (adr r2, 80055f0 <UART_SetConfig+0x2d4>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005615 	.word	0x08005615
 80055f4:	08005635 	.word	0x08005635
 80055f8:	0800563d 	.word	0x0800563d
 80055fc:	08005653 	.word	0x08005653
 8005600:	08005643 	.word	0x08005643
 8005604:	08005653 	.word	0x08005653
 8005608:	08005653 	.word	0x08005653
 800560c:	08005653 	.word	0x08005653
 8005610:	0800564b 	.word	0x0800564b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe ff8c 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 8005618:	61f8      	str	r0, [r7, #28]
        break;
 800561a:	e020      	b.n	800565e <UART_SetConfig+0x342>
 800561c:	efff69f3 	.word	0xefff69f3
 8005620:	40008000 	.word	0x40008000
 8005624:	40013800 	.word	0x40013800
 8005628:	40021000 	.word	0x40021000
 800562c:	40004400 	.word	0x40004400
 8005630:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe ff92 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8005638:	61f8      	str	r0, [r7, #28]
        break;
 800563a:	e010      	b.n	800565e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800563c:	4b4c      	ldr	r3, [pc, #304]	@ (8005770 <UART_SetConfig+0x454>)
 800563e:	61fb      	str	r3, [r7, #28]
        break;
 8005640:	e00d      	b.n	800565e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005642:	f7fe fedd 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8005646:	61f8      	str	r0, [r7, #28]
        break;
 8005648:	e009      	b.n	800565e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800564e:	61fb      	str	r3, [r7, #28]
        break;
 8005650:	e005      	b.n	800565e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800565c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d077      	beq.n	8005754 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	005a      	lsls	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d916      	bls.n	80056ae <UART_SetConfig+0x392>
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005686:	d212      	bcs.n	80056ae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f023 030f 	bic.w	r3, r3, #15
 8005690:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	b29b      	uxth	r3, r3
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	b29a      	uxth	r2, r3
 800569e:	8afb      	ldrh	r3, [r7, #22]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	8afa      	ldrh	r2, [r7, #22]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	e052      	b.n	8005754 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056b4:	e04e      	b.n	8005754 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d827      	bhi.n	800570e <UART_SetConfig+0x3f2>
 80056be:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <UART_SetConfig+0x3a8>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	0800570f 	.word	0x0800570f
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	0800570f 	.word	0x0800570f
 80056dc:	0800570f 	.word	0x0800570f
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e8:	f7fe ff22 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80056ec:	61f8      	str	r0, [r7, #28]
        break;
 80056ee:	e014      	b.n	800571a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fe ff34 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 80056f4:	61f8      	str	r0, [r7, #28]
        break;
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005770 <UART_SetConfig+0x454>)
 80056fa:	61fb      	str	r3, [r7, #28]
        break;
 80056fc:	e00d      	b.n	800571a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fe fe7f 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8005702:	61f8      	str	r0, [r7, #28]
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005718:	bf00      	nop
    }

    if (pclk != 0U)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d019      	beq.n	8005754 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	085a      	lsrs	r2, r3, #1
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	441a      	add	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005732:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b0f      	cmp	r3, #15
 8005738:	d909      	bls.n	800574e <UART_SetConfig+0x432>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005740:	d205      	bcs.n	800574e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60da      	str	r2, [r3, #12]
 800574c:	e002      	b.n	8005754 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005760:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	@ 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576e:	bf00      	nop
 8005770:	00f42400 	.word	0x00f42400

08005774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005872:	d10a      	bne.n	800588a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b098      	sub	sp, #96	@ 0x60
 80058bc:	af02      	add	r7, sp, #8
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c8:	f7fc f8b4 	bl	8001a34 <HAL_GetTick>
 80058cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d12e      	bne.n	800593a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f88c 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d021      	beq.n	800593a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800590a:	653b      	str	r3, [r7, #80]	@ 0x50
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005914:	647b      	str	r3, [r7, #68]	@ 0x44
 8005916:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800591a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e062      	b.n	8005a00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d149      	bne.n	80059dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005948:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005950:	2200      	movs	r2, #0
 8005952:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f856 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03c      	beq.n	80059dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	623b      	str	r3, [r7, #32]
   return(result);
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30
 8005982:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b4:	61fa      	str	r2, [r7, #28]
 80059b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	617b      	str	r3, [r7, #20]
   return(result);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e011      	b.n	8005a00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3758      	adds	r7, #88	@ 0x58
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	e04f      	b.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a20:	d04b      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fc f807 	bl	8001a34 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e04e      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d037      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b80      	cmp	r3, #128	@ 0x80
 8005a4e:	d034      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b40      	cmp	r3, #64	@ 0x40
 8005a54:	d031      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d110      	bne.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f838 	bl	8005ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2208      	movs	r2, #8
 8005a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e029      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a94:	d111      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f81e 	bl	8005ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e00f      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d0a0      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b095      	sub	sp, #84	@ 0x54
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d118      	bne.n	8005b8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6979      	ldr	r1, [r7, #20]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	613b      	str	r3, [r7, #16]
   return(result);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e6      	bne.n	8005b58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b9e:	bf00      	nop
 8005ba0:	3754      	adds	r7, #84	@ 0x54
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <memset>:
 8005baa:	4402      	add	r2, r0
 8005bac:	4603      	mov	r3, r0
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d100      	bne.n	8005bb4 <memset+0xa>
 8005bb2:	4770      	bx	lr
 8005bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb8:	e7f9      	b.n	8005bae <memset+0x4>
	...

08005bbc <__libc_init_array>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8005bf4 <__libc_init_array+0x38>)
 8005bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8005bf8 <__libc_init_array+0x3c>)
 8005bc2:	1b64      	subs	r4, r4, r5
 8005bc4:	10a4      	asrs	r4, r4, #2
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	42a6      	cmp	r6, r4
 8005bca:	d109      	bne.n	8005be0 <__libc_init_array+0x24>
 8005bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8005bfc <__libc_init_array+0x40>)
 8005bce:	4c0c      	ldr	r4, [pc, #48]	@ (8005c00 <__libc_init_array+0x44>)
 8005bd0:	f000 f818 	bl	8005c04 <_init>
 8005bd4:	1b64      	subs	r4, r4, r5
 8005bd6:	10a4      	asrs	r4, r4, #2
 8005bd8:	2600      	movs	r6, #0
 8005bda:	42a6      	cmp	r6, r4
 8005bdc:	d105      	bne.n	8005bea <__libc_init_array+0x2e>
 8005bde:	bd70      	pop	{r4, r5, r6, pc}
 8005be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be4:	4798      	blx	r3
 8005be6:	3601      	adds	r6, #1
 8005be8:	e7ee      	b.n	8005bc8 <__libc_init_array+0xc>
 8005bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bee:	4798      	blx	r3
 8005bf0:	3601      	adds	r6, #1
 8005bf2:	e7f2      	b.n	8005bda <__libc_init_array+0x1e>
 8005bf4:	08005c6c 	.word	0x08005c6c
 8005bf8:	08005c6c 	.word	0x08005c6c
 8005bfc:	08005c6c 	.word	0x08005c6c
 8005c00:	08005c70 	.word	0x08005c70

08005c04 <_init>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr

08005c10 <_fini>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr
