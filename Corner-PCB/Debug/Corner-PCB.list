
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003938  08003938  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003938  08003938  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003938  08003938  00004938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800393c  0800393c  0000493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003940  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  0800394c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800394c  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d54f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f83  00000000  00000000  0001258b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00014510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b23  00000000  00000000  00015380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e93  00000000  00000000  00015ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f115  00000000  00000000  00036d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1569  00000000  00000000  00045e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001173b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  001173f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080038e0 	.word	0x080038e0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080038e0 	.word	0x080038e0

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fab3 	bl	800073a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f81c 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f944 	bl	8000464 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f924 	bl	8000428 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e0:	f000 f868 	bl	80002b4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e4:	f000 f8cc 	bl	8000380 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001e8:	4807      	ldr	r0, [pc, #28]	@ (8000208 <main+0x3c>)
 80001ea:	f000 fe25 	bl	8000e38 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80001ee:	2164      	movs	r1, #100	@ 0x64
 80001f0:	4805      	ldr	r0, [pc, #20]	@ (8000208 <main+0x3c>)
 80001f2:	f000 fe84 	bl	8000efe <HAL_ADC_PollForConversion>
	  lin_pot_val = HAL_ADC_GetValue(&hadc1);
 80001f6:	4804      	ldr	r0, [pc, #16]	@ (8000208 <main+0x3c>)
 80001f8:	f000 ff10 	bl	800101c <HAL_ADC_GetValue>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4a03      	ldr	r2, [pc, #12]	@ (800020c <main+0x40>)
 8000200:	6013      	str	r3, [r2, #0]
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000202:	bf00      	nop
 8000204:	e7f3      	b.n	80001ee <main+0x22>
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028
 800020c:	20000120 	.word	0x20000120

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b096      	sub	sp, #88	@ 0x58
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2244      	movs	r2, #68	@ 0x44
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 fb32 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000232:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000236:	f001 ff59 	bl	80020ec <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000240:	f000 f928 	bl	8000494 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000244:	2310      	movs	r3, #16
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000250:	2360      	movs	r3, #96	@ 0x60
 8000252:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000258:	2301      	movs	r3, #1
 800025a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800025c:	2301      	movs	r3, #1
 800025e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000260:	2310      	movs	r3, #16
 8000262:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000264:	2307      	movs	r3, #7
 8000266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000268:	2302      	movs	r3, #2
 800026a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800026c:	2302      	movs	r3, #2
 800026e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	4618      	mov	r0, r3
 8000276:	f001 ff8f 	bl	8002198 <HAL_RCC_OscConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000280:	f000 f908 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000288:	2303      	movs	r3, #3
 800028a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	2101      	movs	r1, #1
 800029c:	4618      	mov	r0, r3
 800029e:	f002 fb8f 	bl	80029c0 <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002a8:	f000 f8f4 	bl	8000494 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3758      	adds	r7, #88	@ 0x58
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ba:	463b      	mov	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
 80002c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000378 <MX_ADC1_Init+0xc4>)
 80002ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80002d0:	4b28      	ldr	r3, [pc, #160]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80002d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d8:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002de:	4b25      	ldr	r3, [pc, #148]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002e4:	4b23      	ldr	r3, [pc, #140]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ea:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f0:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <MX_ADC1_Init+0xc0>)
 80002fe:	2201      	movs	r2, #1
 8000300:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000302:	4b1c      	ldr	r3, [pc, #112]	@ (8000374 <MX_ADC1_Init+0xc0>)
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800030a:	4b1a      	ldr	r3, [pc, #104]	@ (8000374 <MX_ADC1_Init+0xc0>)
 800030c:	2200      	movs	r2, #0
 800030e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000310:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_ADC1_Init+0xc0>)
 8000312:	2200      	movs	r2, #0
 8000314:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <MX_ADC1_Init+0xc0>)
 8000318:	2200      	movs	r2, #0
 800031a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <MX_ADC1_Init+0xc0>)
 8000320:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000324:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000326:	4b13      	ldr	r3, [pc, #76]	@ (8000374 <MX_ADC1_Init+0xc0>)
 8000328:	2200      	movs	r2, #0
 800032a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032e:	4811      	ldr	r0, [pc, #68]	@ (8000374 <MX_ADC1_Init+0xc0>)
 8000330:	f000 fc40 	bl	8000bb4 <HAL_ADC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800033a:	f000 f8ab 	bl	8000494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800033e:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <MX_ADC1_Init+0xc8>)
 8000340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000342:	2306      	movs	r3, #6
 8000344:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000346:	2302      	movs	r3, #2
 8000348:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800034a:	237f      	movs	r3, #127	@ 0x7f
 800034c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800034e:	2304      	movs	r3, #4
 8000350:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	463b      	mov	r3, r7
 8000358:	4619      	mov	r1, r3
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <MX_ADC1_Init+0xc0>)
 800035c:	f000 fe6c 	bl	8001038 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000366:	f000 f895 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	3718      	adds	r7, #24
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000028 	.word	0x20000028
 8000378:	50040000 	.word	0x50040000
 800037c:	14f00020 	.word	0x14f00020

08000380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800039e:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003a0:	4a20      	ldr	r2, [pc, #128]	@ (8000424 <MX_TIM1_Init+0xa4>)
 80003a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80003a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003a6:	2204      	movs	r2, #4
 80003a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80003b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b19      	ldr	r3, [pc, #100]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ca:	4815      	ldr	r0, [pc, #84]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003cc:	f002 ffcc 	bl	8003368 <HAL_TIM_Base_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80003d6:	f000 f85d 	bl	8000494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	480e      	ldr	r0, [pc, #56]	@ (8000420 <MX_TIM1_Init+0xa0>)
 80003e8:	f003 f815 	bl	8003416 <HAL_TIM_ConfigClockSource>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80003f2:	f000 f84f 	bl	8000494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80003fe:	2380      	movs	r3, #128	@ 0x80
 8000400:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	4806      	ldr	r0, [pc, #24]	@ (8000420 <MX_TIM1_Init+0xa0>)
 8000408:	f003 f9d8 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000412:	f000 f83f 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200000d4 	.word	0x200000d4
 8000424:	40012c00 	.word	0x40012c00

08000428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042e:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_DMA_Init+0x38>)
 8000430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000432:	4a0b      	ldr	r2, [pc, #44]	@ (8000460 <MX_DMA_Init+0x38>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6493      	str	r3, [r2, #72]	@ 0x48
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_DMA_Init+0x38>)
 800043c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	200b      	movs	r0, #11
 800044c:	f001 fb37 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000450:	200b      	movs	r0, #11
 8000452:	f001 fb50 	bl	8001af6 <HAL_NVIC_EnableIRQ>

}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <MX_GPIO_Init+0x2c>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046e:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <MX_GPIO_Init+0x2c>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000476:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <MX_GPIO_Init+0x2c>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <Error_Handler+0x8>

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <HAL_MspInit+0x44>)
 80004a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004aa:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <HAL_MspInit+0x44>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <HAL_MspInit+0x44>)
 80004b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <HAL_MspInit+0x44>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004c2:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <HAL_MspInit+0x44>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <HAL_MspInit+0x44>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09e      	sub	sp, #120	@ 0x78
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	2254      	movs	r2, #84	@ 0x54
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f003 f9bd 	bl	8003888 <memset>
  if(hadc->Instance==ADC1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a3b      	ldr	r2, [pc, #236]	@ (8000600 <HAL_ADC_MspInit+0x118>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d16e      	bne.n	80005f6 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000518:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800051c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800051e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000522:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000524:	2301      	movs	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000528:	2301      	movs	r3, #1
 800052a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800052c:	2310      	movs	r3, #16
 800052e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000530:	2307      	movs	r3, #7
 8000532:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000534:	2302      	movs	r3, #2
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000538:	2302      	movs	r3, #2
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800053c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fc26 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000552:	f7ff ff9f 	bl	8000494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000556:	4b2b      	ldr	r3, [pc, #172]	@ (8000604 <HAL_ADC_MspInit+0x11c>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a2a      	ldr	r2, [pc, #168]	@ (8000604 <HAL_ADC_MspInit+0x11c>)
 800055c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <HAL_ADC_MspInit+0x11c>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <HAL_ADC_MspInit+0x11c>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	4a24      	ldr	r2, [pc, #144]	@ (8000604 <HAL_ADC_MspInit+0x11c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <HAL_ADC_MspInit+0x11c>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000586:	2301      	movs	r3, #1
 8000588:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800058a:	230b      	movs	r3, #11
 800058c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f001 fc2e 	bl	8001dfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005a2:	4a1a      	ldr	r2, [pc, #104]	@ (800060c <HAL_ADC_MspInit+0x124>)
 80005a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ac:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005da:	480b      	ldr	r0, [pc, #44]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005dc:	f001 faa6 	bl	8001b2c <HAL_DMA_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80005e6:	f7ff ff55 	bl	8000494 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a06      	ldr	r2, [pc, #24]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005f0:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <HAL_ADC_MspInit+0x120>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005f6:	bf00      	nop
 80005f8:	3778      	adds	r7, #120	@ 0x78
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	50040000 	.word	0x50040000
 8000604:	40021000 	.word	0x40021000
 8000608:	2000008c 	.word	0x2000008c
 800060c:	40020008 	.word	0x40020008

08000610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <HAL_TIM_Base_MspInit+0x38>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d10b      	bne.n	800063a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000626:	4a09      	ldr	r2, [pc, #36]	@ (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800062c:	6613      	str	r3, [r2, #96]	@ 0x60
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <HAL_TIM_Base_MspInit+0x3c>)
 8000630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40012c00 	.word	0x40012c00
 800064c:	40021000 	.word	0x40021000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <NMI_Handler+0x4>

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <MemManage_Handler+0x4>

08000668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f89d 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <DMA1_Channel1_IRQHandler+0x10>)
 80006b6:	f001 faf1 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000008c 	.word	0x2000008c

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000720 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff ffea 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	@ (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	@ (8000734 <LoopForever+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000716:	f003 f8bf 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071a:	f7ff fd57 	bl	80001cc <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000720:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800072c:	08003940 	.word	0x08003940
  ldr r2, =_sbss
 8000730:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000734:	20000128 	.word	0x20000128

08000738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_IRQHandler>

0800073a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000740:	2300      	movs	r3, #0
 8000742:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f001 f9af 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074a:	2000      	movs	r0, #0
 800074c:	f000 f80e 	bl	800076c <HAL_InitTick>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	e001      	b.n	8000760 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800075c:	f7ff fea0 	bl	80004a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000760:	79fb      	ldrb	r3, [r7, #7]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <HAL_InitTick+0x6c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d023      	beq.n	80007c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_InitTick+0x70>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_InitTick+0x6c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9bb 	bl	8001b12 <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10f      	bne.n	80007c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d809      	bhi.n	80007bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007b0:	f001 f985 	bl	8001abe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_InitTick+0x74>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e007      	b.n	80007cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e004      	b.n	80007cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	e001      	b.n	80007cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	20000124 	.word	0x20000124

0800080c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b03      	ldr	r3, [pc, #12]	@ (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000124 	.word	0x20000124

08000824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	609a      	str	r2, [r3, #8]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3360      	adds	r3, #96	@ 0x60
 800089e:	461a      	mov	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <LL_ADC_SetOffset+0x44>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	4313      	orrs	r3, r2
 80008bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008c4:	bf00      	nop
 80008c6:	371c      	adds	r7, #28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	03fff000 	.word	0x03fff000

080008d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3360      	adds	r3, #96	@ 0x60
 80008e2:	461a      	mov	r2, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3360      	adds	r3, #96	@ 0x60
 8000910:	461a      	mov	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	431a      	orrs	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800092a:	bf00      	nop
 800092c:	371c      	adds	r7, #28
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3330      	adds	r3, #48	@ 0x30
 800096c:	461a      	mov	r2, r3
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	f003 030c 	and.w	r3, r3, #12
 8000978:	4413      	add	r3, r2
 800097a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	211f      	movs	r1, #31
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	401a      	ands	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	0e9b      	lsrs	r3, r3, #26
 8000994:	f003 011f 	and.w	r1, r3, #31
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	f003 031f 	and.w	r3, r3, #31
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	431a      	orrs	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009a8:	bf00      	nop
 80009aa:	371c      	adds	r7, #28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3314      	adds	r3, #20
 80009c4:	461a      	mov	r2, r3
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	0e5b      	lsrs	r3, r3, #25
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	4413      	add	r3, r2
 80009d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	0d1b      	lsrs	r3, r3, #20
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	2107      	movs	r1, #7
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	401a      	ands	r2, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	0d1b      	lsrs	r3, r3, #20
 80009ee:	f003 031f 	and.w	r3, r3, #31
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	431a      	orrs	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80009fe:	bf00      	nop
 8000a00:	371c      	adds	r7, #28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a24:	43db      	mvns	r3, r3
 8000a26:	401a      	ands	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0318 	and.w	r3, r3, #24
 8000a2e:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a30:	40d9      	lsrs	r1, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	400b      	ands	r3, r1
 8000a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	0007ffff 	.word	0x0007ffff

08000a54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000a64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	6093      	str	r3, [r2, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a8c:	d101      	bne.n	8000a92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ab4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000adc:	d101      	bne.n	8000ae2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <LL_ADC_IsEnabled+0x18>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <LL_ADC_IsEnabled+0x1a>
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b52:	f043 0204 	orr.w	r2, r3, #4
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d101      	bne.n	8000b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d101      	bne.n	8000ba4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e126      	b.n	8000e1c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fc83 	bl	80004e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff3f 	bl	8000a78 <LL_ADC_IsDeepPowerDownEnabled>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff25 	bl	8000a54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff5a 	bl	8000ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d115      	bne.n	8000c46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff3e 	bl	8000aa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c24:	4b7f      	ldr	r3, [pc, #508]	@ (8000e24 <HAL_ADC_Init+0x270>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	099b      	lsrs	r3, r3, #6
 8000c2a:	4a7f      	ldr	r2, [pc, #508]	@ (8000e28 <HAL_ADC_Init+0x274>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	099b      	lsrs	r3, r3, #6
 8000c32:	3301      	adds	r3, #1
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c38:	e002      	b.n	8000c40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f9      	bne.n	8000c3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff3c 	bl	8000ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10d      	bne.n	8000c72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c5a:	f043 0210 	orr.w	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	f043 0201 	orr.w	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff75 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 8000c7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 80bf 	bne.w	8000e0a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 80bb 	bne.w	8000e0a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c9c:	f043 0202 	orr.w	r2, r3, #2
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff35 	bl	8000b18 <LL_ADC_IsEnabled>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10b      	bne.n	8000ccc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cb4:	485d      	ldr	r0, [pc, #372]	@ (8000e2c <HAL_ADC_Init+0x278>)
 8000cb6:	f7ff ff2f 	bl	8000b18 <LL_ADC_IsEnabled>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d105      	bne.n	8000ccc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	485a      	ldr	r0, [pc, #360]	@ (8000e30 <HAL_ADC_Init+0x27c>)
 8000cc8:	f7ff fdac 	bl	8000824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7e5b      	ldrb	r3, [r3, #25]
 8000cd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000cdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000ce2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d106      	bne.n	8000d08 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	045b      	lsls	r3, r3, #17
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d009      	beq.n	8000d24 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <HAL_ADC_Init+0x280>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	69b9      	ldr	r1, [r7, #24]
 8000d34:	430b      	orrs	r3, r1
 8000d36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff25 	bl	8000b8c <LL_ADC_INJ_IsConversionOngoing>
 8000d42:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d13d      	bne.n	8000dc6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d13a      	bne.n	8000dc6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d54:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d5c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d6c:	f023 0302 	bic.w	r3, r3, #2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	69b9      	ldr	r1, [r7, #24]
 8000d76:	430b      	orrs	r3, r1
 8000d78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d118      	bne.n	8000db6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000d8e:	f023 0304 	bic.w	r3, r3, #4
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000d9a:	4311      	orrs	r1, r2
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000da0:	4311      	orrs	r1, r2
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000da6:	430a      	orrs	r2, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	e007      	b.n	8000dc6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10c      	bne.n	8000de8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f023 010f 	bic.w	r1, r3, #15
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000de6:	e007      	b.n	8000df8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 020f 	bic.w	r2, r2, #15
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dfc:	f023 0303 	bic.w	r3, r3, #3
 8000e00:	f043 0201 	orr.w	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e08:	e007      	b.n	8000e1a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e0e:	f043 0210 	orr.w	r2, r3, #16
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	053e2d63 	.word	0x053e2d63
 8000e2c:	50040000 	.word	0x50040000
 8000e30:	50040300 	.word	0x50040300
 8000e34:	fff0c007 	.word	0xfff0c007

08000e38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe8e 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d14f      	bne.n	8000ef0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_Start+0x26>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e04b      	b.n	8000ef6 <HAL_ADC_Start+0xbe>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 fcc8 	bl	80017fc <ADC_Enable>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d137      	bne.n	8000ee6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e7e:	f023 0301 	bic.w	r3, r3, #1
 8000e82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e96:	d106      	bne.n	8000ea6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9c:	f023 0206 	bic.w	r2, r3, #6
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ea4:	e002      	b.n	8000eac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	221c      	movs	r2, #28
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ece:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ed2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe2d 	bl	8000b3e <LL_ADC_REG_StartConversion>
 8000ee4:	e006      	b.n	8000ef4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000eee:	e001      	b.n	8000ef4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d102      	bne.n	8000f16 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f10:	2308      	movs	r3, #8
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e010      	b.n	8000f38 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d007      	beq.n	8000f34 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f28:	f043 0220 	orr.w	r2, r3, #32
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e06f      	b.n	8001014 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000f34:	2304      	movs	r3, #4
 8000f36:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f38:	f7ff fc68 	bl	800080c <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f3e:	e021      	b.n	8000f84 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f46:	d01d      	beq.n	8000f84 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f48:	f7ff fc60 	bl	800080c <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d302      	bcc.n	8000f5e <HAL_ADC_PollForConversion+0x60>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d112      	bne.n	8000f84 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10b      	bne.n	8000f84 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f70:	f043 0204 	orr.w	r2, r3, #4
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e047      	b.n	8001014 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0d6      	beq.n	8000f40 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fcc7 	bl	8000936 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d01c      	beq.n	8000fe8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7e5b      	ldrb	r3, [r3, #25]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d118      	bne.n	8000fe8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d111      	bne.n	8000fe8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d105      	bne.n	8000fe8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe0:	f043 0201 	orr.w	r2, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d104      	bne.n	8001000 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e008      	b.n	8001012 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0b6      	sub	sp, #216	@ 0xd8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_ADC_ConfigChannel+0x22>
 8001056:	2302      	movs	r3, #2
 8001058:	e3bb      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x79a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fd7d 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 83a0 	bne.w	80017b4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b05      	cmp	r3, #5
 8001082:	d824      	bhi.n	80010ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	3b02      	subs	r3, #2
 800108a:	2b03      	cmp	r3, #3
 800108c:	d81b      	bhi.n	80010c6 <HAL_ADC_ConfigChannel+0x8e>
 800108e:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <HAL_ADC_ConfigChannel+0x5c>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010a5 	.word	0x080010a5
 8001098:	080010ad 	.word	0x080010ad
 800109c:	080010b5 	.word	0x080010b5
 80010a0:	080010bd 	.word	0x080010bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80010a4:	230c      	movs	r3, #12
 80010a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010aa:	e010      	b.n	80010ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80010ac:	2312      	movs	r3, #18
 80010ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010b2:	e00c      	b.n	80010ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80010b4:	2318      	movs	r3, #24
 80010b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010ba:	e008      	b.n	80010ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80010bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010c4:	e003      	b.n	80010ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80010c6:	2306      	movs	r3, #6
 80010c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80010cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80010dc:	f7ff fc3e 	bl	800095c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fd3e 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 80010ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fd4a 	bl	8000b8c <LL_ADC_INJ_IsConversionOngoing>
 80010f8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001100:	2b00      	cmp	r3, #0
 8001102:	f040 81a4 	bne.w	800144e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 819f 	bne.w	800144e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	461a      	mov	r2, r3
 800111e:	f7ff fc49 	bl	80009b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d00a      	beq.n	800115a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6919      	ldr	r1, [r3, #16]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001154:	f7ff fb9a 	bl	800088c <LL_ADC_SetOffset>
 8001158:	e179      	b.n	800144e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fbb7 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10a      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x14e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fbac 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	0e9b      	lsrs	r3, r3, #26
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	e01e      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x18c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fba1 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80011b4:	2320      	movs	r3, #32
 80011b6:	e004      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80011b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x1a4>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0e9b      	lsrs	r3, r3, #26
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	e018      	b.n	800120e <HAL_ADC_ConfigChannel+0x1d6>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80011f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80011f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001200:	2320      	movs	r3, #32
 8001202:	e004      	b.n	800120e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800120e:	429a      	cmp	r2, r3
 8001210:	d106      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fb70 	bl	8000900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fb54 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10a      	bne.n	800124c <HAL_ADC_ConfigChannel+0x214>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fb49 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	0e9b      	lsrs	r3, r3, #26
 8001246:	f003 021f 	and.w	r2, r3, #31
 800124a:	e01e      	b.n	800128a <HAL_ADC_ConfigChannel+0x252>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb3e 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800126a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800126e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800127a:	2320      	movs	r3, #32
 800127c:	e004      	b.n	8001288 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800127e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001292:	2b00      	cmp	r3, #0
 8001294:	d105      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x26a>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0e9b      	lsrs	r3, r3, #26
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	e018      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x29c>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80012b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80012be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80012c6:	2320      	movs	r3, #32
 80012c8:	e004      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80012ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d106      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fb0d 	bl	8000900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2102      	movs	r1, #2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff faf1 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10a      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x2da>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fae6 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	0e9b      	lsrs	r3, r3, #26
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	e01e      	b.n	8001350 <HAL_ADC_ConfigChannel+0x318>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2102      	movs	r1, #2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fadb 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001334:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001340:	2320      	movs	r3, #32
 8001342:	e004      	b.n	800134e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x330>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0e9b      	lsrs	r3, r3, #26
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	e014      	b.n	8001392 <HAL_ADC_ConfigChannel+0x35a>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001378:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800137c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001384:	2320      	movs	r3, #32
 8001386:	e004      	b.n	8001392 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001388:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800138c:	fab3 f383 	clz	r3, r3
 8001390:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001392:	429a      	cmp	r2, r3
 8001394:	d106      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2200      	movs	r2, #0
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff faae 	bl	8000900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2103      	movs	r1, #3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fa92 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10a      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x398>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2103      	movs	r1, #3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fa87 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	0e9b      	lsrs	r3, r3, #26
 80013ca:	f003 021f 	and.w	r2, r3, #31
 80013ce:	e017      	b.n	8001400 <HAL_ADC_ConfigChannel+0x3c8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2103      	movs	r1, #3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fa7c 	bl	80008d4 <LL_ADC_GetOffsetChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80013e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013ea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80013ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80013f2:	2320      	movs	r3, #32
 80013f4:	e003      	b.n	80013fe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80013f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x3e0>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0e9b      	lsrs	r3, r3, #26
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	e011      	b.n	800143c <HAL_ADC_ConfigChannel+0x404>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001428:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800142a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001430:	2320      	movs	r3, #32
 8001432:	e003      	b.n	800143c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800143c:	429a      	cmp	r2, r3
 800143e:	d106      	bne.n	800144e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	2103      	movs	r1, #3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fa59 	bl	8000900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fb60 	bl	8000b18 <LL_ADC_IsEnabled>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8140 	bne.w	80016e0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	461a      	mov	r2, r3
 800146e:	f7ff facd 	bl	8000a0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	4a8f      	ldr	r2, [pc, #572]	@ (80016b4 <HAL_ADC_ConfigChannel+0x67c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	f040 8131 	bne.w	80016e0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10b      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x46e>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0e9b      	lsrs	r3, r3, #26
 8001494:	3301      	adds	r3, #1
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2b09      	cmp	r3, #9
 800149c:	bf94      	ite	ls
 800149e:	2301      	movls	r3, #1
 80014a0:	2300      	movhi	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	e019      	b.n	80014da <HAL_ADC_ConfigChannel+0x4a2>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ae:	fa93 f3a3 	rbit	r3, r3
 80014b2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80014b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80014b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80014be:	2320      	movs	r3, #32
 80014c0:	e003      	b.n	80014ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80014c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	bf94      	ite	ls
 80014d4:	2301      	movls	r3, #1
 80014d6:	2300      	movhi	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d079      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x4c2>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0e9b      	lsrs	r3, r3, #26
 80014f0:	3301      	adds	r3, #1
 80014f2:	069b      	lsls	r3, r3, #26
 80014f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014f8:	e015      	b.n	8001526 <HAL_ADC_ConfigChannel+0x4ee>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800150a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800150c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001512:	2320      	movs	r3, #32
 8001514:	e003      	b.n	800151e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	3301      	adds	r3, #1
 8001520:	069b      	lsls	r3, r3, #26
 8001522:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x50e>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0e9b      	lsrs	r3, r3, #26
 8001538:	3301      	adds	r3, #1
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	e017      	b.n	8001576 <HAL_ADC_ConfigChannel+0x53e>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800154e:	fa93 f3a3 	rbit	r3, r3
 8001552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001556:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800155e:	2320      	movs	r3, #32
 8001560:	e003      	b.n	800156a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	ea42 0103 	orr.w	r1, r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10a      	bne.n	800159c <HAL_ADC_ConfigChannel+0x564>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0e9b      	lsrs	r3, r3, #26
 800158c:	3301      	adds	r3, #1
 800158e:	f003 021f 	and.w	r2, r3, #31
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	051b      	lsls	r3, r3, #20
 800159a:	e018      	b.n	80015ce <HAL_ADC_ConfigChannel+0x596>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80015aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80015ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80015b4:	2320      	movs	r3, #32
 80015b6:	e003      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80015b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	f003 021f 	and.w	r2, r3, #31
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015ce:	430b      	orrs	r3, r1
 80015d0:	e081      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d107      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x5b6>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0e9b      	lsrs	r3, r3, #26
 80015e4:	3301      	adds	r3, #1
 80015e6:	069b      	lsls	r3, r3, #26
 80015e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015ec:	e015      	b.n	800161a <HAL_ADC_ConfigChannel+0x5e2>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001606:	2320      	movs	r3, #32
 8001608:	e003      	b.n	8001612 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800160a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	069b      	lsls	r3, r3, #26
 8001616:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_ADC_ConfigChannel+0x602>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0e9b      	lsrs	r3, r3, #26
 800162c:	3301      	adds	r3, #1
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	e017      	b.n	800166a <HAL_ADC_ConfigChannel+0x632>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	61bb      	str	r3, [r7, #24]
  return result;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001652:	2320      	movs	r3, #32
 8001654:	e003      	b.n	800165e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	ea42 0103 	orr.w	r1, r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10d      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x65e>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0e9b      	lsrs	r3, r3, #26
 8001680:	3301      	adds	r3, #1
 8001682:	f003 021f 	and.w	r2, r3, #31
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	3b1e      	subs	r3, #30
 800168e:	051b      	lsls	r3, r3, #20
 8001690:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001694:	e01e      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x69c>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	60fb      	str	r3, [r7, #12]
  return result;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d104      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80016ae:	2320      	movs	r3, #32
 80016b0:	e006      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x688>
 80016b2:	bf00      	nop
 80016b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	f003 021f 	and.w	r2, r3, #31
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	3b1e      	subs	r3, #30
 80016ce:	051b      	lsls	r3, r3, #20
 80016d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff f96a 	bl	80009b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b3d      	ldr	r3, [pc, #244]	@ (80017dc <HAL_ADC_ConfigChannel+0x7a4>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d06c      	beq.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016ec:	483c      	ldr	r0, [pc, #240]	@ (80017e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80016ee:	f7ff f8bf 	bl	8000870 <LL_ADC_GetCommonPathInternalCh>
 80016f2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a3a      	ldr	r2, [pc, #232]	@ (80017e4 <HAL_ADC_ConfigChannel+0x7ac>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d127      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d121      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a35      	ldr	r2, [pc, #212]	@ (80017e8 <HAL_ADC_ConfigChannel+0x7b0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d157      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800171a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800171e:	4619      	mov	r1, r3
 8001720:	482f      	ldr	r0, [pc, #188]	@ (80017e0 <HAL_ADC_ConfigChannel+0x7a8>)
 8001722:	f7ff f892 	bl	800084a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <HAL_ADC_ConfigChannel+0x7b4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	099b      	lsrs	r3, r3, #6
 800172c:	4a30      	ldr	r2, [pc, #192]	@ (80017f0 <HAL_ADC_ConfigChannel+0x7b8>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	099b      	lsrs	r3, r3, #6
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001740:	e002      	b.n	8001748 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3b01      	subs	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800174e:	e03a      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a27      	ldr	r2, [pc, #156]	@ (80017f4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d113      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800175a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800175e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1f      	ldr	r2, [pc, #124]	@ (80017e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d12a      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001774:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001778:	4619      	mov	r1, r3
 800177a:	4819      	ldr	r0, [pc, #100]	@ (80017e0 <HAL_ADC_ConfigChannel+0x7a8>)
 800177c:	f7ff f865 	bl	800084a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001780:	e021      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d11c      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800178c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d116      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d111      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80017ae:	f7ff f84c 	bl	800084a <LL_ADC_SetCommonPathInternalCh>
 80017b2:	e008      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80017ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	37d8      	adds	r7, #216	@ 0xd8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	80080000 	.word	0x80080000
 80017e0:	50040300 	.word	0x50040300
 80017e4:	c7520000 	.word	0xc7520000
 80017e8:	50040000 	.word	0x50040000
 80017ec:	20000000 	.word	0x20000000
 80017f0:	053e2d63 	.word	0x053e2d63
 80017f4:	cb840000 	.word	0xcb840000
 80017f8:	80000001 	.word	0x80000001

080017fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f983 	bl	8000b18 <LL_ADC_IsEnabled>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d169      	bne.n	80018ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	4b36      	ldr	r3, [pc, #216]	@ (80018f8 <ADC_Enable+0xfc>)
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182a:	f043 0210 	orr.w	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	f043 0201 	orr.w	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e055      	b.n	80018ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f952 	bl	8000af0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800184c:	482b      	ldr	r0, [pc, #172]	@ (80018fc <ADC_Enable+0x100>)
 800184e:	f7ff f80f 	bl	8000870 <LL_ADC_GetCommonPathInternalCh>
 8001852:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800185c:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <ADC_Enable+0x104>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <ADC_Enable+0x108>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001876:	e002      	b.n	800187e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3b01      	subs	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f9      	bne.n	8001878 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001884:	f7fe ffc2 	bl	800080c <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800188a:	e028      	b.n	80018de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f941 	bl	8000b18 <LL_ADC_IsEnabled>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d104      	bne.n	80018a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f925 	bl	8000af0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018a6:	f7fe ffb1 	bl	800080c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d914      	bls.n	80018de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d00d      	beq.n	80018de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c6:	f043 0210 	orr.w	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e007      	b.n	80018ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d1cf      	bne.n	800188c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	8000003f 	.word	0x8000003f
 80018fc:	50040300 	.word	0x50040300
 8001900:	20000000 	.word	0x20000000
 8001904:	053e2d63 	.word	0x053e2d63

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	@ (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	@ (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	@ (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a88:	f7ff ff8e 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff29 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad0:	f7ff ff3e 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001ad4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f7ff ff8e 	bl	80019fc <NVIC_EncodePriority>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff5d 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff31 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffa2 	bl	8001a64 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e098      	b.n	8001c70 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b4d      	ldr	r3, [pc, #308]	@ (8001c7c <HAL_DMA_Init+0x150>)
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d80f      	bhi.n	8001b6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <HAL_DMA_Init+0x154>)
 8001b52:	4413      	add	r3, r2
 8001b54:	4a4b      	ldr	r2, [pc, #300]	@ (8001c84 <HAL_DMA_Init+0x158>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	009a      	lsls	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a48      	ldr	r2, [pc, #288]	@ (8001c88 <HAL_DMA_Init+0x15c>)
 8001b66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b68:	e00e      	b.n	8001b88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b46      	ldr	r3, [pc, #280]	@ (8001c8c <HAL_DMA_Init+0x160>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4a43      	ldr	r2, [pc, #268]	@ (8001c84 <HAL_DMA_Init+0x158>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	009a      	lsls	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a42      	ldr	r2, [pc, #264]	@ (8001c90 <HAL_DMA_Init+0x164>)
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001be2:	d039      	beq.n	8001c58 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	4a27      	ldr	r2, [pc, #156]	@ (8001c88 <HAL_DMA_Init+0x15c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11a      	bne.n	8001c24 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bee:	4b29      	ldr	r3, [pc, #164]	@ (8001c94 <HAL_DMA_Init+0x168>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f003 031c 	and.w	r3, r3, #28
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4924      	ldr	r1, [pc, #144]	@ (8001c94 <HAL_DMA_Init+0x168>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c08:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_DMA_Init+0x168>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c14:	f003 031c 	and.w	r3, r3, #28
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	491d      	ldr	r1, [pc, #116]	@ (8001c94 <HAL_DMA_Init+0x168>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
 8001c22:	e019      	b.n	8001c58 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <HAL_DMA_Init+0x16c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	f003 031c 	and.w	r3, r3, #28
 8001c30:	210f      	movs	r1, #15
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	4917      	ldr	r1, [pc, #92]	@ (8001c98 <HAL_DMA_Init+0x16c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c3e:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <HAL_DMA_Init+0x16c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	f003 031c 	and.w	r3, r3, #28
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	4911      	ldr	r1, [pc, #68]	@ (8001c98 <HAL_DMA_Init+0x16c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40020407 	.word	0x40020407
 8001c80:	bffdfff8 	.word	0xbffdfff8
 8001c84:	cccccccd 	.word	0xcccccccd
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	bffdfbf8 	.word	0xbffdfbf8
 8001c90:	40020400 	.word	0x40020400
 8001c94:	400200a8 	.word	0x400200a8
 8001c98:	400204a8 	.word	0x400204a8

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb8:	f003 031c 	and.w	r3, r3, #28
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d026      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x7a>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d021      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	f003 021c 	and.w	r2, r3, #28
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d071      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d14:	e06c      	b.n	8001df0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f003 031c 	and.w	r3, r3, #28
 8001d1e:	2202      	movs	r2, #2
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d02e      	beq.n	8001d88 <HAL_DMA_IRQHandler+0xec>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d029      	beq.n	8001d88 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 020a 	bic.w	r2, r2, #10
 8001d50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f003 021c 	and.w	r2, r3, #28
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	2102      	movs	r1, #2
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d038      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d86:	e033      	b.n	8001df0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	f003 031c 	and.w	r3, r3, #28
 8001d90:	2208      	movs	r2, #8
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d02a      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x156>
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d025      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 020e 	bic.w	r2, r2, #14
 8001db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f003 021c 	and.w	r2, r3, #28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
}
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e148      	b.n	800209e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 813a 	beq.w	8002098 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x40>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d017      	beq.n	8001eda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d123      	bne.n	8001f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8094 	beq.w	8002098 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f70:	4b52      	ldr	r3, [pc, #328]	@ (80020bc <HAL_GPIO_Init+0x2c0>)
 8001f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f74:	4a51      	ldr	r2, [pc, #324]	@ (80020bc <HAL_GPIO_Init+0x2c0>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80020bc <HAL_GPIO_Init+0x2c0>)
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f88:	4a4d      	ldr	r2, [pc, #308]	@ (80020c0 <HAL_GPIO_Init+0x2c4>)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1d4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a43      	ldr	r2, [pc, #268]	@ (80020c4 <HAL_GPIO_Init+0x2c8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0x1d0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a42      	ldr	r2, [pc, #264]	@ (80020c8 <HAL_GPIO_Init+0x2cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_GPIO_Init+0x1cc>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e004      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fc8:	2307      	movs	r3, #7
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_Init+0x1d6>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe2:	4937      	ldr	r1, [pc, #220]	@ (80020c0 <HAL_GPIO_Init+0x2c4>)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff0:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002014:	4a2d      	ldr	r2, [pc, #180]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201a:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800203e:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800206e:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002092:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f47f aeaf 	bne.w	8001e0c <HAL_GPIO_Init+0x10>
  }
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	48000400 	.word	0x48000400
 80020c8:	48000800 	.word	0x48000800
 80020cc:	40010400 	.word	0x40010400

080020d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40007000 	.word	0x40007000

080020ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020fa:	d130      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fc:	4b23      	ldr	r3, [pc, #140]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d038      	beq.n	800217c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002112:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2232      	movs	r2, #50	@ 0x32
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0c9b      	lsrs	r3, r3, #18
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002130:	e002      	b.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b01      	subs	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002138:	4b14      	ldr	r3, [pc, #80]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002144:	d102      	bne.n	800214c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f2      	bne.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002158:	d110      	bne.n	800217c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e00f      	b.n	800217e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216a:	d007      	beq.n	800217c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800216c:	4b07      	ldr	r3, [pc, #28]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002174:	4a05      	ldr	r2, [pc, #20]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000
 8002190:	20000000 	.word	0x20000000
 8002194:	431bde83 	.word	0x431bde83

08002198 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f000 bc02 	b.w	80029b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4b96      	ldr	r3, [pc, #600]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b6:	4b94      	ldr	r3, [pc, #592]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80e4 	beq.w	8002396 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4c>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	f040 808b 	bne.w	80022f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	f040 8087 	bne.w	80022f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e4:	4b88      	ldr	r3, [pc, #544]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x64>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e3d9      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1a      	ldr	r2, [r3, #32]
 8002200:	4b81      	ldr	r3, [pc, #516]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_RCC_OscConfig+0x7e>
 800220c:	4b7e      	ldr	r3, [pc, #504]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002214:	e005      	b.n	8002222 <HAL_RCC_OscConfig+0x8a>
 8002216:	4b7c      	ldr	r3, [pc, #496]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002222:	4293      	cmp	r3, r2
 8002224:	d223      	bcs.n	800226e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd54 	bl	8002cd8 <RCC_SetFlashLatencyFromMSIRange>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e3ba      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223a:	4b73      	ldr	r3, [pc, #460]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a72      	ldr	r2, [pc, #456]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b70      	ldr	r3, [pc, #448]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	496d      	ldr	r1, [pc, #436]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002258:	4b6b      	ldr	r3, [pc, #428]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	4968      	ldr	r1, [pc, #416]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e025      	b.n	80022ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226e:	4b66      	ldr	r3, [pc, #408]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a65      	ldr	r2, [pc, #404]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b63      	ldr	r3, [pc, #396]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4960      	ldr	r1, [pc, #384]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228c:	4b5e      	ldr	r3, [pc, #376]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	495b      	ldr	r1, [pc, #364]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fd14 	bl	8002cd8 <RCC_SetFlashLatencyFromMSIRange>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e37a      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ba:	f000 fc81 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b51      	ldr	r3, [pc, #324]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4950      	ldr	r1, [pc, #320]	@ (800240c <HAL_RCC_OscConfig+0x274>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002410 <HAL_RCC_OscConfig+0x278>)
 80022d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022da:	4b4e      	ldr	r3, [pc, #312]	@ (8002414 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fa44 	bl	800076c <HAL_InitTick>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d052      	beq.n	8002394 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	e35e      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d032      	beq.n	8002360 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022fa:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a42      	ldr	r2, [pc, #264]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002306:	f7fe fa81 	bl	800080c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800230e:	f7fe fa7d 	bl	800080c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e347      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002320:	4b39      	ldr	r3, [pc, #228]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232c:	4b36      	ldr	r3, [pc, #216]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b33      	ldr	r3, [pc, #204]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4930      	ldr	r1, [pc, #192]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	492b      	ldr	r1, [pc, #172]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
 800235e:	e01a      	b.n	8002396 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002360:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236c:	f7fe fa4e 	bl	800080c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002374:	f7fe fa4a 	bl	800080c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e314      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1dc>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d073      	beq.n	800248a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x21c>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d10e      	bne.n	80023cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d10b      	bne.n	80023cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d063      	beq.n	8002488 <HAL_RCC_OscConfig+0x2f0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d15f      	bne.n	8002488 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e2f1      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x24c>
 80023d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a0b      	ldr	r2, [pc, #44]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e025      	b.n	8002430 <HAL_RCC_OscConfig+0x298>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ec:	d114      	bne.n	8002418 <HAL_RCC_OscConfig+0x280>
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a02      	ldr	r2, [pc, #8]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e013      	b.n	8002430 <HAL_RCC_OscConfig+0x298>
 8002408:	40021000 	.word	0x40021000
 800240c:	080038f8 	.word	0x080038f8
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004
 8002418:	4ba0      	ldr	r3, [pc, #640]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a9f      	ldr	r2, [pc, #636]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b9d      	ldr	r3, [pc, #628]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a9c      	ldr	r2, [pc, #624]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe f9e8 	bl	800080c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe f9e4 	bl	800080c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	@ 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e2ae      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	4b92      	ldr	r3, [pc, #584]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x2a8>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe f9d4 	bl	800080c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7fe f9d0 	bl	800080c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	@ 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e29a      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x2d0>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d060      	beq.n	8002558 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x310>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d116      	bne.n	80024d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a8:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x328>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e277      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b76      	ldr	r3, [pc, #472]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	4973      	ldr	r1, [pc, #460]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d4:	e040      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d023      	beq.n	8002526 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024de:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe f98f 	bl	800080c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe f98b 	bl	800080c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e255      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	4b65      	ldr	r3, [pc, #404]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b62      	ldr	r3, [pc, #392]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	061b      	lsls	r3, r3, #24
 800251e:	495f      	ldr	r1, [pc, #380]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	e018      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b5d      	ldr	r3, [pc, #372]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5c      	ldr	r2, [pc, #368]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800252c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe f96b 	bl	800080c <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253a:	f7fe f967 	bl	800080c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e231      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800254c:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d03c      	beq.n	80025de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256c:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002572:	4a4a      	ldr	r2, [pc, #296]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7fe f946 	bl	800080c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7fe f942 	bl	800080c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e20c      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ef      	beq.n	8002584 <HAL_RCC_OscConfig+0x3ec>
 80025a4:	e01b      	b.n	80025de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ac:	4a3b      	ldr	r2, [pc, #236]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fe f929 	bl	800080c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025be:	f7fe f925 	bl	800080c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1ef      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	4b32      	ldr	r3, [pc, #200]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ef      	bne.n	80025be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80a6 	beq.w	8002738 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025f0:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10d      	bne.n	8002618 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	@ 0x58
 8002608:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002614:	2301      	movs	r3, #1
 8002616:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002618:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d118      	bne.n	8002656 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002624:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1d      	ldr	r2, [pc, #116]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002630:	f7fe f8ec 	bl	800080c <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002638:	f7fe f8e8 	bl	800080c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1b2      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x4d8>
 800265e:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	4a0d      	ldr	r2, [pc, #52]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800266e:	e029      	b.n	80026c4 <HAL_RCC_OscConfig+0x52c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d115      	bne.n	80026a4 <HAL_RCC_OscConfig+0x50c>
 8002678:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	4a07      	ldr	r2, [pc, #28]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	4a03      	ldr	r2, [pc, #12]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x52c>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	4b9a      	ldr	r3, [pc, #616]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026aa:	4a99      	ldr	r2, [pc, #612]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b4:	4b96      	ldr	r3, [pc, #600]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	4a95      	ldr	r2, [pc, #596]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe f89e 	bl	800080c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe f89a 	bl	800080c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e162      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	4b89      	ldr	r3, [pc, #548]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ed      	beq.n	80026d4 <HAL_RCC_OscConfig+0x53c>
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe f887 	bl	800080c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe f883 	bl	800080c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e14b      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002718:	4b7d      	ldr	r3, [pc, #500]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ed      	bne.n	8002702 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b78      	ldr	r3, [pc, #480]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a77      	ldr	r2, [pc, #476]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d03c      	beq.n	80027be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01c      	beq.n	8002786 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800274c:	4b70      	ldr	r3, [pc, #448]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 800274e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002752:	4a6f      	ldr	r2, [pc, #444]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe f856 	bl	800080c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002764:	f7fe f852 	bl	800080c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e11c      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002776:	4b66      	ldr	r3, [pc, #408]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 8002778:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCC_OscConfig+0x5cc>
 8002784:	e01b      	b.n	80027be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002786:	4b62      	ldr	r3, [pc, #392]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 8002788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800278c:	4a60      	ldr	r2, [pc, #384]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe f839 	bl	800080c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279e:	f7fe f835 	bl	800080c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0ff      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b0:	4b57      	ldr	r3, [pc, #348]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80027b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ef      	bne.n	800279e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80f3 	beq.w	80029ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f040 80c9 	bne.w	8002964 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0203 	and.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d12c      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	3b01      	subs	r3, #1
 80027f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d123      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002802:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d11b      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d113      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	3b01      	subs	r3, #1
 8002826:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d109      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d06b      	beq.n	8002918 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d062      	beq.n	800290c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002846:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0ac      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002856:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 800285c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002860:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002862:	f7fd ffd3 	bl	800080c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fd ffcf 	bl	800080c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e099      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002888:	4b21      	ldr	r3, [pc, #132]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 800288e:	4013      	ands	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002898:	3a01      	subs	r2, #1
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	4311      	orrs	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028a2:	0212      	lsls	r2, r2, #8
 80028a4:	4311      	orrs	r1, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028aa:	0852      	lsrs	r2, r2, #1
 80028ac:	3a01      	subs	r2, #1
 80028ae:	0552      	lsls	r2, r2, #21
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0652      	lsls	r2, r2, #25
 80028bc:	4311      	orrs	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c2:	06d2      	lsls	r2, r2, #27
 80028c4:	430a      	orrs	r2, r1
 80028c6:	4912      	ldr	r1, [pc, #72]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028cc:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e4:	f7fd ff92 	bl	800080c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fd ff8e 	bl	800080c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e058      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <HAL_RCC_OscConfig+0x778>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290a:	e050      	b.n	80029ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e04f      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
 8002910:	40021000 	.word	0x40021000
 8002914:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002918:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d144      	bne.n	80029ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002924:	4b24      	ldr	r3, [pc, #144]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800292e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002930:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a20      	ldr	r2, [pc, #128]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800293a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800293c:	f7fd ff66 	bl	800080c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fd ff62 	bl	800080c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e02c      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x7ac>
 8002962:	e024      	b.n	80029ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d01f      	beq.n	80029aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 8002970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fd ff49 	bl	800080c <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7fd ff45 	bl	800080c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e00f      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	4905      	ldr	r1, [pc, #20]	@ (80029b8 <HAL_RCC_OscConfig+0x820>)
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x824>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
 80029a8:	e001      	b.n	80029ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	feeefffc 	.word	0xfeeefffc

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0e7      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b75      	ldr	r3, [pc, #468]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d910      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b72      	ldr	r3, [pc, #456]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0207 	bic.w	r2, r3, #7
 80029ea:	4970      	ldr	r1, [pc, #448]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b6e      	ldr	r3, [pc, #440]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0cf      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d010      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b66      	ldr	r3, [pc, #408]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d908      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b63      	ldr	r3, [pc, #396]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4960      	ldr	r1, [pc, #384]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04c      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d121      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0a6      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5e:	4b54      	ldr	r3, [pc, #336]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e09a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a76:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e08e      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e086      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4943      	ldr	r1, [pc, #268]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fd feb0 	bl	800080c <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fd feac 	bl	800080c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e06e      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	4b31      	ldr	r3, [pc, #196]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d208      	bcs.n	8002b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	492b      	ldr	r1, [pc, #172]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b06:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d210      	bcs.n	8002b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b14:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0207 	bic.w	r2, r3, #7
 8002b1c:	4923      	ldr	r1, [pc, #140]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b24:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <HAL_RCC_ClockConfig+0x1ec>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e036      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b42:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4918      	ldr	r1, [pc, #96]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b60:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4910      	ldr	r1, [pc, #64]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b74:	f000 f824 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	490b      	ldr	r1, [pc, #44]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1fc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fde7 	bl	800076c <HAL_InitTick>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	080038f8 	.word	0x080038f8
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bce:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d121      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d11e      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf4:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c00:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e005      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c10:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10d      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d102      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c38:	4b25      	ldr	r3, [pc, #148]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	e004      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c44:	4b23      	ldr	r3, [pc, #140]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d134      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d003      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0xac>
 8002c64:	e005      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c68:	617b      	str	r3, [r7, #20]
      break;
 8002c6a:	e005      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c6c:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c6e:	617b      	str	r3, [r7, #20]
      break;
 8002c70:	e002      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	617b      	str	r3, [r7, #20]
      break;
 8002c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	3301      	adds	r3, #1
 8002c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	fb03 f202 	mul.w	r2, r3, r2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	0e5b      	lsrs	r3, r3, #25
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	@ 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08003908 	.word	0x08003908
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cf0:	f7ff f9ee 	bl	80020d0 <HAL_PWREx_GetVoltageRange>
 8002cf4:	6178      	str	r0, [r7, #20]
 8002cf6:	e014      	b.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	4a24      	ldr	r2, [pc, #144]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d04:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d10:	f7ff f9de 	bl	80020d0 <HAL_PWREx_GetVoltageRange>
 8002d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d28:	d10b      	bne.n	8002d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b80      	cmp	r3, #128	@ 0x80
 8002d2e:	d919      	bls.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d34:	d902      	bls.n	8002d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d36:	2302      	movs	r3, #2
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	e013      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e010      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d902      	bls.n	8002d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d48:	2303      	movs	r3, #3
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e00a      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b80      	cmp	r3, #128	@ 0x80
 8002d52:	d102      	bne.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d54:	2302      	movs	r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	e004      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b70      	cmp	r3, #112	@ 0x70
 8002d5e:	d101      	bne.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 0207 	bic.w	r2, r3, #7
 8002d6c:	4909      	ldr	r1, [pc, #36]	@ (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d74:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40022000 	.word	0x40022000

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da0:	2300      	movs	r3, #0
 8002da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da4:	2300      	movs	r3, #0
 8002da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d031      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dbc:	d01a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002dbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dc2:	d814      	bhi.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dcc:	d10f      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dce:	4b5d      	ldr	r3, [pc, #372]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dda:	e00c      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f9ce 	bl	8003184 <RCCEx_PLLSAI1_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dec:	e003      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	74fb      	strb	r3, [r7, #19]
      break;
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dfc:	4b51      	ldr	r3, [pc, #324]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0a:	494e      	ldr	r1, [pc, #312]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e12:	e001      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 809e 	beq.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e2a:	4b46      	ldr	r3, [pc, #280]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b40      	ldr	r3, [pc, #256]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	4a3f      	ldr	r2, [pc, #252]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a39      	ldr	r2, [pc, #228]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e68:	f7fd fcd0 	bl	800080c <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e6e:	e009      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e70:	f7fd fccc 	bl	800080c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	74fb      	strb	r3, [r7, #19]
        break;
 8002e82:	e005      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e84:	4b30      	ldr	r3, [pc, #192]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ef      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d15a      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e96:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01e      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d019      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ebc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ebe:	4b21      	ldr	r3, [pc, #132]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ece:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ede:	4a19      	ldr	r2, [pc, #100]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d016      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fd fc8c 	bl	800080c <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fd fc88 	bl	800080c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d902      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f0e:	e006      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ec      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f24:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f32:	4904      	ldr	r1, [pc, #16]	@ (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f3a:	e009      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	74bb      	strb	r3, [r7, #18]
 8002f40:	e006      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f50:	7c7b      	ldrb	r3, [r7, #17]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b8a      	ldr	r3, [pc, #552]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	4a89      	ldr	r2, [pc, #548]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f6e:	4b84      	ldr	r3, [pc, #528]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f023 0203 	bic.w	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4980      	ldr	r1, [pc, #512]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f90:	4b7b      	ldr	r3, [pc, #492]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	f023 020c 	bic.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	4978      	ldr	r1, [pc, #480]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fb2:	4b73      	ldr	r3, [pc, #460]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	496f      	ldr	r1, [pc, #444]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe2:	4967      	ldr	r1, [pc, #412]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ff6:	4b62      	ldr	r3, [pc, #392]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	495e      	ldr	r1, [pc, #376]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003018:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	4956      	ldr	r1, [pc, #344]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800303a:	4b51      	ldr	r3, [pc, #324]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003040:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	494d      	ldr	r1, [pc, #308]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d028      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800305c:	4b48      	ldr	r3, [pc, #288]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	4945      	ldr	r1, [pc, #276]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800307a:	d106      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307c:	4b40      	ldr	r3, [pc, #256]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a3f      	ldr	r2, [pc, #252]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003086:	60d3      	str	r3, [r2, #12]
 8003088:	e011      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003092:	d10c      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f872 	bl	8003184 <RCCEx_PLLSAI1_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d028      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ba:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	492d      	ldr	r1, [pc, #180]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d8:	d106      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030da:	4b29      	ldr	r3, [pc, #164]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4a28      	ldr	r2, [pc, #160]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e4:	60d3      	str	r3, [r2, #12]
 80030e6:	e011      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030f0:	d10c      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f843 	bl	8003184 <RCCEx_PLLSAI1_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003126:	4916      	ldr	r1, [pc, #88]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003136:	d10c      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	2102      	movs	r1, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f820 	bl	8003184 <RCCEx_PLLSAI1_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800315e:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316c:	4904      	ldr	r1, [pc, #16]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003174:	7cbb      	ldrb	r3, [r7, #18]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000

08003184 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003192:	4b74      	ldr	r3, [pc, #464]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800319e:	4b71      	ldr	r3, [pc, #452]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0203 	and.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10d      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
       ||
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
       ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d047      	beq.n	800325a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e044      	b.n	800325a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d018      	beq.n	800320a <RCCEx_PLLSAI1_Config+0x86>
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d825      	bhi.n	8003228 <RCCEx_PLLSAI1_Config+0xa4>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d002      	beq.n	80031e6 <RCCEx_PLLSAI1_Config+0x62>
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d009      	beq.n	80031f8 <RCCEx_PLLSAI1_Config+0x74>
 80031e4:	e020      	b.n	8003228 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11d      	bne.n	800322e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f6:	e01a      	b.n	800322e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d116      	bne.n	8003232 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003208:	e013      	b.n	8003232 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800320a:	4b56      	ldr	r3, [pc, #344]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003216:	4b53      	ldr	r3, [pc, #332]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003226:	e006      	b.n	8003236 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e004      	b.n	8003238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003236:	bf00      	nop
    }

    if(status == HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800323e:	4b49      	ldr	r3, [pc, #292]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	430b      	orrs	r3, r1
 8003254:	4943      	ldr	r1, [pc, #268]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d17c      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003260:	4b40      	ldr	r3, [pc, #256]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3f      	ldr	r2, [pc, #252]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003266:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fd face 	bl	800080c <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003272:	e009      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003274:	f7fd faca 	bl	800080c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d902      	bls.n	8003288 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	73fb      	strb	r3, [r7, #15]
        break;
 8003286:	e005      	b.n	8003294 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003288:	4b36      	ldr	r3, [pc, #216]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ef      	bne.n	8003274 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d15f      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d110      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032a0:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80032a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6892      	ldr	r2, [r2, #8]
 80032b0:	0211      	lsls	r1, r2, #8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68d2      	ldr	r2, [r2, #12]
 80032b6:	06d2      	lsls	r2, r2, #27
 80032b8:	430a      	orrs	r2, r1
 80032ba:	492a      	ldr	r1, [pc, #168]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	610b      	str	r3, [r1, #16]
 80032c0:	e027      	b.n	8003312 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d112      	bne.n	80032ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c8:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	0211      	lsls	r1, r2, #8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6912      	ldr	r2, [r2, #16]
 80032de:	0852      	lsrs	r2, r2, #1
 80032e0:	3a01      	subs	r2, #1
 80032e2:	0552      	lsls	r2, r2, #21
 80032e4:	430a      	orrs	r2, r1
 80032e6:	491f      	ldr	r1, [pc, #124]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	610b      	str	r3, [r1, #16]
 80032ec:	e011      	b.n	8003312 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	0211      	lsls	r1, r2, #8
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6952      	ldr	r2, [r2, #20]
 8003304:	0852      	lsrs	r2, r2, #1
 8003306:	3a01      	subs	r2, #1
 8003308:	0652      	lsls	r2, r2, #25
 800330a:	430a      	orrs	r2, r1
 800330c:	4915      	ldr	r1, [pc, #84]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003312:	4b14      	ldr	r3, [pc, #80]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800331c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331e:	f7fd fa75 	bl	800080c <HAL_GetTick>
 8003322:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003324:	e009      	b.n	800333a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003326:	f7fd fa71 	bl	800080c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d902      	bls.n	800333a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	73fb      	strb	r3, [r7, #15]
          break;
 8003338:	e005      	b.n	8003346 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800333a:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ef      	beq.n	8003326 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4903      	ldr	r1, [pc, #12]	@ (8003364 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e049      	b.n	800340e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd f93e 	bl	8000610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 f8fe 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_TIM_ConfigClockSource+0x1c>
 800342e:	2302      	movs	r3, #2
 8003430:	e0b6      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x18a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003450:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003454:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800345c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346e:	d03e      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xd8>
 8003470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003474:	f200 8087 	bhi.w	8003586 <HAL_TIM_ConfigClockSource+0x170>
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347c:	f000 8086 	beq.w	800358c <HAL_TIM_ConfigClockSource+0x176>
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003484:	d87f      	bhi.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
 8003486:	2b70      	cmp	r3, #112	@ 0x70
 8003488:	d01a      	beq.n	80034c0 <HAL_TIM_ConfigClockSource+0xaa>
 800348a:	2b70      	cmp	r3, #112	@ 0x70
 800348c:	d87b      	bhi.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
 800348e:	2b60      	cmp	r3, #96	@ 0x60
 8003490:	d050      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0x11e>
 8003492:	2b60      	cmp	r3, #96	@ 0x60
 8003494:	d877      	bhi.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
 8003496:	2b50      	cmp	r3, #80	@ 0x50
 8003498:	d03c      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0xfe>
 800349a:	2b50      	cmp	r3, #80	@ 0x50
 800349c:	d873      	bhi.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
 800349e:	2b40      	cmp	r3, #64	@ 0x40
 80034a0:	d058      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x13e>
 80034a2:	2b40      	cmp	r3, #64	@ 0x40
 80034a4:	d86f      	bhi.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
 80034a6:	2b30      	cmp	r3, #48	@ 0x30
 80034a8:	d064      	beq.n	8003574 <HAL_TIM_ConfigClockSource+0x15e>
 80034aa:	2b30      	cmp	r3, #48	@ 0x30
 80034ac:	d86b      	bhi.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d060      	beq.n	8003574 <HAL_TIM_ConfigClockSource+0x15e>
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d867      	bhi.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d05c      	beq.n	8003574 <HAL_TIM_ConfigClockSource+0x15e>
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d05a      	beq.n	8003574 <HAL_TIM_ConfigClockSource+0x15e>
 80034be:	e062      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d0:	f000 f954 	bl	800377c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	609a      	str	r2, [r3, #8]
      break;
 80034ec:	e04f      	b.n	800358e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fe:	f000 f93d 	bl	800377c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003510:	609a      	str	r2, [r3, #8]
      break;
 8003512:	e03c      	b.n	800358e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003520:	461a      	mov	r2, r3
 8003522:	f000 f8b1 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2150      	movs	r1, #80	@ 0x50
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f90a 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8003532:	e02c      	b.n	800358e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003540:	461a      	mov	r2, r3
 8003542:	f000 f8d0 	bl	80036e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2160      	movs	r1, #96	@ 0x60
 800354c:	4618      	mov	r0, r3
 800354e:	f000 f8fa 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8003552:	e01c      	b.n	800358e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003560:	461a      	mov	r2, r3
 8003562:	f000 f891 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2140      	movs	r1, #64	@ 0x40
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f8ea 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8003572:	e00c      	b.n	800358e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 f8e1 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8003584:	e003      	b.n	800358e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
      break;
 800358a:	e000      	b.n	800358e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800358c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a30      	ldr	r2, [pc, #192]	@ (800367c <TIM_Base_SetConfig+0xd4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x20>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a27      	ldr	r2, [pc, #156]	@ (800367c <TIM_Base_SetConfig+0xd4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00b      	beq.n	80035fa <TIM_Base_SetConfig+0x52>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e8:	d007      	beq.n	80035fa <TIM_Base_SetConfig+0x52>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a24      	ldr	r2, [pc, #144]	@ (8003680 <TIM_Base_SetConfig+0xd8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_Base_SetConfig+0x52>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a23      	ldr	r2, [pc, #140]	@ (8003684 <TIM_Base_SetConfig+0xdc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d108      	bne.n	800360c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a12      	ldr	r2, [pc, #72]	@ (800367c <TIM_Base_SetConfig+0xd4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0xa0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a11      	ldr	r2, [pc, #68]	@ (8003680 <TIM_Base_SetConfig+0xd8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0xa0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a10      	ldr	r2, [pc, #64]	@ (8003684 <TIM_Base_SetConfig+0xdc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	611a      	str	r2, [r3, #16]
  }
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400

08003688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 030a 	bic.w	r3, r3, #10
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0210 	bic.w	r2, r3, #16
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	f043 0307 	orr.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	431a      	orrs	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e04f      	b.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003804:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d004      	beq.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a10      	ldr	r2, [pc, #64]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d10c      	bne.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800384e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40014000 	.word	0x40014000

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4d0d      	ldr	r5, [pc, #52]	@ (80038d0 <__libc_init_array+0x38>)
 800389c:	4c0d      	ldr	r4, [pc, #52]	@ (80038d4 <__libc_init_array+0x3c>)
 800389e:	1b64      	subs	r4, r4, r5
 80038a0:	10a4      	asrs	r4, r4, #2
 80038a2:	2600      	movs	r6, #0
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	4d0b      	ldr	r5, [pc, #44]	@ (80038d8 <__libc_init_array+0x40>)
 80038aa:	4c0c      	ldr	r4, [pc, #48]	@ (80038dc <__libc_init_array+0x44>)
 80038ac:	f000 f818 	bl	80038e0 <_init>
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	2600      	movs	r6, #0
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	08003938 	.word	0x08003938
 80038d4:	08003938 	.word	0x08003938
 80038d8:	08003938 	.word	0x08003938
 80038dc:	0800393c 	.word	0x0800393c

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
