
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5d4  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800b768  0800b768  0000c768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f0  0800b7f0  0000d060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b7f0  0800b7f0  0000c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f8  0800b7f8  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f8  0800b7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7fc  0800b7fc  0000c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800b800  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003038  20000060  0800b860  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003098  0800b860  0000d098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a73c  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  000277cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0002b588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a1  00000000  00000000  0002cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024aba  00000000  00000000  0002dbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf70  00000000  00000000  00052683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9318  00000000  00000000  0006e5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014790b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ac  00000000  00000000  00147950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0014d9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b74c 	.word	0x0800b74c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800b74c 	.word	0x0800b74c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b988 	b.w	8000f00 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);

int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 8000f10:	79f8      	ldrb	r0, [r7, #7]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000f18:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8000f1c:	f002 ff0a 	bl	8003d34 <MLX90640_I2CRead>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <MLX90640_GetFrameData>:

    return MLX90640_NO_ERROR;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b0a6      	sub	sp, #152	@ 0x98
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	6039      	str	r1, [r7, #0]
 8000f34:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95

    while(dataReady == 0)
 8000f48:	e016      	b.n	8000f78 <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 8000f4a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000f4e:	79f8      	ldrb	r0, [r7, #7]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f56:	f002 feed 	bl	8003d34 <MLX90640_I2CRead>
 8000f5a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        if(error != MLX90640_NO_ERROR)
 8000f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <MLX90640_GetFrameData+0x42>
        {
            return error;
 8000f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f6a:	e093      	b.n	8001094 <MLX90640_GetFrameData+0x16a>
        }
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister);
 8000f6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    while(dataReady == 0)
 8000f78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0e4      	beq.n	8000f4a <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2230      	movs	r2, #48	@ 0x30
 8000f84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 ff1f 	bl	8003dcc <MLX90640_I2CWrite>
 8000f8e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 8000f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f9a:	d102      	bne.n	8000fa2 <MLX90640_GetFrameData+0x78>
    {
        return error;
 8000f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fa0:	e078      	b.n	8001094 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData);
 8000fa2:	79f8      	ldrb	r0, [r7, #7]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000faa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fae:	f002 fec1 	bl	8003d34 <MLX90640_I2CRead>
 8000fb2:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8000fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 8000fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fc2:	e067      	b.n	8001094 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	79f8      	ldrb	r0, [r7, #7]
 8000fca:	2240      	movs	r2, #64	@ 0x40
 8000fcc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000fd0:	f002 feb0 	bl	8003d34 <MLX90640_I2CRead>
 8000fd4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8000fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <MLX90640_GetFrameData+0xbc>
    {
        return error;
 8000fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fe4:	e056      	b.n	8001094 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8000fe6:	f107 038e 	add.w	r3, r7, #142	@ 0x8e
 8000fea:	79f8      	ldrb	r0, [r7, #7]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f248 010d 	movw	r1, #32781	@ 0x800d
 8000ff2:	f002 fe9f 	bl	8003d34 <MLX90640_I2CRead>
 8000ff6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    frameData[832] = controlRegister1;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001000:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001004:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 8001006:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8001010:	f002 0201 	and.w	r2, r2, #1
 8001014:	b292      	uxth	r2, r2
 8001016:	801a      	strh	r2, [r3, #0]

    if(error != MLX90640_NO_ERROR)
 8001018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8001020:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001024:	e036      	b.n	8001094 <MLX90640_GetFrameData+0x16a>
    }

    error = ValidateAuxData(data);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f867 	bl	80010fe <ValidateAuxData>
 8001030:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == MLX90640_NO_ERROR)
 8001034:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11b      	bne.n	8001074 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8001042:	e013      	b.n	800106c <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 8001044:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001048:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 800104c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8001050:	0052      	lsls	r2, r2, #1
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	440a      	add	r2, r1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	3398      	adds	r3, #152	@ 0x98
 800105a:	443b      	add	r3, r7
 800105c:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8001060:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8001062:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001066:	3301      	adds	r3, #1
 8001068:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800106c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001070:	2b3f      	cmp	r3, #63	@ 0x3f
 8001072:	d9e7      	bls.n	8001044 <MLX90640_GetFrameData+0x11a>
        }
    }

    error = ValidateFrameData(frameData);
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f000 f811 	bl	800109c <ValidateFrameData>
 800107a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if (error != MLX90640_NO_ERROR)
 800107e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <MLX90640_GetFrameData+0x162>
    {
        return error;
 8001086:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800108a:	e003      	b.n	8001094 <MLX90640_GetFrameData+0x16a>
    }

    return frameData[833];
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8001092:	881b      	ldrh	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3798      	adds	r7, #152	@ 0x98
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	e01c      	b.n	80010e8 <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80010bc:	4293      	cmp	r3, r2
 80010be:	d10d      	bne.n	80010dc <ValidateFrameData+0x40>
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d102      	bne.n	80010dc <ValidateFrameData+0x40>
 80010d6:	f06f 0307 	mvn.w	r3, #7
 80010da:	e00a      	b.n	80010f2 <ValidateFrameData+0x56>
        line = line + 1;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3320      	adds	r3, #32
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80010ee:	dbde      	blt.n	80010ae <ValidateFrameData+0x12>
    }

    return MLX90640_NO_ERROR;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 80010fe:	b480      	push	{r7}
 8001100:	b089      	sub	sp, #36	@ 0x24
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]

    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800110e:	4293      	cmp	r3, r2
 8001110:	d102      	bne.n	8001118 <ValidateAuxData+0x1a>
 8001112:	f06f 0307 	mvn.w	r3, #7
 8001116:	e07e      	b.n	8001216 <ValidateAuxData+0x118>

    for(int i=8; i<19; i++)
 8001118:	2308      	movs	r3, #8
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	e00e      	b.n	800113c <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800112c:	4293      	cmp	r3, r2
 800112e:	d102      	bne.n	8001136 <ValidateAuxData+0x38>
 8001130:	f06f 0307 	mvn.w	r3, #7
 8001134:	e06f      	b.n	8001216 <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b12      	cmp	r3, #18
 8001140:	dded      	ble.n	800111e <ValidateAuxData+0x20>
    }

    for(int i=20; i<23; i++)
 8001142:	2314      	movs	r3, #20
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	e00e      	b.n	8001166 <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001156:	4293      	cmp	r3, r2
 8001158:	d102      	bne.n	8001160 <ValidateAuxData+0x62>
 800115a:	f06f 0307 	mvn.w	r3, #7
 800115e:	e05a      	b.n	8001216 <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	3301      	adds	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b16      	cmp	r3, #22
 800116a:	dded      	ble.n	8001148 <ValidateAuxData+0x4a>
    }

    for(int i=24; i<33; i++)
 800116c:	2318      	movs	r3, #24
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e00e      	b.n	8001190 <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001180:	4293      	cmp	r3, r2
 8001182:	d102      	bne.n	800118a <ValidateAuxData+0x8c>
 8001184:	f06f 0307 	mvn.w	r3, #7
 8001188:	e045      	b.n	8001216 <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b20      	cmp	r3, #32
 8001194:	dded      	ble.n	8001172 <ValidateAuxData+0x74>
    }

    for(int i=40; i<51; i++)
 8001196:	2328      	movs	r3, #40	@ 0x28
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	e00e      	b.n	80011ba <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d102      	bne.n	80011b4 <ValidateAuxData+0xb6>
 80011ae:	f06f 0307 	mvn.w	r3, #7
 80011b2:	e030      	b.n	8001216 <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	3301      	adds	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2b32      	cmp	r3, #50	@ 0x32
 80011be:	dded      	ble.n	800119c <ValidateAuxData+0x9e>
    }

    for(int i=52; i<55; i++)
 80011c0:	2334      	movs	r3, #52	@ 0x34
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e00e      	b.n	80011e4 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d102      	bne.n	80011de <ValidateAuxData+0xe0>
 80011d8:	f06f 0307 	mvn.w	r3, #7
 80011dc:	e01b      	b.n	8001216 <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b36      	cmp	r3, #54	@ 0x36
 80011e8:	dded      	ble.n	80011c6 <ValidateAuxData+0xc8>
    }

    for(int i=56; i<64; i++)
 80011ea:	2338      	movs	r3, #56	@ 0x38
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	e00e      	b.n	800120e <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011fe:	4293      	cmp	r3, r2
 8001200:	d102      	bne.n	8001208 <ValidateAuxData+0x10a>
 8001202:	f06f 0307 	mvn.w	r3, #7
 8001206:	e006      	b.n	8001216 <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3301      	adds	r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b3f      	cmp	r3, #63	@ 0x3f
 8001212:	dded      	ble.n	80011f0 <ValidateAuxData+0xf2>
    }

    return MLX90640_NO_ERROR;
 8001214:	2300      	movs	r3, #0

}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
    int error = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]

    ExtractVDDParameters(eeData, mlx90640);
 8001230:	6839      	ldr	r1, [r7, #0]
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fe80 	bl	8001f38 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fea8 	bl	8001f90 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 ff30 	bl	80020a8 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 ff3e 	bl	80020cc <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 8001250:	6839      	ldr	r1, [r7, #0]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 ff56 	bl	8002104 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 ff6a 	bl	8002134 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8001260:	6839      	ldr	r1, [r7, #0]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 ff84 	bl	8002170 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f002 fa50 	bl	8003710 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f838 	bl	80022e8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f001 fbbc 	bl	80029f8 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8001280:	6839      	ldr	r1, [r7, #0]
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f001 fdf4 	bl	8002e70 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f002 f838 	bl	8003300 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8001290:	6839      	ldr	r1, [r7, #0]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f002 fb78 	bl	8003988 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f002 fc14 	bl	8003ac8 <ExtractDeviatingPixels>
 80012a0:	60f8      	str	r0, [r7, #12]

    return error;
 80012a2:	68fb      	ldr	r3, [r7, #12]

}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    uint16_t value;
    int error;

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	79f8      	ldrb	r0, [r7, #7]
 80012bc:	2201      	movs	r2, #1
 80012be:	f248 010d 	movw	r1, #32781	@ 0x800d
 80012c2:	f002 fd37 	bl	8003d34 <MLX90640_I2CRead>
 80012c6:	60f8      	str	r0, [r7, #12]

    if(error == 0)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10b      	bne.n	80012e6 <MLX90640_SetChessMode+0x3a>
    {
        value = (controlRegister1 | MLX90640_CTRL_MEAS_MODE_MASK);
 80012ce:	893b      	ldrh	r3, [r7, #8]
 80012d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d4:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 80012d6:	897a      	ldrh	r2, [r7, #10]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f248 010d 	movw	r1, #32781	@ 0x800d
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fd74 	bl	8003dcc <MLX90640_I2CWrite>
 80012e4:	60f8      	str	r0, [r7, #12]
    }

    return error;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 80012f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012f4:	b0a0      	sub	sp, #128	@ 0x80
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6178      	str	r0, [r7, #20]
 80012fa:	6139      	str	r1, [r7, #16]
 80012fc:	ed87 0a03 	vstr	s0, [r7, #12]
 8001300:	edc7 0a02 	vstr	s1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;

    subPage = frameData[833];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	@ 0x682
 800130c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 8001310:	6939      	ldr	r1, [r7, #16]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f000 fd04 	bl	8001d20 <MLX90640_GetVdd>
 8001318:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    ta = MLX90640_GetTa(frameData, params);
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f000 fd76 	bl	8001e10 <MLX90640_GetTa>
 8001324:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

    ta4 = (ta + 273.15);
 8001328:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800132a:	f7ff f8b5 	bl	8000498 <__aeabi_f2d>
 800132e:	a3e6      	add	r3, pc, #920	@ (adr r3, 80016c8 <MLX90640_CalculateTo+0x3d8>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7fe ff52 	bl	80001dc <__adddf3>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fbfa 	bl	8000b38 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	667b      	str	r3, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 8001348:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800134c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001350:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 8001354:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001358:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800135c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    tr4 = (tr + 273.15);
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f7ff f899 	bl	8000498 <__aeabi_f2d>
 8001366:	a3d8      	add	r3, pc, #864	@ (adr r3, 80016c8 <MLX90640_CalculateTo+0x3d8>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7fe ff36 	bl	80001dc <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fbde 	bl	8000b38 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	663b      	str	r3, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 8001380:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001388:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 800138c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001390:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001394:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001398:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800139c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ac:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80013b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    ktaScale = POW2(params->ktaScale);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	@ 0xf4c
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f848 	bl	8000454 <__aeabi_ui2d>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	ec43 2b11 	vmov	d1, r2, r3
 80013cc:	ed9f 0bb8 	vldr	d0, [pc, #736]	@ 80016b0 <MLX90640_CalculateTo+0x3c0>
 80013d0:	f009 fa32 	bl	800a838 <pow>
 80013d4:	ec53 2b10 	vmov	r2, r3, d0
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fbac 	bl	8000b38 <__aeabi_d2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    kvScale = POW2(params->kvScale);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ea:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f830 	bl	8000454 <__aeabi_ui2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	ec43 2b11 	vmov	d1, r2, r3
 80013fc:	ed9f 0bac 	vldr	d0, [pc, #688]	@ 80016b0 <MLX90640_CalculateTo+0x3c0>
 8001400:	f009 fa1a 	bl	800a838 <pow>
 8001404:	ec53 2b10 	vmov	r2, r3, d0
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fb94 	bl	8000b38 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	657b      	str	r3, [r7, #84]	@ 0x54
    alphaScale = POW2(params->alphaScale);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f893 364a 	ldrb.w	r3, [r3, #1610]	@ 0x64a
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f81a 	bl	8000454 <__aeabi_ui2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	ec43 2b11 	vmov	d1, r2, r3
 8001428:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 80016b0 <MLX90640_CalculateTo+0x3c0>
 800142c:	f009 fa04 	bl	800a838 <pow>
 8001430:	ec53 2b10 	vmov	r2, r3, d0
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb7e 	bl	8000b38 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	653b      	str	r3, [r7, #80]	@ 0x50

    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001446:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80016c0 <MLX90640_CalculateTo+0x3d0>
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800145a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145e:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 8001462:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001466:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001488:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 800148c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 800149c:	461a      	mov	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

//------------------------- Gain calculation -----------------------------------

    gain = (float)params->gainEE / (int16_t)frameData[778];
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//------------------------- To calculation -------------------------------------
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80014fa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    irDataCP[0] = (int16_t)frameData[776] * gain;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b21b      	sxth	r3, r3
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001510:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001518:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b21b      	sxth	r3, r3
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001536:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 800153a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffab 	bl	8000498 <__aeabi_f2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154c:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	@ 0x258
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	edd3 6a08 	vldr	s13, [r3, #32]
 800155e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001562:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001566:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800156a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	ee17 0a90 	vmov	r0, s15
 800157e:	f7fe ff8b 	bl	8000498 <__aeabi_f2d>
 8001582:	4680      	mov	r8, r0
 8001584:	4689      	mov	r9, r1
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff84 	bl	8000498 <__aeabi_f2d>
 8001590:	4682      	mov	sl, r0
 8001592:	468b      	mov	fp, r1
 8001594:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001596:	f7fe ff7f 	bl	8000498 <__aeabi_f2d>
 800159a:	a347      	add	r3, pc, #284	@ (adr r3, 80016b8 <MLX90640_CalculateTo+0x3c8>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe fe1a 	bl	80001d8 <__aeabi_dsub>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4650      	mov	r0, sl
 80015aa:	4659      	mov	r1, fp
 80015ac:	f7fe ffcc 	bl	8000548 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b41      	ldr	r3, [pc, #260]	@ (80016c4 <MLX90640_CalculateTo+0x3d4>)
 80015be:	f7fe fe0d 	bl	80001dc <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4640      	mov	r0, r8
 80015c8:	4649      	mov	r1, r9
 80015ca:	f7fe ffbd 	bl	8000548 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe fdff 	bl	80001d8 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff faa9 	bl	8000b38 <__aeabi_d2f>
 80015e6:	4603      	mov	r3, r0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if( mode ==  params->calibrationModeEE)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015f0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d16b      	bne.n	80016d0 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80015f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff4c 	bl	8000498 <__aeabi_f2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800160a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	edd3 6a08 	vldr	s13, [r3, #32]
 800161c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001620:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001624:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	ee17 0a90 	vmov	r0, s15
 800163c:	f7fe ff2c 	bl	8000498 <__aeabi_f2d>
 8001640:	4680      	mov	r8, r0
 8001642:	4689      	mov	r9, r1
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff25 	bl	8000498 <__aeabi_f2d>
 800164e:	4682      	mov	sl, r0
 8001650:	468b      	mov	fp, r1
 8001652:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001654:	f7fe ff20 	bl	8000498 <__aeabi_f2d>
 8001658:	a317      	add	r3, pc, #92	@ (adr r3, 80016b8 <MLX90640_CalculateTo+0x3c8>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe fdbb 	bl	80001d8 <__aeabi_dsub>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4650      	mov	r0, sl
 8001668:	4659      	mov	r1, fp
 800166a:	f7fe ff6d 	bl	8000548 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MLX90640_CalculateTo+0x3d4>)
 800167c:	f7fe fdae 	bl	80001dc <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4640      	mov	r0, r8
 8001686:	4649      	mov	r1, r9
 8001688:	f7fe ff5e 	bl	8000548 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fda0 	bl	80001d8 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa4a 	bl	8000b38 <__aeabi_d2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80016a8:	e071      	b.n	800178e <MLX90640_CalculateTo+0x49e>
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40000000 	.word	0x40000000
 80016b8:	66666666 	.word	0x66666666
 80016bc:	400a6666 	.word	0x400a6666
 80016c0:	42200000 	.word	0x42200000
 80016c4:	3ff00000 	.word	0x3ff00000
 80016c8:	66666666 	.word	0x66666666
 80016cc:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80016d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fee0 	bl	8000498 <__aeabi_f2d>
 80016d8:	4604      	mov	r4, r0
 80016da:	460d      	mov	r5, r1
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f4:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 80016f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	edd3 6a08 	vldr	s13, [r3, #32]
 8001702:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001706:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 800170a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800170e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800171a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171e:	ee17 0a90 	vmov	r0, s15
 8001722:	f7fe feb9 	bl	8000498 <__aeabi_f2d>
 8001726:	4680      	mov	r8, r0
 8001728:	4689      	mov	r9, r1
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe feb2 	bl	8000498 <__aeabi_f2d>
 8001734:	4682      	mov	sl, r0
 8001736:	468b      	mov	fp, r1
 8001738:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800173a:	f7fe fead 	bl	8000498 <__aeabi_f2d>
 800173e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001838 <MLX90640_CalculateTo+0x548>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fd48 	bl	80001d8 <__aeabi_dsub>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4650      	mov	r0, sl
 800174e:	4659      	mov	r1, fp
 8001750:	f7fe fefa 	bl	8000548 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <MLX90640_CalculateTo+0x550>)
 8001762:	f7fe fd3b 	bl	80001dc <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4640      	mov	r0, r8
 800176c:	4649      	mov	r1, r9
 800176e:	f7fe feeb 	bl	8000548 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7fe fd2d 	bl	80001d8 <__aeabi_dsub>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f9d7 	bl	8000b38 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 800178e:	2300      	movs	r3, #0
 8001790:	677b      	str	r3, [r7, #116]	@ 0x74
 8001792:	e2b5      	b.n	8001d00 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 8001794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001796:	2b00      	cmp	r3, #0
 8001798:	da00      	bge.n	800179c <MLX90640_CalculateTo+0x4ac>
 800179a:	331f      	adds	r3, #31
 800179c:	115b      	asrs	r3, r3, #5
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da00      	bge.n	80017a8 <MLX90640_CalculateTo+0x4b8>
 80017a6:	333f      	adds	r3, #63	@ 0x3f
 80017a8:	119b      	asrs	r3, r3, #6
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
 80017b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	bfb8      	it	lt
 80017c2:	425b      	neglt	r3, r3
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80017ca:	4053      	eors	r3, r2
 80017cc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 80017d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017d2:	3302      	adds	r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da00      	bge.n	80017da <MLX90640_CalculateTo+0x4ea>
 80017d8:	3303      	adds	r3, #3
 80017da:	109b      	asrs	r3, r3, #2
 80017dc:	461a      	mov	r2, r3
 80017de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017e0:	3303      	adds	r3, #3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da00      	bge.n	80017e8 <MLX90640_CalculateTo+0x4f8>
 80017e6:	3303      	adds	r3, #3
 80017e8:	109b      	asrs	r3, r3, #2
 80017ea:	425b      	negs	r3, r3
 80017ec:	441a      	add	r2, r3
 80017ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017f0:	3301      	adds	r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da00      	bge.n	80017f8 <MLX90640_CalculateTo+0x508>
 80017f6:	3303      	adds	r3, #3
 80017f8:	109b      	asrs	r3, r3, #2
 80017fa:	441a      	add	r2, r3
 80017fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da00      	bge.n	8001804 <MLX90640_CalculateTo+0x514>
 8001802:	3303      	adds	r3, #3
 8001804:	109b      	asrs	r3, r3, #2
 8001806:	425b      	negs	r3, r3
 8001808:	4413      	add	r3, r2
 800180a:	b2da      	uxtb	r2, r3
 800180c:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	f1c3 0301 	rsb	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	fb12 f303 	smulbb	r3, r2, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        if(mode == 0)
 8001822:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10c      	bne.n	8001844 <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern;
 800182a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800182e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8001832:	e00b      	b.n	800184c <MLX90640_CalculateTo+0x55c>
 8001834:	f3af 8000 	nop.w
 8001838:	66666666 	.word	0x66666666
 800183c:	400a6666 	.word	0x400a6666
 8001840:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          pattern = chessPattern;
 8001844:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001848:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        }

        if(pattern == frameData[833])
 800184c:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	f202 6282 	addw	r2, r2, #1666	@ 0x682
 8001856:	8812      	ldrh	r2, [r2, #0]
 8001858:	4293      	cmp	r3, r2
 800185a:	f040 824e 	bne.w	8001cfa <MLX90640_CalculateTo+0xa0a>
        {
            irData = (int16_t)frameData[pixelNumber] * gain;
 800185e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4413      	add	r3, r2
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b21b      	sxth	r3, r3
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001872:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            kta = params->kta[pixelNumber]/ktaScale;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001882:	4413      	add	r3, r2
 8001884:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 8001888:	f993 3000 	ldrsb.w	r3, [r3]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001894:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            kv = params->kv[pixelNumber]/kvScale;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018a4:	4413      	add	r3, r2
 80018a6:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 80018aa:	f993 3000 	ldrsb.w	r3, [r3]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80018ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018be:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 80018c2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80018c4:	f7fe fde8 	bl	8000498 <__aeabi_f2d>
 80018c8:	4604      	mov	r4, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018d0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018e8:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80018ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80018f0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80018f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fdc6 	bl	8000498 <__aeabi_f2d>
 800190c:	4680      	mov	r8, r0
 800190e:	4689      	mov	r9, r1
 8001910:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001912:	f7fe fdc1 	bl	8000498 <__aeabi_f2d>
 8001916:	4682      	mov	sl, r0
 8001918:	468b      	mov	fp, r1
 800191a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800191c:	f7fe fdbc 	bl	8000498 <__aeabi_f2d>
 8001920:	a3c4      	add	r3, pc, #784	@ (adr r3, 8001c34 <MLX90640_CalculateTo+0x944>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fc57 	bl	80001d8 <__aeabi_dsub>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4650      	mov	r0, sl
 8001930:	4659      	mov	r1, fp
 8001932:	f7fe fe09 	bl	8000548 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4bbb      	ldr	r3, [pc, #748]	@ (8001c30 <MLX90640_CalculateTo+0x940>)
 8001944:	f7fe fc4a 	bl	80001dc <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4640      	mov	r0, r8
 800194e:	4649      	mov	r1, r9
 8001950:	f7fe fdfa 	bl	8000548 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fc3c 	bl	80001d8 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f8e6 	bl	8000b38 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if(mode !=  params->calibrationModeEE)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001976:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800197a:	429a      	cmp	r2, r3
 800197c:	d023      	beq.n	80019c6 <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001984:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 8001988:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	3b01      	subs	r3, #1
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800199c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80019a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019aa:	edd3 6a98 	vldr	s13, [r3, #608]	@ 0x260
 80019ae:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            }

            irData = irData - params->tgc * irDataCP[subPage];
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80019cc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	3380      	adds	r3, #128	@ 0x80
 80019d4:	443b      	add	r3, r7
 80019d6:	3b54      	subs	r3, #84	@ 0x54
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80019e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            irData = irData / emissivity;
 80019ec:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80019f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 80019fc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80019fe:	f7fe fd4b 	bl	8000498 <__aeabi_f2d>
 8001a02:	a387      	add	r3, pc, #540	@ (adr r3, 8001c20 <MLX90640_CalculateTo+0x930>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4614      	mov	r4, r2
 8001a12:	461d      	mov	r5, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a18:	3324      	adds	r3, #36	@ 0x24
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	885b      	ldrh	r3, [r3, #2]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd27 	bl	8000474 <__aeabi_i2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7fe feb5 	bl	800079c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f87d 	bl	8000b38 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001a48:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001a4c:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8001a50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a60:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001a6c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a74:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001a80:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001a84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a88:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a94:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 8001a98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a9a:	f7fe fcfd 	bl	8000498 <__aeabi_f2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	ec43 2b10 	vmov	d0, r2, r3
 8001aa6:	f008 ff37 	bl	800a918 <sqrt>
 8001aaa:	eeb0 7a40 	vmov.f32	s14, s0
 8001aae:	eef0 7a60 	vmov.f32	s15, s1
 8001ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab6:	eef0 0a67 	vmov.f32	s1, s15
 8001aba:	f008 ff2d 	bl	800a918 <sqrt>
 8001abe:	ec55 4b10 	vmov	r4, r5, d0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fce6 	bl	8000498 <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fd38 	bl	8000548 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f82a 	bl	8000b38 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38

            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 8001ae8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001aea:	f7fe fcd5 	bl	8000498 <__aeabi_f2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001af4:	f7fe fcd0 	bl	8000498 <__aeabi_f2d>
 8001af8:	4680      	mov	r8, r0
 8001afa:	4689      	mov	r9, r1
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fcc9 	bl	8000498 <__aeabi_f2d>
 8001b06:	a348      	add	r3, pc, #288	@ (adr r3, 8001c28 <MLX90640_CalculateTo+0x938>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fd1c 	bl	8000548 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	4945      	ldr	r1, [pc, #276]	@ (8001c30 <MLX90640_CalculateTo+0x940>)
 8001b1a:	f7fe fb5d 	bl	80001d8 <__aeabi_dsub>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4640      	mov	r0, r8
 8001b24:	4649      	mov	r1, r9
 8001b26:	f7fe fd0f 	bl	8000548 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4690      	mov	r8, r2
 8001b30:	4699      	mov	r9, r3
 8001b32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b34:	f7fe fcb0 	bl	8000498 <__aeabi_f2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	4649      	mov	r1, r9
 8001b40:	f7fe fb4c 	bl	80001dc <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fe26 	bl	800079c <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4614      	mov	r4, r2
 8001b56:	461d      	mov	r5, r3
 8001b58:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001b5a:	f7fe fc9d 	bl	8000498 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fb39 	bl	80001dc <__adddf3>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	ec43 2b17 	vmov	d7, r2, r3
 8001b72:	eeb0 0a47 	vmov.f32	s0, s14
 8001b76:	eef0 0a67 	vmov.f32	s1, s15
 8001b7a:	f008 fecd 	bl	800a918 <sqrt>
 8001b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b82:	eef0 7a60 	vmov.f32	s15, s1
 8001b86:	eeb0 0a47 	vmov.f32	s0, s14
 8001b8a:	eef0 0a67 	vmov.f32	s1, s15
 8001b8e:	f008 fec3 	bl	800a918 <sqrt>
 8001b92:	ec51 0b10 	vmov	r0, r1, d0
 8001b96:	a324      	add	r3, pc, #144	@ (adr r3, 8001c28 <MLX90640_CalculateTo+0x938>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fb1c 	bl	80001d8 <__aeabi_dsub>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe ffc6 	bl	8000b38 <__aeabi_d2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34

            if(To < params->ct[1])
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d503      	bpl.n	8001bd4 <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001bd2:	e036      	b.n	8001c42 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d503      	bpl.n	8001bf8 <MLX90640_CalculateTo+0x908>
            {
                range = 1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001bf6:	e024      	b.n	8001c42 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[3])
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	d513      	bpl.n	8001c3c <MLX90640_CalculateTo+0x94c>
            {
                range = 2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001c1a:	e012      	b.n	8001c42 <MLX90640_CalculateTo+0x952>
 8001c1c:	f3af 8000 	nop.w
 8001c20:	a0b5ed8d 	.word	0xa0b5ed8d
 8001c24:	3eb0c6f7 	.word	0x3eb0c6f7
 8001c28:	66666666 	.word	0x66666666
 8001c2c:	40711266 	.word	0x40711266
 8001c30:	3ff00000 	.word	0x3ff00000
 8001c34:	66666666 	.word	0x66666666
 8001c38:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            }

            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 8001c42:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	3380      	adds	r3, #128	@ 0x80
 8001c4a:	443b      	add	r3, r7
 8001c4c:	3b64      	subs	r3, #100	@ 0x64
 8001c4e:	ed93 7a00 	vldr	s14, [r3]
 8001c52:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5a:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	330a      	adds	r3, #10
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3304      	adds	r3, #4
 8001c68:	edd3 6a00 	vldr	s13, [r3]
 8001c6c:	f997 207a 	ldrsb.w	r2, [r7, #122]	@ 0x7a
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	3220      	adds	r2, #32
 8001c74:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c80:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8001c84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c98:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ca0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	ee17 0a90 	vmov	r0, s15
 8001cac:	f7fe fbf4 	bl	8000498 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	ec43 2b10 	vmov	d0, r2, r3
 8001cb8:	f008 fe2e 	bl	800a918 <sqrt>
 8001cbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc0:	eef0 7a60 	vmov.f32	s15, s1
 8001cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc8:	eef0 0a67 	vmov.f32	s1, s15
 8001ccc:	f008 fe24 	bl	800a918 <sqrt>
 8001cd0:	ec51 0b10 	vmov	r0, r1, d0
 8001cd4:	a310      	add	r3, pc, #64	@ (adr r3, 8001d18 <MLX90640_CalculateTo+0xa28>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fa7d 	bl	80001d8 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe ff27 	bl	8000b38 <__aeabi_d2f>
 8001cea:	4603      	mov	r3, r0
 8001cec:	637b      	str	r3, [r7, #52]	@ 0x34

            result[pixelNumber] = To;
 8001cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cf8:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d06:	f6ff ad45 	blt.w	8001794 <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3780      	adds	r7, #128	@ 0x80
 8001d10:	46bd      	mov	sp, r7
 8001d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d16:	bf00      	nop
 8001d18:	66666666 	.word	0x66666666
 8001d1c:	40711266 	.word	0x40711266

08001d20 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;

    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	0a9b      	lsrs	r3, r3, #10
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fb86 	bl	8000454 <__aeabi_ui2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	ec43 2b11 	vmov	d1, r2, r3
 8001d50:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001e00 <MLX90640_GetVdd+0xe0>
 8001d54:	f008 fd70 	bl	800a838 <pow>
 8001d58:	ec55 4b10 	vmov	r4, r5, d0
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fb78 	bl	8000454 <__aeabi_ui2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	ec43 2b11 	vmov	d1, r2, r3
 8001d6c:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8001e00 <MLX90640_GetVdd+0xe0>
 8001d70:	f008 fd62 	bl	800a838 <pow>
 8001d74:	ec53 2b10 	vmov	r2, r3, d0
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fd0e 	bl	800079c <__aeabi_ddiv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe fed6 	bl	8000b38 <__aeabi_d2f>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f203 6354 	addw	r3, r3, #1620	@ 0x654
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fb61 	bl	8000498 <__aeabi_f2d>
 8001dd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001e08 <MLX90640_GetVdd+0xe8>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe f9fe 	bl	80001dc <__adddf3>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fea6 	bl	8000b38 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]

    return vdd;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	ee07 3a90 	vmov	s15, r3
}
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40000000 	.word	0x40000000
 8001e08:	66666666 	.word	0x66666666
 8001e0c:	400a6666 	.word	0x400a6666

08001e10 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;

    vdd = MLX90640_GetVdd(frameData, params);
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff7e 	bl	8001d20 <MLX90640_GetVdd>
 8001e24:	ed87 0a05 	vstr	s0, [r7, #20]

    ptat = (int16_t)frameData[800];
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	827b      	strh	r3, [r7, #18]

    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 8001e32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001f30 <MLX90640_GetTa+0x120>
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	edc7 7a03 	vstr	s15, [r7, #12]

    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7fe fb0c 	bl	8000498 <__aeabi_f2d>
 8001e80:	4604      	mov	r4, r0
 8001e82:	460d      	mov	r5, r1
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb05 	bl	8000498 <__aeabi_f2d>
 8001e8e:	4680      	mov	r8, r0
 8001e90:	4689      	mov	r9, r1
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7fe fb00 	bl	8000498 <__aeabi_f2d>
 8001e98:	a323      	add	r3, pc, #140	@ (adr r3, 8001f28 <MLX90640_GetTa+0x118>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe f99b 	bl	80001d8 <__aeabi_dsub>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	f7fe fb4d 	bl	8000548 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <MLX90640_GetTa+0x124>)
 8001ebc:	f7fe f98e 	bl	80001dc <__adddf3>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe fc68 	bl	800079c <__aeabi_ddiv>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe facb 	bl	8000474 <__aeabi_i2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f7fe f977 	bl	80001d8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fe21 	bl	8000b38 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f00:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f08:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f10:	edc7 7a02 	vstr	s15, [r7, #8]

    return ta;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	ee07 3a90 	vmov	s15, r3
}
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f26:	bf00      	nop
 8001f28:	66666666 	.word	0x66666666
 8001f2c:	400a6666 	.word	0x400a6666
 8001f30:	48800000 	.word	0x48800000
 8001f34:	3ff00000 	.word	0x3ff00000

08001f38 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;

    kVdd = MLX90640_MS_BYTE(eeData[51]);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3366      	adds	r3, #102	@ 0x66
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3366      	adds	r3, #102	@ 0x66
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8001f5a:	89bb      	ldrh	r3, [r7, #12]
 8001f5c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	015b      	lsls	r3, r3, #5
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	81bb      	strh	r3, [r7, #12]

    mlx90640->kVdd = 32 * kVdd;
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	89ba      	ldrh	r2, [r7, #12]
 8001f82:	805a      	strh	r2, [r3, #2]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;

    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3364      	adds	r3, #100	@ 0x64
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	0a9b      	lsrs	r3, r3, #10
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8001fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb4:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8001fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	dd07      	ble.n	8001fd2 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8001fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002090 <ExtractPTATParameters+0x100>
 8001fca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fce:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8001fd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fd6:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002094 <ExtractPTATParameters+0x104>
 8001fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fde:	edc7 7a05 	vstr	s15, [r7, #20]

    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3364      	adds	r3, #100	@ 0x64
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff4:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8001ff8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ffc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002098 <ExtractPTATParameters+0x108>
 8002000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002008:	dd07      	ble.n	800201a <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 800200a:	edd7 7a04 	vldr	s15, [r7, #16]
 800200e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800209c <ExtractPTATParameters+0x10c>
 8002012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002016:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 800201a:	ed97 7a04 	vldr	s14, [r7, #16]
 800201e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc7 7a04 	vstr	s15, [r7, #16]

    vPTAT25 = eeData[49];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3362      	adds	r3, #98	@ 0x62
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	81fb      	strh	r3, [r7, #14]

    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3320      	adds	r3, #32
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa19 	bl	8000474 <__aeabi_i2d>
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <ExtractPTATParameters+0x110>)
 8002048:	f7fe fba8 	bl	800079c <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <ExtractPTATParameters+0x114>)
 800205a:	f7fe f8bf 	bl	80001dc <__adddf3>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fd67 	bl	8000b38 <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	60bb      	str	r3, [r7, #8]

    mlx90640->KvPTAT = KvPTAT;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 800207a:	89fa      	ldrh	r2, [r7, #14]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	611a      	str	r2, [r3, #16]
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	42800000 	.word	0x42800000
 8002094:	45800000 	.word	0x45800000
 8002098:	43ff8000 	.word	0x43ff8000
 800209c:	44800000 	.word	0x44800000
 80020a0:	40d00000 	.word	0x40d00000
 80020a4:	40200000 	.word	0x40200000

080020a8 <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3360      	adds	r3, #96	@ 0x60
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	829a      	strh	r2, [r3, #20]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3378      	adds	r3, #120	@ 0x78
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e6:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002100 <ExtractTgcParameters+0x34>
 80020ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	42000000 	.word	0x42000000

08002104 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3370      	adds	r3, #112	@ 0x70
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	131b      	asrs	r3, r3, #12
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	73fb      	strb	r3, [r7, #15]

    mlx90640->resolutionEE = resolutionEE;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3378      	adds	r3, #120	@ 0x78
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	b29b      	uxth	r3, r3
 8002148:	b25b      	sxtb	r3, r3
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002152:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800216c <ExtractKsTaParameters+0x38>
 8002156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	46000000 	.word	0x46000000

08002170 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;

    step = ((eeData[63] & 0x3000) >> 12) * 10;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	337e      	adds	r3, #126	@ 0x7e
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	131b      	asrs	r3, r3, #12
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	73fb      	strb	r3, [r7, #15]

    mlx90640->ct[0] = -40;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f64f 72d8 	movw	r2, #65496	@ 0xffd8
 800219c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    mlx90640->ct[1] = 0;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	337e      	adds	r3, #126	@ 0x7e
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	111b      	asrs	r3, r3, #4
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	337e      	adds	r3, #126	@ 0x7e
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	121b      	asrs	r3, r3, #8
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    mlx90640->ct[2] = mlx90640->ct[2]*step;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80021da:	b29a      	uxth	r2, r3
 80021dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	fb12 f303 	smulbb	r3, r2, r3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 80021fe:	b299      	uxth	r1, r3
 8002200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002204:	b29b      	uxth	r3, r3
 8002206:	fb11 f303 	smulbb	r3, r1, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	4413      	add	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	b21a      	sxth	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    mlx90640->ct[4] = 400;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800221e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	337e      	adds	r3, #126	@ 0x7e
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	3308      	adds	r3, #8
 800222e:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 8002230:	2201      	movs	r2, #1
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	60bb      	str	r3, [r7, #8]

    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	337a      	adds	r3, #122	@ 0x7a
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b25b      	sxtb	r3, r3
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	337a      	adds	r3, #122	@ 0x7a
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	b29b      	uxth	r3, r3
 8002268:	b25b      	sxtb	r3, r3
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	337c      	adds	r3, #124	@ 0x7c
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b25b      	sxtb	r3, r3
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	337c      	adds	r3, #124	@ 0x7c
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    mlx90640->ksTo[4] = -0.0002;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	4a03      	ldr	r2, [pc, #12]	@ (80022e4 <ExtractKsToParameters+0x174>)
 80022d6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	b951b717 	.word	0xb951b717

080022e8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	f5ad 6d52 	sub.w	sp, sp, #3360	@ 0xd20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80022f4:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80022f8:	6018      	str	r0, [r3, #0]
 80022fa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80022fe:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002302:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;


    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 800230a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800230e:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3340      	adds	r3, #64	@ 0x40
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	f887 3cf3 	strb.w	r3, [r7, #3315]	@ 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 8002322:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002326:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3340      	adds	r3, #64	@ 0x40
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	111b      	asrs	r3, r3, #4
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	f887 3cf2 	strb.w	r3, [r7, #3314]	@ 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 800233c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002340:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3340      	adds	r3, #64	@ 0x40
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	121b      	asrs	r3, r3, #8
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	f887 3cf1 	strb.w	r3, [r7, #3313]	@ 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 8002356:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800235a:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3340      	adds	r3, #64	@ 0x40
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	0b1b      	lsrs	r3, r3, #12
 8002366:	b29b      	uxth	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	331e      	adds	r3, #30
 800236c:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    alphaRef = eeData[33];
 8002370:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002374:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3342      	adds	r3, #66	@ 0x42
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	f8c7 3cec 	str.w	r3, [r7, #3308]	@ 0xcec

    for(int i = 0; i < 6; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 8002388:	e062      	b.n	8002450 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 800238a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 8002394:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002398:	3322      	adds	r3, #34	@ 0x22
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80023a0:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	f003 020f 	and.w	r2, r3, #15
 80023ae:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80023b8:	443b      	add	r3, r7
 80023ba:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 80023be:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80023c2:	3322      	adds	r3, #34	@ 0x22
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80023ca:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	111a      	asrs	r2, r3, #4
 80023d6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80023da:	3301      	adds	r3, #1
 80023dc:	f002 020f 	and.w	r2, r2, #15
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80023e6:	443b      	add	r3, r7
 80023e8:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 80023ec:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80023f0:	3322      	adds	r3, #34	@ 0x22
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80023f8:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	121a      	asrs	r2, r3, #8
 8002404:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002408:	3302      	adds	r3, #2
 800240a:	f002 020f 	and.w	r2, r2, #15
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002414:	443b      	add	r3, r7
 8002416:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 800241a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800241e:	3322      	adds	r3, #34	@ 0x22
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002426:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	4413      	add	r3, r2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	0b1b      	lsrs	r3, r3, #12
 8002432:	b29a      	uxth	r2, r3
 8002434:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002438:	3303      	adds	r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002440:	443b      	add	r3, r7
 8002442:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8002446:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800244a:	3301      	adds	r3, #1
 800244c:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 8002450:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002454:	2b05      	cmp	r3, #5
 8002456:	dd98      	ble.n	800238a <ExtractAlphaParameters+0xa2>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 800245e:	e020      	b.n	80024a2 <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 8002460:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800246a:	443b      	add	r3, r7
 800246c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002470:	2b07      	cmp	r3, #7
 8002472:	dd11      	ble.n	8002498 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 8002474:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800247e:	443b      	add	r3, r7
 8002480:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002484:	f1a3 0210 	sub.w	r2, r3, #16
 8002488:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002492:	443b      	add	r3, r7
 8002494:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002498:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 800249c:	3301      	adds	r3, #1
 800249e:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 80024a2:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 80024a6:	2b17      	cmp	r3, #23
 80024a8:	ddda      	ble.n	8002460 <ExtractAlphaParameters+0x178>
        }
    }

    for(int i = 0; i < 8; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 80024b0:	e062      	b.n	8002578 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 80024b2:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 80024bc:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80024c0:	3328      	adds	r3, #40	@ 0x28
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80024c8:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f003 010f 	and.w	r1, r3, #15
 80024d6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80024da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024de:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 80024e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 80024e6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80024ea:	3328      	adds	r3, #40	@ 0x28
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80024f2:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	111b      	asrs	r3, r3, #4
 80024fe:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8002502:	3201      	adds	r2, #1
 8002504:	f003 010f 	and.w	r1, r3, #15
 8002508:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800250c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 8002514:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002518:	3328      	adds	r3, #40	@ 0x28
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002520:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	4413      	add	r3, r2
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	121b      	asrs	r3, r3, #8
 800252c:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8002530:	3202      	adds	r2, #2
 8002532:	f003 010f 	and.w	r1, r3, #15
 8002536:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800253a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 8002542:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002546:	3328      	adds	r3, #40	@ 0x28
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800254e:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4413      	add	r3, r2
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	0b1b      	lsrs	r3, r3, #12
 800255a:	b299      	uxth	r1, r3
 800255c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002560:	1cda      	adds	r2, r3, #3
 8002562:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002566:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800256a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800256e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002572:	3301      	adds	r3, #1
 8002574:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 8002578:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800257c:	2b07      	cmp	r3, #7
 800257e:	dd98      	ble.n	80024b2 <ExtractAlphaParameters+0x1ca>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 8002586:	e020      	b.n	80025ca <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 8002588:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800258c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002590:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	2b07      	cmp	r3, #7
 800259a:	dd11      	ble.n	80025c0 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 800259c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025a4:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	f1a3 0110 	sub.w	r1, r3, #16
 80025b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025b8:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 80025c0:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 80025c4:	3301      	adds	r3, #1
 80025c6:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 80025ca:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 80025ce:	2b1f      	cmp	r3, #31
 80025d0:	ddda      	ble.n	8002588 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 80025d8:	e13e      	b.n	8002858 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 80025e0:	e130      	b.n	8002844 <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 80025e2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 80025e6:	015b      	lsls	r3, r3, #5
 80025e8:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	@ 0xd00
 80025ec:	4413      	add	r3, r2
 80025ee:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 80025f2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80025f6:	3340      	adds	r3, #64	@ 0x40
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80025fe:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	4413      	add	r3, r2
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	111b      	asrs	r3, r3, #4
 800260a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002616:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800261a:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800261e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 800262a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800262e:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002632:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	dd17      	ble.n	800267c <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 800264c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002650:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002654:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ed9f 7ae3 	vldr	s14, [pc, #908]	@ 80029f0 <ExtractAlphaParameters+0x708>
 8002664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002668:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800266c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002670:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 800267c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002680:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002684:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	@ 0xcf3
 8002694:	2201      	movs	r2, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80026aa:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80026ae:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 80026ba:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80026c4:	443b      	add	r3, r7
 80026c6:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80026ca:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	@ 0xcf1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	@ 0xcec
 80026d4:	441a      	add	r2, r3
 80026d6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80026da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026de:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	@ 0xd00
 80026e2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80026e6:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	@ 0xcf2
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80026fc:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002700:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002710:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002714:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002718:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 8002724:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002728:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800272c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd feae 	bl	8000498 <__aeabi_f2d>
 800273c:	4604      	mov	r4, r0
 800273e:	460d      	mov	r5, r1
 8002740:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fe85 	bl	8000454 <__aeabi_ui2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	ec43 2b11 	vmov	d1, r2, r3
 8002752:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 80029d8 <ExtractAlphaParameters+0x6f0>
 8002756:	f008 f86f 	bl	800a838 <pow>
 800275a:	ec53 2b10 	vmov	r2, r3, d0
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fe f81b 	bl	800079c <__aeabi_ddiv>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f7fe f9e3 	bl	8000b38 <__aeabi_d2f>
 8002772:	4601      	mov	r1, r0
 8002774:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002778:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800277c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8002786:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800278a:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800278e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	ed93 7a00 	vldr	s14, [r3]
 800279a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800279e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80027a8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027ac:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b6:	ed93 6a94 	vldr	s12, [r3, #592]	@ 0x250
 80027ba:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027be:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c8:	edd3 7a95 	vldr	s15, [r3, #596]	@ 0x254
 80027cc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80027d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027d4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80027d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027e4:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80027e8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80027f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027f8:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80027fc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe46 	bl	8000498 <__aeabi_f2d>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	a173      	add	r1, pc, #460	@ (adr r1, 80029e0 <ExtractAlphaParameters+0x6f8>)
 8002812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002816:	f7fd ffc1 	bl	800079c <__aeabi_ddiv>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7fe f989 	bl	8000b38 <__aeabi_d2f>
 8002826:	4601      	mov	r1, r0
 8002828:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800282c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002830:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800283a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 800283e:	3301      	adds	r3, #1
 8002840:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 8002844:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8002848:	2b1f      	cmp	r3, #31
 800284a:	f77f aeca 	ble.w	80025e2 <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800284e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8002852:	3301      	adds	r3, #1
 8002854:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 8002858:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 800285c:	2b17      	cmp	r3, #23
 800285e:	f77f aebc 	ble.w	80025da <ExtractAlphaParameters+0x2f2>
        }
    }

    temp = alphaTemp[0];
 8002862:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002866:	f6a3 5314 	subw	r3, r3, #3348	@ 0xd14
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 8002870:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8002872:	2301      	movs	r3, #1
 8002874:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 8002878:	e023      	b.n	80028c2 <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 800287a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800287e:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002882:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	edd3 7a00 	vldr	s15, [r3]
 800288e:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d50b      	bpl.n	80028b8 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 80028a0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80028a4:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80028a8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 80028b6:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80028b8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 80028bc:	3301      	adds	r3, #1
 80028be:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 80028c2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 80028c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028ca:	dbd6      	blt.n	800287a <ExtractAlphaParameters+0x592>
        }
    }

    alphaScale = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 80028d2:	e00e      	b.n	80028f2 <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 80028d4:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028e0:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 80028e4:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80028e8:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 80028ec:	3301      	adds	r3, #1
 80028ee:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 80028f2:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	f7fd fdce 	bl	8000498 <__aeabi_f2d>
 80028fc:	a33a      	add	r3, pc, #232	@ (adr r3, 80029e8 <ExtractAlphaParameters+0x700>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fe f893 	bl	8000a2c <__aeabi_dcmplt>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e3      	bne.n	80028d4 <ExtractAlphaParameters+0x5ec>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 8002912:	e04d      	b.n	80029b0 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);
 8002914:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002918:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800291c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fdb6 	bl	8000498 <__aeabi_f2d>
 800292c:	4604      	mov	r4, r0
 800292e:	460d      	mov	r5, r1
 8002930:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fd8d 	bl	8000454 <__aeabi_ui2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	ec43 2b11 	vmov	d1, r2, r3
 8002942:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 80029d8 <ExtractAlphaParameters+0x6f0>
 8002946:	f007 ff77 	bl	800a838 <pow>
 800294a:	ec53 2b10 	vmov	r2, r3, d0
 800294e:	4620      	mov	r0, r4
 8002950:	4629      	mov	r1, r5
 8002952:	f7fd fdf9 	bl	8000548 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	f7fe f8eb 	bl	8000b38 <__aeabi_d2f>
 8002962:	4603      	mov	r3, r0
 8002964:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 8002968:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);
 800296a:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	f7fd fd92 	bl	8000498 <__aeabi_f2d>
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <ExtractAlphaParameters+0x70c>)
 800297a:	f7fd fc2f 	bl	80001dc <__adddf3>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f8b7 	bl	8000af8 <__aeabi_d2uiz>
 800298a:	4603      	mov	r3, r0
 800298c:	b299      	uxth	r1, r3
 800298e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002992:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 800299c:	3324      	adds	r3, #36	@ 0x24
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	460a      	mov	r2, r1
 80029a4:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80029a6:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80029aa:	3301      	adds	r3, #1
 80029ac:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 80029b0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80029b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029b8:	dbac      	blt.n	8002914 <ExtractAlphaParameters+0x62c>

    }

    mlx90640->alphaScale = alphaScale;
 80029ba:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80029be:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	@ 0xd1f
 80029c8:	f883 264a 	strb.w	r2, [r3, #1610]	@ 0x64a

}
 80029cc:	bf00      	nop
 80029ce:	f507 6752 	add.w	r7, r7, #3360	@ 0xd20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdb0      	pop	{r4, r5, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	00000000 	.word	0x00000000
 80029dc:	40000000 	.word	0x40000000
 80029e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80029e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80029e8:	9999999a 	.word	0x9999999a
 80029ec:	40dfffd9 	.word	0x40dfffd9
 80029f0:	42800000 	.word	0x42800000
 80029f4:	3fe00000 	.word	0x3fe00000

080029f8 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b0c5      	sub	sp, #276	@ 0x114
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a06:	6018      	str	r0, [r3, #0]
 8002a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a10:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;


    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 8002a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3320      	adds	r3, #32
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 8002a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3320      	adds	r3, #32
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	111b      	asrs	r3, r3, #4
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 8002a4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3320      	adds	r3, #32
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	121b      	asrs	r3, r3, #8
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
    offsetRef = (int16_t)eeData[17];
 8002a64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3322      	adds	r3, #34	@ 0x22
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee

    for(int i = 0; i < 6; i++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002a7c:	e062      	b.n	8002b44 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8002a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 8002a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a8c:	3312      	adds	r3, #18
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a94:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002aac:	443b      	add	r3, r7
 8002aae:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 8002ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ab6:	3312      	adds	r3, #18
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002abe:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	111a      	asrs	r2, r3, #4
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f002 020f 	and.w	r2, r2, #15
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002ada:	443b      	add	r3, r7
 8002adc:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 8002ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ae4:	3312      	adds	r3, #18
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002aec:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	121a      	asrs	r2, r3, #8
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	3302      	adds	r3, #2
 8002afe:	f002 020f 	and.w	r2, r2, #15
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002b08:	443b      	add	r3, r7
 8002b0a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 8002b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b12:	3312      	adds	r3, #18
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002b1a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	0b1b      	lsrs	r3, r3, #12
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	3303      	adds	r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002b34:	443b      	add	r3, r7
 8002b36:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8002b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	dd98      	ble.n	8002a7e <ExtractOffsetParameters+0x86>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b52:	e020      	b.n	8002b96 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8002b54:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002b5e:	443b      	add	r3, r7
 8002b60:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002b64:	2b07      	cmp	r3, #7
 8002b66:	dd11      	ble.n	8002b8c <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8002b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002b72:	443b      	add	r3, r7
 8002b74:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002b78:	f1a3 0210 	sub.w	r2, r3, #16
 8002b7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002b86:	443b      	add	r3, r7
 8002b88:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002b8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b90:	3301      	adds	r3, #1
 8002b92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b96:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b9a:	2b17      	cmp	r3, #23
 8002b9c:	ddda      	ble.n	8002b54 <ExtractOffsetParameters+0x15c>
        }
    }

    for(int i = 0; i < 8; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ba4:	e062      	b.n	8002c6c <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8002ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 8002bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002bbc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f003 010f 	and.w	r1, r3, #15
 8002bca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bd2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 8002bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bde:	3318      	adds	r3, #24
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002be6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	111b      	asrs	r3, r3, #4
 8002bf2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002bf6:	3201      	adds	r2, #1
 8002bf8:	f003 010f 	and.w	r1, r3, #15
 8002bfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 8002c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c0c:	3318      	adds	r3, #24
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002c14:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	121b      	asrs	r3, r3, #8
 8002c20:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002c24:	3202      	adds	r2, #2
 8002c26:	f003 010f 	and.w	r1, r3, #15
 8002c2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 8002c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c3a:	3318      	adds	r3, #24
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002c42:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	0b1b      	lsrs	r3, r3, #12
 8002c4e:	b299      	uxth	r1, r3
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c54:	1cda      	adds	r2, r3, #3
 8002c56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8002c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c66:	3301      	adds	r3, #1
 8002c68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c70:	2b07      	cmp	r3, #7
 8002c72:	dd98      	ble.n	8002ba6 <ExtractOffsetParameters+0x1ae>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002c7a:	e020      	b.n	8002cbe <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c84:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	dd11      	ble.n	8002cb4 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8002c90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c98:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca0:	f1a3 0110 	sub.w	r1, r3, #16
 8002ca4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cac:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8002cb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002cbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002cc2:	2b1f      	cmp	r3, #31
 8002cc4:	ddda      	ble.n	8002c7c <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002ccc:	e0c0      	b.n	8002e50 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002cd4:	e0b2      	b.n	8002e3c <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8002cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cda:	015b      	lsls	r3, r3, #5
 8002cdc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cea:	3340      	adds	r3, #64	@ 0x40
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002cf2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	0a9b      	lsrs	r3, r3, #10
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b219      	sxth	r1, r3
 8002d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d06:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	460a      	mov	r2, r1
 8002d1a:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8002d1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2a:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d36:	2b1f      	cmp	r3, #31
 8002d38:	dd1d      	ble.n	8002d76 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8002d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d48:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b40      	subs	r3, #64	@ 0x40
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b219      	sxth	r1, r3
 8002d5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6a:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	460a      	mov	r2, r1
 8002d74:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8002d76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d84:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d90:	461a      	mov	r2, r3
 8002d92:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	b219      	sxth	r1, r3
 8002d9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002da0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002daa:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	460a      	mov	r2, r1
 8002db4:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8002db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002dc0:	443b      	add	r3, r7
 8002dc2:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8002dc6:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002de0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8002de4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002de8:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	b219      	sxth	r1, r3
 8002e18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	460a      	mov	r2, r1
 8002e30:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e36:	3301      	adds	r3, #1
 8002e38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e40:	2b1f      	cmp	r3, #31
 8002e42:	f77f af48 	ble.w	8002cd6 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e54:	2b17      	cmp	r3, #23
 8002e56:	f77f af3a 	ble.w	8002cce <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	0000      	movs	r0, r0
 8002e6c:	0000      	movs	r0, r0
	...

08002e70 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002e7c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002e80:	6018      	str	r0, [r3, #0]
 8002e82:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002e86:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8002e8a:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;

    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 8002e92:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002e96:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	336c      	adds	r3, #108	@ 0x6c
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	f887 3c0c 	strb.w	r3, [r7, #3084]	@ 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 8002eaa:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002eae:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	336c      	adds	r3, #108	@ 0x6c
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	f887 3c0e 	strb.w	r3, [r7, #3086]	@ 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 8002ebe:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002ec2:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	336e      	adds	r3, #110	@ 0x6e
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f887 3c0d 	strb.w	r3, [r7, #3085]	@ 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 8002ed6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002eda:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	336e      	adds	r3, #110	@ 0x6e
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8002eea:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002eee:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3370      	adds	r3, #112	@ 0x70
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	111b      	asrs	r3, r3, #4
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3308      	adds	r3, #8
 8002f04:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 8002f08:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002f0c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3370      	adds	r3, #112	@ 0x70
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	f887 3c13 	strb.w	r3, [r7, #3091]	@ 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 8002f26:	e0ed      	b.n	8003104 <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8002f2e:	e0df      	b.n	80030f0 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8002f30:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	@ 0xc20
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8002f40:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da00      	bge.n	8002f4a <ExtractKtaPixelParameters+0xda>
 8002f48:	331f      	adds	r3, #31
 8002f4a:	115b      	asrs	r3, r3, #5
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da00      	bge.n	8002f58 <ExtractKtaPixelParameters+0xe8>
 8002f56:	333f      	adds	r3, #63	@ 0x3f
 8002f58:	119b      	asrs	r3, r3, #6
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	bfb8      	it	lt
 8002f70:	425b      	neglt	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	f887 3c12 	strb.w	r3, [r7, #3090]	@ 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8002f7a:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002f7e:	3340      	adds	r3, #64	@ 0x40
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	f507 6243 	add.w	r2, r7, #3120	@ 0xc30
 8002f86:	f6a2 422c 	subw	r2, r2, #3116	@ 0xc2c
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	105b      	asrs	r3, r3, #1
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f9e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002fa2:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002fa6:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8002fb2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002fb6:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002fba:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	dd17      	ble.n	8003004 <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8002fd4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002fd8:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002fdc:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002ff4:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002ff8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8003004:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003008:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 800300c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	ed93 7a00 	vldr	s14, [r3]
 8003018:	f897 3c13 	ldrb.w	r3, [r7, #3091]	@ 0xc13
 800301c:	2201      	movs	r2, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003032:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003036:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8003042:	f897 3c12 	ldrb.w	r3, [r7, #3090]	@ 0xc12
 8003046:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 800304a:	443b      	add	r3, r7
 800304c:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003058:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800305c:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003060:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003074:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003078:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 8003084:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003088:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 800308c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd f9fe 	bl	8000498 <__aeabi_f2d>
 800309c:	4604      	mov	r4, r0
 800309e:	460d      	mov	r5, r1
 80030a0:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd f9d5 	bl	8000454 <__aeabi_ui2d>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	ec43 2b11 	vmov	d1, r2, r3
 80030b2:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80032e8 <ExtractKtaPixelParameters+0x478>
 80030b6:	f007 fbbf 	bl	800a838 <pow>
 80030ba:	ec53 2b10 	vmov	r2, r3, d0
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7fd fb6b 	bl	800079c <__aeabi_ddiv>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f7fd fd33 	bl	8000b38 <__aeabi_d2f>
 80030d2:	4601      	mov	r1, r0
 80030d4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80030d8:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80030dc:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80030e6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80030ea:	3301      	adds	r3, #1
 80030ec:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 80030f0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80030f4:	2b1f      	cmp	r3, #31
 80030f6:	f77f af1b 	ble.w	8002f30 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80030fa:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 80030fe:	3301      	adds	r3, #1
 8003100:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 8003104:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8003108:	2b17      	cmp	r3, #23
 800310a:	f77f af0d 	ble.w	8002f28 <ExtractKtaPixelParameters+0xb8>

        }
    }

    temp = fabs(ktaTemp[0]);
 800310e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003112:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	eef0 7ae7 	vabs.f32	s15, s15
 800311e:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003122:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003126:	2301      	movs	r3, #1
 8003128:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 800312c:	e029      	b.n	8003182 <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 800312e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003132:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003136:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	eef0 7ae7 	vabs.f32	s15, s15
 8003146:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800314a:	ed93 7a00 	vldr	s14, [r3]
 800314e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d50f      	bpl.n	8003178 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8003158:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800315c:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003160:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	eef0 7ae7 	vabs.f32	s15, s15
 8003170:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003174:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003178:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 800317c:	3301      	adds	r3, #1
 800317e:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8003182:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800318a:	dbd0      	blt.n	800312e <ExtractKtaPixelParameters+0x2be>
        }
    }

    ktaScale1 = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 8003192:	e00e      	b.n	80031b2 <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 8003194:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031a0:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80031a4:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 80031a8:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80031ac:	3301      	adds	r3, #1
 80031ae:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 80031b2:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	f7fd f96e 	bl	8000498 <__aeabi_f2d>
 80031bc:	a34d      	add	r3, pc, #308	@ (adr r3, 80032f4 <ExtractKtaPixelParameters+0x484>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fd fc33 	bl	8000a2c <__aeabi_dcmplt>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e3      	bne.n	8003194 <ExtractKtaPixelParameters+0x324>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 80031d2:	e075      	b.n	80032c0 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 80031d4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031d8:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80031dc:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f956 	bl	8000498 <__aeabi_f2d>
 80031ec:	4604      	mov	r4, r0
 80031ee:	460d      	mov	r5, r1
 80031f0:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f92d 	bl	8000454 <__aeabi_ui2d>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	ec43 2b11 	vmov	d1, r2, r3
 8003202:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 80032e8 <ExtractKtaPixelParameters+0x478>
 8003206:	f007 fb17 	bl	800a838 <pow>
 800320a:	ec53 2b10 	vmov	r2, r3, d0
 800320e:	4620      	mov	r0, r4
 8003210:	4629      	mov	r1, r5
 8003212:	f7fd f999 	bl	8000548 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f7fd fc8b 	bl	8000b38 <__aeabi_d2f>
 8003222:	4603      	mov	r3, r0
 8003224:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8003228:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 800322a:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d51e      	bpl.n	800327a <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 800323c:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f7fd f929 	bl	8000498 <__aeabi_f2d>
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	4b29      	ldr	r3, [pc, #164]	@ (80032f0 <ExtractKtaPixelParameters+0x480>)
 800324c:	f7fc ffc4 	bl	80001d8 <__aeabi_dsub>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	f7fd fc26 	bl	8000aa8 <__aeabi_d2iz>
 800325c:	4603      	mov	r3, r0
 800325e:	b259      	sxtb	r1, r3
 8003260:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003264:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 800326e:	4413      	add	r3, r2
 8003270:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 8003274:	460a      	mov	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e01d      	b.n	80032b6 <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 800327a:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	f7fd f90a 	bl	8000498 <__aeabi_f2d>
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	4b19      	ldr	r3, [pc, #100]	@ (80032f0 <ExtractKtaPixelParameters+0x480>)
 800328a:	f7fc ffa7 	bl	80001dc <__adddf3>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f7fd fc07 	bl	8000aa8 <__aeabi_d2iz>
 800329a:	4603      	mov	r3, r0
 800329c:	b259      	sxtb	r1, r3
 800329e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032a2:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80032ac:	4413      	add	r3, r2
 80032ae:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 80032b2:	460a      	mov	r2, r1
 80032b4:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80032b6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80032ba:	3301      	adds	r3, #1
 80032bc:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 80032c0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80032c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032c8:	db84      	blt.n	80031d4 <ExtractKtaPixelParameters+0x364>
        }

    }

    mlx90640->ktaScale = ktaScale1;
 80032ca:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032ce:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	@ 0xc2f
 80032d8:	f883 2f4c 	strb.w	r2, [r3, #3916]	@ 0xf4c
}
 80032dc:	bf00      	nop
 80032de:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdb0      	pop	{r4, r5, r7, pc}
 80032e6:	bf00      	nop
 80032e8:	00000000 	.word	0x00000000
 80032ec:	40000000 	.word	0x40000000
 80032f0:	3fe00000 	.word	0x3fe00000
 80032f4:	33333333 	.word	0x33333333
 80032f8:	404fb333 	.word	0x404fb333
 80032fc:	00000000 	.word	0x00000000

08003300 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 8003306:	af00      	add	r7, sp, #0
 8003308:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800330c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003310:	6018      	str	r0, [r3, #0]
 8003312:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003316:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800331a:	6019      	str	r1, [r3, #0]
    int p = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 8003322:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003326:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3368      	adds	r3, #104	@ 0x68
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	0b1b      	lsrs	r3, r3, #12
 8003332:	b29b      	uxth	r3, r3
 8003334:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    if (KvRoCo > 7)
 8003338:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	@ 0xc2f
 800333c:	2b07      	cmp	r3, #7
 800333e:	dd05      	ble.n	800334c <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 8003340:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8003344:	3b10      	subs	r3, #16
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    }
    KvT[0] = KvRoCo;
 800334c:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8003350:	f887 3c08 	strb.w	r3, [r7, #3080]	@ 0xc08

    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 8003354:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003358:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3368      	adds	r3, #104	@ 0x68
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	121b      	asrs	r3, r3, #8
 8003364:	b25b      	sxtb	r3, r3
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    if (KvReCo > 7)
 800336e:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	@ 0xc2d
 8003372:	2b07      	cmp	r3, #7
 8003374:	dd05      	ble.n	8003382 <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 8003376:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 800337a:	3b10      	subs	r3, #16
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    }
    KvT[2] = KvReCo;
 8003382:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 8003386:	f887 3c0a 	strb.w	r3, [r7, #3082]	@ 0xc0a

    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 800338a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800338e:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3368      	adds	r3, #104	@ 0x68
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	111b      	asrs	r3, r3, #4
 800339a:	b25b      	sxtb	r3, r3
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    if (KvRoCe > 7)
 80033a4:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	@ 0xc2e
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	dd05      	ble.n	80033b8 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 80033ac:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 80033b0:	3b10      	subs	r3, #16
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    }
    KvT[1] = KvRoCe;
 80033b8:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 80033bc:	f887 3c09 	strb.w	r3, [r7, #3081]	@ 0xc09

    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 80033c0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033c4:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3368      	adds	r3, #104	@ 0x68
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    if (KvReCe > 7)
 80033d8:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	@ 0xc2c
 80033dc:	2b07      	cmp	r3, #7
 80033de:	dd05      	ble.n	80033ec <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 80033e0:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 80033e4:	3b10      	subs	r3, #16
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    }
    KvT[3] = KvReCe;
 80033ec:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 80033f0:	f887 3c0b 	strb.w	r3, [r7, #3083]	@ 0xc0b

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80033f4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033f8:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3370      	adds	r3, #112	@ 0x70
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	121b      	asrs	r3, r3, #8
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8003414:	e07c      	b.n	8003510 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 800341c:	e06f      	b.n	80034fe <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 800341e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8003422:	015b      	lsls	r3, r3, #5
 8003424:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	@ 0xc1c
 8003428:	4413      	add	r3, r2
 800342a:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 800342e:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003432:	2b00      	cmp	r3, #0
 8003434:	da00      	bge.n	8003438 <ExtractKvPixelParameters+0x138>
 8003436:	331f      	adds	r3, #31
 8003438:	115b      	asrs	r3, r3, #5
 800343a:	461a      	mov	r2, r3
 800343c:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003440:	2b00      	cmp	r3, #0
 8003442:	da00      	bge.n	8003446 <ExtractKvPixelParameters+0x146>
 8003444:	333f      	adds	r3, #63	@ 0x3f
 8003446:	119b      	asrs	r3, r3, #6
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	b2da      	uxtb	r2, r3
 8003452:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003456:	2b00      	cmp	r3, #0
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	bfb8      	it	lt
 800345e:	425b      	neglt	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	4413      	add	r3, r2
 8003464:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f
            kvTemp[p] = KvT[split];
 8003468:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	@ 0xc0f
 800346c:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 8003470:	443b      	add	r3, r7
 8003472:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003482:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003486:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 8003492:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003496:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 800349a:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fc fff7 	bl	8000498 <__aeabi_f2d>
 80034aa:	4604      	mov	r4, r0
 80034ac:	460d      	mov	r5, r1
 80034ae:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fc ffce 	bl	8000454 <__aeabi_ui2d>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	ec43 2b11 	vmov	d1, r2, r3
 80034c0:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80036f8 <ExtractKvPixelParameters+0x3f8>
 80034c4:	f007 f9b8 	bl	800a838 <pow>
 80034c8:	ec53 2b10 	vmov	r2, r3, d0
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f964 	bl	800079c <__aeabi_ddiv>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f7fd fb2c 	bl	8000b38 <__aeabi_d2f>
 80034e0:	4601      	mov	r1, r0
 80034e2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80034e6:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80034ea:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80034f4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 80034f8:	3301      	adds	r3, #1
 80034fa:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 80034fe:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003502:	2b1f      	cmp	r3, #31
 8003504:	dd8b      	ble.n	800341e <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003506:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 800350a:	3301      	adds	r3, #1
 800350c:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8003510:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8003514:	2b17      	cmp	r3, #23
 8003516:	f77f af7e 	ble.w	8003416 <ExtractKvPixelParameters+0x116>
        }
    }

    temp = fabs(kvTemp[0]);
 800351a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800351e:	f6a3 4328 	subw	r3, r3, #3112	@ 0xc28
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	eef0 7ae7 	vabs.f32	s15, s15
 800352a:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800352e:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003532:	2301      	movs	r3, #1
 8003534:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8003538:	e029      	b.n	800358e <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 800353a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800353e:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003542:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	eef0 7ae7 	vabs.f32	s15, s15
 8003552:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003556:	ed93 7a00 	vldr	s14, [r3]
 800355a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d50f      	bpl.n	8003584 <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 8003564:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003568:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 800356c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	eef0 7ae7 	vabs.f32	s15, s15
 800357c:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003580:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003584:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003588:	3301      	adds	r3, #1
 800358a:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 800358e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003596:	dbd0      	blt.n	800353a <ExtractKvPixelParameters+0x23a>
        }
    }

    kvScale = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 800359e:	e00e      	b.n	80035be <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 80035a0:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035ac:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80035b0:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 80035b4:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80035b8:	3301      	adds	r3, #1
 80035ba:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 80035be:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	f7fc ff68 	bl	8000498 <__aeabi_f2d>
 80035c8:	a34e      	add	r3, pc, #312	@ (adr r3, 8003704 <ExtractKvPixelParameters+0x404>)
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	f7fd fa2d 	bl	8000a2c <__aeabi_dcmplt>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e3      	bne.n	80035a0 <ExtractKvPixelParameters+0x2a0>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 80035de:	e075      	b.n	80036cc <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 80035e0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80035e4:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80035e8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc ff50 	bl	8000498 <__aeabi_f2d>
 80035f8:	4604      	mov	r4, r0
 80035fa:	460d      	mov	r5, r1
 80035fc:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 8003600:	4618      	mov	r0, r3
 8003602:	f7fc ff27 	bl	8000454 <__aeabi_ui2d>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	ec43 2b11 	vmov	d1, r2, r3
 800360e:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 80036f8 <ExtractKvPixelParameters+0x3f8>
 8003612:	f007 f911 	bl	800a838 <pow>
 8003616:	ec53 2b10 	vmov	r2, r3, d0
 800361a:	4620      	mov	r0, r4
 800361c:	4629      	mov	r1, r5
 800361e:	f7fc ff93 	bl	8000548 <__aeabi_dmul>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f7fd fa85 	bl	8000b38 <__aeabi_d2f>
 800362e:	4603      	mov	r3, r0
 8003630:	f607 4224 	addw	r2, r7, #3108	@ 0xc24
 8003634:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8003636:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003646:	d51e      	bpl.n	8003686 <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 8003648:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	f7fc ff23 	bl	8000498 <__aeabi_f2d>
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	4b2a      	ldr	r3, [pc, #168]	@ (8003700 <ExtractKvPixelParameters+0x400>)
 8003658:	f7fc fdbe 	bl	80001d8 <__aeabi_dsub>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	f7fd fa20 	bl	8000aa8 <__aeabi_d2iz>
 8003668:	4603      	mov	r3, r0
 800366a:	b259      	sxtb	r1, r3
 800366c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003670:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800367a:	4413      	add	r3, r2
 800367c:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8003680:	460a      	mov	r2, r1
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e01d      	b.n	80036c2 <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 8003686:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	f7fc ff04 	bl	8000498 <__aeabi_f2d>
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <ExtractKvPixelParameters+0x400>)
 8003696:	f7fc fda1 	bl	80001dc <__adddf3>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa01 	bl	8000aa8 <__aeabi_d2iz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	b259      	sxtb	r1, r3
 80036aa:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80036ae:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80036b8:	4413      	add	r3, r2
 80036ba:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 80036be:	460a      	mov	r2, r1
 80036c0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80036c2:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80036c6:	3301      	adds	r3, #1
 80036c8:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 80036cc:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80036d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d4:	db84      	blt.n	80035e0 <ExtractKvPixelParameters+0x2e0>
        }

    }

    mlx90640->kvScale = kvScale;
 80036d6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80036da:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e4:	461a      	mov	r2, r3
 80036e6:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80036ea:	f882 324d 	strb.w	r3, [r2, #589]	@ 0x24d
}
 80036ee:	bf00      	nop
 80036f0:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}
 80036f8:	00000000 	.word	0x00000000
 80036fc:	40000000 	.word	0x40000000
 8003700:	3fe00000 	.word	0x3fe00000
 8003704:	33333333 	.word	0x33333333
 8003708:	404fb333 	.word	0x404fb333
 800370c:	00000000 	.word	0x00000000

08003710 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3340      	adds	r3, #64	@ 0x40
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	0b1b      	lsrs	r3, r3, #12
 8003722:	b29b      	uxth	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	331b      	adds	r3, #27
 8003728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3374      	adds	r3, #116	@ 0x74
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b21b      	sxth	r3, r3
 8003734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003738:	b21b      	sxth	r3, r3
 800373a:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 800373c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003744:	db07      	blt.n	8003756 <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8003746:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003750:	b29b      	uxth	r3, r3
 8003752:	b21b      	sxth	r3, r3
 8003754:	813b      	strh	r3, [r7, #8]
    }

    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3374      	adds	r3, #116	@ 0x74
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	0a9b      	lsrs	r3, r3, #10
 800375e:	b29b      	uxth	r3, r3
 8003760:	b21b      	sxth	r3, r3
 8003762:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8003764:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003768:	2b1f      	cmp	r3, #31
 800376a:	dd06      	ble.n	800377a <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 800376c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b40      	subs	r3, #64	@ 0x40
 8003774:	b29b      	uxth	r3, r3
 8003776:	b21b      	sxth	r3, r3
 8003778:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0];
 800377a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800377e:	b29a      	uxth	r2, r3
 8003780:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003784:	b29b      	uxth	r3, r3
 8003786:	4413      	add	r3, r2
 8003788:	b29b      	uxth	r3, r3
 800378a:	b21b      	sxth	r3, r3
 800378c:	817b      	strh	r3, [r7, #10]

    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3372      	adds	r3, #114	@ 0x72
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 80037a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037a8:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003978 <ExtractCPParameters+0x268>
 80037ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	dd07      	ble.n	80037c6 <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 80037b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ba:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800397c <ExtractCPParameters+0x26c>
 80037be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037c2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fe65 	bl	8000498 <__aeabi_f2d>
 80037ce:	4604      	mov	r4, r0
 80037d0:	460d      	mov	r5, r1
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fe3c 	bl	8000454 <__aeabi_ui2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	ec43 2b11 	vmov	d1, r2, r3
 80037e4:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8003970 <ExtractCPParameters+0x260>
 80037e8:	f007 f826 	bl	800a838 <pow>
 80037ec:	ec53 2b10 	vmov	r2, r3, d0
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc ffd2 	bl	800079c <__aeabi_ddiv>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	f7fd f99a 	bl	8000b38 <__aeabi_d2f>
 8003804:	4603      	mov	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]

    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3372      	adds	r3, #114	@ 0x72
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	b29b      	uxth	r3, r3
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 800381e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003822:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8003826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	dd07      	ble.n	8003840 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8003830:	edd7 7a04 	vldr	s15, [r7, #16]
 8003834:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003980 <ExtractCPParameters+0x270>
 8003838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800383c:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8003840:	ed97 7a04 	vldr	s14, [r7, #16]
 8003844:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003984 <ExtractCPParameters+0x274>
 8003848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800384c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003854:	edd7 7a03 	vldr	s15, [r7, #12]
 8003858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385c:	edc7 7a04 	vstr	s15, [r7, #16]

    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3376      	adds	r3, #118	@ 0x76
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b25b      	sxtb	r3, r3
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003870:	edc7 7a08 	vstr	s15, [r7, #32]

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3370      	adds	r3, #112	@ 0x70
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	111b      	asrs	r3, r3, #4
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	b2db      	uxtb	r3, r3
 8003884:	3308      	adds	r3, #8
 8003886:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 8003888:	6a38      	ldr	r0, [r7, #32]
 800388a:	f7fc fe05 	bl	8000498 <__aeabi_f2d>
 800388e:	4604      	mov	r4, r0
 8003890:	460d      	mov	r5, r1
 8003892:	7ffb      	ldrb	r3, [r7, #31]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fddd 	bl	8000454 <__aeabi_ui2d>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	ec43 2b11 	vmov	d1, r2, r3
 80038a2:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8003970 <ExtractCPParameters+0x260>
 80038a6:	f006 ffc7 	bl	800a838 <pow>
 80038aa:	ec53 2b10 	vmov	r2, r3, d0
 80038ae:	4620      	mov	r0, r4
 80038b0:	4629      	mov	r1, r5
 80038b2:	f7fc ff73 	bl	800079c <__aeabi_ddiv>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	f7fd f93b 	bl	8000b38 <__aeabi_d2f>
 80038c2:	4602      	mov	r2, r0
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	621a      	str	r2, [r3, #32]

    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3376      	adds	r3, #118	@ 0x76
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038dc:	edc7 7a06 	vstr	s15, [r7, #24]

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3370      	adds	r3, #112	@ 0x70
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	121b      	asrs	r3, r3, #8
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 80038f0:	69b8      	ldr	r0, [r7, #24]
 80038f2:	f7fc fdd1 	bl	8000498 <__aeabi_f2d>
 80038f6:	4604      	mov	r4, r0
 80038f8:	460d      	mov	r5, r1
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fda9 	bl	8000454 <__aeabi_ui2d>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	ec43 2b11 	vmov	d1, r2, r3
 800390a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8003970 <ExtractCPParameters+0x260>
 800390e:	f006 ff93 	bl	800a838 <pow>
 8003912:	ec53 2b10 	vmov	r2, r3, d0
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	f7fc ff3f 	bl	800079c <__aeabi_ddiv>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f7fd f907 	bl	8000b38 <__aeabi_d2f>
 800392a:	4602      	mov	r2, r0
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	61da      	str	r2, [r3, #28]

    mlx90640->cpAlpha[0] = alphaSP[0];
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003938:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003944:	f8c2 3254 	str.w	r3, [r2, #596]	@ 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8003948:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003952:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
    mlx90640->cpOffset[1] = offsetSP[1];
 8003956:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003960:	f8a3 225a 	strh.w	r2, [r3, #602]	@ 0x25a
}
 8003964:	bf00      	nop
 8003966:	3728      	adds	r7, #40	@ 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bdb0      	pop	{r4, r5, r7, pc}
 800396c:	f3af 8000 	nop.w
 8003970:	00000000 	.word	0x00000000
 8003974:	40000000 	.word	0x40000000
 8003978:	43ff8000 	.word	0x43ff8000
 800397c:	44800000 	.word	0x44800000
 8003980:	42800000 	.word	0x42800000
 8003984:	43000000 	.word	0x43000000

08003988 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;

    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3314      	adds	r3, #20
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	111b      	asrs	r3, r3, #4
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80039a0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80039a8:	43db      	mvns	r3, r3
 80039aa:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	336a      	adds	r3, #106	@ 0x6a
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039be:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 80039c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80039c6:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80039ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d2:	dd07      	ble.n	80039e4 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 80039d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80039d8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003ac0 <ExtractCILCParameters+0x138>
 80039dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039e0:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 80039e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80039e8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80039ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039f0:	edc7 7a02 	vstr	s15, [r7, #8]

    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	336a      	adds	r3, #106	@ 0x6a
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	119b      	asrs	r3, r3, #6
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a08:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8003a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a10:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	dd07      	ble.n	8003a2e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8003a1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a22:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003ac4 <ExtractCILCParameters+0x13c>
 8003a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a2a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8003a2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a32:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a3a:	edc7 7a03 	vstr	s15, [r7, #12]

    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	336a      	adds	r3, #106	@ 0x6a
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	0adb      	lsrs	r3, r3, #11
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a50:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8003a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a58:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a64:	dd07      	ble.n	8003a76 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8003a66:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a6a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003ac4 <ExtractCILCParameters+0x13c>
 8003a6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a72:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8003a76:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a7a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8003a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a82:	edc7 7a04 	vstr	s15, [r7, #16]

    mlx90640->calibrationModeEE = calibrationModeEE;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	7dfa      	ldrb	r2, [r7, #23]
 8003a8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a96:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003aa2:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003aae:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	42800000 	.word	0x42800000
 8003ac4:	42000000 	.word	0x42000000

08003ac8 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
    int i;

    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	82fb      	strh	r3, [r7, #22]
 8003ae6:	e013      	b.n	8003b10 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8003ae8:	8afa      	ldrh	r2, [r7, #22]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003af0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003af4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8003af8:	8afb      	ldrh	r3, [r7, #22]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b08:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003b0a:	8afb      	ldrh	r3, [r7, #22]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	82fb      	strh	r3, [r7, #22]
 8003b10:	8afb      	ldrh	r3, [r7, #22]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d9e8      	bls.n	8003ae8 <ExtractDeviatingPixels+0x20>
    }

    pixCnt = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003b1a:	e02a      	b.n	8003b72 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8003b1c:	8afb      	ldrh	r3, [r7, #22]
 8003b1e:	3340      	adds	r3, #64	@ 0x40
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8003b2c:	8aba      	ldrh	r2, [r7, #20]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003b34:	8af9      	ldrh	r1, [r7, #22]
 8003b36:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8003b3a:	8abb      	ldrh	r3, [r7, #20]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	82bb      	strh	r3, [r7, #20]
 8003b40:	e014      	b.n	8003b6c <ExtractDeviatingPixels+0xa4>
        }
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	3340      	adds	r3, #64	@ 0x40
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8003b56:	8a7b      	ldrh	r3, [r7, #18]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	8afa      	ldrh	r2, [r7, #22]
 8003b64:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8003b66:	8a7b      	ldrh	r3, [r7, #18]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	827b      	strh	r3, [r7, #18]
        }

        pixCnt = pixCnt + 1;
 8003b6c:	8afb      	ldrh	r3, [r7, #22]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003b72:	8afb      	ldrh	r3, [r7, #22]
 8003b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b78:	d205      	bcs.n	8003b86 <ExtractDeviatingPixels+0xbe>
 8003b7a:	8abb      	ldrh	r3, [r7, #20]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d802      	bhi.n	8003b86 <ExtractDeviatingPixels+0xbe>
 8003b80:	8a7b      	ldrh	r3, [r7, #18]
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d9ca      	bls.n	8003b1c <ExtractDeviatingPixels+0x54>

    }

    if(brokenPixCnt > 4)
 8003b86:	8abb      	ldrh	r3, [r7, #20]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d903      	bls.n	8003b94 <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 8003b8c:	f06f 0302 	mvn.w	r3, #2
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e08f      	b.n	8003cb4 <ExtractDeviatingPixels+0x1ec>
    }
    else if(outlierPixCnt > 4)
 8003b94:	8a7b      	ldrh	r3, [r7, #18]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d903      	bls.n	8003ba2 <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 8003b9a:	f06f 0303 	mvn.w	r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e088      	b.n	8003cb4 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)
 8003ba2:	8aba      	ldrh	r2, [r7, #20]
 8003ba4:	8a7b      	ldrh	r3, [r7, #18]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	dd03      	ble.n	8003bb4 <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 8003bac:	f06f 0304 	mvn.w	r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e07f      	b.n	8003cb4 <ExtractDeviatingPixels+0x1ec>
    }
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	82fb      	strh	r3, [r7, #22]
 8003bb8:	e022      	b.n	8003c00 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003bba:	8afb      	ldrh	r3, [r7, #22]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	e017      	b.n	8003bf2 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8003bc2:	8afa      	ldrh	r2, [r7, #22]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003bca:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003bd6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f000 f86f 	bl	8003cbe <CheckAdjacentPixels>
 8003be0:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	e064      	b.n	8003cb6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	8abb      	ldrh	r3, [r7, #20]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	dbe3      	blt.n	8003bc2 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003bfa:	8afb      	ldrh	r3, [r7, #22]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	82fb      	strh	r3, [r7, #22]
 8003c00:	8afa      	ldrh	r2, [r7, #22]
 8003c02:	8abb      	ldrh	r3, [r7, #20]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d3d8      	bcc.n	8003bba <ExtractDeviatingPixels+0xf2>
                }
            }
        }

        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	82fb      	strh	r3, [r7, #22]
 8003c0c:	e024      	b.n	8003c58 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003c0e:	8afb      	ldrh	r3, [r7, #22]
 8003c10:	3301      	adds	r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	e019      	b.n	8003c4a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003c16:	8afb      	ldrh	r3, [r7, #22]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	8858      	ldrh	r0, [r3, #2]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	885b      	ldrh	r3, [r3, #2]
 8003c32:	4619      	mov	r1, r3
 8003c34:	f000 f843 	bl	8003cbe <CheckAdjacentPixels>
 8003c38:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	e038      	b.n	8003cb6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	8a7b      	ldrh	r3, [r7, #18]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	dbe1      	blt.n	8003c16 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	3301      	adds	r3, #1
 8003c56:	82fb      	strh	r3, [r7, #22]
 8003c58:	8afa      	ldrh	r2, [r7, #22]
 8003c5a:	8a7b      	ldrh	r3, [r7, #18]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d3d6      	bcc.n	8003c0e <ExtractDeviatingPixels+0x146>
                }
            }
        }

        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	82fb      	strh	r3, [r7, #22]
 8003c64:	e022      	b.n	8003cac <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	e018      	b.n	8003c9e <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003c6c:	8afa      	ldrh	r2, [r7, #22]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003c74:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	885b      	ldrh	r3, [r3, #2]
 8003c86:	4619      	mov	r1, r3
 8003c88:	f000 f819 	bl	8003cbe <CheckAdjacentPixels>
 8003c8c:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	e00e      	b.n	8003cb6 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	dbe2      	blt.n	8003c6c <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003ca6:	8afb      	ldrh	r3, [r7, #22]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	82fb      	strh	r3, [r7, #22]
 8003cac:	8afa      	ldrh	r2, [r7, #22]
 8003cae:	8abb      	ldrh	r3, [r7, #20]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3d8      	bcc.n	8003c66 <ExtractDeviatingPixels+0x19e>
        }

    }


    return warn;
 8003cb4:	68fb      	ldr	r3, [r7, #12]

}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460a      	mov	r2, r1
 8003cc8:	80fb      	strh	r3, [r7, #6]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80bb      	strh	r3, [r7, #4]

     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	82fb      	strh	r3, [r7, #22]
     uint16_t lp2 = pix2 >> 5;
 8003cd4:	88bb      	ldrh	r3, [r7, #4]
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	82bb      	strh	r3, [r7, #20]
     uint16_t cp1 = pix1 - (lp1 << 5);
 8003cda:	8afb      	ldrh	r3, [r7, #22]
 8003cdc:	015b      	lsls	r3, r3, #5
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	827b      	strh	r3, [r7, #18]
     uint16_t cp2 = pix2 - (lp2 << 5);
 8003ce6:	8abb      	ldrh	r3, [r7, #20]
 8003ce8:	015b      	lsls	r3, r3, #5
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	88ba      	ldrh	r2, [r7, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	823b      	strh	r3, [r7, #16]

     pixPosDif = lp1 - lp2;
 8003cf2:	8afa      	ldrh	r2, [r7, #22]
 8003cf4:	8abb      	ldrh	r3, [r7, #20]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -2 && pixPosDif < 2)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d00:	db10      	blt.n	8003d24 <CheckAdjacentPixels+0x66>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	dc0d      	bgt.n	8003d24 <CheckAdjacentPixels+0x66>
     {
        pixPosDif = cp1 - cp2;
 8003d08:	8a7a      	ldrh	r2, [r7, #18]
 8003d0a:	8a3b      	ldrh	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
        if(pixPosDif > -2 && pixPosDif < 2)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d16:	db05      	blt.n	8003d24 <CheckAdjacentPixels+0x66>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	dc02      	bgt.n	8003d24 <CheckAdjacentPixels+0x66>
        {
            return -6;
 8003d1e:	f06f 0305 	mvn.w	r3, #5
 8003d22:	e000      	b.n	8003d26 <CheckAdjacentPixels+0x68>
        }

     }

     return 0;
 8003d24:	2300      	movs	r3, #0
 }
 8003d26:	4618      	mov	r0, r3
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <MLX90640_I2CRead>:
	}
	printf("Scan Complete\r\n");
}

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress,
		uint16_t nMemAddressRead, uint16_t *data) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08c      	sub	sp, #48	@ 0x30
 8003d38:	af04      	add	r7, sp, #16
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	460b      	mov	r3, r1
 8003d42:	81bb      	strh	r3, [r7, #12]
 8003d44:	4613      	mov	r3, r2
 8003d46:	817b      	strh	r3, [r7, #10]
	uint8_t* pData = (uint8_t*) data;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
	int ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr << 1), startAddress,
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	b299      	uxth	r1, r3
 8003d54:	897b      	ldrh	r3, [r7, #10]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	89ba      	ldrh	r2, [r7, #12]
 8003d5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d60:	9002      	str	r0, [sp, #8]
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2302      	movs	r3, #2
 8003d6a:	4817      	ldr	r0, [pc, #92]	@ (8003dc8 <MLX90640_I2CRead+0x94>)
 8003d6c:	f003 fe7e 	bl	8007a6c <HAL_I2C_Mem_Read>
 8003d70:	4603      	mov	r3, r0
 8003d72:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, 2 * nMemAddressRead, 500);
	if (ack != HAL_OK) {
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <MLX90640_I2CRead+0x4c>
		return -1;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d7e:	e01f      	b.n	8003dc0 <MLX90640_I2CRead+0x8c>
	}

	// Perform Endian Conversion on the received data
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e016      	b.n	8003db4 <MLX90640_I2CRead+0x80>
		uint8_t temp = pData[k+1];
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	74fb      	strb	r3, [r7, #19]
		pData[k+1] = pData[k];
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	441a      	add	r2, r3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	69b9      	ldr	r1, [r7, #24]
 8003d9e:	440b      	add	r3, r1
 8003da0:	7812      	ldrb	r2, [r2, #0]
 8003da2:	701a      	strb	r2, [r3, #0]
		pData[k] = temp;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4413      	add	r3, r2
 8003daa:	7cfa      	ldrb	r2, [r7, #19]
 8003dac:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3302      	adds	r3, #2
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	897b      	ldrh	r3, [r7, #10]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	dbe3      	blt.n	8003d86 <MLX90640_I2CRead+0x52>
	}

	return 0;
 8003dbe:	2300      	movs	r3, #0

}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000150 	.word	0x20000150

08003dcc <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	@ 0x28
 8003dd0:	af04      	add	r7, sp, #16
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	80bb      	strh	r3, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	807b      	strh	r3, [r7, #2]
	uint8_t pData[2];
	pData[0] = (uint8_t)((data >> 8) & 0xFF); // MSB
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	743b      	strb	r3, [r7, #16]
	pData[1] = (uint8_t)(data & 0xFF); // LSB
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	747b      	strb	r3, [r7, #17]
	// Perform Endian Conversion on data to write

	int ack = HAL_I2C_Mem_Write(&hi2c1, (slaveAddr << 1), writeAddress,
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	b299      	uxth	r1, r3
 8003df6:	88ba      	ldrh	r2, [r7, #4]
 8003df8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003dfc:	9302      	str	r3, [sp, #8]
 8003dfe:	2302      	movs	r3, #2
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	f107 0310 	add.w	r3, r7, #16
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2302      	movs	r3, #2
 8003e0a:	480f      	ldr	r0, [pc, #60]	@ (8003e48 <MLX90640_I2CWrite+0x7c>)
 8003e0c:	f003 fd1a 	bl	8007844 <HAL_I2C_Mem_Write>
 8003e10:	4603      	mov	r3, r0
 8003e12:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, sizeof(pData), 500);

	if (ack != HAL_OK) {
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <MLX90640_I2CWrite+0x54>
		return -1;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e1e:	e00e      	b.n	8003e3e <MLX90640_I2CWrite+0x72>
	}

	uint16_t dataCheck;
	MLX90640_I2CRead(slaveAddr, writeAddress, 2, &dataCheck);
 8003e20:	f107 030e 	add.w	r3, r7, #14
 8003e24:	88b9      	ldrh	r1, [r7, #4]
 8003e26:	79f8      	ldrb	r0, [r7, #7]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f7ff ff83 	bl	8003d34 <MLX90640_I2CRead>
	if (dataCheck != data) return -2;
 8003e2e:	89fb      	ldrh	r3, [r7, #14]
 8003e30:	887a      	ldrh	r2, [r7, #2]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d002      	beq.n	8003e3c <MLX90640_I2CWrite+0x70>
 8003e36:	f06f 0301 	mvn.w	r3, #1
 8003e3a:	e000      	b.n	8003e3e <MLX90640_I2CWrite+0x72>

	return 0;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000150 	.word	0x20000150

08003e4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e52:	463b      	mov	r3, r7
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	611a      	str	r2, [r3, #16]
 8003e60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003e62:	4b29      	ldr	r3, [pc, #164]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e64:	4a29      	ldr	r2, [pc, #164]	@ (8003f0c <MX_ADC1_Init+0xc0>)
 8003e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003e68:	4b27      	ldr	r3, [pc, #156]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e6e:	4b26      	ldr	r3, [pc, #152]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e74:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e7a:	4b23      	ldr	r3, [pc, #140]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e80:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e82:	2204      	movs	r2, #4
 8003e84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003e86:	4b20      	ldr	r3, [pc, #128]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003e92:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e98:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ea6:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003eac:	4b16      	ldr	r3, [pc, #88]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003eb4:	4b14      	ldr	r3, [pc, #80]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003eba:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ec2:	4811      	ldr	r0, [pc, #68]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003ec4:	f001 fe28 	bl	8005b18 <HAL_ADC_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003ece:	f000 feb8 	bl	8004c42 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <MX_ADC1_Init+0xc4>)
 8003ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ed6:	2306      	movs	r3, #6
 8003ed8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ede:	237f      	movs	r3, #127	@ 0x7f
 8003ee0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eea:	463b      	mov	r3, r7
 8003eec:	4619      	mov	r1, r3
 8003eee:	4806      	ldr	r0, [pc, #24]	@ (8003f08 <MX_ADC1_Init+0xbc>)
 8003ef0:	f001 fff6 	bl	8005ee0 <HAL_ADC_ConfigChannel>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003efa:	f000 fea2 	bl	8004c42 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	2000007c 	.word	0x2000007c
 8003f0c:	50040000 	.word	0x50040000
 8003f10:	19200040 	.word	0x19200040

08003f14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b09e      	sub	sp, #120	@ 0x78
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f2c:	f107 0310 	add.w	r3, r7, #16
 8003f30:	2254      	movs	r2, #84	@ 0x54
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f006 fc4c 	bl	800a7d2 <memset>
  if(adcHandle->Instance==ADC1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a3b      	ldr	r2, [pc, #236]	@ (800402c <HAL_ADC_MspInit+0x118>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d16e      	bne.n	8004022 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003f4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003f50:	2302      	movs	r3, #2
 8003f52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003f54:	2301      	movs	r3, #1
 8003f56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003f58:	2308      	movs	r3, #8
 8003f5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003f60:	2302      	movs	r3, #2
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003f64:	2302      	movs	r3, #2
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003f68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f6e:	f107 0310 	add.w	r3, r7, #16
 8003f72:	4618      	mov	r0, r3
 8003f74:	f005 f88a 	bl	800908c <HAL_RCCEx_PeriphCLKConfig>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003f7e:	f000 fe60 	bl	8004c42 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003f82:	4b2b      	ldr	r3, [pc, #172]	@ (8004030 <HAL_ADC_MspInit+0x11c>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <HAL_ADC_MspInit+0x11c>)
 8003f88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f8e:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <HAL_ADC_MspInit+0x11c>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9a:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <HAL_ADC_MspInit+0x11c>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	4a24      	ldr	r2, [pc, #144]	@ (8004030 <HAL_ADC_MspInit+0x11c>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fa6:	4b22      	ldr	r3, [pc, #136]	@ (8004030 <HAL_ADC_MspInit+0x11c>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = LIN_POT_IN_Pin;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003fb6:	230b      	movs	r3, #11
 8003fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(LIN_POT_IN_GPIO_Port, &GPIO_InitStruct);
 8003fbe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc8:	f003 fa06 	bl	80073d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fcc:	4b19      	ldr	r3, [pc, #100]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003fce:	4a1a      	ldr	r2, [pc, #104]	@ (8004038 <HAL_ADC_MspInit+0x124>)
 8003fd0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003fd2:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fd8:	4b16      	ldr	r3, [pc, #88]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fe4:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003fe6:	2280      	movs	r2, #128	@ 0x80
 8003fe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fea:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ff2:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003ff4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ff8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004000:	4b0c      	ldr	r3, [pc, #48]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8004002:	2200      	movs	r2, #0
 8004004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004006:	480b      	ldr	r0, [pc, #44]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 8004008:	f002 ffee 	bl	8006fe8 <HAL_DMA_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8004012:	f000 fe16 	bl	8004c42 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a06      	ldr	r2, [pc, #24]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 800401a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800401c:	4a05      	ldr	r2, [pc, #20]	@ (8004034 <HAL_ADC_MspInit+0x120>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004022:	bf00      	nop
 8004024:	3778      	adds	r7, #120	@ 0x78
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	50040000 	.word	0x50040000
 8004030:	40021000 	.word	0x40021000
 8004034:	200000e0 	.word	0x200000e0
 8004038:	40020008 	.word	0x40020008

0800403c <cs_low_stm>:
 */


#include "ads1118.h"

void cs_low_stm(struct ADS* ads) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ads->GPIO_PORT, ads->GPIO_PIN, GPIO_PIN_RESET);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68d8      	ldr	r0, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7c1b      	ldrb	r3, [r3, #16]
 800404c:	2200      	movs	r2, #0
 800404e:	4619      	mov	r1, r3
 8004050:	f003 fb2c 	bl	80076ac <HAL_GPIO_WritePin>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <cs_high_stm>:

void cs_high_stm(struct ADS* ads) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ads->GPIO_PORT, ads->GPIO_PIN, GPIO_PIN_SET);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68d8      	ldr	r0, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7c1b      	ldrb	r3, [r3, #16]
 800406c:	2201      	movs	r2, #1
 800406e:	4619      	mov	r1, r3
 8004070:	f003 fb1c 	bl	80076ac <HAL_GPIO_WritePin>
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <initADS>:

void initADS(ADS* ads, SPI_HandleTypeDef* spiInstance, GPIO_TypeDef* PORT, uint16_t GPIO_PIN) {
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	807b      	strh	r3, [r7, #2]
	// Important Parameters
	ads->hspi = spiInstance;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	601a      	str	r2, [r3, #0]
	ads->FSR = 2.048; // Full Scale Range
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a24      	ldr	r2, [pc, #144]	@ (8004124 <initADS+0xa8>)
 8004094:	605a      	str	r2, [r3, #4]
	ads->SPS = 128; // Data Rate, i.e. Samples Per Second
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2280      	movs	r2, #128	@ 0x80
 800409a:	609a      	str	r2, [r3, #8]
	ads->GPIO_PORT = PORT; // The GPIO Port on our STM32 for our chip select
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	60da      	str	r2, [r3, #12]
	ads->GPIO_PIN = GPIO_PIN; // The GPIO Pin for our chip select; could be either STM32 or on the PCF8574A
 80040a2:	887b      	ldrh	r3, [r7, #2]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	741a      	strb	r2, [r3, #16]

	ads->cs_low = &cs_low_stm;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <initADS+0xac>)
 80040ae:	615a      	str	r2, [r3, #20]
	ads->cs_high = &cs_high_stm;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a1e      	ldr	r2, [pc, #120]	@ (800412c <initADS+0xb0>)
 80040b4:	619a      	str	r2, [r3, #24]

	// Default Config according to Datasheet
	ads->config.bits.RESV = CONFIG_BIT_RESV;
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80040c4:	2101      	movs	r1, #1
 80040c6:	f361 0342 	bfi	r3, r1, #1, #2
 80040ca:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.PULL_UP_EN = ENABLED;
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80040d0:	f043 0308 	orr.w	r3, r3, #8
 80040d4:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.TS_MODE = ADC_MODE;
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80040da:	f023 0310 	bic.w	r3, r3, #16
 80040de:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.DR = SPS_128;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80040e4:	2104      	movs	r1, #4
 80040e6:	f361 1347 	bfi	r3, r1, #5, #3
 80040ea:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.MODE = SS_EN;
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80040f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f4:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.PGA = FSR_2048;
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80040fa:	2102      	movs	r1, #2
 80040fc:	f361 234b 	bfi	r3, r1, #9, #3
 8004100:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.MUX = AINPN_0_1;
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410a:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.SS = STOPPED;
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8004110:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004114:	8593      	strh	r3, [r2, #44]	@ 0x2c
	// This is equivalent to 0x058B if you write it out
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	4003126f 	.word	0x4003126f
 8004128:	0800403d 	.word	0x0800403d
 800412c:	0800405d 	.word	0x0800405d

08004130 <editConfig>:

bool editConfig(ADS* ads, uint16_t prevConfig) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af02      	add	r7, sp, #8
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
	uint8_t txData[4] = {ads->config.bytes[1], ads->config.bytes[0],
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004142:	733b      	strb	r3, [r7, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800414a:	737b      	strb	r3, [r7, #13]
			ads->config.bytes[1], ads->config.bytes[0]};
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t txData[4] = {ads->config.bytes[1], ads->config.bytes[0],
 8004152:	73bb      	strb	r3, [r7, #14]
			ads->config.bytes[1], ads->config.bytes[0]};
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t txData[4] = {ads->config.bytes[1], ads->config.bytes[0],
 800415a:	73fb      	strb	r3, [r7, #15]
	ads->cs_low(ads);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
	HAL_SPI_TransmitReceive(ads->hspi, txData, ads->rxConfig, 4, HAL_MAX_DELAY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 021e 	add.w	r2, r3, #30
 800416e:	f107 010c 	add.w	r1, r7, #12
 8004172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2304      	movs	r3, #4
 800417a:	f005 fb12 	bl	80097a2 <HAL_SPI_TransmitReceive>
	ads->cs_high(ads);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
	if (txData[0] == ads->rxConfig[2] && txData[1] == ads->rxConfig[3]) {
 8004186:	7b3a      	ldrb	r2, [r7, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418e:	429a      	cmp	r2, r3
 8004190:	d107      	bne.n	80041a2 <editConfig+0x72>
 8004192:	7b7a      	ldrb	r2, [r7, #13]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800419a:	429a      	cmp	r2, r3
 800419c:	d101      	bne.n	80041a2 <editConfig+0x72>
		return 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	e003      	b.n	80041aa <editConfig+0x7a>
	}
	// Transmission failed; revert back to previous known configuration state on SW Side
	ads->config.word = prevConfig;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
	return 0;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <enableContinuousConversion>:
	ads->config.bits.MODE = SS_EN;
	ads->config.bits.NOP = DATA_VALID;
	return editConfig(ads, prevConfig);
}

bool enableContinuousConversion(ADS* ads) {
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
	uint16_t prevConfig = ads->config.word;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041be:	81fb      	strh	r3, [r7, #14]
	ads->config.bits.MODE = CC_EN;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80041c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c8:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80041ce:	2101      	movs	r1, #1
 80041d0:	f361 0342 	bfi	r3, r1, #1, #2
 80041d4:	8593      	strh	r3, [r2, #44]	@ 0x2c
	return editConfig(ads, prevConfig);
 80041d6:	89fb      	ldrh	r3, [r7, #14]
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ffa8 	bl	8004130 <editConfig>
 80041e0:	4603      	mov	r3, r0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <enableADCSensor>:

bool enableADCSensor(ADS* ads) {
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
	uint16_t prevConfig = ads->config.word;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041f6:	81fb      	strh	r3, [r7, #14]
	ads->config.bits.TS_MODE = ADC_MODE;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80041fc:	f023 0310 	bic.w	r3, r3, #16
 8004200:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8004206:	2101      	movs	r1, #1
 8004208:	f361 0342 	bfi	r3, r1, #1, #2
 800420c:	8593      	strh	r3, [r2, #44]	@ 0x2c
	return editConfig(ads, prevConfig);
 800420e:	89fb      	ldrh	r3, [r7, #14]
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ff8c 	bl	8004130 <editConfig>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <continuousRead>:
		}
	}
	return 0;
}

bool continuousRead(ADS* ads) {
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af02      	add	r7, sp, #8
 8004228:	6078      	str	r0, [r7, #4]
	// Check if we are in Continuous Conversion Mode first
	if (ads->config.bits.MODE == 0) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d152      	bne.n	80042de <continuousRead+0xbc>
		uint8_t txData[4] = {ads->config.bytes[1], ads->config.bytes[0],
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800423e:	743b      	strb	r3, [r7, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004246:	747b      	strb	r3, [r7, #17]
				ads->config.bytes[1], ads->config.bytes[0]};
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
		uint8_t txData[4] = {ads->config.bytes[1], ads->config.bytes[0],
 800424e:	74bb      	strb	r3, [r7, #18]
				ads->config.bytes[1], ads->config.bytes[0]};
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
		uint8_t txData[4] = {ads->config.bytes[1], ads->config.bytes[0],
 8004256:	74fb      	strb	r3, [r7, #19]
		uint8_t rxData[4];
		ads->cs_low(ads);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
		HAL_SPI_TransmitReceive(ads->hspi, txData, rxData, 4, HAL_MAX_DELAY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	f107 020c 	add.w	r2, r7, #12
 8004268:	f107 0110 	add.w	r1, r7, #16
 800426c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2304      	movs	r3, #4
 8004274:	f005 fa95 	bl	80097a2 <HAL_SPI_TransmitReceive>
		ads->cs_high(ads);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
		 ads->rxADS[0] = rxData[0];
 8004280:	7b3a      	ldrb	r2, [r7, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	771a      	strb	r2, [r3, #28]
		 ads->rxADS[1] = rxData[1];
 8004286:	7b7a      	ldrb	r2, [r7, #13]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	775a      	strb	r2, [r3, #29]
		int16_t ads_reading = (ads->rxADS[0] << 8) | ads->rxADS[1];
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7f1b      	ldrb	r3, [r3, #28]
 8004290:	b21b      	sxth	r3, r3
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	b21a      	sxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7f5b      	ldrb	r3, [r3, #29]
 800429a:	b21b      	sxth	r3, r3
 800429c:	4313      	orrs	r3, r2
 800429e:	82fb      	strh	r3, [r7, #22]
		if (ads->config.bits.TS_MODE == TEMP_MODE) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10a      	bne.n	80042c4 <continuousRead+0xa2>
			ads->temp = parseTemp(ads_reading);
 80042ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f8d4 	bl	8004460 <parseTemp>
 80042b8:	eef0 7a40 	vmov.f32	s15, s0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 80042c2:	e00a      	b.n	80042da <continuousRead+0xb8>
		} else {
			ads->voltage = parseVoltage(ads, ads_reading);
 80042c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f8a6 	bl	800441c <parseVoltage>
 80042d0:	eef0 7a40 	vmov.f32	s15, s0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		}
		return 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <continuousRead+0xbe>
	}
	return 0;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <enableAINPN_0_G>:
	ads->config.bits.MUX = AINPN_2_3;
	ads->config.bits.NOP = DATA_VALID;
	return editConfig(ads, prevConfig);
}

bool enableAINPN_0_G(ADS* ads) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	uint16_t prevConfig = ads->config.word;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042f4:	81fb      	strh	r3, [r7, #14]
	ads->config.bits.MUX = AINPN_0_G;
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80042fa:	2104      	movs	r1, #4
 80042fc:	f361 330e 	bfi	r3, r1, #12, #3
 8004300:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8004306:	2101      	movs	r1, #1
 8004308:	f361 0342 	bfi	r3, r1, #1, #2
 800430c:	8593      	strh	r3, [r2, #44]	@ 0x2c
	return editConfig(ads, prevConfig);
 800430e:	89fb      	ldrh	r3, [r7, #14]
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ff0c 	bl	8004130 <editConfig>
 8004318:	4603      	mov	r3, r0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <enableAINPN_1_G>:
bool enableAINPN_1_G(ADS* ads) {
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
	uint16_t prevConfig = ads->config.word;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800432e:	81fb      	strh	r3, [r7, #14]
	ads->config.bits.MUX = AINPN_1_G;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8004334:	2105      	movs	r1, #5
 8004336:	f361 330e 	bfi	r3, r1, #12, #3
 800433a:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8004340:	2101      	movs	r1, #1
 8004342:	f361 0342 	bfi	r3, r1, #1, #2
 8004346:	8593      	strh	r3, [r2, #44]	@ 0x2c
	return editConfig(ads, prevConfig);
 8004348:	89fb      	ldrh	r3, [r7, #14]
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff feef 	bl	8004130 <editConfig>
 8004352:	4603      	mov	r3, r0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <enableAINPN_2_G>:

bool enableAINPN_2_G(ADS* ads) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	uint16_t prevConfig = ads->config.word;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004368:	81fb      	strh	r3, [r7, #14]
	ads->config.bits.MUX = AINPN_2_G;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 800436e:	2106      	movs	r1, #6
 8004370:	f361 330e 	bfi	r3, r1, #12, #3
 8004374:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 800437a:	2101      	movs	r1, #1
 800437c:	f361 0342 	bfi	r3, r1, #1, #2
 8004380:	8593      	strh	r3, [r2, #44]	@ 0x2c
	return editConfig(ads, prevConfig);
 8004382:	89fb      	ldrh	r3, [r7, #14]
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fed2 	bl	8004130 <editConfig>
 800438c:	4603      	mov	r3, r0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <enableAINPN_3_G>:

bool enableAINPN_3_G(ADS* ads) {
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
	uint16_t prevConfig = ads->config.word;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043a2:	81fb      	strh	r3, [r7, #14]
	ads->config.bits.MUX = AINPN_3_G;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80043a8:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80043ac:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80043b2:	2101      	movs	r1, #1
 80043b4:	f361 0342 	bfi	r3, r1, #1, #2
 80043b8:	8593      	strh	r3, [r2, #44]	@ 0x2c
	return editConfig(ads, prevConfig);
 80043ba:	89fb      	ldrh	r3, [r7, #14]
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff feb6 	bl	8004130 <editConfig>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <enableFSR_6144>:

// Adjust full scale ranges
bool enableFSR_6144(ADS* ads) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	uint16_t prevConfig = ads->config.word;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043dc:	81fb      	strh	r3, [r7, #14]
	ads->config.bits.PGA = FSR_6144;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80043e2:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 80043e6:	8593      	strh	r3, [r2, #44]	@ 0x2c
	ads->config.bits.NOP = DATA_VALID;
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80043ec:	2101      	movs	r1, #1
 80043ee:	f361 0342 	bfi	r3, r1, #1, #2
 80043f2:	8593      	strh	r3, [r2, #44]	@ 0x2c
	if (editConfig(ads, prevConfig)) {
 80043f4:	89fb      	ldrh	r3, [r7, #14]
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff fe99 	bl	8004130 <editConfig>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <enableFSR_6144+0x3e>
		ads->FSR = 6.144;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <enableFSR_6144+0x48>)
 8004408:	605a      	str	r2, [r3, #4]
		return 1;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <enableFSR_6144+0x40>
	}
	return 0;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40c49ba6 	.word	0x40c49ba6

0800441c <parseVoltage>:
	}
	return 0;
}

// Parsing helper functions
float parseVoltage(ADS* ads, int16_t ads_reading) {
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
	float lsb = (ads->FSR)/32768.0;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	ed93 7a01 	vldr	s14, [r3, #4]
 800442e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800445c <parseVoltage+0x40>
 8004432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004436:	edc7 7a03 	vstr	s15, [r7, #12]
	return ads_reading*lsb;
 800443a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004446:	edd7 7a03 	vldr	s15, [r7, #12]
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800444e:	eeb0 0a67 	vmov.f32	s0, s15
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	47000000 	.word	0x47000000

08004460 <parseTemp>:

float parseTemp(int16_t ads_reading) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	80fb      	strh	r3, [r7, #6]
	int16_t signed_temp = ads_reading >> 2;
 800446a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800446e:	109b      	asrs	r3, r3, #2
 8004470:	81fb      	strh	r3, [r7, #14]
	if (signed_temp & 0x2000) { // If sign bit (bit 13) is set
 8004472:	89fb      	ldrh	r3, [r7, #14]
 8004474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <parseTemp+0x28>
		signed_temp |= 0xC000;  // Set upper bits to preserve sign in 16-bit
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8004482:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8004486:	81fb      	strh	r3, [r7, #14]
	}
	return (signed_temp * 0.03125);
 8004488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fb fff1 	bl	8000474 <__aeabi_i2d>
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	4b08      	ldr	r3, [pc, #32]	@ (80044b8 <parseTemp+0x58>)
 8004498:	f7fc f856 	bl	8000548 <__aeabi_dmul>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7fc fb48 	bl	8000b38 <__aeabi_d2f>
 80044a8:	4603      	mov	r3, r0
 80044aa:	ee07 3a90 	vmov	s15, r3
}
 80044ae:	eeb0 0a67 	vmov.f32	s0, s15
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	3fa00000 	.word	0x3fa00000

080044bc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80044c0:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044c2:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <MX_CAN1_Init+0x68>)
 80044c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80044c6:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044c8:	220a      	movs	r2, #10
 80044ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80044d2:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044da:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80044de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80044e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80044e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80044e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80044ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80044f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80044fa:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <MX_CAN1_Init+0x64>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <MX_CAN1_Init+0x64>)
 8004502:	2200      	movs	r2, #0
 8004504:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <MX_CAN1_Init+0x64>)
 8004508:	2200      	movs	r2, #0
 800450a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800450c:	4804      	ldr	r0, [pc, #16]	@ (8004520 <MX_CAN1_Init+0x64>)
 800450e:	f002 f9e3 	bl	80068d8 <HAL_CAN_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8004518:	f000 fb93 	bl	8004c42 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000128 	.word	0x20000128
 8004524:	40006400 	.word	0x40006400

08004528 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a21      	ldr	r2, [pc, #132]	@ (80045cc <HAL_CAN_MspInit+0xa4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d13b      	bne.n	80045c2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800454a:	4b21      	ldr	r3, [pc, #132]	@ (80045d0 <HAL_CAN_MspInit+0xa8>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	4a20      	ldr	r2, [pc, #128]	@ (80045d0 <HAL_CAN_MspInit+0xa8>)
 8004550:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004554:	6593      	str	r3, [r2, #88]	@ 0x58
 8004556:	4b1e      	ldr	r3, [pc, #120]	@ (80045d0 <HAL_CAN_MspInit+0xa8>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <HAL_CAN_MspInit+0xa8>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	4a1a      	ldr	r2, [pc, #104]	@ (80045d0 <HAL_CAN_MspInit+0xa8>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456e:	4b18      	ldr	r3, [pc, #96]	@ (80045d0 <HAL_CAN_MspInit+0xa8>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800457a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800457e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004584:	2301      	movs	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004588:	2303      	movs	r3, #3
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800458c:	2309      	movs	r3, #9
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800459a:	f002 ff1d 	bl	80073d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800459e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ac:	2303      	movs	r3, #3
 80045ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80045b0:	2309      	movs	r3, #9
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045be:	f002 ff0b 	bl	80073d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80045c2:	bf00      	nop
 80045c4:	3728      	adds	r7, #40	@ 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40006400 	.word	0x40006400
 80045d0:	40021000 	.word	0x40021000

080045d4 <CANTransmitMinion>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CANTransmitMinion(CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef TXStatusOut = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	77fb      	strb	r3, [r7, #31]
	//	printf("sending ID ");
	//	printf((uint32_t)(header->StdId));
	int i = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61bb      	str	r3, [r7, #24]
	uint32_t mailbox = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 80045ec:	e012      	b.n	8004614 <CANTransmitMinion+0x40>
		while(HAL_CAN_GetTxMailboxesFreeLevel(canport) < 1) {
 80045ee:	bf00      	nop
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f002 fb80 	bl	8006cf6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f9      	beq.n	80045f0 <CANTransmitMinion+0x1c>
					//wait until a new mailbox gets freed up
		//			printf("\n\rwaiting\n\r");
				}
		TXStatusOut = HAL_CAN_AddTxMessage(canport, header, dataArray, &mailbox);
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f002 faa6 	bl	8006b56 <HAL_CAN_AddTxMessage>
 800460a:	4603      	mov	r3, r0
 800460c:	77fb      	strb	r3, [r7, #31]

		i++;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3301      	adds	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b02      	cmp	r3, #2
 8004618:	dc02      	bgt.n	8004620 <CANTransmitMinion+0x4c>
 800461a:	7ffb      	ldrb	r3, [r7, #31]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e6      	bne.n	80045ee <CANTransmitMinion+0x1a>
	}

	if (TXStatusOut != HAL_OK) {
 8004620:	7ffb      	ldrb	r3, [r7, #31]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <CANTransmitMinion+0x56>
		mailbox = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]

	}
	//	printf("\n\r");
	return TXStatusOut;
 800462a:	7ffb      	ldrb	r3, [r7, #31]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <clearEflagsHelper>:

void clearEflagsHelper(CORNER_CAN_CONTEXT *CANCONTEXT) {
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	CANCONTEXT->misc_dataframe.data.eflags.ADCErrorBit = 0;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.BrakeTempErrorBit = 0;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004650:	f023 0302 	bic.w	r3, r3, #2
 8004654:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = 0;
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800465e:	f023 0308 	bic.w	r3, r3, #8
 8004662:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = 0;
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = 0;
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = 0;
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004688:	f023 0320 	bic.w	r3, r3, #32
 800468c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = 0;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800469a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = 0;
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80046a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046a8:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b

}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <CANMailman>:

void CANMailman(CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, CORNER_CAN_CONTEXT *CANCONTEXT) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
	clearEflagsHelper(CANCONTEXT);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ffb5 	bl	8004634 <clearEflagsHelper>
	HAL_StatusTypeDef txstatus;

	/*** BEGIN SEND MISC MESSAGE (btemp, whs, board temp, error flags, shock travel) */
	if (HAL_GetTick() - CANCONTEXT->ms_since_miscmsg_broadcast > MISC_DATA_TRANSMISSION_PERIOD) {
 80046ca:	f001 f82d 	bl	8005728 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d923      	bls.n	8004722 <CANMailman+0x6a>
		header->StdId = MISC_DATA_ID;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f240 7215 	movw	r2, #1813	@ 0x715
 80046e0:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion(canport, header, CANCONTEXT->misc_dataframe.array);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3334      	adds	r3, #52	@ 0x34
 80046e6:	461a      	mov	r2, r3
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff ff72 	bl	80045d4 <CANTransmitMinion>
 80046f0:	4603      	mov	r3, r0
 80046f2:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <CANMailman+0x52>
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = true;
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004700:	f043 0304 	orr.w	r3, r3, #4
 8004704:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8004708:	e006      	b.n	8004718 <CANMailman+0x60>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = false;
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_miscmsg_broadcast = HAL_GetTick();
 8004718:	f001 f806 	bl	8005728 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	/**** BEGIN SEND STRAIN GAUGE DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_strain_broadcast > STRAIN_GAUGE_TRANSMISSION_PERIOD) {
 8004722:	f001 f801 	bl	8005728 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b03      	cmp	r3, #3
 8004730:	d923      	bls.n	800477a <CANMailman+0xc2>
		header->StdId = STRAIN_GAUGE_ID;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8004738:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->straingauge_dataframe.array);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	461a      	mov	r2, r3
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff ff46 	bl	80045d4 <CANTransmitMinion>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <CANMailman+0xaa>
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = true;
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8004760:	e006      	b.n	8004770 <CANMailman+0xb8>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = false;
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004768:	f023 0308 	bic.w	r3, r3, #8
 800476c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_strain_broadcast = HAL_GetTick();
 8004770:	f000 ffda 	bl	8005728 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]

	}

	/**** BEGIN SEND TIRE TEMP DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_ttemp_broadcast > TIRE_TEMP_TRANSMISSION_PERIOD) {
 800477a:	f000 ffd5 	bl	8005728 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 800478a:	f0c0 8081 	bcc.w	8004890 <CANMailman+0x1d8>
		//		CTXHeader.IDE = CAN_ID_STD;
		//		CTXHeader.RTR = CAN_RTR_DATA;
		//		CTXHeader.DLC = 8;
		//		ms_since_ttemp_broadcast = HAL_GetTick();

		header->StdId = TIRE_TEMP_MSG1_ID;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f240 7211 	movw	r2, #1809	@ 0x711
 8004794:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[0].array);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3310      	adds	r3, #16
 800479a:	461a      	mov	r2, r3
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff ff18 	bl	80045d4 <CANTransmitMinion>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <CANMailman+0x106>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = true;
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80047b4:	f043 0310 	orr.w	r3, r3, #16
 80047b8:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 80047bc:	e006      	b.n	80047cc <CANMailman+0x114>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = false;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80047c4:	f023 0310 	bic.w	r3, r3, #16
 80047c8:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG2_ID;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f240 7212 	movw	r2, #1810	@ 0x712
 80047d2:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[1].array);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3318      	adds	r3, #24
 80047d8:	461a      	mov	r2, r3
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fef9 	bl	80045d4 <CANTransmitMinion>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <CANMailman+0x144>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = true;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80047f2:	f043 0320 	orr.w	r3, r3, #32
 80047f6:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 80047fa:	e006      	b.n	800480a <CANMailman+0x152>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = false;
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004802:	f023 0320 	bic.w	r3, r3, #32
 8004806:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG3_ID;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f240 7213 	movw	r2, #1811	@ 0x713
 8004810:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[2].array);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3320      	adds	r3, #32
 8004816:	461a      	mov	r2, r3
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff feda 	bl	80045d4 <CANTransmitMinion>
 8004820:	4603      	mov	r3, r0
 8004822:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <CANMailman+0x182>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = true;
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004834:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8004838:	e006      	b.n	8004848 <CANMailman+0x190>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = false;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8004840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004844:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG4_ID;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f240 7214 	movw	r2, #1812	@ 0x714
 800484e:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[3].array);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3328      	adds	r3, #40	@ 0x28
 8004854:	461a      	mov	r2, r3
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff febb 	bl	80045d4 <CANTransmitMinion>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <CANMailman+0x1c0>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = true;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800486e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004872:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8004876:	e006      	b.n	8004886 <CANMailman+0x1ce>
		} else {
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = false;
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800487e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004882:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_ttemp_broadcast = HAL_GetTick();
 8004886:	f000 ff4f 	bl	8005728 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]
	}

	/**** END SEND TIRE TEMP DATA ****/
}
 8004890:	bf00      	nop
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800489e:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <MX_DMA_Init+0x38>)
 80048a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a2:	4a0b      	ldr	r2, [pc, #44]	@ (80048d0 <MX_DMA_Init+0x38>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80048aa:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <MX_DMA_Init+0x38>)
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	200b      	movs	r0, #11
 80048bc:	f002 fb4f 	bl	8006f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80048c0:	200b      	movs	r0, #11
 80048c2:	f002 fb68 	bl	8006f96 <HAL_NVIC_EnableIRQ>

}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000

080048d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048da:	f107 030c 	add.w	r3, r7, #12
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	605a      	str	r2, [r3, #4]
 80048e4:	609a      	str	r2, [r3, #8]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ea:	4b2c      	ldr	r3, [pc, #176]	@ (800499c <MX_GPIO_Init+0xc8>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ee:	4a2b      	ldr	r2, [pc, #172]	@ (800499c <MX_GPIO_Init+0xc8>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048f6:	4b29      	ldr	r3, [pc, #164]	@ (800499c <MX_GPIO_Init+0xc8>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004902:	4b26      	ldr	r3, [pc, #152]	@ (800499c <MX_GPIO_Init+0xc8>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	4a25      	ldr	r2, [pc, #148]	@ (800499c <MX_GPIO_Init+0xc8>)
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800490e:	4b23      	ldr	r3, [pc, #140]	@ (800499c <MX_GPIO_Init+0xc8>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_EN_GPIO_Port, ADS_EN_Pin, GPIO_PIN_SET);
 800491a:	2201      	movs	r2, #1
 800491c:	2110      	movs	r1, #16
 800491e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004922:	f002 fec3 	bl	80076ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_SET);
 8004926:	2201      	movs	r2, #1
 8004928:	2108      	movs	r1, #8
 800492a:	481d      	ldr	r0, [pc, #116]	@ (80049a0 <MX_GPIO_Init+0xcc>)
 800492c:	f002 febe 	bl	80076ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADS_EN_Pin */
  GPIO_InitStruct.Pin = ADS_EN_Pin;
 8004930:	2310      	movs	r3, #16
 8004932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004934:	2301      	movs	r3, #1
 8004936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADS_EN_GPIO_Port, &GPIO_InitStruct);
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	4619      	mov	r1, r3
 8004946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800494a:	f002 fd45 	bl	80073d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 800494e:	2308      	movs	r3, #8
 8004950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004952:	2301      	movs	r3, #1
 8004954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 800495e:	f107 030c 	add.w	r3, r7, #12
 8004962:	4619      	mov	r1, r3
 8004964:	480e      	ldr	r0, [pc, #56]	@ (80049a0 <MX_GPIO_Init+0xcc>)
 8004966:	f002 fd37 	bl	80073d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 800496a:	2310      	movs	r3, #16
 800496c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800496e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 8004978:	f107 030c 	add.w	r3, r7, #12
 800497c:	4619      	mov	r1, r3
 800497e:	4808      	ldr	r0, [pc, #32]	@ (80049a0 <MX_GPIO_Init+0xcc>)
 8004980:	f002 fd2a 	bl	80073d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004984:	2200      	movs	r2, #0
 8004986:	2100      	movs	r1, #0
 8004988:	200a      	movs	r0, #10
 800498a:	f002 fae8 	bl	8006f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800498e:	200a      	movs	r0, #10
 8004990:	f002 fb01 	bl	8006f96 <HAL_NVIC_EnableIRQ>

}
 8004994:	bf00      	nop
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	48000400 	.word	0x48000400

080049a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80049a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049aa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <MX_I2C1_Init+0x78>)
 80049ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a20 <MX_I2C1_Init+0x7c>)
 80049b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80049b4:	4b18      	ldr	r3, [pc, #96]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049ba:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049bc:	2201      	movs	r2, #1
 80049be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049c0:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049cc:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049d2:	4b11      	ldr	r3, [pc, #68]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049da:	2200      	movs	r2, #0
 80049dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049de:	480e      	ldr	r0, [pc, #56]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049e0:	f002 fe94 	bl	800770c <HAL_I2C_Init>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80049ea:	f000 f92a 	bl	8004c42 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049ee:	2100      	movs	r1, #0
 80049f0:	4809      	ldr	r0, [pc, #36]	@ (8004a18 <MX_I2C1_Init+0x74>)
 80049f2:	f003 fc17 	bl	8008224 <HAL_I2CEx_ConfigAnalogFilter>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80049fc:	f000 f921 	bl	8004c42 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a00:	2100      	movs	r1, #0
 8004a02:	4805      	ldr	r0, [pc, #20]	@ (8004a18 <MX_I2C1_Init+0x74>)
 8004a04:	f003 fc59 	bl	80082ba <HAL_I2CEx_ConfigDigitalFilter>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004a0e:	f000 f918 	bl	8004c42 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000150 	.word	0x20000150
 8004a1c:	40005400 	.word	0x40005400
 8004a20:	00f12981 	.word	0x00f12981

08004a24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b09e      	sub	sp, #120	@ 0x78
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	2254      	movs	r2, #84	@ 0x54
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f005 fec4 	bl	800a7d2 <memset>
  if(i2cHandle->Instance==I2C1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <HAL_I2C_MspInit+0xa4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d135      	bne.n	8004ac0 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a54:	2340      	movs	r3, #64	@ 0x40
 8004a56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a5c:	f107 0310 	add.w	r3, r7, #16
 8004a60:	4618      	mov	r0, r3
 8004a62:	f004 fb13 	bl	800908c <HAL_RCCEx_PeriphCLKConfig>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004a6c:	f000 f8e9 	bl	8004c42 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a70:	4b16      	ldr	r3, [pc, #88]	@ (8004acc <HAL_I2C_MspInit+0xa8>)
 8004a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a74:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <HAL_I2C_MspInit+0xa8>)
 8004a76:	f043 0302 	orr.w	r3, r3, #2
 8004a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a7c:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <HAL_I2C_MspInit+0xa8>)
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a88:	23c0      	movs	r3, #192	@ 0xc0
 8004a8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a8c:	2312      	movs	r3, #18
 8004a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a94:	2303      	movs	r3, #3
 8004a96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a98:	2304      	movs	r3, #4
 8004a9a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	480b      	ldr	r0, [pc, #44]	@ (8004ad0 <HAL_I2C_MspInit+0xac>)
 8004aa4:	f002 fc98 	bl	80073d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004aa8:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <HAL_I2C_MspInit+0xa8>)
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aac:	4a07      	ldr	r2, [pc, #28]	@ (8004acc <HAL_I2C_MspInit+0xa8>)
 8004aae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ab4:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_I2C_MspInit+0xa8>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3778      	adds	r7, #120	@ 0x78
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40005400 	.word	0x40005400
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	48000400 	.word	0x48000400

08004ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ad8:	f000 fdbd 	bl	8005656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004adc:	f000 f860 	bl	8004ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ae0:	f7ff fef8 	bl	80048d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ae4:	f7ff fed8 	bl	8004898 <MX_DMA_Init>
  MX_ADC1_Init();
 8004ae8:	f7ff f9b0 	bl	8003e4c <MX_ADC1_Init>
  MX_CAN1_Init();
 8004aec:	f7ff fce6 	bl	80044bc <MX_CAN1_Init>
  MX_I2C1_Init();
 8004af0:	f7ff ff58 	bl	80049a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004af4:	f000 fb86 	bl	8005204 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004af8:	f000 fc7a 	bl	80053f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004afc:	f000 fca8 	bl	8005450 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1); // NEED TO CALL THIS OTHERWISE EVERYTHING BUGS OUT
 8004b00:	4818      	ldr	r0, [pc, #96]	@ (8004b64 <main+0x90>)
 8004b02:	f001 ffe4 	bl	8006ace <HAL_CAN_Start>

    initializeWheelSpeed();
 8004b06:	f000 f8a2 	bl	8004c4e <initializeWheelSpeed>
    linpot_status = initializeLinPot(&hadc1);
 8004b0a:	4817      	ldr	r0, [pc, #92]	@ (8004b68 <main+0x94>)
 8004b0c:	f000 f8ce 	bl	8004cac <initializeLinPot>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <main+0x98>)
 8004b16:	701a      	strb	r2, [r3, #0]
    mlx_status = initializeTireTemp();
 8004b18:	f000 f8a0 	bl	8004c5c <initializeTireTemp>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b13      	ldr	r3, [pc, #76]	@ (8004b70 <main+0x9c>)
 8004b22:	701a      	strb	r2, [r3, #0]
    ads_status = initializeStrainGauge(&hspi1);
 8004b24:	4813      	ldr	r0, [pc, #76]	@ (8004b74 <main+0xa0>)
 8004b26:	f000 f8d7 	bl	8004cd8 <initializeStrainGauge>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b12      	ldr	r3, [pc, #72]	@ (8004b78 <main+0xa4>)
 8004b30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		readStrainGauges(&hspi1, &ms_since_strain_read, &(CANCONTEXT.straingauge_dataframe));
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <main+0xa8>)
 8004b34:	4912      	ldr	r1, [pc, #72]	@ (8004b80 <main+0xac>)
 8004b36:	480f      	ldr	r0, [pc, #60]	@ (8004b74 <main+0xa0>)
 8004b38:	f000 f9be 	bl	8004eb8 <readStrainGauges>
		readWheelSpeed(&ms_since_whs_read, &(CANCONTEXT.misc_dataframe));
 8004b3c:	4911      	ldr	r1, [pc, #68]	@ (8004b84 <main+0xb0>)
 8004b3e:	4812      	ldr	r0, [pc, #72]	@ (8004b88 <main+0xb4>)
 8004b40:	f000 fa56 	bl	8004ff0 <readWheelSpeed>
//		readBrakeTemp(&ms_since_btemp_read, &(CANCONTEXT.misc_dataframe));
		readTireTemp(&ms_since_ttemp_read, (CANCONTEXT.ttemp_dataframes));
 8004b44:	4911      	ldr	r1, [pc, #68]	@ (8004b8c <main+0xb8>)
 8004b46:	4812      	ldr	r0, [pc, #72]	@ (8004b90 <main+0xbc>)
 8004b48:	f000 f922 	bl	8004d90 <readTireTemp>
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8004b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b84 <main+0xb0>)
 8004b4e:	4911      	ldr	r1, [pc, #68]	@ (8004b94 <main+0xc0>)
 8004b50:	4805      	ldr	r0, [pc, #20]	@ (8004b68 <main+0x94>)
 8004b52:	f000 f8e5 	bl	8004d20 <readLinearPotentiometer>
//		readBoardTemp(&hspi1, &ms_since_boardtemp_read, &(CANCONTEXT.misc_dataframe));
		CANMailman(&hcan1, &CTXHeader, &CANCONTEXT);
 8004b56:	4a10      	ldr	r2, [pc, #64]	@ (8004b98 <main+0xc4>)
 8004b58:	4910      	ldr	r1, [pc, #64]	@ (8004b9c <main+0xc8>)
 8004b5a:	4802      	ldr	r0, [pc, #8]	@ (8004b64 <main+0x90>)
 8004b5c:	f7ff fdac 	bl	80046b8 <CANMailman>
		readStrainGauges(&hspi1, &ms_since_strain_read, &(CANCONTEXT.straingauge_dataframe));
 8004b60:	bf00      	nop
 8004b62:	e7e6      	b.n	8004b32 <main+0x5e>
 8004b64:	20000128 	.word	0x20000128
 8004b68:	2000007c 	.word	0x2000007c
 8004b6c:	200001e0 	.word	0x200001e0
 8004b70:	200001e1 	.word	0x200001e1
 8004b74:	20002de8 	.word	0x20002de8
 8004b78:	200001e2 	.word	0x200001e2
 8004b7c:	200001a8 	.word	0x200001a8
 8004b80:	200001e8 	.word	0x200001e8
 8004b84:	200001d8 	.word	0x200001d8
 8004b88:	200001f0 	.word	0x200001f0
 8004b8c:	200001b4 	.word	0x200001b4
 8004b90:	200001ec 	.word	0x200001ec
 8004b94:	200001e4 	.word	0x200001e4
 8004b98:	200001a4 	.word	0x200001a4
 8004b9c:	200001f4 	.word	0x200001f4

08004ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b096      	sub	sp, #88	@ 0x58
 8004ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ba6:	f107 0314 	add.w	r3, r7, #20
 8004baa:	2244      	movs	r2, #68	@ 0x44
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f005 fe0f 	bl	800a7d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	609a      	str	r2, [r3, #8]
 8004bbe:	60da      	str	r2, [r3, #12]
 8004bc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004bc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004bc6:	f003 fbd3 	bl	8008370 <HAL_PWREx_ControlVoltageScaling>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004bd0:	f000 f837 	bl	8004c42 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bde:	2310      	movs	r3, #16
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004be2:	2302      	movs	r3, #2
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004be6:	2302      	movs	r3, #2
 8004be8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004bee:	230a      	movs	r3, #10
 8004bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004bf2:	2307      	movs	r3, #7
 8004bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 fc0a 	bl	800841c <HAL_RCC_OscConfig>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004c0e:	f000 f818 	bl	8004c42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c12:	230f      	movs	r3, #15
 8004c14:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c16:	2303      	movs	r3, #3
 8004c18:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004c26:	463b      	mov	r3, r7
 8004c28:	2104      	movs	r1, #4
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f004 f80a 	bl	8008c44 <HAL_RCC_ClockConfig>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004c36:	f000 f804 	bl	8004c42 <Error_Handler>
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	3758      	adds	r7, #88	@ 0x58
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c42:	b480      	push	{r7}
 8004c44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c46:	b672      	cpsid	i
}
 8004c48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <Error_Handler+0x8>

08004c4e <initializeWheelSpeed>:
uint16_t adcBuffer[1];
float linpot_reading;

volatile int hall_effect_edges;

void initializeWheelSpeed() {
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8004c52:	200a      	movs	r0, #10
 8004c54:	f002 f9ad 	bl	8006fb2 <HAL_NVIC_DisableIRQ>
}
 8004c58:	bf00      	nop
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <initializeTireTemp>:

void initializeBrakeTemp() {
	// Literally broken lol
}

bool initializeTireTemp() {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
	int status_1, status_2, status_3;
	status_1 = MLX90640_SetChessMode(MLX_ADDR);
 8004c62:	2033      	movs	r0, #51	@ 0x33
 8004c64:	f7fc fb22 	bl	80012ac <MLX90640_SetChessMode>
 8004c68:	60f8      	str	r0, [r7, #12]
	status_2 = MLX90640_DumpEE(MLX_ADDR, MLX_eeData);
 8004c6a:	490e      	ldr	r1, [pc, #56]	@ (8004ca4 <initializeTireTemp+0x48>)
 8004c6c:	2033      	movs	r0, #51	@ 0x33
 8004c6e:	f7fc f949 	bl	8000f04 <MLX90640_DumpEE>
 8004c72:	60b8      	str	r0, [r7, #8]
	status_3 = MLX90640_ExtractParameters(MLX_eeData, &MLX_params);
 8004c74:	490c      	ldr	r1, [pc, #48]	@ (8004ca8 <initializeTireTemp+0x4c>)
 8004c76:	480b      	ldr	r0, [pc, #44]	@ (8004ca4 <initializeTireTemp+0x48>)
 8004c78:	f7fc fad3 	bl	8001222 <MLX90640_ExtractParameters>
 8004c7c:	6078      	str	r0, [r7, #4]
	if (status_1 == -1 || status_2 == -1 || status_3 == -1) return 0;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c84:	d007      	beq.n	8004c96 <initializeTireTemp+0x3a>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c8c:	d003      	beq.n	8004c96 <initializeTireTemp+0x3a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c94:	d101      	bne.n	8004c9a <initializeTireTemp+0x3e>
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <initializeTireTemp+0x40>
	return 1;
 8004c9a:	2301      	movs	r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	2000023c 	.word	0x2000023c
 8004ca8:	200008bc 	.word	0x200008bc

08004cac <initializeLinPot>:

bool initializeLinPot(ADC_HandleTypeDef* adcInstance) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_Start_DMA(adcInstance, (uint32_t*) adcBuffer, 1) != HAL_OK) {
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4907      	ldr	r1, [pc, #28]	@ (8004cd4 <initializeLinPot+0x28>)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f001 f86f 	bl	8005d9c <HAL_ADC_Start_DMA>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <initializeLinPot+0x1c>
		return 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <initializeLinPot+0x1e>
	}
	return 1;
 8004cc8:	2301      	movs	r3, #1
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20002ddc 	.word	0x20002ddc

08004cd8 <initializeStrainGauge>:

bool initializeStrainGauge(SPI_HandleTypeDef *spiInstance) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	bool status_1, status_2;
	initADS(&StrainGaugeADS, spiInstance, ADS_EN_PORT, ADS_EN_PIN);
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	480c      	ldr	r0, [pc, #48]	@ (8004d1c <initializeStrainGauge+0x44>)
 8004cea:	f7ff f9c7 	bl	800407c <initADS>
	status_1 = enableContinuousConversion(&StrainGaugeADS);
 8004cee:	480b      	ldr	r0, [pc, #44]	@ (8004d1c <initializeStrainGauge+0x44>)
 8004cf0:	f7ff fa5f 	bl	80041b2 <enableContinuousConversion>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
	status_2 = enableFSR_6144(&StrainGaugeADS);
 8004cf8:	4808      	ldr	r0, [pc, #32]	@ (8004d1c <initializeStrainGauge+0x44>)
 8004cfa:	f7ff fb69 	bl	80043d0 <enableFSR_6144>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	73bb      	strb	r3, [r7, #14]
	return (status_1 & status_2);
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	7bbb      	ldrb	r3, [r7, #14]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000020c 	.word	0x2000020c

08004d20 <readLinearPotentiometer>:

// ------- ALL THE READ FUNCTIONS -----------
void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS,  MISC_DATAFRAME *dataframe) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
	if( HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD) {
 8004d2c:	f000 fcfc 	bl	8005728 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b15      	cmp	r3, #21
 8004d3a:	d91e      	bls.n	8004d7a <readLinearPotentiometer+0x5a>
		HAL_ADC_Start_DMA(hadc, (uint32_t*) adcBuffer, 1);
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4911      	ldr	r1, [pc, #68]	@ (8004d84 <readLinearPotentiometer+0x64>)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f001 f82b 	bl	8005d9c <HAL_ADC_Start_DMA>
		linpot_reading = getLinPotTravel();
 8004d46:	f000 f9ef 	bl	8005128 <getLinPotTravel>
 8004d4a:	eef0 7a40 	vmov.f32	s15, s0
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <readLinearPotentiometer+0x68>)
 8004d50:	edc3 7a00 	vstr	s15, [r3]
		dataframe->data.shockTravel = (uint16_t)(linpot_reading*100);
 8004d54:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <readLinearPotentiometer+0x68>)
 8004d56:	edd3 7a00 	vldr	s15, [r3]
 8004d5a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004d8c <readLinearPotentiometer+0x6c>
 8004d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d66:	ee17 3a90 	vmov	r3, s15
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	809a      	strh	r2, [r3, #4]
		*lastReadMS = HAL_GetTick();
 8004d70:	f000 fcda 	bl	8005728 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	601a      	str	r2, [r3, #0]
	}
	//todo: convert counts to travel
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20002ddc 	.word	0x20002ddc
 8004d88:	20002de0 	.word	0x20002de0
 8004d8c:	42c80000 	.word	0x42c80000

08004d90 <readTireTemp>:
	}

	//todo: convert to deg C
}

void readTireTemp(uint32_t *lastReadMS, TTEMP_DATAFRAME *dataframes) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	if (HAL_GetTick() - *lastReadMS > TIRE_TEMP_SAMPLE_PERIOD) {
 8004d9a:	f000 fcc5 	bl	8005728 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8004daa:	d377      	bcc.n	8004e9c <readTireTemp+0x10c>
		MLX90640_GetFrameData(MLX_ADDR, MLX_dataFrame);
 8004dac:	493d      	ldr	r1, [pc, #244]	@ (8004ea4 <readTireTemp+0x114>)
 8004dae:	2033      	movs	r0, #51	@ 0x33
 8004db0:	f7fc f8bb 	bl	8000f2a <MLX90640_GetFrameData>
		float tr = MLX90640_GetTa(MLX_dataFrame, &MLX_params) - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8004db4:	493c      	ldr	r1, [pc, #240]	@ (8004ea8 <readTireTemp+0x118>)
 8004db6:	483b      	ldr	r0, [pc, #236]	@ (8004ea4 <readTireTemp+0x114>)
 8004db8:	f7fd f82a 	bl	8001e10 <MLX90640_GetTa>
 8004dbc:	eef0 7a40 	vmov.f32	s15, s0
 8004dc0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8004dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dc8:	edc7 7a02 	vstr	s15, [r7, #8]
		MLX90640_CalculateTo(MLX_dataFrame, &MLX_params, EMISSIVITY, tr, MLX_to);
 8004dcc:	4a37      	ldr	r2, [pc, #220]	@ (8004eac <readTireTemp+0x11c>)
 8004dce:	edd7 0a02 	vldr	s1, [r7, #8]
 8004dd2:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8004eb0 <readTireTemp+0x120>
 8004dd6:	4934      	ldr	r1, [pc, #208]	@ (8004ea8 <readTireTemp+0x118>)
 8004dd8:	4832      	ldr	r0, [pc, #200]	@ (8004ea4 <readTireTemp+0x114>)
 8004dda:	f7fc fa89 	bl	80012f0 <MLX90640_CalculateTo>
		getMLXSample();
 8004dde:	f000 f937 	bl	8005050 <getMLXSample>

		for (int i = 0; i < 4; i++) {
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e051      	b.n	8004e8c <readTireTemp+0xfc>
			dataframes[i].data.pix0 = MLX_sample[0 + 8*i];
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	00da      	lsls	r2, r3, #3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	440b      	add	r3, r1
 8004df4:	492f      	ldr	r1, [pc, #188]	@ (8004eb4 <readTireTemp+0x124>)
 8004df6:	5c8a      	ldrb	r2, [r1, r2]
 8004df8:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix1 = MLX_sample[1 + 8*i];
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	440b      	add	r3, r1
 8004e08:	492a      	ldr	r1, [pc, #168]	@ (8004eb4 <readTireTemp+0x124>)
 8004e0a:	5c8a      	ldrb	r2, [r1, r2]
 8004e0c:	705a      	strb	r2, [r3, #1]
			dataframes[i].data.pix2 = MLX_sample[2 + 8*i];
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	1c9a      	adds	r2, r3, #2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	440b      	add	r3, r1
 8004e1c:	4925      	ldr	r1, [pc, #148]	@ (8004eb4 <readTireTemp+0x124>)
 8004e1e:	5c8a      	ldrb	r2, [r1, r2]
 8004e20:	709a      	strb	r2, [r3, #2]
			dataframes[i].data.pix3 = MLX_sample[3 + 8*i];
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	1cda      	adds	r2, r3, #3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	440b      	add	r3, r1
 8004e30:	4920      	ldr	r1, [pc, #128]	@ (8004eb4 <readTireTemp+0x124>)
 8004e32:	5c8a      	ldrb	r2, [r1, r2]
 8004e34:	70da      	strb	r2, [r3, #3]
			dataframes[i].data.pix4 = MLX_sample[4 + 8*i];
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	440b      	add	r3, r1
 8004e44:	491b      	ldr	r1, [pc, #108]	@ (8004eb4 <readTireTemp+0x124>)
 8004e46:	5c8a      	ldrb	r2, [r1, r2]
 8004e48:	711a      	strb	r2, [r3, #4]
			dataframes[i].data.pix5 = MLX_sample[5 + 8*i];
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	1d5a      	adds	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	440b      	add	r3, r1
 8004e58:	4916      	ldr	r1, [pc, #88]	@ (8004eb4 <readTireTemp+0x124>)
 8004e5a:	5c8a      	ldrb	r2, [r1, r2]
 8004e5c:	715a      	strb	r2, [r3, #5]
			dataframes[i].data.pix6 = MLX_sample[6 + 8*i];
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	1d9a      	adds	r2, r3, #6
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	440b      	add	r3, r1
 8004e6c:	4911      	ldr	r1, [pc, #68]	@ (8004eb4 <readTireTemp+0x124>)
 8004e6e:	5c8a      	ldrb	r2, [r1, r2]
 8004e70:	719a      	strb	r2, [r3, #6]
			dataframes[i].data.pix7 = MLX_sample[7 + 8*i];
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	1dda      	adds	r2, r3, #7
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	440b      	add	r3, r1
 8004e80:	490c      	ldr	r1, [pc, #48]	@ (8004eb4 <readTireTemp+0x124>)
 8004e82:	5c8a      	ldrb	r2, [r1, r2]
 8004e84:	71da      	strb	r2, [r3, #7]
		for (int i = 0; i < 4; i++) {
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	ddaa      	ble.n	8004de8 <readTireTemp+0x58>
		}

		*lastReadMS = HAL_GetTick();
 8004e92:	f000 fc49 	bl	8005728 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
	}
}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20001b38 	.word	0x20001b38
 8004ea8:	200008bc 	.word	0x200008bc
 8004eac:	200021bc 	.word	0x200021bc
 8004eb0:	3f733333 	.word	0x3f733333
 8004eb4:	20002dbc 	.word	0x20002dbc

08004eb8 <readStrainGauges>:

void readStrainGauges(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, SG_DATAFRAME *dataframe) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8004ec4:	f000 fc30 	bl	8005728 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d96f      	bls.n	8004fb4 <readStrainGauges+0xfc>
		enableADCSensor(&StrainGaugeADS);
 8004ed4:	4839      	ldr	r0, [pc, #228]	@ (8004fbc <readStrainGauges+0x104>)
 8004ed6:	f7ff f988 	bl	80041ea <enableADCSensor>

		enableAINPN_0_G(&StrainGaugeADS);
 8004eda:	4838      	ldr	r0, [pc, #224]	@ (8004fbc <readStrainGauges+0x104>)
 8004edc:	f7ff fa04 	bl	80042e8 <enableAINPN_0_G>
		continuousRead(&StrainGaugeADS);
 8004ee0:	4836      	ldr	r0, [pc, #216]	@ (8004fbc <readStrainGauges+0x104>)
 8004ee2:	f7ff f99e 	bl	8004222 <continuousRead>
		dataframe->data.SG0 = (uint16_t)(getStrainGaugeForce(StrainGaugeADS.voltage)*100);
 8004ee6:	4b35      	ldr	r3, [pc, #212]	@ (8004fbc <readStrainGauges+0x104>)
 8004ee8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004eec:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef0:	f000 f8da 	bl	80050a8 <getStrainGaugeForce>
 8004ef4:	eef0 7a40 	vmov.f32	s15, s0
 8004ef8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004fc0 <readStrainGauges+0x108>
 8004efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f04:	ee17 3a90 	vmov	r3, s15
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	801a      	strh	r2, [r3, #0]

		enableAINPN_1_G(&StrainGaugeADS);
 8004f0e:	482b      	ldr	r0, [pc, #172]	@ (8004fbc <readStrainGauges+0x104>)
 8004f10:	f7ff fa07 	bl	8004322 <enableAINPN_1_G>
		continuousRead(&StrainGaugeADS);
 8004f14:	4829      	ldr	r0, [pc, #164]	@ (8004fbc <readStrainGauges+0x104>)
 8004f16:	f7ff f984 	bl	8004222 <continuousRead>
		dataframe->data.SG1 = (uint16_t)(getStrainGaugeForce(StrainGaugeADS.voltage)*100);
 8004f1a:	4b28      	ldr	r3, [pc, #160]	@ (8004fbc <readStrainGauges+0x104>)
 8004f1c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004f20:	eeb0 0a67 	vmov.f32	s0, s15
 8004f24:	f000 f8c0 	bl	80050a8 <getStrainGaugeForce>
 8004f28:	eef0 7a40 	vmov.f32	s15, s0
 8004f2c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004fc0 <readStrainGauges+0x108>
 8004f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f38:	ee17 3a90 	vmov	r3, s15
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	805a      	strh	r2, [r3, #2]

		enableAINPN_2_G(&StrainGaugeADS);
 8004f42:	481e      	ldr	r0, [pc, #120]	@ (8004fbc <readStrainGauges+0x104>)
 8004f44:	f7ff fa0a 	bl	800435c <enableAINPN_2_G>
		continuousRead(&StrainGaugeADS);
 8004f48:	481c      	ldr	r0, [pc, #112]	@ (8004fbc <readStrainGauges+0x104>)
 8004f4a:	f7ff f96a 	bl	8004222 <continuousRead>
		dataframe->data.SG2 = (uint16_t)(getStrainGaugeForce(StrainGaugeADS.voltage)*100);
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <readStrainGauges+0x104>)
 8004f50:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004f54:	eeb0 0a67 	vmov.f32	s0, s15
 8004f58:	f000 f8a6 	bl	80050a8 <getStrainGaugeForce>
 8004f5c:	eef0 7a40 	vmov.f32	s15, s0
 8004f60:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004fc0 <readStrainGauges+0x108>
 8004f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6c:	ee17 3a90 	vmov	r3, s15
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	809a      	strh	r2, [r3, #4]

		enableAINPN_3_G(&StrainGaugeADS);
 8004f76:	4811      	ldr	r0, [pc, #68]	@ (8004fbc <readStrainGauges+0x104>)
 8004f78:	f7ff fa0d 	bl	8004396 <enableAINPN_3_G>
		continuousRead(&StrainGaugeADS);
 8004f7c:	480f      	ldr	r0, [pc, #60]	@ (8004fbc <readStrainGauges+0x104>)
 8004f7e:	f7ff f950 	bl	8004222 <continuousRead>
		dataframe->data.SG3 = (uint16_t)(getStrainGaugeForce(StrainGaugeADS.voltage)*100);
 8004f82:	4b0e      	ldr	r3, [pc, #56]	@ (8004fbc <readStrainGauges+0x104>)
 8004f84:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004f88:	eeb0 0a67 	vmov.f32	s0, s15
 8004f8c:	f000 f88c 	bl	80050a8 <getStrainGaugeForce>
 8004f90:	eef0 7a40 	vmov.f32	s15, s0
 8004f94:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004fc0 <readStrainGauges+0x108>
 8004f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa0:	ee17 3a90 	vmov	r3, s15
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	80da      	strh	r2, [r3, #6]

		*lastReadMS = HAL_GetTick();
 8004faa:	f000 fbbd 	bl	8005728 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	601a      	str	r2, [r3, #0]
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	2000020c 	.word	0x2000020c
 8004fc0:	42c80000 	.word	0x42c80000

08004fc4 <HAL_GPIO_EXTI_Callback>:

// Special interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == WHS_IN_Pin) {
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d104      	bne.n	8004fde <HAL_GPIO_EXTI_Callback+0x1a>
		hall_effect_edges++;
 8004fd4:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <HAL_GPIO_EXTI_Callback+0x28>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a04      	ldr	r2, [pc, #16]	@ (8004fec <HAL_GPIO_EXTI_Callback+0x28>)
 8004fdc:	6013      	str	r3, [r2, #0]
		// Everytime there is a rising edge, we increment the number of edges
	}
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20002de4 	.word	0x20002de4

08004ff0 <readWheelSpeed>:

void readWheelSpeed(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
	if (HAL_GetTick() - *lastReadMS > WHEEL_SPEED_SAMPLE_PERIOD) {
 8004ffa:	f000 fb95 	bl	8005728 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b0b      	cmp	r3, #11
 8005008:	d91b      	bls.n	8005042 <readWheelSpeed+0x52>

		hall_effect_edges = 0; // Reset the count..
 800500a:	4b10      	ldr	r3, [pc, #64]	@ (800504c <readWheelSpeed+0x5c>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI4_IRQn); // Turn on the interrupt
 8005010:	200a      	movs	r0, #10
 8005012:	f001 ffc0 	bl	8006f96 <HAL_NVIC_EnableIRQ>
		HAL_Delay(HALL_EFFECT_SAMPLE_INTERVAL); // Burst read over 50 ms
 8005016:	20fa      	movs	r0, #250	@ 0xfa
 8005018:	f000 fb92 	bl	8005740 <HAL_Delay>
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800501c:	200a      	movs	r0, #10
 800501e:	f001 ffc8 	bl	8006fb2 <HAL_NVIC_DisableIRQ>
		dataframe->data.wheelRPM = (uint16_t)(getRPM()); // Compute the RPM
 8005022:	f000 f8b5 	bl	8005190 <getRPM>
 8005026:	eef0 7a40 	vmov.f32	s15, s0
 800502a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502e:	ee17 3a90 	vmov	r3, s15
 8005032:	b29a      	uxth	r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	801a      	strh	r2, [r3, #0]

		*lastReadMS = HAL_GetTick();
 8005038:	f000 fb76 	bl	8005728 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
	}
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20002de4 	.word	0x20002de4

08005050 <getMLXSample>:
		*lastReadMS = HAL_GetTick();
	}
}

// Other helper functions
void getMLXSample() {
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
	for (int i = 384; i < 416; i++) {
 8005056:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e013      	b.n	8005086 <getMLXSample+0x36>
		MLX_sample[i - 384] = (uint8_t)MLX_to[i];
 800505e:	4a0f      	ldr	r2, [pc, #60]	@ (800509c <getMLXSample+0x4c>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	edd3 7a00 	vldr	s15, [r3]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005074:	edc7 7a01 	vstr	s15, [r7, #4]
 8005078:	793a      	ldrb	r2, [r7, #4]
 800507a:	b2d1      	uxtb	r1, r2
 800507c:	4a08      	ldr	r2, [pc, #32]	@ (80050a0 <getMLXSample+0x50>)
 800507e:	54d1      	strb	r1, [r2, r3]
	for (int i = 384; i < 416; i++) {
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 800508c:	dbe7      	blt.n	800505e <getMLXSample+0xe>
	}
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	200021bc 	.word	0x200021bc
 80050a0:	20002dbc 	.word	0x20002dbc
 80050a4:	00000000 	.word	0x00000000

080050a8 <getStrainGaugeForce>:

float getStrainGaugeForce(float voltageReading) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	ed87 0a01 	vstr	s0, [r7, #4]
	float strain = (voltageReading/3.3*SG_GF);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fb f9f0 	bl	8000498 <__aeabi_f2d>
 80050b8:	a317      	add	r3, pc, #92	@ (adr r3, 8005118 <getStrainGaugeForce+0x70>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb fb6d 	bl	800079c <__aeabi_ddiv>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4610      	mov	r0, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	a315      	add	r3, pc, #84	@ (adr r3, 8005120 <getStrainGaugeForce+0x78>)
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f7fb fa3a 	bl	8000548 <__aeabi_dmul>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4610      	mov	r0, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	f7fb fd2c 	bl	8000b38 <__aeabi_d2f>
 80050e0:	4603      	mov	r3, r0
 80050e2:	60fb      	str	r3, [r7, #12]
	float stress = strain*YG_MODULUS;
 80050e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80050e8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005110 <getStrainGaugeForce+0x68>
 80050ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f0:	edc7 7a02 	vstr	s15, [r7, #8]
	return (stress*crossSectionalArea);
 80050f4:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <getStrainGaugeForce+0x6c>)
 80050f6:	ed93 7a00 	vldr	s14, [r3]
 80050fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005102:	eeb0 0a67 	vmov.f32	s0, s15
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	f3af 8000 	nop.w
 8005110:	434d0000 	.word	0x434d0000
 8005114:	20000000 	.word	0x20000000
 8005118:	66666666 	.word	0x66666666
 800511c:	400a6666 	.word	0x400a6666
 8005120:	0a3d70a4 	.word	0x0a3d70a4
 8005124:	4000a3d7 	.word	0x4000a3d7

08005128 <getLinPotTravel>:

float getLinPotTravel() {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
	float position_mm = ((float)adcBuffer[0] / 4095.0) * LINPOT_STROKE_LENGTH;
 800512e:	4b16      	ldr	r3, [pc, #88]	@ (8005188 <getLinPotTravel+0x60>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513a:	ee17 0a90 	vmov	r0, s15
 800513e:	f7fb f9ab 	bl	8000498 <__aeabi_f2d>
 8005142:	a30f      	add	r3, pc, #60	@ (adr r3, 8005180 <getLinPotTravel+0x58>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb fb28 	bl	800079c <__aeabi_ddiv>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <getLinPotTravel+0x64>)
 800515a:	f7fb f9f5 	bl	8000548 <__aeabi_dmul>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4610      	mov	r0, r2
 8005164:	4619      	mov	r1, r3
 8005166:	f7fb fce7 	bl	8000b38 <__aeabi_d2f>
 800516a:	4603      	mov	r3, r0
 800516c:	607b      	str	r3, [r7, #4]
	return position_mm;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	ee07 3a90 	vmov	s15, r3
}
 8005174:	eeb0 0a67 	vmov.f32	s0, s15
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	00000000 	.word	0x00000000
 8005184:	40affe00 	.word	0x40affe00
 8005188:	20002ddc 	.word	0x20002ddc
 800518c:	40540000 	.word	0x40540000

08005190 <getRPM>:

float getRPM() {
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
	float edgesPerSecond = (hall_effect_edges*1000.0)/HALL_EFFECT_SAMPLE_INTERVAL;
 8005196:	4b17      	ldr	r3, [pc, #92]	@ (80051f4 <getRPM+0x64>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb f96a 	bl	8000474 <__aeabi_i2d>
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <getRPM+0x68>)
 80051a6:	f7fb f9cf 	bl	8000548 <__aeabi_dmul>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4610      	mov	r0, r2
 80051b0:	4619      	mov	r1, r3
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	4b11      	ldr	r3, [pc, #68]	@ (80051fc <getRPM+0x6c>)
 80051b8:	f7fb faf0 	bl	800079c <__aeabi_ddiv>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	f7fb fcb8 	bl	8000b38 <__aeabi_d2f>
 80051c8:	4603      	mov	r3, r0
 80051ca:	607b      	str	r3, [r7, #4]
	float rps = edgesPerSecond/PULSES_PER_REVOLUTION;
 80051cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80051d0:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80051d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051d8:	edc7 7a00 	vstr	s15, [r7]
	return rps*60.0;
 80051dc:	edd7 7a00 	vldr	s15, [r7]
 80051e0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005200 <getRPM+0x70>
 80051e4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80051e8:	eeb0 0a67 	vmov.f32	s0, s15
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20002de4 	.word	0x20002de4
 80051f8:	408f4000 	.word	0x408f4000
 80051fc:	406f4000 	.word	0x406f4000
 8005200:	42700000 	.word	0x42700000

08005204 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005208:	4b1b      	ldr	r3, [pc, #108]	@ (8005278 <MX_SPI1_Init+0x74>)
 800520a:	4a1c      	ldr	r2, [pc, #112]	@ (800527c <MX_SPI1_Init+0x78>)
 800520c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800520e:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005216:	4b18      	ldr	r3, [pc, #96]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005218:	2200      	movs	r2, #0
 800521a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800521c:	4b16      	ldr	r3, [pc, #88]	@ (8005278 <MX_SPI1_Init+0x74>)
 800521e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005224:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800522a:	4b13      	ldr	r3, [pc, #76]	@ (8005278 <MX_SPI1_Init+0x74>)
 800522c:	2201      	movs	r2, #1
 800522e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005230:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005238:	4b0f      	ldr	r3, [pc, #60]	@ (8005278 <MX_SPI1_Init+0x74>)
 800523a:	2228      	movs	r2, #40	@ 0x28
 800523c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005240:	2200      	movs	r2, #0
 8005242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005246:	2200      	movs	r2, #0
 8005248:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524a:	4b0b      	ldr	r3, [pc, #44]	@ (8005278 <MX_SPI1_Init+0x74>)
 800524c:	2200      	movs	r2, #0
 800524e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005250:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005252:	2207      	movs	r2, #7
 8005254:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005256:	4b08      	ldr	r3, [pc, #32]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800525c:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <MX_SPI1_Init+0x74>)
 800525e:	2200      	movs	r2, #0
 8005260:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005262:	4805      	ldr	r0, [pc, #20]	@ (8005278 <MX_SPI1_Init+0x74>)
 8005264:	f004 f9fa 	bl	800965c <HAL_SPI_Init>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800526e:	f7ff fce8 	bl	8004c42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20002de8 	.word	0x20002de8
 800527c:	40013000 	.word	0x40013000

08005280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	@ 0x28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005288:	f107 0314 	add.w	r3, r7, #20
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	60da      	str	r2, [r3, #12]
 8005296:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a17      	ldr	r2, [pc, #92]	@ (80052fc <HAL_SPI_MspInit+0x7c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d128      	bne.n	80052f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052a2:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <HAL_SPI_MspInit+0x80>)
 80052a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a6:	4a16      	ldr	r2, [pc, #88]	@ (8005300 <HAL_SPI_MspInit+0x80>)
 80052a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80052ae:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <HAL_SPI_MspInit+0x80>)
 80052b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ba:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <HAL_SPI_MspInit+0x80>)
 80052bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052be:	4a10      	ldr	r2, [pc, #64]	@ (8005300 <HAL_SPI_MspInit+0x80>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <HAL_SPI_MspInit+0x80>)
 80052c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80052d2:	23e0      	movs	r3, #224	@ 0xe0
 80052d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d6:	2302      	movs	r3, #2
 80052d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052de:	2303      	movs	r3, #3
 80052e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052e2:	2305      	movs	r3, #5
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e6:	f107 0314 	add.w	r3, r7, #20
 80052ea:	4619      	mov	r1, r3
 80052ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052f0:	f002 f872 	bl	80073d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80052f4:	bf00      	nop
 80052f6:	3728      	adds	r7, #40	@ 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40013000 	.word	0x40013000
 8005300:	40021000 	.word	0x40021000

08005304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530a:	4b0f      	ldr	r3, [pc, #60]	@ (8005348 <HAL_MspInit+0x44>)
 800530c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530e:	4a0e      	ldr	r2, [pc, #56]	@ (8005348 <HAL_MspInit+0x44>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6613      	str	r3, [r2, #96]	@ 0x60
 8005316:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <HAL_MspInit+0x44>)
 8005318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005322:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <HAL_MspInit+0x44>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005326:	4a08      	ldr	r2, [pc, #32]	@ (8005348 <HAL_MspInit+0x44>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800532c:	6593      	str	r3, [r2, #88]	@ 0x58
 800532e:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <HAL_MspInit+0x44>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000

0800534c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005350:	bf00      	nop
 8005352:	e7fd      	b.n	8005350 <NMI_Handler+0x4>

08005354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <HardFault_Handler+0x4>

0800535c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <MemManage_Handler+0x4>

08005364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <BusFault_Handler+0x4>

0800536c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <UsageFault_Handler+0x4>

08005374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053a2:	f000 f9ad 	bl	8005700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}

080053aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WHS_IN_Pin);
 80053ae:	2010      	movs	r0, #16
 80053b0:	f002 f994 	bl	80076dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80053bc:	4802      	ldr	r0, [pc, #8]	@ (80053c8 <DMA1_Channel1_IRQHandler+0x10>)
 80053be:	f001 ff2b 	bl	8007218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200000e0 	.word	0x200000e0

080053cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <SystemInit+0x20>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d6:	4a05      	ldr	r2, [pc, #20]	@ (80053ec <SystemInit+0x20>)
 80053d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053f4:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 80053f6:	4a15      	ldr	r2, [pc, #84]	@ (800544c <MX_USART1_UART_Init+0x5c>)
 80053f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80053fa:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 80053fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005402:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 8005404:	2200      	movs	r2, #0
 8005406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005408:	4b0f      	ldr	r3, [pc, #60]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 800540a:	2200      	movs	r2, #0
 800540c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800540e:	4b0e      	ldr	r3, [pc, #56]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 8005410:	2200      	movs	r2, #0
 8005412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 8005416:	220c      	movs	r2, #12
 8005418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 800541c:	2200      	movs	r2, #0
 800541e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 8005422:	2200      	movs	r2, #0
 8005424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005426:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 8005428:	2200      	movs	r2, #0
 800542a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800542c:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 800542e:	2200      	movs	r2, #0
 8005430:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005432:	4805      	ldr	r0, [pc, #20]	@ (8005448 <MX_USART1_UART_Init+0x58>)
 8005434:	f004 fd38 	bl	8009ea8 <HAL_UART_Init>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800543e:	f7ff fc00 	bl	8004c42 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20002e4c 	.word	0x20002e4c
 800544c:	40013800 	.word	0x40013800

08005450 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005454:	4b14      	ldr	r3, [pc, #80]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 8005456:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <MX_USART2_UART_Init+0x5c>)
 8005458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800545a:	4b13      	ldr	r3, [pc, #76]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 800545c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005462:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005468:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800546e:	4b0e      	ldr	r3, [pc, #56]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 8005470:	2200      	movs	r2, #0
 8005472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 8005476:	220c      	movs	r2, #12
 8005478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800547a:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 800547c:	2200      	movs	r2, #0
 800547e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005480:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 8005482:	2200      	movs	r2, #0
 8005484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 8005488:	2200      	movs	r2, #0
 800548a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800548c:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 800548e:	2200      	movs	r2, #0
 8005490:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005492:	4805      	ldr	r0, [pc, #20]	@ (80054a8 <MX_USART2_UART_Init+0x58>)
 8005494:	f004 fd08 	bl	8009ea8 <HAL_UART_Init>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800549e:	f7ff fbd0 	bl	8004c42 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20002ed4 	.word	0x20002ed4
 80054ac:	40004400 	.word	0x40004400

080054b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b0a0      	sub	sp, #128	@ 0x80
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054c8:	f107 0318 	add.w	r3, r7, #24
 80054cc:	2254      	movs	r2, #84	@ 0x54
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f005 f97e 	bl	800a7d2 <memset>
  if(uartHandle->Instance==USART1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a47      	ldr	r2, [pc, #284]	@ (80055f8 <HAL_UART_MspInit+0x148>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d138      	bne.n	8005552 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80054e0:	2301      	movs	r3, #1
 80054e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054e8:	f107 0318 	add.w	r3, r7, #24
 80054ec:	4618      	mov	r0, r3
 80054ee:	f003 fdcd 	bl	800908c <HAL_RCCEx_PeriphCLKConfig>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80054f8:	f7ff fba3 	bl	8004c42 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80054fc:	4b3f      	ldr	r3, [pc, #252]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 80054fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005500:	4a3e      	ldr	r2, [pc, #248]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 8005502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005506:	6613      	str	r3, [r2, #96]	@ 0x60
 8005508:	4b3c      	ldr	r3, [pc, #240]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 800550a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005514:	4b39      	ldr	r3, [pc, #228]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 8005516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005518:	4a38      	ldr	r2, [pc, #224]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005520:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 8005522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800552c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005530:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005532:	2302      	movs	r3, #2
 8005534:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005536:	2300      	movs	r3, #0
 8005538:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800553a:	2303      	movs	r3, #3
 800553c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800553e:	2307      	movs	r3, #7
 8005540:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005542:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005546:	4619      	mov	r1, r3
 8005548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800554c:	f001 ff44 	bl	80073d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005550:	e04d      	b.n	80055ee <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2a      	ldr	r2, [pc, #168]	@ (8005600 <HAL_UART_MspInit+0x150>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d148      	bne.n	80055ee <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800555c:	2302      	movs	r3, #2
 800555e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005560:	2300      	movs	r3, #0
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005564:	f107 0318 	add.w	r3, r7, #24
 8005568:	4618      	mov	r0, r3
 800556a:	f003 fd8f 	bl	800908c <HAL_RCCEx_PeriphCLKConfig>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8005574:	f7ff fb65 	bl	8004c42 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005578:	4b20      	ldr	r3, [pc, #128]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	4a1f      	ldr	r2, [pc, #124]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 800557e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005582:	6593      	str	r3, [r2, #88]	@ 0x58
 8005584:	4b1d      	ldr	r3, [pc, #116]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005590:	4b1a      	ldr	r3, [pc, #104]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 8005592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005594:	4a19      	ldr	r2, [pc, #100]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800559c:	4b17      	ldr	r3, [pc, #92]	@ (80055fc <HAL_UART_MspInit+0x14c>)
 800559e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055a8:	2304      	movs	r3, #4
 80055aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ac:	2302      	movs	r3, #2
 80055ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b4:	2303      	movs	r3, #3
 80055b6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055b8:	2307      	movs	r3, #7
 80055ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80055c0:	4619      	mov	r1, r3
 80055c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055c6:	f001 ff07 	bl	80073d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80055ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d8:	2303      	movs	r3, #3
 80055da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80055dc:	2303      	movs	r3, #3
 80055de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055ea:	f001 fef5 	bl	80073d8 <HAL_GPIO_Init>
}
 80055ee:	bf00      	nop
 80055f0:	3780      	adds	r7, #128	@ 0x80
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40013800 	.word	0x40013800
 80055fc:	40021000 	.word	0x40021000
 8005600:	40004400 	.word	0x40004400

08005604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800563c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005608:	f7ff fee0 	bl	80053cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800560c:	480c      	ldr	r0, [pc, #48]	@ (8005640 <LoopForever+0x6>)
  ldr r1, =_edata
 800560e:	490d      	ldr	r1, [pc, #52]	@ (8005644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005610:	4a0d      	ldr	r2, [pc, #52]	@ (8005648 <LoopForever+0xe>)
  movs r3, #0
 8005612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005614:	e002      	b.n	800561c <LoopCopyDataInit>

08005616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800561a:	3304      	adds	r3, #4

0800561c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800561c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800561e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005620:	d3f9      	bcc.n	8005616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005622:	4a0a      	ldr	r2, [pc, #40]	@ (800564c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005624:	4c0a      	ldr	r4, [pc, #40]	@ (8005650 <LoopForever+0x16>)
  movs r3, #0
 8005626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005628:	e001      	b.n	800562e <LoopFillZerobss>

0800562a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800562a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800562c:	3204      	adds	r2, #4

0800562e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800562e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005630:	d3fb      	bcc.n	800562a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005632:	f005 f8dd 	bl	800a7f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005636:	f7ff fa4d 	bl	8004ad4 <main>

0800563a <LoopForever>:

LoopForever:
    b LoopForever
 800563a:	e7fe      	b.n	800563a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800563c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8005640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005644:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8005648:	0800b800 	.word	0x0800b800
  ldr r2, =_sbss
 800564c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8005650:	20003098 	.word	0x20003098

08005654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005654:	e7fe      	b.n	8005654 <ADC1_IRQHandler>

08005656 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005660:	2003      	movs	r0, #3
 8005662:	f001 fc71 	bl	8006f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005666:	2000      	movs	r0, #0
 8005668:	f000 f80e 	bl	8005688 <HAL_InitTick>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	71fb      	strb	r3, [r7, #7]
 8005676:	e001      	b.n	800567c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005678:	f7ff fe44 	bl	8005304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800567c:	79fb      	ldrb	r3, [r7, #7]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005694:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <HAL_InitTick+0x6c>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d023      	beq.n	80056e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800569c:	4b16      	ldr	r3, [pc, #88]	@ (80056f8 <HAL_InitTick+0x70>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b14      	ldr	r3, [pc, #80]	@ (80056f4 <HAL_InitTick+0x6c>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4619      	mov	r1, r3
 80056a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fc8b 	bl	8006fce <HAL_SYSTICK_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10f      	bne.n	80056de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b0f      	cmp	r3, #15
 80056c2:	d809      	bhi.n	80056d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056c4:	2200      	movs	r2, #0
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056cc:	f001 fc47 	bl	8006f5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056d0:	4a0a      	ldr	r2, [pc, #40]	@ (80056fc <HAL_InitTick+0x74>)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e007      	b.n	80056e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e004      	b.n	80056e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
 80056e2:	e001      	b.n	80056e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c
 80056f8:	20000004 	.word	0x20000004
 80056fc:	20000008 	.word	0x20000008

08005700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <HAL_IncTick+0x20>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <HAL_IncTick+0x24>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4413      	add	r3, r2
 8005710:	4a04      	ldr	r2, [pc, #16]	@ (8005724 <HAL_IncTick+0x24>)
 8005712:	6013      	str	r3, [r2, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	2000000c 	.word	0x2000000c
 8005724:	20002f5c 	.word	0x20002f5c

08005728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  return uwTick;
 800572c:	4b03      	ldr	r3, [pc, #12]	@ (800573c <HAL_GetTick+0x14>)
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	20002f5c 	.word	0x20002f5c

08005740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005748:	f7ff ffee 	bl	8005728 <HAL_GetTick>
 800574c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005758:	d005      	beq.n	8005766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800575a:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <HAL_Delay+0x44>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005766:	bf00      	nop
 8005768:	f7ff ffde 	bl	8005728 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	429a      	cmp	r2, r3
 8005776:	d8f7      	bhi.n	8005768 <HAL_Delay+0x28>
  {
  }
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c

08005788 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	609a      	str	r2, [r3, #8]
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3360      	adds	r3, #96	@ 0x60
 8005802:	461a      	mov	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b08      	ldr	r3, [pc, #32]	@ (8005834 <LL_ADC_SetOffset+0x44>)
 8005812:	4013      	ands	r3, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	03fff000 	.word	0x03fff000

08005838 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3360      	adds	r3, #96	@ 0x60
 8005846:	461a      	mov	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3360      	adds	r3, #96	@ 0x60
 8005874:	461a      	mov	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	431a      	orrs	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3330      	adds	r3, #48	@ 0x30
 80058d0:	461a      	mov	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	4413      	add	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	211f      	movs	r1, #31
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	0e9b      	lsrs	r3, r3, #26
 80058f8:	f003 011f 	and.w	r1, r3, #31
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	431a      	orrs	r2, r3
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3314      	adds	r3, #20
 8005928:	461a      	mov	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	0e5b      	lsrs	r3, r3, #25
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	4413      	add	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	0d1b      	lsrs	r3, r3, #20
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2107      	movs	r1, #7
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	401a      	ands	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	0d1b      	lsrs	r3, r3, #20
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	431a      	orrs	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f003 0318 	and.w	r3, r3, #24
 8005992:	4908      	ldr	r1, [pc, #32]	@ (80059b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005994:	40d9      	lsrs	r1, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	400b      	ands	r3, r1
 800599a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800599e:	431a      	orrs	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	0007ffff 	.word	0x0007ffff

080059b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80059c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6093      	str	r3, [r2, #8]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f0:	d101      	bne.n	80059f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005a14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a40:	d101      	bne.n	8005a46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <LL_ADC_IsEnabled+0x18>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <LL_ADC_IsEnabled+0x1a>
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ab2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ab6:	f043 0204 	orr.w	r2, r3, #4
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d101      	bne.n	8005ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d101      	bne.n	8005b08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e126      	b.n	8005d80 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fe f9e7 	bl	8003f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff3f 	bl	80059dc <LL_ADC_IsDeepPowerDownEnabled>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff ff25 	bl	80059b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff ff5a 	bl	8005a2c <LL_ADC_IsInternalRegulatorEnabled>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d115      	bne.n	8005baa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff ff3e 	bl	8005a04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b88:	4b7f      	ldr	r3, [pc, #508]	@ (8005d88 <HAL_ADC_Init+0x270>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	099b      	lsrs	r3, r3, #6
 8005b8e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d8c <HAL_ADC_Init+0x274>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	099b      	lsrs	r3, r3, #6
 8005b96:	3301      	adds	r3, #1
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b9c:	e002      	b.n	8005ba4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f9      	bne.n	8005b9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff ff3c 	bl	8005a2c <LL_ADC_IsInternalRegulatorEnabled>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10d      	bne.n	8005bd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	f043 0210 	orr.w	r2, r3, #16
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	f043 0201 	orr.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff75 	bl	8005aca <LL_ADC_REG_IsConversionOngoing>
 8005be0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 80bf 	bne.w	8005d6e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 80bb 	bne.w	8005d6e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005c00:	f043 0202 	orr.w	r2, r3, #2
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff35 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c18:	485d      	ldr	r0, [pc, #372]	@ (8005d90 <HAL_ADC_Init+0x278>)
 8005c1a:	f7ff ff2f 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d105      	bne.n	8005c30 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	485a      	ldr	r0, [pc, #360]	@ (8005d94 <HAL_ADC_Init+0x27c>)
 8005c2c:	f7ff fdac 	bl	8005788 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	7e5b      	ldrb	r3, [r3, #25]
 8005c34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005c40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005c46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d106      	bne.n	8005c6c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	3b01      	subs	r3, #1
 8005c64:	045b      	lsls	r3, r3, #17
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	4b42      	ldr	r3, [pc, #264]	@ (8005d98 <HAL_ADC_Init+0x280>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	69b9      	ldr	r1, [r7, #24]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff25 	bl	8005af0 <LL_ADC_INJ_IsConversionOngoing>
 8005ca6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d13d      	bne.n	8005d2a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d13a      	bne.n	8005d2a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cb8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cc0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cd0:	f023 0302 	bic.w	r3, r3, #2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	69b9      	ldr	r1, [r7, #24]
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d118      	bne.n	8005d1a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cf2:	f023 0304 	bic.w	r3, r3, #4
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005cfe:	4311      	orrs	r1, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005d04:	4311      	orrs	r1, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	611a      	str	r2, [r3, #16]
 8005d18:	e007      	b.n	8005d2a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0201 	bic.w	r2, r2, #1
 8005d28:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10c      	bne.n	8005d4c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d38:	f023 010f 	bic.w	r1, r3, #15
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	1e5a      	subs	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d4a:	e007      	b.n	8005d5c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 020f 	bic.w	r2, r2, #15
 8005d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d60:	f023 0303 	bic.w	r3, r3, #3
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d6c:	e007      	b.n	8005d7e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	f043 0210 	orr.w	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20000004 	.word	0x20000004
 8005d8c:	053e2d63 	.word	0x053e2d63
 8005d90:	50040000 	.word	0x50040000
 8005d94:	50040300 	.word	0x50040300
 8005d98:	fff0c007 	.word	0xfff0c007

08005d9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fe8c 	bl	8005aca <LL_ADC_REG_IsConversionOngoing>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d167      	bne.n	8005e88 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_ADC_Start_DMA+0x2a>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e063      	b.n	8005e8e <HAL_ADC_Start_DMA+0xf2>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fc68 	bl	80066a4 <ADC_Enable>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d14f      	bne.n	8005e7e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d006      	beq.n	8005e0c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e02:	f023 0206 	bic.w	r2, r3, #6
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e0a:	e002      	b.n	8005e12 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e16:	4a20      	ldr	r2, [pc, #128]	@ (8005e98 <HAL_ADC_Start_DMA+0xfc>)
 8005e18:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e9c <HAL_ADC_Start_DMA+0x100>)
 8005e20:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea0 <HAL_ADC_Start_DMA+0x104>)
 8005e28:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	221c      	movs	r2, #28
 8005e30:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0210 	orr.w	r2, r2, #16
 8005e48:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3340      	adds	r3, #64	@ 0x40
 8005e64:	4619      	mov	r1, r3
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f001 f975 	bl	8007158 <HAL_DMA_Start_IT>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fe13 	bl	8005aa2 <LL_ADC_REG_StartConversion>
 8005e7c:	e006      	b.n	8005e8c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005e86:	e001      	b.n	8005e8c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	080067b1 	.word	0x080067b1
 8005e9c:	08006889 	.word	0x08006889
 8005ea0:	080068a5 	.word	0x080068a5

08005ea4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b0b6      	sub	sp, #216	@ 0xd8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x22>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e3bb      	b.n	800667a <HAL_ADC_ConfigChannel+0x79a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fddb 	bl	8005aca <LL_ADC_REG_IsConversionOngoing>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 83a0 	bne.w	800665c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d824      	bhi.n	8005f76 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	3b02      	subs	r3, #2
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d81b      	bhi.n	8005f6e <HAL_ADC_ConfigChannel+0x8e>
 8005f36:	a201      	add	r2, pc, #4	@ (adr r2, 8005f3c <HAL_ADC_ConfigChannel+0x5c>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f65 	.word	0x08005f65
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005f4c:	230c      	movs	r3, #12
 8005f4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f52:	e010      	b.n	8005f76 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005f54:	2312      	movs	r3, #18
 8005f56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f5a:	e00c      	b.n	8005f76 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005f5c:	2318      	movs	r3, #24
 8005f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f62:	e008      	b.n	8005f76 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f6c:	e003      	b.n	8005f76 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005f6e:	2306      	movs	r3, #6
 8005f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f74:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005f84:	f7ff fc9c 	bl	80058c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fd9c 	bl	8005aca <LL_ADC_REG_IsConversionOngoing>
 8005f92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fda8 	bl	8005af0 <LL_ADC_INJ_IsConversionOngoing>
 8005fa0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f040 81a4 	bne.w	80062f6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 819f 	bne.w	80062f6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f7ff fca7 	bl	8005918 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	08db      	lsrs	r3, r3, #3
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d00a      	beq.n	8006002 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6919      	ldr	r1, [r3, #16]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ffc:	f7ff fbf8 	bl	80057f0 <LL_ADC_SetOffset>
 8006000:	e179      	b.n	80062f6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fc15 	bl	8005838 <LL_ADC_GetOffsetChannel>
 800600e:	4603      	mov	r3, r0
 8006010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <HAL_ADC_ConfigChannel+0x14e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fc0a 	bl	8005838 <LL_ADC_GetOffsetChannel>
 8006024:	4603      	mov	r3, r0
 8006026:	0e9b      	lsrs	r3, r3, #26
 8006028:	f003 021f 	and.w	r2, r3, #31
 800602c:	e01e      	b.n	800606c <HAL_ADC_ConfigChannel+0x18c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2100      	movs	r1, #0
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fbff 	bl	8005838 <LL_ADC_GetOffsetChannel>
 800603a:	4603      	mov	r3, r0
 800603c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006044:	fa93 f3a3 	rbit	r3, r3
 8006048:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800604c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800605c:	2320      	movs	r3, #32
 800605e:	e004      	b.n	800606a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8006060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006064:	fab3 f383 	clz	r3, r3
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006074:	2b00      	cmp	r3, #0
 8006076:	d105      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x1a4>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	0e9b      	lsrs	r3, r3, #26
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	e018      	b.n	80060b6 <HAL_ADC_ConfigChannel+0x1d6>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006090:	fa93 f3a3 	rbit	r3, r3
 8006094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800609c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80060a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80060a8:	2320      	movs	r3, #32
 80060aa:	e004      	b.n	80060b6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80060ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060b0:	fab3 f383 	clz	r3, r3
 80060b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d106      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fbce 	bl	8005864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2101      	movs	r1, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff fbb2 	bl	8005838 <LL_ADC_GetOffsetChannel>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_ADC_ConfigChannel+0x214>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2101      	movs	r1, #1
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fba7 	bl	8005838 <LL_ADC_GetOffsetChannel>
 80060ea:	4603      	mov	r3, r0
 80060ec:	0e9b      	lsrs	r3, r3, #26
 80060ee:	f003 021f 	and.w	r2, r3, #31
 80060f2:	e01e      	b.n	8006132 <HAL_ADC_ConfigChannel+0x252>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2101      	movs	r1, #1
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fb9c 	bl	8005838 <LL_ADC_GetOffsetChannel>
 8006100:	4603      	mov	r3, r0
 8006102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800610a:	fa93 f3a3 	rbit	r3, r3
 800610e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006112:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800611a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8006122:	2320      	movs	r3, #32
 8006124:	e004      	b.n	8006130 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800612a:	fab3 f383 	clz	r3, r3
 800612e:	b2db      	uxtb	r3, r3
 8006130:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <HAL_ADC_ConfigChannel+0x26a>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	0e9b      	lsrs	r3, r3, #26
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	e018      	b.n	800617c <HAL_ADC_ConfigChannel+0x29c>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006152:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006156:	fa93 f3a3 	rbit	r3, r3
 800615a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800615e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006162:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006166:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800616e:	2320      	movs	r3, #32
 8006170:	e004      	b.n	800617c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8006172:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800617c:	429a      	cmp	r2, r3
 800617e:	d106      	bne.n	800618e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2200      	movs	r2, #0
 8006186:	2101      	movs	r1, #1
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fb6b 	bl	8005864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2102      	movs	r1, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fb4f 	bl	8005838 <LL_ADC_GetOffsetChannel>
 800619a:	4603      	mov	r3, r0
 800619c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_ADC_ConfigChannel+0x2da>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2102      	movs	r1, #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fb44 	bl	8005838 <LL_ADC_GetOffsetChannel>
 80061b0:	4603      	mov	r3, r0
 80061b2:	0e9b      	lsrs	r3, r3, #26
 80061b4:	f003 021f 	and.w	r2, r3, #31
 80061b8:	e01e      	b.n	80061f8 <HAL_ADC_ConfigChannel+0x318>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2102      	movs	r1, #2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff fb39 	bl	8005838 <LL_ADC_GetOffsetChannel>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061d0:	fa93 f3a3 	rbit	r3, r3
 80061d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80061d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80061e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80061e8:	2320      	movs	r3, #32
 80061ea:	e004      	b.n	80061f6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80061ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061f0:	fab3 f383 	clz	r3, r3
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x330>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	0e9b      	lsrs	r3, r3, #26
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	e014      	b.n	800623a <HAL_ADC_ConfigChannel+0x35a>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006216:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006218:	fa93 f3a3 	rbit	r3, r3
 800621c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800621e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800622c:	2320      	movs	r3, #32
 800622e:	e004      	b.n	800623a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8006230:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006234:	fab3 f383 	clz	r3, r3
 8006238:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800623a:	429a      	cmp	r2, r3
 800623c:	d106      	bne.n	800624c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	2102      	movs	r1, #2
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fb0c 	bl	8005864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2103      	movs	r1, #3
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff faf0 	bl	8005838 <LL_ADC_GetOffsetChannel>
 8006258:	4603      	mov	r3, r0
 800625a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x398>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2103      	movs	r1, #3
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fae5 	bl	8005838 <LL_ADC_GetOffsetChannel>
 800626e:	4603      	mov	r3, r0
 8006270:	0e9b      	lsrs	r3, r3, #26
 8006272:	f003 021f 	and.w	r2, r3, #31
 8006276:	e017      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x3c8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2103      	movs	r1, #3
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fada 	bl	8005838 <LL_ADC_GetOffsetChannel>
 8006284:	4603      	mov	r3, r0
 8006286:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006292:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800629a:	2320      	movs	r3, #32
 800629c:	e003      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800629e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062a0:	fab3 f383 	clz	r3, r3
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_ADC_ConfigChannel+0x3e0>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	0e9b      	lsrs	r3, r3, #26
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	e011      	b.n	80062e4 <HAL_ADC_ConfigChannel+0x404>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c8:	fa93 f3a3 	rbit	r3, r3
 80062cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80062ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80062d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80062d8:	2320      	movs	r3, #32
 80062da:	e003      	b.n	80062e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80062dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d106      	bne.n	80062f6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2103      	movs	r1, #3
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff fab7 	bl	8005864 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff fbbe 	bl	8005a7c <LL_ADC_IsEnabled>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 8140 	bne.w	8006588 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	461a      	mov	r2, r3
 8006316:	f7ff fb2b 	bl	8005970 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	4a8f      	ldr	r2, [pc, #572]	@ (800655c <HAL_ADC_ConfigChannel+0x67c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	f040 8131 	bne.w	8006588 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10b      	bne.n	800634e <HAL_ADC_ConfigChannel+0x46e>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	0e9b      	lsrs	r3, r3, #26
 800633c:	3301      	adds	r3, #1
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2b09      	cmp	r3, #9
 8006344:	bf94      	ite	ls
 8006346:	2301      	movls	r3, #1
 8006348:	2300      	movhi	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e019      	b.n	8006382 <HAL_ADC_ConfigChannel+0x4a2>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006356:	fa93 f3a3 	rbit	r3, r3
 800635a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800635c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8006366:	2320      	movs	r3, #32
 8006368:	e003      	b.n	8006372 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800636a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	3301      	adds	r3, #1
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	2b09      	cmp	r3, #9
 800637a:	bf94      	ite	ls
 800637c:	2301      	movls	r3, #1
 800637e:	2300      	movhi	r3, #0
 8006380:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006382:	2b00      	cmp	r3, #0
 8006384:	d079      	beq.n	800647a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x4c2>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	0e9b      	lsrs	r3, r3, #26
 8006398:	3301      	adds	r3, #1
 800639a:	069b      	lsls	r3, r3, #26
 800639c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063a0:	e015      	b.n	80063ce <HAL_ADC_ConfigChannel+0x4ee>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063aa:	fa93 f3a3 	rbit	r3, r3
 80063ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80063b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80063b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80063ba:	2320      	movs	r3, #32
 80063bc:	e003      	b.n	80063c6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80063be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c0:	fab3 f383 	clz	r3, r3
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	3301      	adds	r3, #1
 80063c8:	069b      	lsls	r3, r3, #26
 80063ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <HAL_ADC_ConfigChannel+0x50e>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	0e9b      	lsrs	r3, r3, #26
 80063e0:	3301      	adds	r3, #1
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2101      	movs	r1, #1
 80063e8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ec:	e017      	b.n	800641e <HAL_ADC_ConfigChannel+0x53e>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f6:	fa93 f3a3 	rbit	r3, r3
 80063fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80063fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006406:	2320      	movs	r3, #32
 8006408:	e003      	b.n	8006412 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800640a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640c:	fab3 f383 	clz	r3, r3
 8006410:	b2db      	uxtb	r3, r3
 8006412:	3301      	adds	r3, #1
 8006414:	f003 031f 	and.w	r3, r3, #31
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	ea42 0103 	orr.w	r1, r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <HAL_ADC_ConfigChannel+0x564>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	0e9b      	lsrs	r3, r3, #26
 8006434:	3301      	adds	r3, #1
 8006436:	f003 021f 	and.w	r2, r3, #31
 800643a:	4613      	mov	r3, r2
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4413      	add	r3, r2
 8006440:	051b      	lsls	r3, r3, #20
 8006442:	e018      	b.n	8006476 <HAL_ADC_ConfigChannel+0x596>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644c:	fa93 f3a3 	rbit	r3, r3
 8006450:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800645c:	2320      	movs	r3, #32
 800645e:	e003      	b.n	8006468 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8006460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006462:	fab3 f383 	clz	r3, r3
 8006466:	b2db      	uxtb	r3, r3
 8006468:	3301      	adds	r3, #1
 800646a:	f003 021f 	and.w	r2, r3, #31
 800646e:	4613      	mov	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	4413      	add	r3, r2
 8006474:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006476:	430b      	orrs	r3, r1
 8006478:	e081      	b.n	800657e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006482:	2b00      	cmp	r3, #0
 8006484:	d107      	bne.n	8006496 <HAL_ADC_ConfigChannel+0x5b6>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	0e9b      	lsrs	r3, r3, #26
 800648c:	3301      	adds	r3, #1
 800648e:	069b      	lsls	r3, r3, #26
 8006490:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006494:	e015      	b.n	80064c2 <HAL_ADC_ConfigChannel+0x5e2>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80064a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80064ae:	2320      	movs	r3, #32
 80064b0:	e003      	b.n	80064ba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	069b      	lsls	r3, r3, #26
 80064be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x602>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	0e9b      	lsrs	r3, r3, #26
 80064d4:	3301      	adds	r3, #1
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2101      	movs	r1, #1
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	e017      	b.n	8006512 <HAL_ADC_ConfigChannel+0x632>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	61bb      	str	r3, [r7, #24]
  return result;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80064fa:	2320      	movs	r3, #32
 80064fc:	e003      	b.n	8006506 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	fab3 f383 	clz	r3, r3
 8006504:	b2db      	uxtb	r3, r3
 8006506:	3301      	adds	r3, #1
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	2101      	movs	r1, #1
 800650e:	fa01 f303 	lsl.w	r3, r1, r3
 8006512:	ea42 0103 	orr.w	r1, r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10d      	bne.n	800653e <HAL_ADC_ConfigChannel+0x65e>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	0e9b      	lsrs	r3, r3, #26
 8006528:	3301      	adds	r3, #1
 800652a:	f003 021f 	and.w	r2, r3, #31
 800652e:	4613      	mov	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4413      	add	r3, r2
 8006534:	3b1e      	subs	r3, #30
 8006536:	051b      	lsls	r3, r3, #20
 8006538:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800653c:	e01e      	b.n	800657c <HAL_ADC_ConfigChannel+0x69c>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	fa93 f3a3 	rbit	r3, r3
 800654a:	60fb      	str	r3, [r7, #12]
  return result;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8006556:	2320      	movs	r3, #32
 8006558:	e006      	b.n	8006568 <HAL_ADC_ConfigChannel+0x688>
 800655a:	bf00      	nop
 800655c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	fab3 f383 	clz	r3, r3
 8006566:	b2db      	uxtb	r3, r3
 8006568:	3301      	adds	r3, #1
 800656a:	f003 021f 	and.w	r2, r3, #31
 800656e:	4613      	mov	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4413      	add	r3, r2
 8006574:	3b1e      	subs	r3, #30
 8006576:	051b      	lsls	r3, r3, #20
 8006578:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800657c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006582:	4619      	mov	r1, r3
 8006584:	f7ff f9c8 	bl	8005918 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4b3d      	ldr	r3, [pc, #244]	@ (8006684 <HAL_ADC_ConfigChannel+0x7a4>)
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d06c      	beq.n	800666e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006594:	483c      	ldr	r0, [pc, #240]	@ (8006688 <HAL_ADC_ConfigChannel+0x7a8>)
 8006596:	f7ff f91d 	bl	80057d4 <LL_ADC_GetCommonPathInternalCh>
 800659a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a3a      	ldr	r2, [pc, #232]	@ (800668c <HAL_ADC_ConfigChannel+0x7ac>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d127      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d121      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a35      	ldr	r2, [pc, #212]	@ (8006690 <HAL_ADC_ConfigChannel+0x7b0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d157      	bne.n	800666e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065c6:	4619      	mov	r1, r3
 80065c8:	482f      	ldr	r0, [pc, #188]	@ (8006688 <HAL_ADC_ConfigChannel+0x7a8>)
 80065ca:	f7ff f8f0 	bl	80057ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065ce:	4b31      	ldr	r3, [pc, #196]	@ (8006694 <HAL_ADC_ConfigChannel+0x7b4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	4a30      	ldr	r2, [pc, #192]	@ (8006698 <HAL_ADC_ConfigChannel+0x7b8>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065e8:	e002      	b.n	80065f0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f9      	bne.n	80065ea <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065f6:	e03a      	b.n	800666e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a27      	ldr	r2, [pc, #156]	@ (800669c <HAL_ADC_ConfigChannel+0x7bc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d113      	bne.n	800662a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006602:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10d      	bne.n	800662a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a1f      	ldr	r2, [pc, #124]	@ (8006690 <HAL_ADC_ConfigChannel+0x7b0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d12a      	bne.n	800666e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800661c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006620:	4619      	mov	r1, r3
 8006622:	4819      	ldr	r0, [pc, #100]	@ (8006688 <HAL_ADC_ConfigChannel+0x7a8>)
 8006624:	f7ff f8c3 	bl	80057ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006628:	e021      	b.n	800666e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1c      	ldr	r2, [pc, #112]	@ (80066a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d11c      	bne.n	800666e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d116      	bne.n	800666e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a12      	ldr	r2, [pc, #72]	@ (8006690 <HAL_ADC_ConfigChannel+0x7b0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d111      	bne.n	800666e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800664a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800664e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006652:	4619      	mov	r1, r3
 8006654:	480c      	ldr	r0, [pc, #48]	@ (8006688 <HAL_ADC_ConfigChannel+0x7a8>)
 8006656:	f7ff f8aa 	bl	80057ae <LL_ADC_SetCommonPathInternalCh>
 800665a:	e008      	b.n	800666e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006676:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800667a:	4618      	mov	r0, r3
 800667c:	37d8      	adds	r7, #216	@ 0xd8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	80080000 	.word	0x80080000
 8006688:	50040300 	.word	0x50040300
 800668c:	c7520000 	.word	0xc7520000
 8006690:	50040000 	.word	0x50040000
 8006694:	20000004 	.word	0x20000004
 8006698:	053e2d63 	.word	0x053e2d63
 800669c:	cb840000 	.word	0xcb840000
 80066a0:	80000001 	.word	0x80000001

080066a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff f9e1 	bl	8005a7c <LL_ADC_IsEnabled>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d169      	bne.n	8006794 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	4b36      	ldr	r3, [pc, #216]	@ (80067a0 <ADC_Enable+0xfc>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d2:	f043 0210 	orr.w	r2, r3, #16
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066de:	f043 0201 	orr.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e055      	b.n	8006796 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff f9b0 	bl	8005a54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80066f4:	482b      	ldr	r0, [pc, #172]	@ (80067a4 <ADC_Enable+0x100>)
 80066f6:	f7ff f86d 	bl	80057d4 <LL_ADC_GetCommonPathInternalCh>
 80066fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80066fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006700:	2b00      	cmp	r3, #0
 8006702:	d013      	beq.n	800672c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006704:	4b28      	ldr	r3, [pc, #160]	@ (80067a8 <ADC_Enable+0x104>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	099b      	lsrs	r3, r3, #6
 800670a:	4a28      	ldr	r2, [pc, #160]	@ (80067ac <ADC_Enable+0x108>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	099b      	lsrs	r3, r3, #6
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	4613      	mov	r3, r2
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800671e:	e002      	b.n	8006726 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3b01      	subs	r3, #1
 8006724:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f9      	bne.n	8006720 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800672c:	f7fe fffc 	bl	8005728 <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006732:	e028      	b.n	8006786 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff f99f 	bl	8005a7c <LL_ADC_IsEnabled>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff f983 	bl	8005a54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800674e:	f7fe ffeb 	bl	8005728 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d914      	bls.n	8006786 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d00d      	beq.n	8006786 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676e:	f043 0210 	orr.w	r2, r3, #16
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	f043 0201 	orr.w	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e007      	b.n	8006796 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d1cf      	bne.n	8006734 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	8000003f 	.word	0x8000003f
 80067a4:	50040300 	.word	0x50040300
 80067a8:	20000004 	.word	0x20000004
 80067ac:	053e2d63 	.word	0x053e2d63

080067b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d14b      	bne.n	8006862 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d021      	beq.n	8006828 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff f856 	bl	800589a <LL_ADC_REG_IsTriggerSourceSWStart>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d032      	beq.n	800685a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d12b      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006806:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11f      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681e:	f043 0201 	orr.w	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	655a      	str	r2, [r3, #84]	@ 0x54
 8006826:	e018      	b.n	800685a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d111      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006852:	f043 0201 	orr.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fb22 	bl	8005ea4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006860:	e00e      	b.n	8006880 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff fb2c 	bl	8005ecc <HAL_ADC_ErrorCallback>
}
 8006874:	e004      	b.n	8006880 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff fb0e 	bl	8005eb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	f043 0204 	orr.w	r2, r3, #4
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fafe 	bl	8005ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e0ed      	b.n	8006ac6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fd fe16 	bl	8004528 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800690c:	f7fe ff0c 	bl	8005728 <HAL_GetTick>
 8006910:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006912:	e012      	b.n	800693a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006914:	f7fe ff08 	bl	8005728 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b0a      	cmp	r3, #10
 8006920:	d90b      	bls.n	800693a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2205      	movs	r2, #5
 8006932:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e0c5      	b.n	8006ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0e5      	beq.n	8006914 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0202 	bic.w	r2, r2, #2
 8006956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006958:	f7fe fee6 	bl	8005728 <HAL_GetTick>
 800695c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800695e:	e012      	b.n	8006986 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006960:	f7fe fee2 	bl	8005728 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b0a      	cmp	r3, #10
 800696c:	d90b      	bls.n	8006986 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006972:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2205      	movs	r2, #5
 800697e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e09f      	b.n	8006ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7e1b      	ldrb	r3, [r3, #24]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d108      	bne.n	80069ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	e007      	b.n	80069be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	7e5b      	ldrb	r3, [r3, #25]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d108      	bne.n	80069d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e007      	b.n	80069e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7e9b      	ldrb	r3, [r3, #26]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d108      	bne.n	8006a02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0220 	orr.w	r2, r2, #32
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e007      	b.n	8006a12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0220 	bic.w	r2, r2, #32
 8006a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7edb      	ldrb	r3, [r3, #27]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d108      	bne.n	8006a2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0210 	bic.w	r2, r2, #16
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e007      	b.n	8006a3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0210 	orr.w	r2, r2, #16
 8006a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7f1b      	ldrb	r3, [r3, #28]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d108      	bne.n	8006a56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0208 	orr.w	r2, r2, #8
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e007      	b.n	8006a66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0208 	bic.w	r2, r2, #8
 8006a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7f5b      	ldrb	r3, [r3, #29]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d108      	bne.n	8006a80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0204 	orr.w	r2, r2, #4
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e007      	b.n	8006a90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0204 	bic.w	r2, r2, #4
 8006a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	ea42 0103 	orr.w	r1, r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	1e5a      	subs	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d12e      	bne.n	8006b40 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006afa:	f7fe fe15 	bl	8005728 <HAL_GetTick>
 8006afe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006b00:	e012      	b.n	8006b28 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006b02:	f7fe fe11 	bl	8005728 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b0a      	cmp	r3, #10
 8006b0e:	d90b      	bls.n	8006b28 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2205      	movs	r2, #5
 8006b20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e012      	b.n	8006b4e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e006      	b.n	8006b4e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b089      	sub	sp, #36	@ 0x24
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b74:	7ffb      	ldrb	r3, [r7, #31]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d003      	beq.n	8006b82 <HAL_CAN_AddTxMessage+0x2c>
 8006b7a:	7ffb      	ldrb	r3, [r7, #31]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	f040 80ad 	bne.w	8006cdc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8095 	beq.w	8006ccc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	0e1b      	lsrs	r3, r3, #24
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006bac:	2201      	movs	r2, #1
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006bc8:	68f9      	ldr	r1, [r7, #12]
 8006bca:	6809      	ldr	r1, [r1, #0]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	3318      	adds	r3, #24
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	440b      	add	r3, r1
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	e00f      	b.n	8006bfa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006be4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006bee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	3318      	adds	r3, #24
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	440b      	add	r3, r1
 8006bf8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6819      	ldr	r1, [r3, #0]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	3318      	adds	r3, #24
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	440b      	add	r3, r1
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	7d1b      	ldrb	r3, [r3, #20]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d111      	bne.n	8006c3a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	4413      	add	r3, r2
 8006c22:	3304      	adds	r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	6811      	ldr	r1, [r2, #0]
 8006c2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	3318      	adds	r3, #24
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	440b      	add	r3, r1
 8006c36:	3304      	adds	r3, #4
 8006c38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3307      	adds	r3, #7
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	061a      	lsls	r2, r3, #24
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3306      	adds	r3, #6
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3305      	adds	r3, #5
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	4313      	orrs	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	3204      	adds	r2, #4
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	6811      	ldr	r1, [r2, #0]
 8006c62:	ea43 0200 	orr.w	r2, r3, r0
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	440b      	add	r3, r1
 8006c6c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006c70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3303      	adds	r3, #3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	061a      	lsls	r2, r3, #24
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3301      	adds	r3, #1
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	4610      	mov	r0, r2
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	6811      	ldr	r1, [r2, #0]
 8006c98:	ea43 0200 	orr.w	r2, r3, r0
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	440b      	add	r3, r1
 8006ca2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006ca6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	3318      	adds	r3, #24
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	4413      	add	r3, r2
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	6811      	ldr	r1, [r2, #0]
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	440b      	add	r3, r1
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e00e      	b.n	8006cea <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e006      	b.n	8006cea <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
  }
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3724      	adds	r7, #36	@ 0x24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d08:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d002      	beq.n	8006d16 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d11d      	bne.n	8006d52 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d70:	4b0c      	ldr	r3, [pc, #48]	@ (8006da4 <__NVIC_SetPriorityGrouping+0x44>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d92:	4a04      	ldr	r2, [pc, #16]	@ (8006da4 <__NVIC_SetPriorityGrouping+0x44>)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	60d3      	str	r3, [r2, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	e000ed00 	.word	0xe000ed00

08006da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dac:	4b04      	ldr	r3, [pc, #16]	@ (8006dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	f003 0307 	and.w	r3, r3, #7
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000ed00 	.word	0xe000ed00

08006dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	db0b      	blt.n	8006dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	f003 021f 	and.w	r2, r3, #31
 8006ddc:	4907      	ldr	r1, [pc, #28]	@ (8006dfc <__NVIC_EnableIRQ+0x38>)
 8006dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	2001      	movs	r0, #1
 8006de6:	fa00 f202 	lsl.w	r2, r0, r2
 8006dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	e000e100 	.word	0xe000e100

08006e00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	db12      	blt.n	8006e38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	f003 021f 	and.w	r2, r3, #31
 8006e18:	490a      	ldr	r1, [pc, #40]	@ (8006e44 <__NVIC_DisableIRQ+0x44>)
 8006e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	2001      	movs	r0, #1
 8006e22:	fa00 f202 	lsl.w	r2, r0, r2
 8006e26:	3320      	adds	r3, #32
 8006e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e2c:	f3bf 8f4f 	dsb	sy
}
 8006e30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e32:	f3bf 8f6f 	isb	sy
}
 8006e36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	e000e100 	.word	0xe000e100

08006e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	db0a      	blt.n	8006e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	490c      	ldr	r1, [pc, #48]	@ (8006e94 <__NVIC_SetPriority+0x4c>)
 8006e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e66:	0112      	lsls	r2, r2, #4
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e70:	e00a      	b.n	8006e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	4908      	ldr	r1, [pc, #32]	@ (8006e98 <__NVIC_SetPriority+0x50>)
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	3b04      	subs	r3, #4
 8006e80:	0112      	lsls	r2, r2, #4
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	440b      	add	r3, r1
 8006e86:	761a      	strb	r2, [r3, #24]
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	e000e100 	.word	0xe000e100
 8006e98:	e000ed00 	.word	0xe000ed00

08006e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b089      	sub	sp, #36	@ 0x24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f1c3 0307 	rsb	r3, r3, #7
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	bf28      	it	cs
 8006eba:	2304      	movcs	r3, #4
 8006ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	2b06      	cmp	r3, #6
 8006ec4:	d902      	bls.n	8006ecc <NVIC_EncodePriority+0x30>
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	3b03      	subs	r3, #3
 8006eca:	e000      	b.n	8006ece <NVIC_EncodePriority+0x32>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	43da      	mvns	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	401a      	ands	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ee4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	fa01 f303 	lsl.w	r3, r1, r3
 8006eee:	43d9      	mvns	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ef4:	4313      	orrs	r3, r2
         );
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3724      	adds	r7, #36	@ 0x24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f14:	d301      	bcc.n	8006f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f16:	2301      	movs	r3, #1
 8006f18:	e00f      	b.n	8006f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f44 <SysTick_Config+0x40>)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f22:	210f      	movs	r1, #15
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f28:	f7ff ff8e 	bl	8006e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f2c:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <SysTick_Config+0x40>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f32:	4b04      	ldr	r3, [pc, #16]	@ (8006f44 <SysTick_Config+0x40>)
 8006f34:	2207      	movs	r2, #7
 8006f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	e000e010 	.word	0xe000e010

08006f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff ff05 	bl	8006d60 <__NVIC_SetPriorityGrouping>
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	4603      	mov	r3, r0
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f70:	f7ff ff1a 	bl	8006da8 <__NVIC_GetPriorityGrouping>
 8006f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	6978      	ldr	r0, [r7, #20]
 8006f7c:	f7ff ff8e 	bl	8006e9c <NVIC_EncodePriority>
 8006f80:	4602      	mov	r2, r0
 8006f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ff5d 	bl	8006e48 <__NVIC_SetPriority>
}
 8006f8e:	bf00      	nop
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff ff0d 	bl	8006dc4 <__NVIC_EnableIRQ>
}
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	4603      	mov	r3, r0
 8006fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff ff1d 	bl	8006e00 <__NVIC_DisableIRQ>
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff ff94 	bl	8006f04 <SysTick_Config>
 8006fdc:	4603      	mov	r3, r0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e098      	b.n	800712c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	4b4d      	ldr	r3, [pc, #308]	@ (8007138 <HAL_DMA_Init+0x150>)
 8007002:	429a      	cmp	r2, r3
 8007004:	d80f      	bhi.n	8007026 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	4b4b      	ldr	r3, [pc, #300]	@ (800713c <HAL_DMA_Init+0x154>)
 800700e:	4413      	add	r3, r2
 8007010:	4a4b      	ldr	r2, [pc, #300]	@ (8007140 <HAL_DMA_Init+0x158>)
 8007012:	fba2 2303 	umull	r2, r3, r2, r3
 8007016:	091b      	lsrs	r3, r3, #4
 8007018:	009a      	lsls	r2, r3, #2
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a48      	ldr	r2, [pc, #288]	@ (8007144 <HAL_DMA_Init+0x15c>)
 8007022:	641a      	str	r2, [r3, #64]	@ 0x40
 8007024:	e00e      	b.n	8007044 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	4b46      	ldr	r3, [pc, #280]	@ (8007148 <HAL_DMA_Init+0x160>)
 800702e:	4413      	add	r3, r2
 8007030:	4a43      	ldr	r2, [pc, #268]	@ (8007140 <HAL_DMA_Init+0x158>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	091b      	lsrs	r3, r3, #4
 8007038:	009a      	lsls	r2, r3, #2
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a42      	ldr	r2, [pc, #264]	@ (800714c <HAL_DMA_Init+0x164>)
 8007042:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800705a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800709e:	d039      	beq.n	8007114 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	4a27      	ldr	r2, [pc, #156]	@ (8007144 <HAL_DMA_Init+0x15c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d11a      	bne.n	80070e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070aa:	4b29      	ldr	r3, [pc, #164]	@ (8007150 <HAL_DMA_Init+0x168>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	f003 031c 	and.w	r3, r3, #28
 80070b6:	210f      	movs	r1, #15
 80070b8:	fa01 f303 	lsl.w	r3, r1, r3
 80070bc:	43db      	mvns	r3, r3
 80070be:	4924      	ldr	r1, [pc, #144]	@ (8007150 <HAL_DMA_Init+0x168>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070c4:	4b22      	ldr	r3, [pc, #136]	@ (8007150 <HAL_DMA_Init+0x168>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6859      	ldr	r1, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d0:	f003 031c 	and.w	r3, r3, #28
 80070d4:	fa01 f303 	lsl.w	r3, r1, r3
 80070d8:	491d      	ldr	r1, [pc, #116]	@ (8007150 <HAL_DMA_Init+0x168>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]
 80070de:	e019      	b.n	8007114 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007154 <HAL_DMA_Init+0x16c>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e8:	f003 031c 	and.w	r3, r3, #28
 80070ec:	210f      	movs	r1, #15
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	43db      	mvns	r3, r3
 80070f4:	4917      	ldr	r1, [pc, #92]	@ (8007154 <HAL_DMA_Init+0x16c>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070fa:	4b16      	ldr	r3, [pc, #88]	@ (8007154 <HAL_DMA_Init+0x16c>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6859      	ldr	r1, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007106:	f003 031c 	and.w	r3, r3, #28
 800710a:	fa01 f303 	lsl.w	r3, r1, r3
 800710e:	4911      	ldr	r1, [pc, #68]	@ (8007154 <HAL_DMA_Init+0x16c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	40020407 	.word	0x40020407
 800713c:	bffdfff8 	.word	0xbffdfff8
 8007140:	cccccccd 	.word	0xcccccccd
 8007144:	40020000 	.word	0x40020000
 8007148:	bffdfbf8 	.word	0xbffdfbf8
 800714c:	40020400 	.word	0x40020400
 8007150:	400200a8 	.word	0x400200a8
 8007154:	400204a8 	.word	0x400204a8

08007158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_DMA_Start_IT+0x20>
 8007174:	2302      	movs	r3, #2
 8007176:	e04b      	b.n	8007210 <HAL_DMA_Start_IT+0xb8>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d13a      	bne.n	8007202 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0201 	bic.w	r2, r2, #1
 80071a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f8e0 	bl	8007376 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 020e 	orr.w	r2, r2, #14
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e00f      	b.n	80071f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0204 	bic.w	r2, r2, #4
 80071de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 020a 	orr.w	r2, r2, #10
 80071ee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	e005      	b.n	800720e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800720a:	2302      	movs	r3, #2
 800720c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007234:	f003 031c 	and.w	r3, r3, #28
 8007238:	2204      	movs	r2, #4
 800723a:	409a      	lsls	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d026      	beq.n	8007292 <HAL_DMA_IRQHandler+0x7a>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	d021      	beq.n	8007292 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d107      	bne.n	800726c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0204 	bic.w	r2, r2, #4
 800726a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007270:	f003 021c 	and.w	r2, r3, #28
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007278:	2104      	movs	r1, #4
 800727a:	fa01 f202 	lsl.w	r2, r1, r2
 800727e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007284:	2b00      	cmp	r3, #0
 8007286:	d071      	beq.n	800736c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007290:	e06c      	b.n	800736c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007296:	f003 031c 	and.w	r3, r3, #28
 800729a:	2202      	movs	r2, #2
 800729c:	409a      	lsls	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d02e      	beq.n	8007304 <HAL_DMA_IRQHandler+0xec>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d029      	beq.n	8007304 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 020a 	bic.w	r2, r2, #10
 80072cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072da:	f003 021c 	and.w	r2, r3, #28
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	2102      	movs	r1, #2
 80072e4:	fa01 f202 	lsl.w	r2, r1, r2
 80072e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d038      	beq.n	800736c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007302:	e033      	b.n	800736c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007308:	f003 031c 	and.w	r3, r3, #28
 800730c:	2208      	movs	r2, #8
 800730e:	409a      	lsls	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4013      	ands	r3, r2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d02a      	beq.n	800736e <HAL_DMA_IRQHandler+0x156>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d025      	beq.n	800736e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 020e 	bic.w	r2, r2, #14
 8007330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007336:	f003 021c 	and.w	r2, r3, #28
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	2101      	movs	r1, #1
 8007340:	fa01 f202 	lsl.w	r2, r1, r2
 8007344:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800736c:	bf00      	nop
 800736e:	bf00      	nop
}
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007388:	f003 021c 	and.w	r2, r3, #28
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f202 	lsl.w	r2, r1, r2
 8007396:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d108      	bne.n	80073ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80073b8:	e007      	b.n	80073ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	60da      	str	r2, [r3, #12]
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073e6:	e148      	b.n	800767a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	2101      	movs	r1, #1
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	4013      	ands	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 813a 	beq.w	8007674 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	2b01      	cmp	r3, #1
 800740a:	d005      	beq.n	8007418 <HAL_GPIO_Init+0x40>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d130      	bne.n	800747a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	2203      	movs	r2, #3
 8007424:	fa02 f303 	lsl.w	r3, r2, r3
 8007428:	43db      	mvns	r3, r3
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4013      	ands	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800744e:	2201      	movs	r2, #1
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43db      	mvns	r3, r3
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4013      	ands	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	f003 0201 	and.w	r2, r3, #1
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d017      	beq.n	80074b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	2203      	movs	r2, #3
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43db      	mvns	r3, r3
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4013      	ands	r3, r2
 800749c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d123      	bne.n	800750a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	08da      	lsrs	r2, r3, #3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3208      	adds	r2, #8
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	220f      	movs	r2, #15
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43db      	mvns	r3, r3
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4013      	ands	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	08da      	lsrs	r2, r3, #3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3208      	adds	r2, #8
 8007504:	6939      	ldr	r1, [r7, #16]
 8007506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	2203      	movs	r2, #3
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	43db      	mvns	r3, r3
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4013      	ands	r3, r2
 8007520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 0203 	and.w	r2, r3, #3
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 8094 	beq.w	8007674 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800754c:	4b52      	ldr	r3, [pc, #328]	@ (8007698 <HAL_GPIO_Init+0x2c0>)
 800754e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007550:	4a51      	ldr	r2, [pc, #324]	@ (8007698 <HAL_GPIO_Init+0x2c0>)
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	6613      	str	r3, [r2, #96]	@ 0x60
 8007558:	4b4f      	ldr	r3, [pc, #316]	@ (8007698 <HAL_GPIO_Init+0x2c0>)
 800755a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	60bb      	str	r3, [r7, #8]
 8007562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007564:	4a4d      	ldr	r2, [pc, #308]	@ (800769c <HAL_GPIO_Init+0x2c4>)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	3302      	adds	r3, #2
 800756c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	220f      	movs	r2, #15
 800757c:	fa02 f303 	lsl.w	r3, r2, r3
 8007580:	43db      	mvns	r3, r3
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4013      	ands	r3, r2
 8007586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800758e:	d00d      	beq.n	80075ac <HAL_GPIO_Init+0x1d4>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a43      	ldr	r2, [pc, #268]	@ (80076a0 <HAL_GPIO_Init+0x2c8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d007      	beq.n	80075a8 <HAL_GPIO_Init+0x1d0>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a42      	ldr	r2, [pc, #264]	@ (80076a4 <HAL_GPIO_Init+0x2cc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d101      	bne.n	80075a4 <HAL_GPIO_Init+0x1cc>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e004      	b.n	80075ae <HAL_GPIO_Init+0x1d6>
 80075a4:	2307      	movs	r3, #7
 80075a6:	e002      	b.n	80075ae <HAL_GPIO_Init+0x1d6>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e000      	b.n	80075ae <HAL_GPIO_Init+0x1d6>
 80075ac:	2300      	movs	r3, #0
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	f002 0203 	and.w	r2, r2, #3
 80075b4:	0092      	lsls	r2, r2, #2
 80075b6:	4093      	lsls	r3, r2
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80075be:	4937      	ldr	r1, [pc, #220]	@ (800769c <HAL_GPIO_Init+0x2c4>)
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	089b      	lsrs	r3, r3, #2
 80075c4:	3302      	adds	r3, #2
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075cc:	4b36      	ldr	r3, [pc, #216]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	43db      	mvns	r3, r3
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4013      	ands	r3, r2
 80075da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075f0:	4a2d      	ldr	r2, [pc, #180]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075f6:	4b2c      	ldr	r3, [pc, #176]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	43db      	mvns	r3, r3
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4013      	ands	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800761a:	4a23      	ldr	r2, [pc, #140]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007620:	4b21      	ldr	r3, [pc, #132]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	43db      	mvns	r3, r3
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4013      	ands	r3, r2
 800762e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007644:	4a18      	ldr	r2, [pc, #96]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800764a:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	43db      	mvns	r3, r3
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4013      	ands	r3, r2
 8007658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800766e:	4a0e      	ldr	r2, [pc, #56]	@ (80076a8 <HAL_GPIO_Init+0x2d0>)
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	3301      	adds	r3, #1
 8007678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	f47f aeaf 	bne.w	80073e8 <HAL_GPIO_Init+0x10>
  }
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	40021000 	.word	0x40021000
 800769c:	40010000 	.word	0x40010000
 80076a0:	48000400 	.word	0x48000400
 80076a4:	48000800 	.word	0x48000800
 80076a8:	40010400 	.word	0x40010400

080076ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	807b      	strh	r3, [r7, #2]
 80076b8:	4613      	mov	r3, r2
 80076ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076bc:	787b      	ldrb	r3, [r7, #1]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80076c2:	887a      	ldrh	r2, [r7, #2]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80076c8:	e002      	b.n	80076d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80076ca:	887a      	ldrh	r2, [r7, #2]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80076e6:	4b08      	ldr	r3, [pc, #32]	@ (8007708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076e8:	695a      	ldr	r2, [r3, #20]
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	4013      	ands	r3, r2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d006      	beq.n	8007700 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076f2:	4a05      	ldr	r2, [pc, #20]	@ (8007708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076f4:	88fb      	ldrh	r3, [r7, #6]
 80076f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fd fc62 	bl	8004fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40010400 	.word	0x40010400

0800770c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e08d      	b.n	800783a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fd f976 	bl	8004a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2224      	movs	r2, #36	@ 0x24
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800775c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800776c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d107      	bne.n	8007786 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	e006      	b.n	8007794 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007792:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d108      	bne.n	80077ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077aa:	605a      	str	r2, [r3, #4]
 80077ac:	e007      	b.n	80077be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80077cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69d9      	ldr	r1, [r3, #28]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1a      	ldr	r2, [r3, #32]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af02      	add	r7, sp, #8
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	461a      	mov	r2, r3
 8007852:	4603      	mov	r3, r0
 8007854:	817b      	strh	r3, [r7, #10]
 8007856:	460b      	mov	r3, r1
 8007858:	813b      	strh	r3, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b20      	cmp	r3, #32
 8007868:	f040 80f9 	bne.w	8007a5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_I2C_Mem_Write+0x34>
 8007872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007874:	2b00      	cmp	r3, #0
 8007876:	d105      	bne.n	8007884 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800787e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0ed      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_I2C_Mem_Write+0x4e>
 800788e:	2302      	movs	r3, #2
 8007890:	e0e6      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800789a:	f7fd ff45 	bl	8005728 <HAL_GetTick>
 800789e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	2319      	movs	r3, #25
 80078a6:	2201      	movs	r2, #1
 80078a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 fac3 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0d1      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2221      	movs	r2, #33	@ 0x21
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2240      	movs	r2, #64	@ 0x40
 80078c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a3a      	ldr	r2, [r7, #32]
 80078d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80078dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078e4:	88f8      	ldrh	r0, [r7, #6]
 80078e6:	893a      	ldrh	r2, [r7, #8]
 80078e8:	8979      	ldrh	r1, [r7, #10]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	4603      	mov	r3, r0
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f9d3 	bl	8007ca0 <I2C_RequestMemoryWrite>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e0a9      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007910:	b29b      	uxth	r3, r3
 8007912:	2bff      	cmp	r3, #255	@ 0xff
 8007914:	d90e      	bls.n	8007934 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	22ff      	movs	r2, #255	@ 0xff
 800791a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007920:	b2da      	uxtb	r2, r3
 8007922:	8979      	ldrh	r1, [r7, #10]
 8007924:	2300      	movs	r3, #0
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 fc47 	bl	80081c0 <I2C_TransferConfig>
 8007932:	e00f      	b.n	8007954 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007938:	b29a      	uxth	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007942:	b2da      	uxtb	r2, r3
 8007944:	8979      	ldrh	r1, [r7, #10]
 8007946:	2300      	movs	r3, #0
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fc36 	bl	80081c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fac6 	bl	8007eea <I2C_WaitOnTXISFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e07b      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796c:	781a      	ldrb	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d034      	beq.n	8007a0c <HAL_I2C_Mem_Write+0x1c8>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d130      	bne.n	8007a0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b0:	2200      	movs	r2, #0
 80079b2:	2180      	movs	r1, #128	@ 0x80
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 fa3f 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e04d      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2bff      	cmp	r3, #255	@ 0xff
 80079cc:	d90e      	bls.n	80079ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	22ff      	movs	r2, #255	@ 0xff
 80079d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	8979      	ldrh	r1, [r7, #10]
 80079dc:	2300      	movs	r3, #0
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 fbeb 	bl	80081c0 <I2C_TransferConfig>
 80079ea:	e00f      	b.n	8007a0c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	8979      	ldrh	r1, [r7, #10]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fbda 	bl	80081c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d19e      	bne.n	8007954 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 faac 	bl	8007f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e01a      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6859      	ldr	r1, [r3, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a68 <HAL_I2C_Mem_Write+0x224>)
 8007a3e:	400b      	ands	r3, r1
 8007a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e000      	b.n	8007a60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	fe00e800 	.word	0xfe00e800

08007a6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	4608      	mov	r0, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	817b      	strh	r3, [r7, #10]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	813b      	strh	r3, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	f040 80fd 	bne.w	8007c8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_I2C_Mem_Read+0x34>
 8007a9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aa6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e0f1      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_I2C_Mem_Read+0x4e>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e0ea      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ac2:	f7fd fe31 	bl	8005728 <HAL_GetTick>
 8007ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2319      	movs	r3, #25
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f9af 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e0d5      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2222      	movs	r2, #34	@ 0x22
 8007ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2240      	movs	r2, #64	@ 0x40
 8007af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a3a      	ldr	r2, [r7, #32]
 8007afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b0c:	88f8      	ldrh	r0, [r7, #6]
 8007b0e:	893a      	ldrh	r2, [r7, #8]
 8007b10:	8979      	ldrh	r1, [r7, #10]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f913 	bl	8007d48 <I2C_RequestMemoryRead>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e0ad      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2bff      	cmp	r3, #255	@ 0xff
 8007b3c:	d90e      	bls.n	8007b5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	8979      	ldrh	r1, [r7, #10]
 8007b4c:	4b52      	ldr	r3, [pc, #328]	@ (8007c98 <HAL_I2C_Mem_Read+0x22c>)
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fb33 	bl	80081c0 <I2C_TransferConfig>
 8007b5a:	e00f      	b.n	8007b7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	8979      	ldrh	r1, [r7, #10]
 8007b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8007c98 <HAL_I2C_Mem_Read+0x22c>)
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fb22 	bl	80081c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b82:	2200      	movs	r2, #0
 8007b84:	2104      	movs	r1, #4
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f956 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e07c      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d034      	beq.n	8007c3c <HAL_I2C_Mem_Read+0x1d0>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d130      	bne.n	8007c3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	2200      	movs	r2, #0
 8007be2:	2180      	movs	r1, #128	@ 0x80
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f927 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e04d      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2bff      	cmp	r3, #255	@ 0xff
 8007bfc:	d90e      	bls.n	8007c1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	8979      	ldrh	r1, [r7, #10]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fad3 	bl	80081c0 <I2C_TransferConfig>
 8007c1a:	e00f      	b.n	8007c3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	8979      	ldrh	r1, [r7, #10]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fac2 	bl	80081c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d19a      	bne.n	8007b7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f994 	bl	8007f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e01a      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6859      	ldr	r1, [r3, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <HAL_I2C_Mem_Read+0x230>)
 8007c6e:	400b      	ands	r3, r1
 8007c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e000      	b.n	8007c90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c8e:	2302      	movs	r3, #2
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	80002400 	.word	0x80002400
 8007c9c:	fe00e800 	.word	0xfe00e800

08007ca0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	817b      	strh	r3, [r7, #10]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	813b      	strh	r3, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	8979      	ldrh	r1, [r7, #10]
 8007cc0:	4b20      	ldr	r3, [pc, #128]	@ (8007d44 <I2C_RequestMemoryWrite+0xa4>)
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fa79 	bl	80081c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	69b9      	ldr	r1, [r7, #24]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f909 	bl	8007eea <I2C_WaitOnTXISFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e02c      	b.n	8007d3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d105      	bne.n	8007cf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ce8:	893b      	ldrh	r3, [r7, #8]
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cf2:	e015      	b.n	8007d20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cf4:	893b      	ldrh	r3, [r7, #8]
 8007cf6:	0a1b      	lsrs	r3, r3, #8
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f8ef 	bl	8007eea <I2C_WaitOnTXISFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e012      	b.n	8007d3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d16:	893b      	ldrh	r3, [r7, #8]
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2200      	movs	r2, #0
 8007d28:	2180      	movs	r1, #128	@ 0x80
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f884 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	80002000 	.word	0x80002000

08007d48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	817b      	strh	r3, [r7, #10]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	813b      	strh	r3, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	8979      	ldrh	r1, [r7, #10]
 8007d68:	4b20      	ldr	r3, [pc, #128]	@ (8007dec <I2C_RequestMemoryRead+0xa4>)
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fa26 	bl	80081c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	69b9      	ldr	r1, [r7, #24]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f8b6 	bl	8007eea <I2C_WaitOnTXISFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e02c      	b.n	8007de2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d105      	bne.n	8007d9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d8e:	893b      	ldrh	r3, [r7, #8]
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d98:	e015      	b.n	8007dc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	0a1b      	lsrs	r3, r3, #8
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	69b9      	ldr	r1, [r7, #24]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f89c 	bl	8007eea <I2C_WaitOnTXISFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e012      	b.n	8007de2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dbc:	893b      	ldrh	r3, [r7, #8]
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2140      	movs	r1, #64	@ 0x40
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f831 	bl	8007e38 <I2C_WaitOnFlagUntilTimeout>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	80002000 	.word	0x80002000

08007df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d103      	bne.n	8007e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d007      	beq.n	8007e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	619a      	str	r2, [r3, #24]
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4613      	mov	r3, r2
 8007e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e48:	e03b      	b.n	8007ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 f8d6 	bl	8008000 <I2C_IsErrorOccurred>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e041      	b.n	8007ee2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e64:	d02d      	beq.n	8007ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e66:	f7fd fc5f 	bl	8005728 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d302      	bcc.n	8007e7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d122      	bne.n	8007ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	4013      	ands	r3, r2
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	bf0c      	ite	eq
 8007e8c:	2301      	moveq	r3, #1
 8007e8e:	2300      	movne	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	461a      	mov	r2, r3
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d113      	bne.n	8007ec2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9e:	f043 0220 	orr.w	r2, r3, #32
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e00f      	b.n	8007ee2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	bf0c      	ite	eq
 8007ed2:	2301      	moveq	r3, #1
 8007ed4:	2300      	movne	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d0b4      	beq.n	8007e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ef6:	e033      	b.n	8007f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f87f 	bl	8008000 <I2C_IsErrorOccurred>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e031      	b.n	8007f70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f12:	d025      	beq.n	8007f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f14:	f7fd fc08 	bl	8005728 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d11a      	bne.n	8007f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d013      	beq.n	8007f60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f3c:	f043 0220 	orr.w	r2, r3, #32
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e007      	b.n	8007f70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d1c4      	bne.n	8007ef8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f84:	e02f      	b.n	8007fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f838 	bl	8008000 <I2C_IsErrorOccurred>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e02d      	b.n	8007ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f9a:	f7fd fbc5 	bl	8005728 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d302      	bcc.n	8007fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11a      	bne.n	8007fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d013      	beq.n	8007fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc2:	f043 0220 	orr.w	r2, r3, #32
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e007      	b.n	8007ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d1c8      	bne.n	8007f86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08a      	sub	sp, #40	@ 0x28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	d068      	beq.n	80080fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2210      	movs	r2, #16
 8008032:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008034:	e049      	b.n	80080ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803c:	d045      	beq.n	80080ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800803e:	f7fd fb73 	bl	8005728 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	429a      	cmp	r2, r3
 800804c:	d302      	bcc.n	8008054 <I2C_IsErrorOccurred+0x54>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d13a      	bne.n	80080ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800805e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008066:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008076:	d121      	bne.n	80080bc <I2C_IsErrorOccurred+0xbc>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800807e:	d01d      	beq.n	80080bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008080:	7cfb      	ldrb	r3, [r7, #19]
 8008082:	2b20      	cmp	r3, #32
 8008084:	d01a      	beq.n	80080bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008094:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008096:	f7fd fb47 	bl	8005728 <HAL_GetTick>
 800809a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800809c:	e00e      	b.n	80080bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800809e:	f7fd fb43 	bl	8005728 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b19      	cmp	r3, #25
 80080aa:	d907      	bls.n	80080bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	f043 0320 	orr.w	r3, r3, #32
 80080b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80080ba:	e006      	b.n	80080ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d1e9      	bne.n	800809e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d003      	beq.n	80080e0 <I2C_IsErrorOccurred+0xe0>
 80080d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0aa      	beq.n	8008036 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80080e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2220      	movs	r2, #32
 80080ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	f043 0304 	orr.w	r3, r3, #4
 80080f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00b      	beq.n	800814a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f043 0308 	orr.w	r3, r3, #8
 8008138:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008142:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	f043 0302 	orr.w	r3, r3, #2
 800815a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800816c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01c      	beq.n	80081ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff fe3b 	bl	8007df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6859      	ldr	r1, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4b0d      	ldr	r3, [pc, #52]	@ (80081bc <I2C_IsErrorOccurred+0x1bc>)
 8008186:	400b      	ands	r3, r1
 8008188:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	431a      	orrs	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80081ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3728      	adds	r7, #40	@ 0x28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	fe00e800 	.word	0xfe00e800

080081c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	817b      	strh	r3, [r7, #10]
 80081ce:	4613      	mov	r3, r2
 80081d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081d2:	897b      	ldrh	r3, [r7, #10]
 80081d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081d8:	7a7b      	ldrb	r3, [r7, #9]
 80081da:	041b      	lsls	r3, r3, #16
 80081dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	0d5b      	lsrs	r3, r3, #21
 80081fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80081fe:	4b08      	ldr	r3, [pc, #32]	@ (8008220 <I2C_TransferConfig+0x60>)
 8008200:	430b      	orrs	r3, r1
 8008202:	43db      	mvns	r3, r3
 8008204:	ea02 0103 	and.w	r1, r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	03ff63ff 	.word	0x03ff63ff

08008224 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b20      	cmp	r3, #32
 8008238:	d138      	bne.n	80082ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008244:	2302      	movs	r3, #2
 8008246:	e032      	b.n	80082ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2224      	movs	r2, #36	@ 0x24
 8008254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0201 	bic.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008276:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6819      	ldr	r1, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0201 	orr.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e000      	b.n	80082ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082ac:	2302      	movs	r3, #2
  }
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d139      	bne.n	8008344 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082da:	2302      	movs	r3, #2
 80082dc:	e033      	b.n	8008346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2224      	movs	r2, #36	@ 0x24
 80082ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800830c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0201 	orr.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	e000      	b.n	8008346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008344:	2302      	movs	r3, #2
  }
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008358:	4b04      	ldr	r3, [pc, #16]	@ (800836c <HAL_PWREx_GetVoltageRange+0x18>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008360:	4618      	mov	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40007000 	.word	0x40007000

08008370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800837e:	d130      	bne.n	80083e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008380:	4b23      	ldr	r3, [pc, #140]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800838c:	d038      	beq.n	8008400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800838e:	4b20      	ldr	r3, [pc, #128]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008396:	4a1e      	ldr	r2, [pc, #120]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800839c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800839e:	4b1d      	ldr	r3, [pc, #116]	@ (8008414 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2232      	movs	r2, #50	@ 0x32
 80083a4:	fb02 f303 	mul.w	r3, r2, r3
 80083a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80083aa:	fba2 2303 	umull	r2, r3, r2, r3
 80083ae:	0c9b      	lsrs	r3, r3, #18
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083b4:	e002      	b.n	80083bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083bc:	4b14      	ldr	r3, [pc, #80]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083c8:	d102      	bne.n	80083d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f2      	bne.n	80083b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80083d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083dc:	d110      	bne.n	8008400 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e00f      	b.n	8008402 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80083e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ee:	d007      	beq.n	8008400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083f0:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80083f8:	4a05      	ldr	r2, [pc, #20]	@ (8008410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80083fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40007000 	.word	0x40007000
 8008414:	20000004 	.word	0x20000004
 8008418:	431bde83 	.word	0x431bde83

0800841c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f000 bc02 	b.w	8008c34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008430:	4b96      	ldr	r3, [pc, #600]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 030c 	and.w	r3, r3, #12
 8008438:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800843a:	4b94      	ldr	r3, [pc, #592]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80e4 	beq.w	800861a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <HAL_RCC_OscConfig+0x4c>
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	2b0c      	cmp	r3, #12
 800845c:	f040 808b 	bne.w	8008576 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b01      	cmp	r3, #1
 8008464:	f040 8087 	bne.w	8008576 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008468:	4b88      	ldr	r3, [pc, #544]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <HAL_RCC_OscConfig+0x64>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e3d9      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1a      	ldr	r2, [r3, #32]
 8008484:	4b81      	ldr	r3, [pc, #516]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_RCC_OscConfig+0x7e>
 8008490:	4b7e      	ldr	r3, [pc, #504]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008498:	e005      	b.n	80084a6 <HAL_RCC_OscConfig+0x8a>
 800849a:	4b7c      	ldr	r3, [pc, #496]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 800849c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084a0:	091b      	lsrs	r3, r3, #4
 80084a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d223      	bcs.n	80084f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fd8c 	bl	8008fcc <RCC_SetFlashLatencyFromMSIRange>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e3ba      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084be:	4b73      	ldr	r3, [pc, #460]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a72      	ldr	r2, [pc, #456]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084c4:	f043 0308 	orr.w	r3, r3, #8
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	4b70      	ldr	r3, [pc, #448]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	496d      	ldr	r1, [pc, #436]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084dc:	4b6b      	ldr	r3, [pc, #428]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	4968      	ldr	r1, [pc, #416]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	604b      	str	r3, [r1, #4]
 80084f0:	e025      	b.n	800853e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084f2:	4b66      	ldr	r3, [pc, #408]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a65      	ldr	r2, [pc, #404]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80084f8:	f043 0308 	orr.w	r3, r3, #8
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	4b63      	ldr	r3, [pc, #396]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	4960      	ldr	r1, [pc, #384]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 800850c:	4313      	orrs	r3, r2
 800850e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008510:	4b5e      	ldr	r3, [pc, #376]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	495b      	ldr	r1, [pc, #364]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008520:	4313      	orrs	r3, r2
 8008522:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fd4c 	bl	8008fcc <RCC_SetFlashLatencyFromMSIRange>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e37a      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800853e:	f000 fc81 	bl	8008e44 <HAL_RCC_GetSysClockFreq>
 8008542:	4602      	mov	r2, r0
 8008544:	4b51      	ldr	r3, [pc, #324]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	091b      	lsrs	r3, r3, #4
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	4950      	ldr	r1, [pc, #320]	@ (8008690 <HAL_RCC_OscConfig+0x274>)
 8008550:	5ccb      	ldrb	r3, [r1, r3]
 8008552:	f003 031f 	and.w	r3, r3, #31
 8008556:	fa22 f303 	lsr.w	r3, r2, r3
 800855a:	4a4e      	ldr	r2, [pc, #312]	@ (8008694 <HAL_RCC_OscConfig+0x278>)
 800855c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800855e:	4b4e      	ldr	r3, [pc, #312]	@ (8008698 <HAL_RCC_OscConfig+0x27c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f7fd f890 	bl	8005688 <HAL_InitTick>
 8008568:	4603      	mov	r3, r0
 800856a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d052      	beq.n	8008618 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	e35e      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d032      	beq.n	80085e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800857e:	4b43      	ldr	r3, [pc, #268]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a42      	ldr	r2, [pc, #264]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008584:	f043 0301 	orr.w	r3, r3, #1
 8008588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800858a:	f7fd f8cd 	bl	8005728 <HAL_GetTick>
 800858e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008592:	f7fd f8c9 	bl	8005728 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e347      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085a4:	4b39      	ldr	r3, [pc, #228]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085b0:	4b36      	ldr	r3, [pc, #216]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a35      	ldr	r2, [pc, #212]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085b6:	f043 0308 	orr.w	r3, r3, #8
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	4b33      	ldr	r3, [pc, #204]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	4930      	ldr	r1, [pc, #192]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085ce:	4b2f      	ldr	r3, [pc, #188]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	021b      	lsls	r3, r3, #8
 80085dc:	492b      	ldr	r1, [pc, #172]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	604b      	str	r3, [r1, #4]
 80085e2:	e01a      	b.n	800861a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085e4:	4b29      	ldr	r3, [pc, #164]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a28      	ldr	r2, [pc, #160]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 80085ea:	f023 0301 	bic.w	r3, r3, #1
 80085ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085f0:	f7fd f89a 	bl	8005728 <HAL_GetTick>
 80085f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085f8:	f7fd f896 	bl	8005728 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e314      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800860a:	4b20      	ldr	r3, [pc, #128]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f0      	bne.n	80085f8 <HAL_RCC_OscConfig+0x1dc>
 8008616:	e000      	b.n	800861a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d073      	beq.n	800870e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b08      	cmp	r3, #8
 800862a:	d005      	beq.n	8008638 <HAL_RCC_OscConfig+0x21c>
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b0c      	cmp	r3, #12
 8008630:	d10e      	bne.n	8008650 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b03      	cmp	r3, #3
 8008636:	d10b      	bne.n	8008650 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008638:	4b14      	ldr	r3, [pc, #80]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d063      	beq.n	800870c <HAL_RCC_OscConfig+0x2f0>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d15f      	bne.n	800870c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e2f1      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008658:	d106      	bne.n	8008668 <HAL_RCC_OscConfig+0x24c>
 800865a:	4b0c      	ldr	r3, [pc, #48]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a0b      	ldr	r2, [pc, #44]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	e025      	b.n	80086b4 <HAL_RCC_OscConfig+0x298>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008670:	d114      	bne.n	800869c <HAL_RCC_OscConfig+0x280>
 8008672:	4b06      	ldr	r3, [pc, #24]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a05      	ldr	r2, [pc, #20]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	4b03      	ldr	r3, [pc, #12]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a02      	ldr	r2, [pc, #8]	@ (800868c <HAL_RCC_OscConfig+0x270>)
 8008684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	e013      	b.n	80086b4 <HAL_RCC_OscConfig+0x298>
 800868c:	40021000 	.word	0x40021000
 8008690:	0800b768 	.word	0x0800b768
 8008694:	20000004 	.word	0x20000004
 8008698:	20000008 	.word	0x20000008
 800869c:	4ba0      	ldr	r3, [pc, #640]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a9f      	ldr	r2, [pc, #636]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80086a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	4b9d      	ldr	r3, [pc, #628]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a9c      	ldr	r2, [pc, #624]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80086ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d013      	beq.n	80086e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086bc:	f7fd f834 	bl	8005728 <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086c4:	f7fd f830 	bl	8005728 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b64      	cmp	r3, #100	@ 0x64
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e2ae      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086d6:	4b92      	ldr	r3, [pc, #584]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f0      	beq.n	80086c4 <HAL_RCC_OscConfig+0x2a8>
 80086e2:	e014      	b.n	800870e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fd f820 	bl	8005728 <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086ec:	f7fd f81c 	bl	8005728 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b64      	cmp	r3, #100	@ 0x64
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e29a      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086fe:	4b88      	ldr	r3, [pc, #544]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f0      	bne.n	80086ec <HAL_RCC_OscConfig+0x2d0>
 800870a:	e000      	b.n	800870e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800870c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d060      	beq.n	80087dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	2b04      	cmp	r3, #4
 800871e:	d005      	beq.n	800872c <HAL_RCC_OscConfig+0x310>
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	2b0c      	cmp	r3, #12
 8008724:	d119      	bne.n	800875a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d116      	bne.n	800875a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800872c:	4b7c      	ldr	r3, [pc, #496]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_RCC_OscConfig+0x328>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e277      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008744:	4b76      	ldr	r3, [pc, #472]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	061b      	lsls	r3, r3, #24
 8008752:	4973      	ldr	r1, [pc, #460]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008754:	4313      	orrs	r3, r2
 8008756:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008758:	e040      	b.n	80087dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d023      	beq.n	80087aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008762:	4b6f      	ldr	r3, [pc, #444]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a6e      	ldr	r2, [pc, #440]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800876c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876e:	f7fc ffdb 	bl	8005728 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008776:	f7fc ffd7 	bl	8005728 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e255      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008788:	4b65      	ldr	r3, [pc, #404]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008794:	4b62      	ldr	r3, [pc, #392]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	061b      	lsls	r3, r3, #24
 80087a2:	495f      	ldr	r1, [pc, #380]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	604b      	str	r3, [r1, #4]
 80087a8:	e018      	b.n	80087dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087aa:	4b5d      	ldr	r3, [pc, #372]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a5c      	ldr	r2, [pc, #368]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80087b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b6:	f7fc ffb7 	bl	8005728 <HAL_GetTick>
 80087ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087bc:	e008      	b.n	80087d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087be:	f7fc ffb3 	bl	8005728 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d901      	bls.n	80087d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e231      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087d0:	4b53      	ldr	r3, [pc, #332]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1f0      	bne.n	80087be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d03c      	beq.n	8008862 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01c      	beq.n	800882a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80087f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008800:	f7fc ff92 	bl	8005728 <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008808:	f7fc ff8e 	bl	8005728 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e20c      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800881a:	4b41      	ldr	r3, [pc, #260]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 800881c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0ef      	beq.n	8008808 <HAL_RCC_OscConfig+0x3ec>
 8008828:	e01b      	b.n	8008862 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800882a:	4b3d      	ldr	r3, [pc, #244]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 800882c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008830:	4a3b      	ldr	r2, [pc, #236]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883a:	f7fc ff75 	bl	8005728 <HAL_GetTick>
 800883e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008840:	e008      	b.n	8008854 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008842:	f7fc ff71 	bl	8005728 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d901      	bls.n	8008854 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e1ef      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008854:	4b32      	ldr	r3, [pc, #200]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1ef      	bne.n	8008842 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80a6 	beq.w	80089bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008870:	2300      	movs	r3, #0
 8008872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008874:	4b2a      	ldr	r3, [pc, #168]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10d      	bne.n	800889c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008880:	4b27      	ldr	r3, [pc, #156]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008884:	4a26      	ldr	r2, [pc, #152]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800888a:	6593      	str	r3, [r2, #88]	@ 0x58
 800888c:	4b24      	ldr	r3, [pc, #144]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 800888e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008898:	2301      	movs	r3, #1
 800889a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800889c:	4b21      	ldr	r3, [pc, #132]	@ (8008924 <HAL_RCC_OscConfig+0x508>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d118      	bne.n	80088da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008924 <HAL_RCC_OscConfig+0x508>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008924 <HAL_RCC_OscConfig+0x508>)
 80088ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088b4:	f7fc ff38 	bl	8005728 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088bc:	f7fc ff34 	bl	8005728 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e1b2      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ce:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <HAL_RCC_OscConfig+0x508>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d108      	bne.n	80088f4 <HAL_RCC_OscConfig+0x4d8>
 80088e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80088e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088f2:	e029      	b.n	8008948 <HAL_RCC_OscConfig+0x52c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d115      	bne.n	8008928 <HAL_RCC_OscConfig+0x50c>
 80088fc:	4b08      	ldr	r3, [pc, #32]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 80088fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008902:	4a07      	ldr	r2, [pc, #28]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008904:	f043 0304 	orr.w	r3, r3, #4
 8008908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800890c:	4b04      	ldr	r3, [pc, #16]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 800890e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008912:	4a03      	ldr	r2, [pc, #12]	@ (8008920 <HAL_RCC_OscConfig+0x504>)
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800891c:	e014      	b.n	8008948 <HAL_RCC_OscConfig+0x52c>
 800891e:	bf00      	nop
 8008920:	40021000 	.word	0x40021000
 8008924:	40007000 	.word	0x40007000
 8008928:	4b9a      	ldr	r3, [pc, #616]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 800892a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800892e:	4a99      	ldr	r2, [pc, #612]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008938:	4b96      	ldr	r3, [pc, #600]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800893e:	4a95      	ldr	r2, [pc, #596]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008940:	f023 0304 	bic.w	r3, r3, #4
 8008944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d016      	beq.n	800897e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008950:	f7fc feea 	bl	8005728 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008956:	e00a      	b.n	800896e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008958:	f7fc fee6 	bl	8005728 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008966:	4293      	cmp	r3, r2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e162      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800896e:	4b89      	ldr	r3, [pc, #548]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0ed      	beq.n	8008958 <HAL_RCC_OscConfig+0x53c>
 800897c:	e015      	b.n	80089aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897e:	f7fc fed3 	bl	8005728 <HAL_GetTick>
 8008982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008984:	e00a      	b.n	800899c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008986:	f7fc fecf 	bl	8005728 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008994:	4293      	cmp	r3, r2
 8008996:	d901      	bls.n	800899c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e14b      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800899c:	4b7d      	ldr	r3, [pc, #500]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 800899e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1ed      	bne.n	8008986 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089aa:	7ffb      	ldrb	r3, [r7, #31]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d105      	bne.n	80089bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089b0:	4b78      	ldr	r3, [pc, #480]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 80089b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089b4:	4a77      	ldr	r2, [pc, #476]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 80089b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d03c      	beq.n	8008a42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01c      	beq.n	8008a0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089d0:	4b70      	ldr	r3, [pc, #448]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 80089d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089d6:	4a6f      	ldr	r2, [pc, #444]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 80089d8:	f043 0301 	orr.w	r3, r3, #1
 80089dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e0:	f7fc fea2 	bl	8005728 <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089e8:	f7fc fe9e 	bl	8005728 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e11c      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089fa:	4b66      	ldr	r3, [pc, #408]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 80089fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0ef      	beq.n	80089e8 <HAL_RCC_OscConfig+0x5cc>
 8008a08:	e01b      	b.n	8008a42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a0a:	4b62      	ldr	r3, [pc, #392]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a10:	4a60      	ldr	r2, [pc, #384]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008a12:	f023 0301 	bic.w	r3, r3, #1
 8008a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1a:	f7fc fe85 	bl	8005728 <HAL_GetTick>
 8008a1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a22:	f7fc fe81 	bl	8005728 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e0ff      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a34:	4b57      	ldr	r3, [pc, #348]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1ef      	bne.n	8008a22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 80f3 	beq.w	8008c32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	f040 80c9 	bne.w	8008be8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008a56:	4b4f      	ldr	r3, [pc, #316]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f003 0203 	and.w	r2, r3, #3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d12c      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a74:	3b01      	subs	r3, #1
 8008a76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d123      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d113      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa6:	085b      	lsrs	r3, r3, #1
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	3b01      	subs	r3, #1
 8008abe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d06b      	beq.n	8008b9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b0c      	cmp	r3, #12
 8008ac8:	d062      	beq.n	8008b90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008aca:	4b32      	ldr	r3, [pc, #200]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e0ac      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008ada:	4b2e      	ldr	r3, [pc, #184]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a2d      	ldr	r2, [pc, #180]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008ae0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ae4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008ae6:	f7fc fe1f 	bl	8005728 <HAL_GetTick>
 8008aea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aec:	e008      	b.n	8008b00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aee:	f7fc fe1b 	bl	8005728 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d901      	bls.n	8008b00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e099      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b00:	4b24      	ldr	r3, [pc, #144]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1f0      	bne.n	8008aee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b0c:	4b21      	ldr	r3, [pc, #132]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	4b21      	ldr	r3, [pc, #132]	@ (8008b98 <HAL_RCC_OscConfig+0x77c>)
 8008b12:	4013      	ands	r3, r2
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b1c:	3a01      	subs	r2, #1
 8008b1e:	0112      	lsls	r2, r2, #4
 8008b20:	4311      	orrs	r1, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b26:	0212      	lsls	r2, r2, #8
 8008b28:	4311      	orrs	r1, r2
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008b2e:	0852      	lsrs	r2, r2, #1
 8008b30:	3a01      	subs	r2, #1
 8008b32:	0552      	lsls	r2, r2, #21
 8008b34:	4311      	orrs	r1, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008b3a:	0852      	lsrs	r2, r2, #1
 8008b3c:	3a01      	subs	r2, #1
 8008b3e:	0652      	lsls	r2, r2, #25
 8008b40:	4311      	orrs	r1, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b46:	06d2      	lsls	r2, r2, #27
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	4912      	ldr	r1, [pc, #72]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b50:	4b10      	ldr	r3, [pc, #64]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a0f      	ldr	r2, [pc, #60]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	4a0c      	ldr	r2, [pc, #48]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b68:	f7fc fdde 	bl	8005728 <HAL_GetTick>
 8008b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b6e:	e008      	b.n	8008b82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b70:	f7fc fdda 	bl	8005728 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e058      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b82:	4b04      	ldr	r3, [pc, #16]	@ (8008b94 <HAL_RCC_OscConfig+0x778>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0f0      	beq.n	8008b70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b8e:	e050      	b.n	8008c32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e04f      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
 8008b94:	40021000 	.word	0x40021000
 8008b98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b9c:	4b27      	ldr	r3, [pc, #156]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d144      	bne.n	8008c32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ba8:	4b24      	ldr	r3, [pc, #144]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a23      	ldr	r2, [pc, #140]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bb4:	4b21      	ldr	r3, [pc, #132]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4a20      	ldr	r2, [pc, #128]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bc0:	f7fc fdb2 	bl	8005728 <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc8:	f7fc fdae 	bl	8005728 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e02c      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bda:	4b18      	ldr	r3, [pc, #96]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0f0      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x7ac>
 8008be6:	e024      	b.n	8008c32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b0c      	cmp	r3, #12
 8008bec:	d01f      	beq.n	8008c2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bee:	4b13      	ldr	r3, [pc, #76]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a12      	ldr	r2, [pc, #72]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008bf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfa:	f7fc fd95 	bl	8005728 <HAL_GetTick>
 8008bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c00:	e008      	b.n	8008c14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c02:	f7fc fd91 	bl	8005728 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e00f      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c14:	4b09      	ldr	r3, [pc, #36]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1f0      	bne.n	8008c02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008c20:	4b06      	ldr	r3, [pc, #24]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	4905      	ldr	r1, [pc, #20]	@ (8008c3c <HAL_RCC_OscConfig+0x820>)
 8008c26:	4b06      	ldr	r3, [pc, #24]	@ (8008c40 <HAL_RCC_OscConfig+0x824>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	60cb      	str	r3, [r1, #12]
 8008c2c:	e001      	b.n	8008c32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3720      	adds	r7, #32
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	40021000 	.word	0x40021000
 8008c40:	feeefffc 	.word	0xfeeefffc

08008c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e0e7      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c58:	4b75      	ldr	r3, [pc, #468]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d910      	bls.n	8008c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c66:	4b72      	ldr	r3, [pc, #456]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f023 0207 	bic.w	r2, r3, #7
 8008c6e:	4970      	ldr	r1, [pc, #448]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c76:	4b6e      	ldr	r3, [pc, #440]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d001      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e0cf      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d010      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	4b66      	ldr	r3, [pc, #408]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d908      	bls.n	8008cb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ca4:	4b63      	ldr	r3, [pc, #396]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	4960      	ldr	r1, [pc, #384]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d04c      	beq.n	8008d5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d107      	bne.n	8008cda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cca:	4b5a      	ldr	r3, [pc, #360]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d121      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e0a6      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ce2:	4b54      	ldr	r3, [pc, #336]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d115      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e09a      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d107      	bne.n	8008d0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e08e      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e086      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d1a:	4b46      	ldr	r3, [pc, #280]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f023 0203 	bic.w	r2, r3, #3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4943      	ldr	r1, [pc, #268]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d2c:	f7fc fcfc 	bl	8005728 <HAL_GetTick>
 8008d30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d32:	e00a      	b.n	8008d4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d34:	f7fc fcf8 	bl	8005728 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e06e      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 020c 	and.w	r2, r3, #12
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d1eb      	bne.n	8008d34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d010      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	4b31      	ldr	r3, [pc, #196]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d208      	bcs.n	8008d8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d78:	4b2e      	ldr	r3, [pc, #184]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	492b      	ldr	r1, [pc, #172]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d8a:	4b29      	ldr	r3, [pc, #164]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d210      	bcs.n	8008dba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d98:	4b25      	ldr	r3, [pc, #148]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f023 0207 	bic.w	r2, r3, #7
 8008da0:	4923      	ldr	r1, [pc, #140]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008da8:	4b21      	ldr	r3, [pc, #132]	@ (8008e30 <HAL_RCC_ClockConfig+0x1ec>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d001      	beq.n	8008dba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e036      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d008      	beq.n	8008dd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	4918      	ldr	r1, [pc, #96]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0308 	and.w	r3, r3, #8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008de4:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	4910      	ldr	r1, [pc, #64]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008df8:	f000 f824 	bl	8008e44 <HAL_RCC_GetSysClockFreq>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <HAL_RCC_ClockConfig+0x1f0>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	091b      	lsrs	r3, r3, #4
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	490b      	ldr	r1, [pc, #44]	@ (8008e38 <HAL_RCC_ClockConfig+0x1f4>)
 8008e0a:	5ccb      	ldrb	r3, [r1, r3]
 8008e0c:	f003 031f 	and.w	r3, r3, #31
 8008e10:	fa22 f303 	lsr.w	r3, r2, r3
 8008e14:	4a09      	ldr	r2, [pc, #36]	@ (8008e3c <HAL_RCC_ClockConfig+0x1f8>)
 8008e16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008e18:	4b09      	ldr	r3, [pc, #36]	@ (8008e40 <HAL_RCC_ClockConfig+0x1fc>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fc fc33 	bl	8005688 <HAL_InitTick>
 8008e22:	4603      	mov	r3, r0
 8008e24:	72fb      	strb	r3, [r7, #11]

  return status;
 8008e26:	7afb      	ldrb	r3, [r7, #11]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40022000 	.word	0x40022000
 8008e34:	40021000 	.word	0x40021000
 8008e38:	0800b768 	.word	0x0800b768
 8008e3c:	20000004 	.word	0x20000004
 8008e40:	20000008 	.word	0x20000008

08008e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b089      	sub	sp, #36	@ 0x24
 8008e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61fb      	str	r3, [r7, #28]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e52:	4b3e      	ldr	r3, [pc, #248]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 030c 	and.w	r3, r3, #12
 8008e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f003 0303 	and.w	r3, r3, #3
 8008e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <HAL_RCC_GetSysClockFreq+0x34>
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b0c      	cmp	r3, #12
 8008e70:	d121      	bne.n	8008eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d11e      	bne.n	8008eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e78:	4b34      	ldr	r3, [pc, #208]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d107      	bne.n	8008e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008e84:	4b31      	ldr	r3, [pc, #196]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	61fb      	str	r3, [r7, #28]
 8008e92:	e005      	b.n	8008ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e94:	4b2d      	ldr	r3, [pc, #180]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	091b      	lsrs	r3, r3, #4
 8008e9a:	f003 030f 	and.w	r3, r3, #15
 8008e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8008f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10d      	bne.n	8008ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008eb4:	e00a      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d102      	bne.n	8008ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ebc:	4b25      	ldr	r3, [pc, #148]	@ (8008f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8008ebe:	61bb      	str	r3, [r7, #24]
 8008ec0:	e004      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b08      	cmp	r3, #8
 8008ec6:	d101      	bne.n	8008ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ec8:	4b23      	ldr	r3, [pc, #140]	@ (8008f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8008eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	2b0c      	cmp	r3, #12
 8008ed0:	d134      	bne.n	8008f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d003      	beq.n	8008eea <HAL_RCC_GetSysClockFreq+0xa6>
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d003      	beq.n	8008ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8008ee8:	e005      	b.n	8008ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008eea:	4b1a      	ldr	r3, [pc, #104]	@ (8008f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8008eec:	617b      	str	r3, [r7, #20]
      break;
 8008eee:	e005      	b.n	8008efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008ef0:	4b19      	ldr	r3, [pc, #100]	@ (8008f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ef2:	617b      	str	r3, [r7, #20]
      break;
 8008ef4:	e002      	b.n	8008efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	617b      	str	r3, [r7, #20]
      break;
 8008efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008efc:	4b13      	ldr	r3, [pc, #76]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	091b      	lsrs	r3, r3, #4
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	3301      	adds	r3, #1
 8008f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f0a:	4b10      	ldr	r3, [pc, #64]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	0a1b      	lsrs	r3, r3, #8
 8008f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	fb03 f202 	mul.w	r2, r3, r2
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f22:	4b0a      	ldr	r3, [pc, #40]	@ (8008f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	0e5b      	lsrs	r3, r3, #25
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3724      	adds	r7, #36	@ 0x24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	40021000 	.word	0x40021000
 8008f50:	0800b780 	.word	0x0800b780
 8008f54:	00f42400 	.word	0x00f42400
 8008f58:	007a1200 	.word	0x007a1200

08008f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f60:	4b03      	ldr	r3, [pc, #12]	@ (8008f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f62:	681b      	ldr	r3, [r3, #0]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20000004 	.word	0x20000004

08008f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f78:	f7ff fff0 	bl	8008f5c <HAL_RCC_GetHCLKFreq>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	4b06      	ldr	r3, [pc, #24]	@ (8008f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	4904      	ldr	r1, [pc, #16]	@ (8008f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f8a:	5ccb      	ldrb	r3, [r1, r3]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	0800b778 	.word	0x0800b778

08008fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008fa4:	f7ff ffda 	bl	8008f5c <HAL_RCC_GetHCLKFreq>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	4b06      	ldr	r3, [pc, #24]	@ (8008fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	0adb      	lsrs	r3, r3, #11
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	4904      	ldr	r1, [pc, #16]	@ (8008fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008fb6:	5ccb      	ldrb	r3, [r1, r3]
 8008fb8:	f003 031f 	and.w	r3, r3, #31
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40021000 	.word	0x40021000
 8008fc8:	0800b778 	.word	0x0800b778

08008fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8009084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008fe4:	f7ff f9b6 	bl	8008354 <HAL_PWREx_GetVoltageRange>
 8008fe8:	6178      	str	r0, [r7, #20]
 8008fea:	e014      	b.n	8009016 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fec:	4b25      	ldr	r3, [pc, #148]	@ (8009084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ff0:	4a24      	ldr	r2, [pc, #144]	@ (8009084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ff8:	4b22      	ldr	r3, [pc, #136]	@ (8009084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009004:	f7ff f9a6 	bl	8008354 <HAL_PWREx_GetVoltageRange>
 8009008:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800900a:	4b1e      	ldr	r3, [pc, #120]	@ (8009084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800900c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800900e:	4a1d      	ldr	r2, [pc, #116]	@ (8009084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009014:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800901c:	d10b      	bne.n	8009036 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b80      	cmp	r3, #128	@ 0x80
 8009022:	d919      	bls.n	8009058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2ba0      	cmp	r3, #160	@ 0xa0
 8009028:	d902      	bls.n	8009030 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800902a:	2302      	movs	r3, #2
 800902c:	613b      	str	r3, [r7, #16]
 800902e:	e013      	b.n	8009058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009030:	2301      	movs	r3, #1
 8009032:	613b      	str	r3, [r7, #16]
 8009034:	e010      	b.n	8009058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b80      	cmp	r3, #128	@ 0x80
 800903a:	d902      	bls.n	8009042 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800903c:	2303      	movs	r3, #3
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	e00a      	b.n	8009058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b80      	cmp	r3, #128	@ 0x80
 8009046:	d102      	bne.n	800904e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009048:	2302      	movs	r3, #2
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	e004      	b.n	8009058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b70      	cmp	r3, #112	@ 0x70
 8009052:	d101      	bne.n	8009058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009054:	2301      	movs	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009058:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f023 0207 	bic.w	r2, r3, #7
 8009060:	4909      	ldr	r1, [pc, #36]	@ (8009088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	4313      	orrs	r3, r2
 8009066:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009068:	4b07      	ldr	r3, [pc, #28]	@ (8009088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	429a      	cmp	r2, r3
 8009074:	d001      	beq.n	800907a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	40021000 	.word	0x40021000
 8009088:	40022000 	.word	0x40022000

0800908c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009094:	2300      	movs	r3, #0
 8009096:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009098:	2300      	movs	r3, #0
 800909a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d031      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80090b0:	d01a      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80090b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80090b6:	d814      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d009      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80090bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090c0:	d10f      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80090c2:	4b5d      	ldr	r3, [pc, #372]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	4a5c      	ldr	r2, [pc, #368]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090ce:	e00c      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3304      	adds	r3, #4
 80090d4:	2100      	movs	r1, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f9ce 	bl	8009478 <RCCEx_PLLSAI1_Config>
 80090dc:	4603      	mov	r3, r0
 80090de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090e0:	e003      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	74fb      	strb	r3, [r7, #19]
      break;
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80090e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090ea:	7cfb      	ldrb	r3, [r7, #19]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10b      	bne.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090f0:	4b51      	ldr	r3, [pc, #324]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fe:	494e      	ldr	r1, [pc, #312]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009100:	4313      	orrs	r3, r2
 8009102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009106:	e001      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009108:	7cfb      	ldrb	r3, [r7, #19]
 800910a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 809e 	beq.w	8009256 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800911a:	2300      	movs	r3, #0
 800911c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800911e:	4b46      	ldr	r3, [pc, #280]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00d      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009134:	4b40      	ldr	r3, [pc, #256]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009138:	4a3f      	ldr	r2, [pc, #252]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800913a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800913e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009140:	4b3d      	ldr	r3, [pc, #244]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800914c:	2301      	movs	r3, #1
 800914e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009150:	4b3a      	ldr	r3, [pc, #232]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a39      	ldr	r2, [pc, #228]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800915a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800915c:	f7fc fae4 	bl	8005728 <HAL_GetTick>
 8009160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009162:	e009      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009164:	f7fc fae0 	bl	8005728 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d902      	bls.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	74fb      	strb	r3, [r7, #19]
        break;
 8009176:	e005      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009178:	4b30      	ldr	r3, [pc, #192]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0ef      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009184:	7cfb      	ldrb	r3, [r7, #19]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d15a      	bne.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800918a:	4b2b      	ldr	r3, [pc, #172]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800918c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01e      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d019      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80091a6:	4b24      	ldr	r3, [pc, #144]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80091a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091b2:	4b21      	ldr	r3, [pc, #132]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80091b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b8:	4a1f      	ldr	r2, [pc, #124]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80091ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80091c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80091ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80091d2:	4a19      	ldr	r2, [pc, #100]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d016      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e4:	f7fc faa0 	bl	8005728 <HAL_GetTick>
 80091e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ea:	e00b      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091ec:	f7fc fa9c 	bl	8005728 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d902      	bls.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	74fb      	strb	r3, [r7, #19]
            break;
 8009202:	e006      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009204:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0ec      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009212:	7cfb      	ldrb	r3, [r7, #19]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10b      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009218:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800921a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800921e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009226:	4904      	ldr	r1, [pc, #16]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800922e:	e009      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009230:	7cfb      	ldrb	r3, [r7, #19]
 8009232:	74bb      	strb	r3, [r7, #18]
 8009234:	e006      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009236:	bf00      	nop
 8009238:	40021000 	.word	0x40021000
 800923c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009240:	7cfb      	ldrb	r3, [r7, #19]
 8009242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009244:	7c7b      	ldrb	r3, [r7, #17]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d105      	bne.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800924a:	4b8a      	ldr	r3, [pc, #552]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800924c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924e:	4a89      	ldr	r2, [pc, #548]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009262:	4b84      	ldr	r3, [pc, #528]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009268:	f023 0203 	bic.w	r2, r3, #3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	4980      	ldr	r1, [pc, #512]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009272:	4313      	orrs	r3, r2
 8009274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00a      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009284:	4b7b      	ldr	r3, [pc, #492]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800928a:	f023 020c 	bic.w	r2, r3, #12
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009292:	4978      	ldr	r1, [pc, #480]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009294:	4313      	orrs	r3, r2
 8009296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092a6:	4b73      	ldr	r3, [pc, #460]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80092a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	496f      	ldr	r1, [pc, #444]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80092ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ce:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d6:	4967      	ldr	r1, [pc, #412]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80092ea:	4b62      	ldr	r3, [pc, #392]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80092ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f8:	495e      	ldr	r1, [pc, #376]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800930c:	4b59      	ldr	r3, [pc, #356]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800930e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009312:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931a:	4956      	ldr	r1, [pc, #344]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800931c:	4313      	orrs	r3, r2
 800931e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800932e:	4b51      	ldr	r3, [pc, #324]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009334:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933c:	494d      	ldr	r1, [pc, #308]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800933e:	4313      	orrs	r3, r2
 8009340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d028      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009350:	4b48      	ldr	r3, [pc, #288]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935e:	4945      	ldr	r1, [pc, #276]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009360:	4313      	orrs	r3, r2
 8009362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800936e:	d106      	bne.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009370:	4b40      	ldr	r3, [pc, #256]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	4a3f      	ldr	r2, [pc, #252]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800937a:	60d3      	str	r3, [r2, #12]
 800937c:	e011      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009382:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009386:	d10c      	bne.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	2101      	movs	r1, #1
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f872 	bl	8009478 <RCCEx_PLLSAI1_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009398:	7cfb      	ldrb	r3, [r7, #19]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800939e:	7cfb      	ldrb	r3, [r7, #19]
 80093a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d028      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093ae:	4b31      	ldr	r3, [pc, #196]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80093b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093bc:	492d      	ldr	r1, [pc, #180]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093cc:	d106      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093ce:	4b29      	ldr	r3, [pc, #164]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	4a28      	ldr	r2, [pc, #160]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80093d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093d8:	60d3      	str	r3, [r2, #12]
 80093da:	e011      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093e4:	d10c      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3304      	adds	r3, #4
 80093ea:	2101      	movs	r1, #1
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 f843 	bl	8009478 <RCCEx_PLLSAI1_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093f6:	7cfb      	ldrb	r3, [r7, #19]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80093fc:	7cfb      	ldrb	r3, [r7, #19]
 80093fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d01c      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800940c:	4b19      	ldr	r3, [pc, #100]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800940e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009412:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800941a:	4916      	ldr	r1, [pc, #88]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800941c:	4313      	orrs	r3, r2
 800941e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800942a:	d10c      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3304      	adds	r3, #4
 8009430:	2102      	movs	r1, #2
 8009432:	4618      	mov	r0, r3
 8009434:	f000 f820 	bl	8009478 <RCCEx_PLLSAI1_Config>
 8009438:	4603      	mov	r3, r0
 800943a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800943c:	7cfb      	ldrb	r3, [r7, #19]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8009442:	7cfb      	ldrb	r3, [r7, #19]
 8009444:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009452:	4b08      	ldr	r3, [pc, #32]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009458:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009460:	4904      	ldr	r1, [pc, #16]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009462:	4313      	orrs	r3, r2
 8009464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009468:	7cbb      	ldrb	r3, [r7, #18]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3718      	adds	r7, #24
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	40021000 	.word	0x40021000

08009478 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009486:	4b74      	ldr	r3, [pc, #464]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d018      	beq.n	80094c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009492:	4b71      	ldr	r3, [pc, #452]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f003 0203 	and.w	r2, r3, #3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d10d      	bne.n	80094be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
       ||
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d009      	beq.n	80094be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80094aa:	4b6b      	ldr	r3, [pc, #428]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	091b      	lsrs	r3, r3, #4
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
       ||
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d047      	beq.n	800954e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	73fb      	strb	r3, [r7, #15]
 80094c2:	e044      	b.n	800954e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d018      	beq.n	80094fe <RCCEx_PLLSAI1_Config+0x86>
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d825      	bhi.n	800951c <RCCEx_PLLSAI1_Config+0xa4>
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d002      	beq.n	80094da <RCCEx_PLLSAI1_Config+0x62>
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d009      	beq.n	80094ec <RCCEx_PLLSAI1_Config+0x74>
 80094d8:	e020      	b.n	800951c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80094da:	4b5f      	ldr	r3, [pc, #380]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d11d      	bne.n	8009522 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094ea:	e01a      	b.n	8009522 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80094ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d116      	bne.n	8009526 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094fc:	e013      	b.n	8009526 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80094fe:	4b56      	ldr	r3, [pc, #344]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10f      	bne.n	800952a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800950a:	4b53      	ldr	r3, [pc, #332]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d109      	bne.n	800952a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800951a:	e006      	b.n	800952a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
      break;
 8009520:	e004      	b.n	800952c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800952a:	bf00      	nop
    }

    if(status == HAL_OK)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10d      	bne.n	800954e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009532:	4b49      	ldr	r3, [pc, #292]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6819      	ldr	r1, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	3b01      	subs	r3, #1
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	430b      	orrs	r3, r1
 8009548:	4943      	ldr	r1, [pc, #268]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 800954a:	4313      	orrs	r3, r2
 800954c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d17c      	bne.n	800964e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009554:	4b40      	ldr	r3, [pc, #256]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a3f      	ldr	r2, [pc, #252]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 800955a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800955e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009560:	f7fc f8e2 	bl	8005728 <HAL_GetTick>
 8009564:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009566:	e009      	b.n	800957c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009568:	f7fc f8de 	bl	8005728 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b02      	cmp	r3, #2
 8009574:	d902      	bls.n	800957c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	73fb      	strb	r3, [r7, #15]
        break;
 800957a:	e005      	b.n	8009588 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800957c:	4b36      	ldr	r3, [pc, #216]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1ef      	bne.n	8009568 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d15f      	bne.n	800964e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d110      	bne.n	80095b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009594:	4b30      	ldr	r3, [pc, #192]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800959c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6892      	ldr	r2, [r2, #8]
 80095a4:	0211      	lsls	r1, r2, #8
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	68d2      	ldr	r2, [r2, #12]
 80095aa:	06d2      	lsls	r2, r2, #27
 80095ac:	430a      	orrs	r2, r1
 80095ae:	492a      	ldr	r1, [pc, #168]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	610b      	str	r3, [r1, #16]
 80095b4:	e027      	b.n	8009606 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d112      	bne.n	80095e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095bc:	4b26      	ldr	r3, [pc, #152]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80095c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6892      	ldr	r2, [r2, #8]
 80095cc:	0211      	lsls	r1, r2, #8
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6912      	ldr	r2, [r2, #16]
 80095d2:	0852      	lsrs	r2, r2, #1
 80095d4:	3a01      	subs	r2, #1
 80095d6:	0552      	lsls	r2, r2, #21
 80095d8:	430a      	orrs	r2, r1
 80095da:	491f      	ldr	r1, [pc, #124]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	610b      	str	r3, [r1, #16]
 80095e0:	e011      	b.n	8009606 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80095ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6892      	ldr	r2, [r2, #8]
 80095f2:	0211      	lsls	r1, r2, #8
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6952      	ldr	r2, [r2, #20]
 80095f8:	0852      	lsrs	r2, r2, #1
 80095fa:	3a01      	subs	r2, #1
 80095fc:	0652      	lsls	r2, r2, #25
 80095fe:	430a      	orrs	r2, r1
 8009600:	4915      	ldr	r1, [pc, #84]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009602:	4313      	orrs	r3, r2
 8009604:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009606:	4b14      	ldr	r3, [pc, #80]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a13      	ldr	r2, [pc, #76]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 800960c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009610:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009612:	f7fc f889 	bl	8005728 <HAL_GetTick>
 8009616:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009618:	e009      	b.n	800962e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800961a:	f7fc f885 	bl	8005728 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d902      	bls.n	800962e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	73fb      	strb	r3, [r7, #15]
          break;
 800962c:	e005      	b.n	800963a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800962e:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0ef      	beq.n	800961a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d106      	bne.n	800964e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009640:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009642:	691a      	ldr	r2, [r3, #16]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	4903      	ldr	r1, [pc, #12]	@ (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 800964a:	4313      	orrs	r3, r2
 800964c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40021000 	.word	0x40021000

0800965c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e095      	b.n	800979a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009672:	2b00      	cmp	r3, #0
 8009674:	d108      	bne.n	8009688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800967e:	d009      	beq.n	8009694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	61da      	str	r2, [r3, #28]
 8009686:	e005      	b.n	8009694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d106      	bne.n	80096b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7fb fde6 	bl	8005280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096d4:	d902      	bls.n	80096dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e002      	b.n	80096e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80096dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80096ea:	d007      	beq.n	80096fc <HAL_SPI_Init+0xa0>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096f4:	d002      	beq.n	80096fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	431a      	orrs	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	431a      	orrs	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009734:	431a      	orrs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800973e:	ea42 0103 	orr.w	r1, r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009746:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	f003 0204 	and.w	r2, r3, #4
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	431a      	orrs	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009778:	ea42 0103 	orr.w	r1, r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b08a      	sub	sp, #40	@ 0x28
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097b0:	2301      	movs	r3, #1
 80097b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097b4:	f7fb ffb8 	bl	8005728 <HAL_GetTick>
 80097b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80097c8:	887b      	ldrh	r3, [r7, #2]
 80097ca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80097cc:	887b      	ldrh	r3, [r7, #2]
 80097ce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80097d0:	7ffb      	ldrb	r3, [r7, #31]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d00c      	beq.n	80097f0 <HAL_SPI_TransmitReceive+0x4e>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097dc:	d106      	bne.n	80097ec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <HAL_SPI_TransmitReceive+0x4a>
 80097e6:	7ffb      	ldrb	r3, [r7, #31]
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d001      	beq.n	80097f0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80097ec:	2302      	movs	r3, #2
 80097ee:	e1f3      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <HAL_SPI_TransmitReceive+0x60>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <HAL_SPI_TransmitReceive+0x60>
 80097fc:	887b      	ldrh	r3, [r7, #2]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e1e8      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800980c:	2b01      	cmp	r3, #1
 800980e:	d101      	bne.n	8009814 <HAL_SPI_TransmitReceive+0x72>
 8009810:	2302      	movs	r3, #2
 8009812:	e1e1      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x436>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b04      	cmp	r3, #4
 8009826:	d003      	beq.n	8009830 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2205      	movs	r2, #5
 800982c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	887a      	ldrh	r2, [r7, #2]
 8009840:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	887a      	ldrh	r2, [r7, #2]
 8009848:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	887a      	ldrh	r2, [r7, #2]
 8009856:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	887a      	ldrh	r2, [r7, #2]
 800985c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009872:	d802      	bhi.n	800987a <HAL_SPI_TransmitReceive+0xd8>
 8009874:	8abb      	ldrh	r3, [r7, #20]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d908      	bls.n	800988c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009888:	605a      	str	r2, [r3, #4]
 800988a:	e007      	b.n	800989c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800989a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a6:	2b40      	cmp	r3, #64	@ 0x40
 80098a8:	d007      	beq.n	80098ba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80098c2:	f240 8083 	bls.w	80099cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <HAL_SPI_TransmitReceive+0x132>
 80098ce:	8afb      	ldrh	r3, [r7, #22]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d16f      	bne.n	80099b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d8:	881a      	ldrh	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e4:	1c9a      	adds	r2, r3, #2
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098f8:	e05c      	b.n	80099b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b02      	cmp	r3, #2
 8009906:	d11b      	bne.n	8009940 <HAL_SPI_TransmitReceive+0x19e>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d016      	beq.n	8009940 <HAL_SPI_TransmitReceive+0x19e>
 8009912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009914:	2b01      	cmp	r3, #1
 8009916:	d113      	bne.n	8009940 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991c:	881a      	ldrh	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009928:	1c9a      	adds	r2, r3, #2
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009932:	b29b      	uxth	r3, r3
 8009934:	3b01      	subs	r3, #1
 8009936:	b29a      	uxth	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b01      	cmp	r3, #1
 800994c:	d11c      	bne.n	8009988 <HAL_SPI_TransmitReceive+0x1e6>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d016      	beq.n	8009988 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009964:	b292      	uxth	r2, r2
 8009966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996c:	1c9a      	adds	r2, r3, #2
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009978:	b29b      	uxth	r3, r3
 800997a:	3b01      	subs	r3, #1
 800997c:	b29a      	uxth	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009984:	2301      	movs	r3, #1
 8009986:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009988:	f7fb fece 	bl	8005728 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009994:	429a      	cmp	r2, r3
 8009996:	d80d      	bhi.n	80099b4 <HAL_SPI_TransmitReceive+0x212>
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800999e:	d009      	beq.n	80099b4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e111      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d19d      	bne.n	80098fa <HAL_SPI_TransmitReceive+0x158>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d197      	bne.n	80098fa <HAL_SPI_TransmitReceive+0x158>
 80099ca:	e0e5      	b.n	8009b98 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_SPI_TransmitReceive+0x23a>
 80099d4:	8afb      	ldrh	r3, [r7, #22]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	f040 80d1 	bne.w	8009b7e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d912      	bls.n	8009a0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ea:	881a      	ldrh	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f6:	1c9a      	adds	r2, r3, #2
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b02      	subs	r3, #2
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009a0a:	e0b8      	b.n	8009b7e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	330c      	adds	r3, #12
 8009a16:	7812      	ldrb	r2, [r2, #0]
 8009a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a32:	e0a4      	b.n	8009b7e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d134      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x30a>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d02f      	beq.n	8009aac <HAL_SPI_TransmitReceive+0x30a>
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d12c      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d912      	bls.n	8009a82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a60:	881a      	ldrh	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a6c:	1c9a      	adds	r2, r3, #2
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	3b02      	subs	r3, #2
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009a80:	e012      	b.n	8009aa8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	330c      	adds	r3, #12
 8009a8c:	7812      	ldrb	r2, [r2, #0]
 8009a8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d148      	bne.n	8009b4c <HAL_SPI_TransmitReceive+0x3aa>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d042      	beq.n	8009b4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d923      	bls.n	8009b1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009adc:	b292      	uxth	r2, r2
 8009ade:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae4:	1c9a      	adds	r2, r3, #2
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	3b02      	subs	r3, #2
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d81f      	bhi.n	8009b48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009b16:	605a      	str	r2, [r3, #4]
 8009b18:	e016      	b.n	8009b48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f103 020c 	add.w	r2, r3, #12
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b4c:	f7fb fdec 	bl	8005728 <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d803      	bhi.n	8009b64 <HAL_SPI_TransmitReceive+0x3c2>
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b62:	d102      	bne.n	8009b6a <HAL_SPI_TransmitReceive+0x3c8>
 8009b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e02c      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f47f af55 	bne.w	8009a34 <HAL_SPI_TransmitReceive+0x292>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f47f af4e 	bne.w	8009a34 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b98:	6a3a      	ldr	r2, [r7, #32]
 8009b9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f93d 	bl	8009e1c <SPI_EndRxTxTransaction>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d008      	beq.n	8009bba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2220      	movs	r2, #32
 8009bac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e00e      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e000      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
  }
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3728      	adds	r7, #40	@ 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	4613      	mov	r3, r2
 8009bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009bf0:	f7fb fd9a 	bl	8005728 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c00:	f7fb fd92 	bl	8005728 <HAL_GetTick>
 8009c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c06:	4b39      	ldr	r3, [pc, #228]	@ (8009cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	015b      	lsls	r3, r3, #5
 8009c0c:	0d1b      	lsrs	r3, r3, #20
 8009c0e:	69fa      	ldr	r2, [r7, #28]
 8009c10:	fb02 f303 	mul.w	r3, r2, r3
 8009c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c16:	e054      	b.n	8009cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c1e:	d050      	beq.n	8009cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c20:	f7fb fd82 	bl	8005728 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d902      	bls.n	8009c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d13d      	bne.n	8009cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c4e:	d111      	bne.n	8009c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c58:	d004      	beq.n	8009c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c62:	d107      	bne.n	8009c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c7c:	d10f      	bne.n	8009c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e017      	b.n	8009ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	bf0c      	ite	eq
 8009cd2:	2301      	moveq	r3, #1
 8009cd4:	2300      	movne	r3, #0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	461a      	mov	r2, r3
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d19b      	bne.n	8009c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000004 	.word	0x20000004

08009cf0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08a      	sub	sp, #40	@ 0x28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009d02:	f7fb fd11 	bl	8005728 <HAL_GetTick>
 8009d06:	4602      	mov	r2, r0
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	4413      	add	r3, r2
 8009d10:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009d12:	f7fb fd09 	bl	8005728 <HAL_GetTick>
 8009d16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	330c      	adds	r3, #12
 8009d1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009d20:	4b3d      	ldr	r3, [pc, #244]	@ (8009e18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	00da      	lsls	r2, r3, #3
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	0d1b      	lsrs	r3, r3, #20
 8009d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
 8009d36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009d38:	e060      	b.n	8009dfc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d40:	d107      	bne.n	8009d52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d58:	d050      	beq.n	8009dfc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d5a:	f7fb fce5 	bl	8005728 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d902      	bls.n	8009d70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d13d      	bne.n	8009dec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d88:	d111      	bne.n	8009dae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d92:	d004      	beq.n	8009d9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d9c:	d107      	bne.n	8009dae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009db6:	d10f      	bne.n	8009dd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e010      	b.n	8009e0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4013      	ands	r3, r2
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d196      	bne.n	8009d3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3728      	adds	r7, #40	@ 0x28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20000004 	.word	0x20000004

08009e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff ff5b 	bl	8009cf0 <SPI_WaitFifoStateUntilTimeout>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d007      	beq.n	8009e50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e44:	f043 0220 	orr.w	r2, r3, #32
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e027      	b.n	8009ea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2200      	movs	r2, #0
 8009e58:	2180      	movs	r1, #128	@ 0x80
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff fec0 	bl	8009be0 <SPI_WaitFlagStateUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d007      	beq.n	8009e76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e6a:	f043 0220 	orr.w	r2, r3, #32
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e014      	b.n	8009ea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff ff34 	bl	8009cf0 <SPI_WaitFifoStateUntilTimeout>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e92:	f043 0220 	orr.w	r2, r3, #32
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e000      	b.n	8009ea0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e040      	b.n	8009f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7fb faf0 	bl	80054b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2224      	movs	r2, #36	@ 0x24
 8009ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa54 	bl	800a39c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f825 	bl	8009f44 <UART_SetConfig>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d101      	bne.n	8009f04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e01b      	b.n	8009f3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689a      	ldr	r2, [r3, #8]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fad3 	bl	800a4e0 <UART_CheckIdleState>
 8009f3a:	4603      	mov	r3, r0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f48:	b08a      	sub	sp, #40	@ 0x28
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4bb4      	ldr	r3, [pc, #720]	@ (800a244 <UART_SetConfig+0x300>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4aa9      	ldr	r2, [pc, #676]	@ (800a248 <UART_SetConfig+0x304>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d004      	beq.n	8009fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fac:	4313      	orrs	r3, r2
 8009fae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4aa0      	ldr	r2, [pc, #640]	@ (800a24c <UART_SetConfig+0x308>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d126      	bne.n	800a01c <UART_SetConfig+0xd8>
 8009fce:	4ba0      	ldr	r3, [pc, #640]	@ (800a250 <UART_SetConfig+0x30c>)
 8009fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d81b      	bhi.n	800a014 <UART_SetConfig+0xd0>
 8009fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe4 <UART_SetConfig+0xa0>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	08009ff5 	.word	0x08009ff5
 8009fe8:	0800a005 	.word	0x0800a005
 8009fec:	08009ffd 	.word	0x08009ffd
 8009ff0:	0800a00d 	.word	0x0800a00d
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ffa:	e080      	b.n	800a0fe <UART_SetConfig+0x1ba>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a002:	e07c      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a004:	2304      	movs	r3, #4
 800a006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a00a:	e078      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a00c:	2308      	movs	r3, #8
 800a00e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a012:	e074      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a014:	2310      	movs	r3, #16
 800a016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a01a:	e070      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a8c      	ldr	r2, [pc, #560]	@ (800a254 <UART_SetConfig+0x310>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d138      	bne.n	800a098 <UART_SetConfig+0x154>
 800a026:	4b8a      	ldr	r3, [pc, #552]	@ (800a250 <UART_SetConfig+0x30c>)
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a02c:	f003 030c 	and.w	r3, r3, #12
 800a030:	2b0c      	cmp	r3, #12
 800a032:	d82d      	bhi.n	800a090 <UART_SetConfig+0x14c>
 800a034:	a201      	add	r2, pc, #4	@ (adr r2, 800a03c <UART_SetConfig+0xf8>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a071 	.word	0x0800a071
 800a040:	0800a091 	.word	0x0800a091
 800a044:	0800a091 	.word	0x0800a091
 800a048:	0800a091 	.word	0x0800a091
 800a04c:	0800a081 	.word	0x0800a081
 800a050:	0800a091 	.word	0x0800a091
 800a054:	0800a091 	.word	0x0800a091
 800a058:	0800a091 	.word	0x0800a091
 800a05c:	0800a079 	.word	0x0800a079
 800a060:	0800a091 	.word	0x0800a091
 800a064:	0800a091 	.word	0x0800a091
 800a068:	0800a091 	.word	0x0800a091
 800a06c:	0800a089 	.word	0x0800a089
 800a070:	2300      	movs	r3, #0
 800a072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a076:	e042      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a078:	2302      	movs	r3, #2
 800a07a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a07e:	e03e      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a080:	2304      	movs	r3, #4
 800a082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a086:	e03a      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a088:	2308      	movs	r3, #8
 800a08a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a08e:	e036      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a090:	2310      	movs	r3, #16
 800a092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a096:	e032      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a6a      	ldr	r2, [pc, #424]	@ (800a248 <UART_SetConfig+0x304>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d12a      	bne.n	800a0f8 <UART_SetConfig+0x1b4>
 800a0a2:	4b6b      	ldr	r3, [pc, #428]	@ (800a250 <UART_SetConfig+0x30c>)
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a0ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0b0:	d01a      	beq.n	800a0e8 <UART_SetConfig+0x1a4>
 800a0b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0b6:	d81b      	bhi.n	800a0f0 <UART_SetConfig+0x1ac>
 800a0b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0bc:	d00c      	beq.n	800a0d8 <UART_SetConfig+0x194>
 800a0be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0c2:	d815      	bhi.n	800a0f0 <UART_SetConfig+0x1ac>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <UART_SetConfig+0x18c>
 800a0c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0cc:	d008      	beq.n	800a0e0 <UART_SetConfig+0x19c>
 800a0ce:	e00f      	b.n	800a0f0 <UART_SetConfig+0x1ac>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0d6:	e012      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0de:	e00e      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0e6:	e00a      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0ee:	e006      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0f6:	e002      	b.n	800a0fe <UART_SetConfig+0x1ba>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a51      	ldr	r2, [pc, #324]	@ (800a248 <UART_SetConfig+0x304>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d17a      	bne.n	800a1fe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d824      	bhi.n	800a15a <UART_SetConfig+0x216>
 800a110:	a201      	add	r2, pc, #4	@ (adr r2, 800a118 <UART_SetConfig+0x1d4>)
 800a112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a116:	bf00      	nop
 800a118:	0800a13d 	.word	0x0800a13d
 800a11c:	0800a15b 	.word	0x0800a15b
 800a120:	0800a145 	.word	0x0800a145
 800a124:	0800a15b 	.word	0x0800a15b
 800a128:	0800a14b 	.word	0x0800a14b
 800a12c:	0800a15b 	.word	0x0800a15b
 800a130:	0800a15b 	.word	0x0800a15b
 800a134:	0800a15b 	.word	0x0800a15b
 800a138:	0800a153 	.word	0x0800a153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a13c:	f7fe ff1a 	bl	8008f74 <HAL_RCC_GetPCLK1Freq>
 800a140:	61f8      	str	r0, [r7, #28]
        break;
 800a142:	e010      	b.n	800a166 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a144:	4b44      	ldr	r3, [pc, #272]	@ (800a258 <UART_SetConfig+0x314>)
 800a146:	61fb      	str	r3, [r7, #28]
        break;
 800a148:	e00d      	b.n	800a166 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a14a:	f7fe fe7b 	bl	8008e44 <HAL_RCC_GetSysClockFreq>
 800a14e:	61f8      	str	r0, [r7, #28]
        break;
 800a150:	e009      	b.n	800a166 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a156:	61fb      	str	r3, [r7, #28]
        break;
 800a158:	e005      	b.n	800a166 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 8107 	beq.w	800a37c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	4613      	mov	r3, r2
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	4413      	add	r3, r2
 800a178:	69fa      	ldr	r2, [r7, #28]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d305      	bcc.n	800a18a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	429a      	cmp	r2, r3
 800a188:	d903      	bls.n	800a192 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a190:	e0f4      	b.n	800a37c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	2200      	movs	r2, #0
 800a196:	461c      	mov	r4, r3
 800a198:	4615      	mov	r5, r2
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	f04f 0300 	mov.w	r3, #0
 800a1a2:	022b      	lsls	r3, r5, #8
 800a1a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a1a8:	0222      	lsls	r2, r4, #8
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	6849      	ldr	r1, [r1, #4]
 800a1ae:	0849      	lsrs	r1, r1, #1
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	4688      	mov	r8, r1
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	eb12 0a08 	adds.w	sl, r2, r8
 800a1ba:	eb43 0b09 	adc.w	fp, r3, r9
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	f7f6 fd02 	bl	8000bd8 <__aeabi_uldivmod>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4613      	mov	r3, r2
 800a1da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1e2:	d308      	bcc.n	800a1f6 <UART_SetConfig+0x2b2>
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ea:	d204      	bcs.n	800a1f6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	60da      	str	r2, [r3, #12]
 800a1f4:	e0c2      	b.n	800a37c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a1fc:	e0be      	b.n	800a37c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a206:	d16a      	bne.n	800a2de <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	d834      	bhi.n	800a27a <UART_SetConfig+0x336>
 800a210:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <UART_SetConfig+0x2d4>)
 800a212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a216:	bf00      	nop
 800a218:	0800a23d 	.word	0x0800a23d
 800a21c:	0800a25d 	.word	0x0800a25d
 800a220:	0800a265 	.word	0x0800a265
 800a224:	0800a27b 	.word	0x0800a27b
 800a228:	0800a26b 	.word	0x0800a26b
 800a22c:	0800a27b 	.word	0x0800a27b
 800a230:	0800a27b 	.word	0x0800a27b
 800a234:	0800a27b 	.word	0x0800a27b
 800a238:	0800a273 	.word	0x0800a273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a23c:	f7fe fe9a 	bl	8008f74 <HAL_RCC_GetPCLK1Freq>
 800a240:	61f8      	str	r0, [r7, #28]
        break;
 800a242:	e020      	b.n	800a286 <UART_SetConfig+0x342>
 800a244:	efff69f3 	.word	0xefff69f3
 800a248:	40008000 	.word	0x40008000
 800a24c:	40013800 	.word	0x40013800
 800a250:	40021000 	.word	0x40021000
 800a254:	40004400 	.word	0x40004400
 800a258:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a25c:	f7fe fea0 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
 800a260:	61f8      	str	r0, [r7, #28]
        break;
 800a262:	e010      	b.n	800a286 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a264:	4b4c      	ldr	r3, [pc, #304]	@ (800a398 <UART_SetConfig+0x454>)
 800a266:	61fb      	str	r3, [r7, #28]
        break;
 800a268:	e00d      	b.n	800a286 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a26a:	f7fe fdeb 	bl	8008e44 <HAL_RCC_GetSysClockFreq>
 800a26e:	61f8      	str	r0, [r7, #28]
        break;
 800a270:	e009      	b.n	800a286 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a276:	61fb      	str	r3, [r7, #28]
        break;
 800a278:	e005      	b.n	800a286 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d077      	beq.n	800a37c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	005a      	lsls	r2, r3, #1
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	085b      	lsrs	r3, r3, #1
 800a296:	441a      	add	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d916      	bls.n	800a2d6 <UART_SetConfig+0x392>
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ae:	d212      	bcs.n	800a2d6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	f023 030f 	bic.w	r3, r3, #15
 800a2b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	085b      	lsrs	r3, r3, #1
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f003 0307 	and.w	r3, r3, #7
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	8afb      	ldrh	r3, [r7, #22]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	8afa      	ldrh	r2, [r7, #22]
 800a2d2:	60da      	str	r2, [r3, #12]
 800a2d4:	e052      	b.n	800a37c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a2dc:	e04e      	b.n	800a37c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d827      	bhi.n	800a336 <UART_SetConfig+0x3f2>
 800a2e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ec <UART_SetConfig+0x3a8>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a319 	.word	0x0800a319
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	0800a337 	.word	0x0800a337
 800a2fc:	0800a327 	.word	0x0800a327
 800a300:	0800a337 	.word	0x0800a337
 800a304:	0800a337 	.word	0x0800a337
 800a308:	0800a337 	.word	0x0800a337
 800a30c:	0800a32f 	.word	0x0800a32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a310:	f7fe fe30 	bl	8008f74 <HAL_RCC_GetPCLK1Freq>
 800a314:	61f8      	str	r0, [r7, #28]
        break;
 800a316:	e014      	b.n	800a342 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a318:	f7fe fe42 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
 800a31c:	61f8      	str	r0, [r7, #28]
        break;
 800a31e:	e010      	b.n	800a342 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a320:	4b1d      	ldr	r3, [pc, #116]	@ (800a398 <UART_SetConfig+0x454>)
 800a322:	61fb      	str	r3, [r7, #28]
        break;
 800a324:	e00d      	b.n	800a342 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a326:	f7fe fd8d 	bl	8008e44 <HAL_RCC_GetSysClockFreq>
 800a32a:	61f8      	str	r0, [r7, #28]
        break;
 800a32c:	e009      	b.n	800a342 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a332:	61fb      	str	r3, [r7, #28]
        break;
 800a334:	e005      	b.n	800a342 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a340:	bf00      	nop
    }

    if (pclk != 0U)
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d019      	beq.n	800a37c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	085a      	lsrs	r2, r3, #1
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	441a      	add	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	2b0f      	cmp	r3, #15
 800a360:	d909      	bls.n	800a376 <UART_SetConfig+0x432>
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a368:	d205      	bcs.n	800a376 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60da      	str	r2, [r3, #12]
 800a374:	e002      	b.n	800a37c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a388:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3728      	adds	r7, #40	@ 0x28
 800a390:	46bd      	mov	sp, r7
 800a392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a396:	bf00      	nop
 800a398:	00f42400 	.word	0x00f42400

0800a39c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a8:	f003 0308 	and.w	r3, r3, #8
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00a      	beq.n	800a3c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00a      	beq.n	800a3e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ec:	f003 0302 	and.w	r3, r3, #2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00a      	beq.n	800a40a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40e:	f003 0304 	and.w	r3, r3, #4
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a430:	f003 0310 	and.w	r3, r3, #16
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01a      	beq.n	800a4b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a49a:	d10a      	bne.n	800a4b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	605a      	str	r2, [r3, #4]
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b098      	sub	sp, #96	@ 0x60
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4f0:	f7fb f91a 	bl	8005728 <HAL_GetTick>
 800a4f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b08      	cmp	r3, #8
 800a502:	d12e      	bne.n	800a562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a50c:	2200      	movs	r2, #0
 800a50e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f88c 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d021      	beq.n	800a562 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a526:	e853 3f00 	ldrex	r3, [r3]
 800a52a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a532:	653b      	str	r3, [r7, #80]	@ 0x50
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	461a      	mov	r2, r3
 800a53a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a53c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a53e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a544:	e841 2300 	strex	r3, r2, [r1]
 800a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1e6      	bne.n	800a51e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2220      	movs	r2, #32
 800a554:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e062      	b.n	800a628 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d149      	bne.n	800a604 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a570:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a578:	2200      	movs	r2, #0
 800a57a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f856 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d03c      	beq.n	800a604 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	e853 3f00 	ldrex	r3, [r3]
 800a596:	623b      	str	r3, [r7, #32]
   return(result);
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a59e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b0:	e841 2300 	strex	r3, r2, [r1]
 800a5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1e6      	bne.n	800a58a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	e853 3f00 	ldrex	r3, [r3]
 800a5ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 0301 	bic.w	r3, r3, #1
 800a5d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3308      	adds	r3, #8
 800a5da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5dc:	61fa      	str	r2, [r7, #28]
 800a5de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	69b9      	ldr	r1, [r7, #24]
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e5      	bne.n	800a5bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e011      	b.n	800a628 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3758      	adds	r7, #88	@ 0x58
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	4613      	mov	r3, r2
 800a63e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a640:	e04f      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a648:	d04b      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a64a:	f7fb f86d 	bl	8005728 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	429a      	cmp	r2, r3
 800a658:	d302      	bcc.n	800a660 <UART_WaitOnFlagUntilTimeout+0x30>
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e04e      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d037      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b80      	cmp	r3, #128	@ 0x80
 800a676:	d034      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b40      	cmp	r3, #64	@ 0x40
 800a67c:	d031      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d110      	bne.n	800a6ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2208      	movs	r2, #8
 800a692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f838 	bl	800a70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2208      	movs	r2, #8
 800a69e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e029      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6bc:	d111      	bne.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f81e 	bl	800a70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e00f      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	bf0c      	ite	eq
 800a6f2:	2301      	moveq	r3, #1
 800a6f4:	2300      	movne	r3, #0
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d0a0      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b095      	sub	sp, #84	@ 0x54
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a730:	643b      	str	r3, [r7, #64]	@ 0x40
 800a732:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a736:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a738:	e841 2300 	strex	r3, r2, [r1]
 800a73c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e6      	bne.n	800a712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3308      	adds	r3, #8
 800a74a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	e853 3f00 	ldrex	r3, [r3]
 800a752:	61fb      	str	r3, [r7, #28]
   return(result);
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3308      	adds	r3, #8
 800a762:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a764:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a766:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a76a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a76c:	e841 2300 	strex	r3, r2, [r1]
 800a770:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e5      	bne.n	800a744 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d118      	bne.n	800a7b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f023 0310 	bic.w	r3, r3, #16
 800a794:	647b      	str	r3, [r7, #68]	@ 0x44
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	6979      	ldr	r1, [r7, #20]
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e6      	bne.n	800a780 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a7c6:	bf00      	nop
 800a7c8:	3754      	adds	r7, #84	@ 0x54
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <memset>:
 800a7d2:	4402      	add	r2, r0
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d100      	bne.n	800a7dc <memset+0xa>
 800a7da:	4770      	bx	lr
 800a7dc:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e0:	e7f9      	b.n	800a7d6 <memset+0x4>
	...

0800a7e4 <__errno>:
 800a7e4:	4b01      	ldr	r3, [pc, #4]	@ (800a7ec <__errno+0x8>)
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	20000010 	.word	0x20000010

0800a7f0 <__libc_init_array>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	4d0d      	ldr	r5, [pc, #52]	@ (800a828 <__libc_init_array+0x38>)
 800a7f4:	4c0d      	ldr	r4, [pc, #52]	@ (800a82c <__libc_init_array+0x3c>)
 800a7f6:	1b64      	subs	r4, r4, r5
 800a7f8:	10a4      	asrs	r4, r4, #2
 800a7fa:	2600      	movs	r6, #0
 800a7fc:	42a6      	cmp	r6, r4
 800a7fe:	d109      	bne.n	800a814 <__libc_init_array+0x24>
 800a800:	4d0b      	ldr	r5, [pc, #44]	@ (800a830 <__libc_init_array+0x40>)
 800a802:	4c0c      	ldr	r4, [pc, #48]	@ (800a834 <__libc_init_array+0x44>)
 800a804:	f000 ffa2 	bl	800b74c <_init>
 800a808:	1b64      	subs	r4, r4, r5
 800a80a:	10a4      	asrs	r4, r4, #2
 800a80c:	2600      	movs	r6, #0
 800a80e:	42a6      	cmp	r6, r4
 800a810:	d105      	bne.n	800a81e <__libc_init_array+0x2e>
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	f855 3b04 	ldr.w	r3, [r5], #4
 800a818:	4798      	blx	r3
 800a81a:	3601      	adds	r6, #1
 800a81c:	e7ee      	b.n	800a7fc <__libc_init_array+0xc>
 800a81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a822:	4798      	blx	r3
 800a824:	3601      	adds	r6, #1
 800a826:	e7f2      	b.n	800a80e <__libc_init_array+0x1e>
 800a828:	0800b7f8 	.word	0x0800b7f8
 800a82c:	0800b7f8 	.word	0x0800b7f8
 800a830:	0800b7f8 	.word	0x0800b7f8
 800a834:	0800b7fc 	.word	0x0800b7fc

0800a838 <pow>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	ed2d 8b02 	vpush	{d8}
 800a83e:	eeb0 8a40 	vmov.f32	s16, s0
 800a842:	eef0 8a60 	vmov.f32	s17, s1
 800a846:	ec55 4b11 	vmov	r4, r5, d1
 800a84a:	f000 f975 	bl	800ab38 <__ieee754_pow>
 800a84e:	4622      	mov	r2, r4
 800a850:	462b      	mov	r3, r5
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	ec57 6b10 	vmov	r6, r7, d0
 800a85a:	f7f6 f90f 	bl	8000a7c <__aeabi_dcmpun>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d13b      	bne.n	800a8da <pow+0xa2>
 800a862:	ec51 0b18 	vmov	r0, r1, d8
 800a866:	2200      	movs	r2, #0
 800a868:	2300      	movs	r3, #0
 800a86a:	f7f6 f8d5 	bl	8000a18 <__aeabi_dcmpeq>
 800a86e:	b1b8      	cbz	r0, 800a8a0 <pow+0x68>
 800a870:	2200      	movs	r2, #0
 800a872:	2300      	movs	r3, #0
 800a874:	4620      	mov	r0, r4
 800a876:	4629      	mov	r1, r5
 800a878:	f7f6 f8ce 	bl	8000a18 <__aeabi_dcmpeq>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d146      	bne.n	800a90e <pow+0xd6>
 800a880:	ec45 4b10 	vmov	d0, r4, r5
 800a884:	f000 f874 	bl	800a970 <finite>
 800a888:	b338      	cbz	r0, 800a8da <pow+0xa2>
 800a88a:	2200      	movs	r2, #0
 800a88c:	2300      	movs	r3, #0
 800a88e:	4620      	mov	r0, r4
 800a890:	4629      	mov	r1, r5
 800a892:	f7f6 f8cb 	bl	8000a2c <__aeabi_dcmplt>
 800a896:	b300      	cbz	r0, 800a8da <pow+0xa2>
 800a898:	f7ff ffa4 	bl	800a7e4 <__errno>
 800a89c:	2322      	movs	r3, #34	@ 0x22
 800a89e:	e01b      	b.n	800a8d8 <pow+0xa0>
 800a8a0:	ec47 6b10 	vmov	d0, r6, r7
 800a8a4:	f000 f864 	bl	800a970 <finite>
 800a8a8:	b9e0      	cbnz	r0, 800a8e4 <pow+0xac>
 800a8aa:	eeb0 0a48 	vmov.f32	s0, s16
 800a8ae:	eef0 0a68 	vmov.f32	s1, s17
 800a8b2:	f000 f85d 	bl	800a970 <finite>
 800a8b6:	b1a8      	cbz	r0, 800a8e4 <pow+0xac>
 800a8b8:	ec45 4b10 	vmov	d0, r4, r5
 800a8bc:	f000 f858 	bl	800a970 <finite>
 800a8c0:	b180      	cbz	r0, 800a8e4 <pow+0xac>
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	f7f6 f8d7 	bl	8000a7c <__aeabi_dcmpun>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d0e2      	beq.n	800a898 <pow+0x60>
 800a8d2:	f7ff ff87 	bl	800a7e4 <__errno>
 800a8d6:	2321      	movs	r3, #33	@ 0x21
 800a8d8:	6003      	str	r3, [r0, #0]
 800a8da:	ecbd 8b02 	vpop	{d8}
 800a8de:	ec47 6b10 	vmov	d0, r6, r7
 800a8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f894 	bl	8000a18 <__aeabi_dcmpeq>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d0f2      	beq.n	800a8da <pow+0xa2>
 800a8f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a8f8:	eef0 0a68 	vmov.f32	s1, s17
 800a8fc:	f000 f838 	bl	800a970 <finite>
 800a900:	2800      	cmp	r0, #0
 800a902:	d0ea      	beq.n	800a8da <pow+0xa2>
 800a904:	ec45 4b10 	vmov	d0, r4, r5
 800a908:	f000 f832 	bl	800a970 <finite>
 800a90c:	e7c3      	b.n	800a896 <pow+0x5e>
 800a90e:	4f01      	ldr	r7, [pc, #4]	@ (800a914 <pow+0xdc>)
 800a910:	2600      	movs	r6, #0
 800a912:	e7e2      	b.n	800a8da <pow+0xa2>
 800a914:	3ff00000 	.word	0x3ff00000

0800a918 <sqrt>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	ed2d 8b02 	vpush	{d8}
 800a91e:	ec55 4b10 	vmov	r4, r5, d0
 800a922:	f000 f831 	bl	800a988 <__ieee754_sqrt>
 800a926:	4622      	mov	r2, r4
 800a928:	462b      	mov	r3, r5
 800a92a:	4620      	mov	r0, r4
 800a92c:	4629      	mov	r1, r5
 800a92e:	eeb0 8a40 	vmov.f32	s16, s0
 800a932:	eef0 8a60 	vmov.f32	s17, s1
 800a936:	f7f6 f8a1 	bl	8000a7c <__aeabi_dcmpun>
 800a93a:	b990      	cbnz	r0, 800a962 <sqrt+0x4a>
 800a93c:	2200      	movs	r2, #0
 800a93e:	2300      	movs	r3, #0
 800a940:	4620      	mov	r0, r4
 800a942:	4629      	mov	r1, r5
 800a944:	f7f6 f872 	bl	8000a2c <__aeabi_dcmplt>
 800a948:	b158      	cbz	r0, 800a962 <sqrt+0x4a>
 800a94a:	f7ff ff4b 	bl	800a7e4 <__errno>
 800a94e:	2321      	movs	r3, #33	@ 0x21
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	2200      	movs	r2, #0
 800a954:	2300      	movs	r3, #0
 800a956:	4610      	mov	r0, r2
 800a958:	4619      	mov	r1, r3
 800a95a:	f7f5 ff1f 	bl	800079c <__aeabi_ddiv>
 800a95e:	ec41 0b18 	vmov	d8, r0, r1
 800a962:	eeb0 0a48 	vmov.f32	s0, s16
 800a966:	eef0 0a68 	vmov.f32	s1, s17
 800a96a:	ecbd 8b02 	vpop	{d8}
 800a96e:	bd38      	pop	{r3, r4, r5, pc}

0800a970 <finite>:
 800a970:	b082      	sub	sp, #8
 800a972:	ed8d 0b00 	vstr	d0, [sp]
 800a976:	9801      	ldr	r0, [sp, #4]
 800a978:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a97c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a980:	0fc0      	lsrs	r0, r0, #31
 800a982:	b002      	add	sp, #8
 800a984:	4770      	bx	lr
	...

0800a988 <__ieee754_sqrt>:
 800a988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4a66      	ldr	r2, [pc, #408]	@ (800ab28 <__ieee754_sqrt+0x1a0>)
 800a98e:	ec55 4b10 	vmov	r4, r5, d0
 800a992:	43aa      	bics	r2, r5
 800a994:	462b      	mov	r3, r5
 800a996:	4621      	mov	r1, r4
 800a998:	d110      	bne.n	800a9bc <__ieee754_sqrt+0x34>
 800a99a:	4622      	mov	r2, r4
 800a99c:	4620      	mov	r0, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f5 fdd2 	bl	8000548 <__aeabi_dmul>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	f7f5 fc16 	bl	80001dc <__adddf3>
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	ec45 4b10 	vmov	d0, r4, r5
 800a9b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	2d00      	cmp	r5, #0
 800a9be:	dc0e      	bgt.n	800a9de <__ieee754_sqrt+0x56>
 800a9c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a9c4:	4322      	orrs	r2, r4
 800a9c6:	d0f5      	beq.n	800a9b4 <__ieee754_sqrt+0x2c>
 800a9c8:	b19d      	cbz	r5, 800a9f2 <__ieee754_sqrt+0x6a>
 800a9ca:	4622      	mov	r2, r4
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	f7f5 fc02 	bl	80001d8 <__aeabi_dsub>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	f7f5 fee0 	bl	800079c <__aeabi_ddiv>
 800a9dc:	e7e8      	b.n	800a9b0 <__ieee754_sqrt+0x28>
 800a9de:	152a      	asrs	r2, r5, #20
 800a9e0:	d115      	bne.n	800aa0e <__ieee754_sqrt+0x86>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e009      	b.n	800a9fa <__ieee754_sqrt+0x72>
 800a9e6:	0acb      	lsrs	r3, r1, #11
 800a9e8:	3a15      	subs	r2, #21
 800a9ea:	0549      	lsls	r1, r1, #21
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0fa      	beq.n	800a9e6 <__ieee754_sqrt+0x5e>
 800a9f0:	e7f7      	b.n	800a9e2 <__ieee754_sqrt+0x5a>
 800a9f2:	462a      	mov	r2, r5
 800a9f4:	e7fa      	b.n	800a9ec <__ieee754_sqrt+0x64>
 800a9f6:	005b      	lsls	r3, r3, #1
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	02dc      	lsls	r4, r3, #11
 800a9fc:	d5fb      	bpl.n	800a9f6 <__ieee754_sqrt+0x6e>
 800a9fe:	1e44      	subs	r4, r0, #1
 800aa00:	1b12      	subs	r2, r2, r4
 800aa02:	f1c0 0420 	rsb	r4, r0, #32
 800aa06:	fa21 f404 	lsr.w	r4, r1, r4
 800aa0a:	4323      	orrs	r3, r4
 800aa0c:	4081      	lsls	r1, r0
 800aa0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa12:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800aa16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa1a:	07d2      	lsls	r2, r2, #31
 800aa1c:	bf5c      	itt	pl
 800aa1e:	005b      	lslpl	r3, r3, #1
 800aa20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aa24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa28:	bf58      	it	pl
 800aa2a:	0049      	lslpl	r1, r1, #1
 800aa2c:	2600      	movs	r6, #0
 800aa2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aa32:	107f      	asrs	r7, r7, #1
 800aa34:	0049      	lsls	r1, r1, #1
 800aa36:	2016      	movs	r0, #22
 800aa38:	4632      	mov	r2, r6
 800aa3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aa3e:	1915      	adds	r5, r2, r4
 800aa40:	429d      	cmp	r5, r3
 800aa42:	bfde      	ittt	le
 800aa44:	192a      	addle	r2, r5, r4
 800aa46:	1b5b      	suble	r3, r3, r5
 800aa48:	1936      	addle	r6, r6, r4
 800aa4a:	0fcd      	lsrs	r5, r1, #31
 800aa4c:	3801      	subs	r0, #1
 800aa4e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800aa52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aa5a:	d1f0      	bne.n	800aa3e <__ieee754_sqrt+0xb6>
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	2420      	movs	r4, #32
 800aa60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800aa64:	4293      	cmp	r3, r2
 800aa66:	eb0c 0e00 	add.w	lr, ip, r0
 800aa6a:	dc02      	bgt.n	800aa72 <__ieee754_sqrt+0xea>
 800aa6c:	d113      	bne.n	800aa96 <__ieee754_sqrt+0x10e>
 800aa6e:	458e      	cmp	lr, r1
 800aa70:	d811      	bhi.n	800aa96 <__ieee754_sqrt+0x10e>
 800aa72:	f1be 0f00 	cmp.w	lr, #0
 800aa76:	eb0e 000c 	add.w	r0, lr, ip
 800aa7a:	da3f      	bge.n	800aafc <__ieee754_sqrt+0x174>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	db3d      	blt.n	800aafc <__ieee754_sqrt+0x174>
 800aa80:	f102 0801 	add.w	r8, r2, #1
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	458e      	cmp	lr, r1
 800aa88:	bf88      	it	hi
 800aa8a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800aa8e:	eba1 010e 	sub.w	r1, r1, lr
 800aa92:	4465      	add	r5, ip
 800aa94:	4642      	mov	r2, r8
 800aa96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aa9a:	3c01      	subs	r4, #1
 800aa9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aaa0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aaa4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aaa8:	d1dc      	bne.n	800aa64 <__ieee754_sqrt+0xdc>
 800aaaa:	4319      	orrs	r1, r3
 800aaac:	d01b      	beq.n	800aae6 <__ieee754_sqrt+0x15e>
 800aaae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800ab2c <__ieee754_sqrt+0x1a4>
 800aab2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800ab30 <__ieee754_sqrt+0x1a8>
 800aab6:	e9da 0100 	ldrd	r0, r1, [sl]
 800aaba:	e9db 2300 	ldrd	r2, r3, [fp]
 800aabe:	f7f5 fb8b 	bl	80001d8 <__aeabi_dsub>
 800aac2:	e9da 8900 	ldrd	r8, r9, [sl]
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 ffb7 	bl	8000a40 <__aeabi_dcmple>
 800aad2:	b140      	cbz	r0, 800aae6 <__ieee754_sqrt+0x15e>
 800aad4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800aad8:	e9da 0100 	ldrd	r0, r1, [sl]
 800aadc:	e9db 2300 	ldrd	r2, r3, [fp]
 800aae0:	d10e      	bne.n	800ab00 <__ieee754_sqrt+0x178>
 800aae2:	3601      	adds	r6, #1
 800aae4:	4625      	mov	r5, r4
 800aae6:	1073      	asrs	r3, r6, #1
 800aae8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800aaec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800aaf0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800aaf4:	086b      	lsrs	r3, r5, #1
 800aaf6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800aafa:	e759      	b.n	800a9b0 <__ieee754_sqrt+0x28>
 800aafc:	4690      	mov	r8, r2
 800aafe:	e7c1      	b.n	800aa84 <__ieee754_sqrt+0xfc>
 800ab00:	f7f5 fb6c 	bl	80001dc <__adddf3>
 800ab04:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	4649      	mov	r1, r9
 800ab10:	f7f5 ff8c 	bl	8000a2c <__aeabi_dcmplt>
 800ab14:	b120      	cbz	r0, 800ab20 <__ieee754_sqrt+0x198>
 800ab16:	1cab      	adds	r3, r5, #2
 800ab18:	bf08      	it	eq
 800ab1a:	3601      	addeq	r6, #1
 800ab1c:	3502      	adds	r5, #2
 800ab1e:	e7e2      	b.n	800aae6 <__ieee754_sqrt+0x15e>
 800ab20:	1c6b      	adds	r3, r5, #1
 800ab22:	f023 0501 	bic.w	r5, r3, #1
 800ab26:	e7de      	b.n	800aae6 <__ieee754_sqrt+0x15e>
 800ab28:	7ff00000 	.word	0x7ff00000
 800ab2c:	0800b7b8 	.word	0x0800b7b8
 800ab30:	0800b7b0 	.word	0x0800b7b0
 800ab34:	00000000 	.word	0x00000000

0800ab38 <__ieee754_pow>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	b091      	sub	sp, #68	@ 0x44
 800ab3e:	ed8d 1b00 	vstr	d1, [sp]
 800ab42:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ab46:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ab4a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ab4e:	ec57 6b10 	vmov	r6, r7, d0
 800ab52:	d113      	bne.n	800ab7c <__ieee754_pow+0x44>
 800ab54:	19b3      	adds	r3, r6, r6
 800ab56:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ab5a:	4152      	adcs	r2, r2
 800ab5c:	4298      	cmp	r0, r3
 800ab5e:	4b9a      	ldr	r3, [pc, #616]	@ (800adc8 <__ieee754_pow+0x290>)
 800ab60:	4193      	sbcs	r3, r2
 800ab62:	f080 84ee 	bcs.w	800b542 <__ieee754_pow+0xa0a>
 800ab66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	f7f5 fb35 	bl	80001dc <__adddf3>
 800ab72:	ec41 0b10 	vmov	d0, r0, r1
 800ab76:	b011      	add	sp, #68	@ 0x44
 800ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7c:	4a93      	ldr	r2, [pc, #588]	@ (800adcc <__ieee754_pow+0x294>)
 800ab7e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800ab82:	4295      	cmp	r5, r2
 800ab84:	46b8      	mov	r8, r7
 800ab86:	4633      	mov	r3, r6
 800ab88:	d80a      	bhi.n	800aba0 <__ieee754_pow+0x68>
 800ab8a:	d104      	bne.n	800ab96 <__ieee754_pow+0x5e>
 800ab8c:	2e00      	cmp	r6, #0
 800ab8e:	d1ea      	bne.n	800ab66 <__ieee754_pow+0x2e>
 800ab90:	45aa      	cmp	sl, r5
 800ab92:	d8e8      	bhi.n	800ab66 <__ieee754_pow+0x2e>
 800ab94:	e001      	b.n	800ab9a <__ieee754_pow+0x62>
 800ab96:	4592      	cmp	sl, r2
 800ab98:	d802      	bhi.n	800aba0 <__ieee754_pow+0x68>
 800ab9a:	4592      	cmp	sl, r2
 800ab9c:	d10f      	bne.n	800abbe <__ieee754_pow+0x86>
 800ab9e:	b171      	cbz	r1, 800abbe <__ieee754_pow+0x86>
 800aba0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800aba4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800aba8:	ea58 0803 	orrs.w	r8, r8, r3
 800abac:	d1db      	bne.n	800ab66 <__ieee754_pow+0x2e>
 800abae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abb2:	18db      	adds	r3, r3, r3
 800abb4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800abb8:	4152      	adcs	r2, r2
 800abba:	4598      	cmp	r8, r3
 800abbc:	e7cf      	b.n	800ab5e <__ieee754_pow+0x26>
 800abbe:	f1b8 0f00 	cmp.w	r8, #0
 800abc2:	46ab      	mov	fp, r5
 800abc4:	da43      	bge.n	800ac4e <__ieee754_pow+0x116>
 800abc6:	4a82      	ldr	r2, [pc, #520]	@ (800add0 <__ieee754_pow+0x298>)
 800abc8:	4592      	cmp	sl, r2
 800abca:	d856      	bhi.n	800ac7a <__ieee754_pow+0x142>
 800abcc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800abd0:	4592      	cmp	sl, r2
 800abd2:	f240 84c5 	bls.w	800b560 <__ieee754_pow+0xa28>
 800abd6:	ea4f 522a 	mov.w	r2, sl, asr #20
 800abda:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800abde:	2a14      	cmp	r2, #20
 800abe0:	dd18      	ble.n	800ac14 <__ieee754_pow+0xdc>
 800abe2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800abe6:	fa21 f402 	lsr.w	r4, r1, r2
 800abea:	fa04 f202 	lsl.w	r2, r4, r2
 800abee:	428a      	cmp	r2, r1
 800abf0:	f040 84b6 	bne.w	800b560 <__ieee754_pow+0xa28>
 800abf4:	f004 0401 	and.w	r4, r4, #1
 800abf8:	f1c4 0402 	rsb	r4, r4, #2
 800abfc:	2900      	cmp	r1, #0
 800abfe:	d159      	bne.n	800acb4 <__ieee754_pow+0x17c>
 800ac00:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ac04:	d148      	bne.n	800ac98 <__ieee754_pow+0x160>
 800ac06:	4632      	mov	r2, r6
 800ac08:	463b      	mov	r3, r7
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	f7f5 fc9b 	bl	8000548 <__aeabi_dmul>
 800ac12:	e7ae      	b.n	800ab72 <__ieee754_pow+0x3a>
 800ac14:	2900      	cmp	r1, #0
 800ac16:	d14c      	bne.n	800acb2 <__ieee754_pow+0x17a>
 800ac18:	f1c2 0214 	rsb	r2, r2, #20
 800ac1c:	fa4a f402 	asr.w	r4, sl, r2
 800ac20:	fa04 f202 	lsl.w	r2, r4, r2
 800ac24:	4552      	cmp	r2, sl
 800ac26:	f040 8498 	bne.w	800b55a <__ieee754_pow+0xa22>
 800ac2a:	f004 0401 	and.w	r4, r4, #1
 800ac2e:	f1c4 0402 	rsb	r4, r4, #2
 800ac32:	4a68      	ldr	r2, [pc, #416]	@ (800add4 <__ieee754_pow+0x29c>)
 800ac34:	4592      	cmp	sl, r2
 800ac36:	d1e3      	bne.n	800ac00 <__ieee754_pow+0xc8>
 800ac38:	f1b9 0f00 	cmp.w	r9, #0
 800ac3c:	f280 8489 	bge.w	800b552 <__ieee754_pow+0xa1a>
 800ac40:	4964      	ldr	r1, [pc, #400]	@ (800add4 <__ieee754_pow+0x29c>)
 800ac42:	4632      	mov	r2, r6
 800ac44:	463b      	mov	r3, r7
 800ac46:	2000      	movs	r0, #0
 800ac48:	f7f5 fda8 	bl	800079c <__aeabi_ddiv>
 800ac4c:	e791      	b.n	800ab72 <__ieee754_pow+0x3a>
 800ac4e:	2400      	movs	r4, #0
 800ac50:	bb81      	cbnz	r1, 800acb4 <__ieee754_pow+0x17c>
 800ac52:	4a5e      	ldr	r2, [pc, #376]	@ (800adcc <__ieee754_pow+0x294>)
 800ac54:	4592      	cmp	sl, r2
 800ac56:	d1ec      	bne.n	800ac32 <__ieee754_pow+0xfa>
 800ac58:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800ac5c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800ac60:	431a      	orrs	r2, r3
 800ac62:	f000 846e 	beq.w	800b542 <__ieee754_pow+0xa0a>
 800ac66:	4b5c      	ldr	r3, [pc, #368]	@ (800add8 <__ieee754_pow+0x2a0>)
 800ac68:	429d      	cmp	r5, r3
 800ac6a:	d908      	bls.n	800ac7e <__ieee754_pow+0x146>
 800ac6c:	f1b9 0f00 	cmp.w	r9, #0
 800ac70:	f280 846b 	bge.w	800b54a <__ieee754_pow+0xa12>
 800ac74:	2000      	movs	r0, #0
 800ac76:	2100      	movs	r1, #0
 800ac78:	e77b      	b.n	800ab72 <__ieee754_pow+0x3a>
 800ac7a:	2402      	movs	r4, #2
 800ac7c:	e7e8      	b.n	800ac50 <__ieee754_pow+0x118>
 800ac7e:	f1b9 0f00 	cmp.w	r9, #0
 800ac82:	f04f 0000 	mov.w	r0, #0
 800ac86:	f04f 0100 	mov.w	r1, #0
 800ac8a:	f6bf af72 	bge.w	800ab72 <__ieee754_pow+0x3a>
 800ac8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ac92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ac96:	e76c      	b.n	800ab72 <__ieee754_pow+0x3a>
 800ac98:	4a50      	ldr	r2, [pc, #320]	@ (800addc <__ieee754_pow+0x2a4>)
 800ac9a:	4591      	cmp	r9, r2
 800ac9c:	d10a      	bne.n	800acb4 <__ieee754_pow+0x17c>
 800ac9e:	f1b8 0f00 	cmp.w	r8, #0
 800aca2:	db07      	blt.n	800acb4 <__ieee754_pow+0x17c>
 800aca4:	ec47 6b10 	vmov	d0, r6, r7
 800aca8:	b011      	add	sp, #68	@ 0x44
 800acaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acae:	f7ff be6b 	b.w	800a988 <__ieee754_sqrt>
 800acb2:	2400      	movs	r4, #0
 800acb4:	ec47 6b10 	vmov	d0, r6, r7
 800acb8:	9302      	str	r3, [sp, #8]
 800acba:	f000 fcc5 	bl	800b648 <fabs>
 800acbe:	9b02      	ldr	r3, [sp, #8]
 800acc0:	ec51 0b10 	vmov	r0, r1, d0
 800acc4:	bb43      	cbnz	r3, 800ad18 <__ieee754_pow+0x1e0>
 800acc6:	4b43      	ldr	r3, [pc, #268]	@ (800add4 <__ieee754_pow+0x29c>)
 800acc8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800accc:	429a      	cmp	r2, r3
 800acce:	d000      	beq.n	800acd2 <__ieee754_pow+0x19a>
 800acd0:	bb15      	cbnz	r5, 800ad18 <__ieee754_pow+0x1e0>
 800acd2:	f1b9 0f00 	cmp.w	r9, #0
 800acd6:	da05      	bge.n	800ace4 <__ieee754_pow+0x1ac>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	2000      	movs	r0, #0
 800acde:	493d      	ldr	r1, [pc, #244]	@ (800add4 <__ieee754_pow+0x29c>)
 800ace0:	f7f5 fd5c 	bl	800079c <__aeabi_ddiv>
 800ace4:	f1b8 0f00 	cmp.w	r8, #0
 800ace8:	f6bf af43 	bge.w	800ab72 <__ieee754_pow+0x3a>
 800acec:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800acf0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800acf4:	4325      	orrs	r5, r4
 800acf6:	d108      	bne.n	800ad0a <__ieee754_pow+0x1d2>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4610      	mov	r0, r2
 800acfe:	4619      	mov	r1, r3
 800ad00:	f7f5 fa6a 	bl	80001d8 <__aeabi_dsub>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	e79e      	b.n	800ac48 <__ieee754_pow+0x110>
 800ad0a:	2c01      	cmp	r4, #1
 800ad0c:	f47f af31 	bne.w	800ab72 <__ieee754_pow+0x3a>
 800ad10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad14:	4619      	mov	r1, r3
 800ad16:	e72c      	b.n	800ab72 <__ieee754_pow+0x3a>
 800ad18:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	ea53 0204 	orrs.w	r2, r3, r4
 800ad22:	d102      	bne.n	800ad2a <__ieee754_pow+0x1f2>
 800ad24:	4632      	mov	r2, r6
 800ad26:	463b      	mov	r3, r7
 800ad28:	e7e8      	b.n	800acfc <__ieee754_pow+0x1c4>
 800ad2a:	3c01      	subs	r4, #1
 800ad2c:	431c      	orrs	r4, r3
 800ad2e:	d016      	beq.n	800ad5e <__ieee754_pow+0x226>
 800ad30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800adb8 <__ieee754_pow+0x280>
 800ad34:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ad38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad3c:	f240 8110 	bls.w	800af60 <__ieee754_pow+0x428>
 800ad40:	4b27      	ldr	r3, [pc, #156]	@ (800ade0 <__ieee754_pow+0x2a8>)
 800ad42:	459a      	cmp	sl, r3
 800ad44:	4b24      	ldr	r3, [pc, #144]	@ (800add8 <__ieee754_pow+0x2a0>)
 800ad46:	d916      	bls.n	800ad76 <__ieee754_pow+0x23e>
 800ad48:	429d      	cmp	r5, r3
 800ad4a:	d80b      	bhi.n	800ad64 <__ieee754_pow+0x22c>
 800ad4c:	f1b9 0f00 	cmp.w	r9, #0
 800ad50:	da0b      	bge.n	800ad6a <__ieee754_pow+0x232>
 800ad52:	2000      	movs	r0, #0
 800ad54:	b011      	add	sp, #68	@ 0x44
 800ad56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5a:	f000 bc6d 	b.w	800b638 <__math_oflow>
 800ad5e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800adc0 <__ieee754_pow+0x288>
 800ad62:	e7e7      	b.n	800ad34 <__ieee754_pow+0x1fc>
 800ad64:	f1b9 0f00 	cmp.w	r9, #0
 800ad68:	dcf3      	bgt.n	800ad52 <__ieee754_pow+0x21a>
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	b011      	add	sp, #68	@ 0x44
 800ad6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad72:	f000 bc59 	b.w	800b628 <__math_uflow>
 800ad76:	429d      	cmp	r5, r3
 800ad78:	d20c      	bcs.n	800ad94 <__ieee754_pow+0x25c>
 800ad7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2300      	movs	r3, #0
 800ad82:	f7f5 fe53 	bl	8000a2c <__aeabi_dcmplt>
 800ad86:	3800      	subs	r0, #0
 800ad88:	bf18      	it	ne
 800ad8a:	2001      	movne	r0, #1
 800ad8c:	f1b9 0f00 	cmp.w	r9, #0
 800ad90:	daec      	bge.n	800ad6c <__ieee754_pow+0x234>
 800ad92:	e7df      	b.n	800ad54 <__ieee754_pow+0x21c>
 800ad94:	4b0f      	ldr	r3, [pc, #60]	@ (800add4 <__ieee754_pow+0x29c>)
 800ad96:	429d      	cmp	r5, r3
 800ad98:	f04f 0200 	mov.w	r2, #0
 800ad9c:	d922      	bls.n	800ade4 <__ieee754_pow+0x2ac>
 800ad9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada2:	2300      	movs	r3, #0
 800ada4:	f7f5 fe42 	bl	8000a2c <__aeabi_dcmplt>
 800ada8:	3800      	subs	r0, #0
 800adaa:	bf18      	it	ne
 800adac:	2001      	movne	r0, #1
 800adae:	f1b9 0f00 	cmp.w	r9, #0
 800adb2:	dccf      	bgt.n	800ad54 <__ieee754_pow+0x21c>
 800adb4:	e7da      	b.n	800ad6c <__ieee754_pow+0x234>
 800adb6:	bf00      	nop
 800adb8:	00000000 	.word	0x00000000
 800adbc:	3ff00000 	.word	0x3ff00000
 800adc0:	00000000 	.word	0x00000000
 800adc4:	bff00000 	.word	0xbff00000
 800adc8:	fff00000 	.word	0xfff00000
 800adcc:	7ff00000 	.word	0x7ff00000
 800add0:	433fffff 	.word	0x433fffff
 800add4:	3ff00000 	.word	0x3ff00000
 800add8:	3fefffff 	.word	0x3fefffff
 800addc:	3fe00000 	.word	0x3fe00000
 800ade0:	43f00000 	.word	0x43f00000
 800ade4:	4b5a      	ldr	r3, [pc, #360]	@ (800af50 <__ieee754_pow+0x418>)
 800ade6:	f7f5 f9f7 	bl	80001d8 <__aeabi_dsub>
 800adea:	a351      	add	r3, pc, #324	@ (adr r3, 800af30 <__ieee754_pow+0x3f8>)
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	f7f5 fba8 	bl	8000548 <__aeabi_dmul>
 800adf8:	a34f      	add	r3, pc, #316	@ (adr r3, 800af38 <__ieee754_pow+0x400>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	4606      	mov	r6, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	4620      	mov	r0, r4
 800ae04:	4629      	mov	r1, r5
 800ae06:	f7f5 fb9f 	bl	8000548 <__aeabi_dmul>
 800ae0a:	4b52      	ldr	r3, [pc, #328]	@ (800af54 <__ieee754_pow+0x41c>)
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	468b      	mov	fp, r1
 800ae10:	2200      	movs	r2, #0
 800ae12:	4620      	mov	r0, r4
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7f5 fb97 	bl	8000548 <__aeabi_dmul>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	a148      	add	r1, pc, #288	@ (adr r1, 800af40 <__ieee754_pow+0x408>)
 800ae20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae24:	f7f5 f9d8 	bl	80001d8 <__aeabi_dsub>
 800ae28:	4622      	mov	r2, r4
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	f7f5 fb8c 	bl	8000548 <__aeabi_dmul>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	2000      	movs	r0, #0
 800ae36:	4948      	ldr	r1, [pc, #288]	@ (800af58 <__ieee754_pow+0x420>)
 800ae38:	f7f5 f9ce 	bl	80001d8 <__aeabi_dsub>
 800ae3c:	4622      	mov	r2, r4
 800ae3e:	4680      	mov	r8, r0
 800ae40:	4689      	mov	r9, r1
 800ae42:	462b      	mov	r3, r5
 800ae44:	4620      	mov	r0, r4
 800ae46:	4629      	mov	r1, r5
 800ae48:	f7f5 fb7e 	bl	8000548 <__aeabi_dmul>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	4640      	mov	r0, r8
 800ae52:	4649      	mov	r1, r9
 800ae54:	f7f5 fb78 	bl	8000548 <__aeabi_dmul>
 800ae58:	a33b      	add	r3, pc, #236	@ (adr r3, 800af48 <__ieee754_pow+0x410>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fb73 	bl	8000548 <__aeabi_dmul>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4650      	mov	r0, sl
 800ae68:	4659      	mov	r1, fp
 800ae6a:	f7f5 f9b5 	bl	80001d8 <__aeabi_dsub>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	4680      	mov	r8, r0
 800ae74:	4689      	mov	r9, r1
 800ae76:	4630      	mov	r0, r6
 800ae78:	4639      	mov	r1, r7
 800ae7a:	f7f5 f9af 	bl	80001dc <__adddf3>
 800ae7e:	2400      	movs	r4, #0
 800ae80:	4632      	mov	r2, r6
 800ae82:	463b      	mov	r3, r7
 800ae84:	4620      	mov	r0, r4
 800ae86:	460d      	mov	r5, r1
 800ae88:	f7f5 f9a6 	bl	80001d8 <__aeabi_dsub>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4640      	mov	r0, r8
 800ae92:	4649      	mov	r1, r9
 800ae94:	f7f5 f9a0 	bl	80001d8 <__aeabi_dsub>
 800ae98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aea0:	2300      	movs	r3, #0
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460f      	mov	r7, r1
 800aeac:	465b      	mov	r3, fp
 800aeae:	4652      	mov	r2, sl
 800aeb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeb4:	f7f5 f990 	bl	80001d8 <__aeabi_dsub>
 800aeb8:	4622      	mov	r2, r4
 800aeba:	462b      	mov	r3, r5
 800aebc:	f7f5 fb44 	bl	8000548 <__aeabi_dmul>
 800aec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aec4:	4680      	mov	r8, r0
 800aec6:	4689      	mov	r9, r1
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	f7f5 fb3c 	bl	8000548 <__aeabi_dmul>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4640      	mov	r0, r8
 800aed6:	4649      	mov	r1, r9
 800aed8:	f7f5 f980 	bl	80001dc <__adddf3>
 800aedc:	465b      	mov	r3, fp
 800aede:	4606      	mov	r6, r0
 800aee0:	460f      	mov	r7, r1
 800aee2:	4652      	mov	r2, sl
 800aee4:	4620      	mov	r0, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	f7f5 fb2e 	bl	8000548 <__aeabi_dmul>
 800aeec:	460b      	mov	r3, r1
 800aeee:	4602      	mov	r2, r0
 800aef0:	4680      	mov	r8, r0
 800aef2:	4689      	mov	r9, r1
 800aef4:	4630      	mov	r0, r6
 800aef6:	4639      	mov	r1, r7
 800aef8:	f7f5 f970 	bl	80001dc <__adddf3>
 800aefc:	4b17      	ldr	r3, [pc, #92]	@ (800af5c <__ieee754_pow+0x424>)
 800aefe:	4299      	cmp	r1, r3
 800af00:	4604      	mov	r4, r0
 800af02:	460d      	mov	r5, r1
 800af04:	468b      	mov	fp, r1
 800af06:	f340 820b 	ble.w	800b320 <__ieee754_pow+0x7e8>
 800af0a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800af0e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800af12:	4303      	orrs	r3, r0
 800af14:	f000 81ea 	beq.w	800b2ec <__ieee754_pow+0x7b4>
 800af18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1c:	2200      	movs	r2, #0
 800af1e:	2300      	movs	r3, #0
 800af20:	f7f5 fd84 	bl	8000a2c <__aeabi_dcmplt>
 800af24:	3800      	subs	r0, #0
 800af26:	bf18      	it	ne
 800af28:	2001      	movne	r0, #1
 800af2a:	e713      	b.n	800ad54 <__ieee754_pow+0x21c>
 800af2c:	f3af 8000 	nop.w
 800af30:	60000000 	.word	0x60000000
 800af34:	3ff71547 	.word	0x3ff71547
 800af38:	f85ddf44 	.word	0xf85ddf44
 800af3c:	3e54ae0b 	.word	0x3e54ae0b
 800af40:	55555555 	.word	0x55555555
 800af44:	3fd55555 	.word	0x3fd55555
 800af48:	652b82fe 	.word	0x652b82fe
 800af4c:	3ff71547 	.word	0x3ff71547
 800af50:	3ff00000 	.word	0x3ff00000
 800af54:	3fd00000 	.word	0x3fd00000
 800af58:	3fe00000 	.word	0x3fe00000
 800af5c:	408fffff 	.word	0x408fffff
 800af60:	4bd5      	ldr	r3, [pc, #852]	@ (800b2b8 <__ieee754_pow+0x780>)
 800af62:	ea08 0303 	and.w	r3, r8, r3
 800af66:	2200      	movs	r2, #0
 800af68:	b92b      	cbnz	r3, 800af76 <__ieee754_pow+0x43e>
 800af6a:	4bd4      	ldr	r3, [pc, #848]	@ (800b2bc <__ieee754_pow+0x784>)
 800af6c:	f7f5 faec 	bl	8000548 <__aeabi_dmul>
 800af70:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800af74:	468b      	mov	fp, r1
 800af76:	ea4f 532b 	mov.w	r3, fp, asr #20
 800af7a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800af7e:	4413      	add	r3, r2
 800af80:	930a      	str	r3, [sp, #40]	@ 0x28
 800af82:	4bcf      	ldr	r3, [pc, #828]	@ (800b2c0 <__ieee754_pow+0x788>)
 800af84:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800af88:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800af8c:	459b      	cmp	fp, r3
 800af8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800af92:	dd08      	ble.n	800afa6 <__ieee754_pow+0x46e>
 800af94:	4bcb      	ldr	r3, [pc, #812]	@ (800b2c4 <__ieee754_pow+0x78c>)
 800af96:	459b      	cmp	fp, r3
 800af98:	f340 81a5 	ble.w	800b2e6 <__ieee754_pow+0x7ae>
 800af9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af9e:	3301      	adds	r3, #1
 800afa0:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800afa6:	f04f 0a00 	mov.w	sl, #0
 800afaa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800afae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afb0:	4bc5      	ldr	r3, [pc, #788]	@ (800b2c8 <__ieee754_pow+0x790>)
 800afb2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800afb6:	ed93 7b00 	vldr	d7, [r3]
 800afba:	4629      	mov	r1, r5
 800afbc:	ec53 2b17 	vmov	r2, r3, d7
 800afc0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800afc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afc8:	f7f5 f906 	bl	80001d8 <__aeabi_dsub>
 800afcc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800afd0:	4606      	mov	r6, r0
 800afd2:	460f      	mov	r7, r1
 800afd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afd8:	f7f5 f900 	bl	80001dc <__adddf3>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	2000      	movs	r0, #0
 800afe2:	49ba      	ldr	r1, [pc, #744]	@ (800b2cc <__ieee754_pow+0x794>)
 800afe4:	f7f5 fbda 	bl	800079c <__aeabi_ddiv>
 800afe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 faa8 	bl	8000548 <__aeabi_dmul>
 800aff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800affc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b000:	106d      	asrs	r5, r5, #1
 800b002:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b006:	f04f 0b00 	mov.w	fp, #0
 800b00a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b00e:	4661      	mov	r1, ip
 800b010:	2200      	movs	r2, #0
 800b012:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b016:	4658      	mov	r0, fp
 800b018:	46e1      	mov	r9, ip
 800b01a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b01e:	4614      	mov	r4, r2
 800b020:	461d      	mov	r5, r3
 800b022:	f7f5 fa91 	bl	8000548 <__aeabi_dmul>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 f8d3 	bl	80001d8 <__aeabi_dsub>
 800b032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	4620      	mov	r0, r4
 800b03c:	4629      	mov	r1, r5
 800b03e:	f7f5 f8cb 	bl	80001d8 <__aeabi_dsub>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b04a:	f7f5 f8c5 	bl	80001d8 <__aeabi_dsub>
 800b04e:	465a      	mov	r2, fp
 800b050:	464b      	mov	r3, r9
 800b052:	f7f5 fa79 	bl	8000548 <__aeabi_dmul>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f8bb 	bl	80001d8 <__aeabi_dsub>
 800b062:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b066:	f7f5 fa6f 	bl	8000548 <__aeabi_dmul>
 800b06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b06e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b072:	4610      	mov	r0, r2
 800b074:	4619      	mov	r1, r3
 800b076:	f7f5 fa67 	bl	8000548 <__aeabi_dmul>
 800b07a:	a37d      	add	r3, pc, #500	@ (adr r3, 800b270 <__ieee754_pow+0x738>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	f7f5 fa60 	bl	8000548 <__aeabi_dmul>
 800b088:	a37b      	add	r3, pc, #492	@ (adr r3, 800b278 <__ieee754_pow+0x740>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 f8a5 	bl	80001dc <__adddf3>
 800b092:	4622      	mov	r2, r4
 800b094:	462b      	mov	r3, r5
 800b096:	f7f5 fa57 	bl	8000548 <__aeabi_dmul>
 800b09a:	a379      	add	r3, pc, #484	@ (adr r3, 800b280 <__ieee754_pow+0x748>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 f89c 	bl	80001dc <__adddf3>
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	f7f5 fa4e 	bl	8000548 <__aeabi_dmul>
 800b0ac:	a376      	add	r3, pc, #472	@ (adr r3, 800b288 <__ieee754_pow+0x750>)
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f7f5 f893 	bl	80001dc <__adddf3>
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	f7f5 fa45 	bl	8000548 <__aeabi_dmul>
 800b0be:	a374      	add	r3, pc, #464	@ (adr r3, 800b290 <__ieee754_pow+0x758>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 f88a 	bl	80001dc <__adddf3>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 fa3c 	bl	8000548 <__aeabi_dmul>
 800b0d0:	a371      	add	r3, pc, #452	@ (adr r3, 800b298 <__ieee754_pow+0x760>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 f881 	bl	80001dc <__adddf3>
 800b0da:	4622      	mov	r2, r4
 800b0dc:	4606      	mov	r6, r0
 800b0de:	460f      	mov	r7, r1
 800b0e0:	462b      	mov	r3, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f7f5 fa2f 	bl	8000548 <__aeabi_dmul>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f7f5 fa29 	bl	8000548 <__aeabi_dmul>
 800b0f6:	465a      	mov	r2, fp
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b102:	f7f5 f86b 	bl	80001dc <__adddf3>
 800b106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b10a:	f7f5 fa1d 	bl	8000548 <__aeabi_dmul>
 800b10e:	4622      	mov	r2, r4
 800b110:	462b      	mov	r3, r5
 800b112:	f7f5 f863 	bl	80001dc <__adddf3>
 800b116:	465a      	mov	r2, fp
 800b118:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b11c:	464b      	mov	r3, r9
 800b11e:	4658      	mov	r0, fp
 800b120:	4649      	mov	r1, r9
 800b122:	f7f5 fa11 	bl	8000548 <__aeabi_dmul>
 800b126:	4b6a      	ldr	r3, [pc, #424]	@ (800b2d0 <__ieee754_pow+0x798>)
 800b128:	2200      	movs	r2, #0
 800b12a:	4606      	mov	r6, r0
 800b12c:	460f      	mov	r7, r1
 800b12e:	f7f5 f855 	bl	80001dc <__adddf3>
 800b132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b136:	f7f5 f851 	bl	80001dc <__adddf3>
 800b13a:	46d8      	mov	r8, fp
 800b13c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b140:	460d      	mov	r5, r1
 800b142:	465a      	mov	r2, fp
 800b144:	460b      	mov	r3, r1
 800b146:	4640      	mov	r0, r8
 800b148:	4649      	mov	r1, r9
 800b14a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b14e:	f7f5 f9fb 	bl	8000548 <__aeabi_dmul>
 800b152:	465c      	mov	r4, fp
 800b154:	4680      	mov	r8, r0
 800b156:	4689      	mov	r9, r1
 800b158:	4b5d      	ldr	r3, [pc, #372]	@ (800b2d0 <__ieee754_pow+0x798>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 f83a 	bl	80001d8 <__aeabi_dsub>
 800b164:	4632      	mov	r2, r6
 800b166:	463b      	mov	r3, r7
 800b168:	f7f5 f836 	bl	80001d8 <__aeabi_dsub>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b174:	f7f5 f830 	bl	80001d8 <__aeabi_dsub>
 800b178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b17c:	f7f5 f9e4 	bl	8000548 <__aeabi_dmul>
 800b180:	4622      	mov	r2, r4
 800b182:	4606      	mov	r6, r0
 800b184:	460f      	mov	r7, r1
 800b186:	462b      	mov	r3, r5
 800b188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b18c:	f7f5 f9dc 	bl	8000548 <__aeabi_dmul>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 f820 	bl	80001dc <__adddf3>
 800b19c:	4606      	mov	r6, r0
 800b19e:	460f      	mov	r7, r1
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	f7f5 f818 	bl	80001dc <__adddf3>
 800b1ac:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b1b0:	a33b      	add	r3, pc, #236	@ (adr r3, 800b2a0 <__ieee754_pow+0x768>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	4658      	mov	r0, fp
 800b1b8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b1bc:	460d      	mov	r5, r1
 800b1be:	f7f5 f9c3 	bl	8000548 <__aeabi_dmul>
 800b1c2:	465c      	mov	r4, fp
 800b1c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1c8:	4642      	mov	r2, r8
 800b1ca:	464b      	mov	r3, r9
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7f5 f802 	bl	80001d8 <__aeabi_dsub>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f4 fffc 	bl	80001d8 <__aeabi_dsub>
 800b1e0:	a331      	add	r3, pc, #196	@ (adr r3, 800b2a8 <__ieee754_pow+0x770>)
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	f7f5 f9af 	bl	8000548 <__aeabi_dmul>
 800b1ea:	a331      	add	r3, pc, #196	@ (adr r3, 800b2b0 <__ieee754_pow+0x778>)
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 f9a6 	bl	8000548 <__aeabi_dmul>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4630      	mov	r0, r6
 800b202:	4639      	mov	r1, r7
 800b204:	f7f4 ffea 	bl	80001dc <__adddf3>
 800b208:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b20a:	4b32      	ldr	r3, [pc, #200]	@ (800b2d4 <__ieee754_pow+0x79c>)
 800b20c:	4413      	add	r3, r2
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f4 ffe3 	bl	80001dc <__adddf3>
 800b216:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b21a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b21c:	f7f5 f92a 	bl	8000474 <__aeabi_i2d>
 800b220:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b222:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d8 <__ieee754_pow+0x7a0>)
 800b224:	4413      	add	r3, r2
 800b226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b22a:	4606      	mov	r6, r0
 800b22c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b230:	460f      	mov	r7, r1
 800b232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b236:	f7f4 ffd1 	bl	80001dc <__adddf3>
 800b23a:	4642      	mov	r2, r8
 800b23c:	464b      	mov	r3, r9
 800b23e:	f7f4 ffcd 	bl	80001dc <__adddf3>
 800b242:	4632      	mov	r2, r6
 800b244:	463b      	mov	r3, r7
 800b246:	f7f4 ffc9 	bl	80001dc <__adddf3>
 800b24a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b24e:	4632      	mov	r2, r6
 800b250:	463b      	mov	r3, r7
 800b252:	4658      	mov	r0, fp
 800b254:	460d      	mov	r5, r1
 800b256:	f7f4 ffbf 	bl	80001d8 <__aeabi_dsub>
 800b25a:	4642      	mov	r2, r8
 800b25c:	464b      	mov	r3, r9
 800b25e:	f7f4 ffbb 	bl	80001d8 <__aeabi_dsub>
 800b262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b266:	f7f4 ffb7 	bl	80001d8 <__aeabi_dsub>
 800b26a:	465c      	mov	r4, fp
 800b26c:	e036      	b.n	800b2dc <__ieee754_pow+0x7a4>
 800b26e:	bf00      	nop
 800b270:	4a454eef 	.word	0x4a454eef
 800b274:	3fca7e28 	.word	0x3fca7e28
 800b278:	93c9db65 	.word	0x93c9db65
 800b27c:	3fcd864a 	.word	0x3fcd864a
 800b280:	a91d4101 	.word	0xa91d4101
 800b284:	3fd17460 	.word	0x3fd17460
 800b288:	518f264d 	.word	0x518f264d
 800b28c:	3fd55555 	.word	0x3fd55555
 800b290:	db6fabff 	.word	0xdb6fabff
 800b294:	3fdb6db6 	.word	0x3fdb6db6
 800b298:	33333303 	.word	0x33333303
 800b29c:	3fe33333 	.word	0x3fe33333
 800b2a0:	e0000000 	.word	0xe0000000
 800b2a4:	3feec709 	.word	0x3feec709
 800b2a8:	dc3a03fd 	.word	0xdc3a03fd
 800b2ac:	3feec709 	.word	0x3feec709
 800b2b0:	145b01f5 	.word	0x145b01f5
 800b2b4:	be3e2fe0 	.word	0xbe3e2fe0
 800b2b8:	7ff00000 	.word	0x7ff00000
 800b2bc:	43400000 	.word	0x43400000
 800b2c0:	0003988e 	.word	0x0003988e
 800b2c4:	000bb679 	.word	0x000bb679
 800b2c8:	0800b7e0 	.word	0x0800b7e0
 800b2cc:	3ff00000 	.word	0x3ff00000
 800b2d0:	40080000 	.word	0x40080000
 800b2d4:	0800b7c0 	.word	0x0800b7c0
 800b2d8:	0800b7d0 	.word	0x0800b7d0
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2e4:	e5d6      	b.n	800ae94 <__ieee754_pow+0x35c>
 800b2e6:	f04f 0a01 	mov.w	sl, #1
 800b2ea:	e65e      	b.n	800afaa <__ieee754_pow+0x472>
 800b2ec:	a3b5      	add	r3, pc, #724	@ (adr r3, 800b5c4 <__ieee754_pow+0xa8c>)
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	f7f4 ff71 	bl	80001dc <__adddf3>
 800b2fa:	4642      	mov	r2, r8
 800b2fc:	e9cd 0100 	strd	r0, r1, [sp]
 800b300:	464b      	mov	r3, r9
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f4 ff67 	bl	80001d8 <__aeabi_dsub>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b312:	f7f5 fba9 	bl	8000a68 <__aeabi_dcmpgt>
 800b316:	2800      	cmp	r0, #0
 800b318:	f47f adfe 	bne.w	800af18 <__ieee754_pow+0x3e0>
 800b31c:	4ba2      	ldr	r3, [pc, #648]	@ (800b5a8 <__ieee754_pow+0xa70>)
 800b31e:	e022      	b.n	800b366 <__ieee754_pow+0x82e>
 800b320:	4ca2      	ldr	r4, [pc, #648]	@ (800b5ac <__ieee754_pow+0xa74>)
 800b322:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b326:	42a3      	cmp	r3, r4
 800b328:	d919      	bls.n	800b35e <__ieee754_pow+0x826>
 800b32a:	4ba1      	ldr	r3, [pc, #644]	@ (800b5b0 <__ieee754_pow+0xa78>)
 800b32c:	440b      	add	r3, r1
 800b32e:	4303      	orrs	r3, r0
 800b330:	d009      	beq.n	800b346 <__ieee754_pow+0x80e>
 800b332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b336:	2200      	movs	r2, #0
 800b338:	2300      	movs	r3, #0
 800b33a:	f7f5 fb77 	bl	8000a2c <__aeabi_dcmplt>
 800b33e:	3800      	subs	r0, #0
 800b340:	bf18      	it	ne
 800b342:	2001      	movne	r0, #1
 800b344:	e512      	b.n	800ad6c <__ieee754_pow+0x234>
 800b346:	4642      	mov	r2, r8
 800b348:	464b      	mov	r3, r9
 800b34a:	f7f4 ff45 	bl	80001d8 <__aeabi_dsub>
 800b34e:	4632      	mov	r2, r6
 800b350:	463b      	mov	r3, r7
 800b352:	f7f5 fb7f 	bl	8000a54 <__aeabi_dcmpge>
 800b356:	2800      	cmp	r0, #0
 800b358:	d1eb      	bne.n	800b332 <__ieee754_pow+0x7fa>
 800b35a:	4b96      	ldr	r3, [pc, #600]	@ (800b5b4 <__ieee754_pow+0xa7c>)
 800b35c:	e003      	b.n	800b366 <__ieee754_pow+0x82e>
 800b35e:	4a96      	ldr	r2, [pc, #600]	@ (800b5b8 <__ieee754_pow+0xa80>)
 800b360:	4293      	cmp	r3, r2
 800b362:	f240 80e7 	bls.w	800b534 <__ieee754_pow+0x9fc>
 800b366:	151b      	asrs	r3, r3, #20
 800b368:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800b36c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800b370:	fa4a fa03 	asr.w	sl, sl, r3
 800b374:	44da      	add	sl, fp
 800b376:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b37a:	4890      	ldr	r0, [pc, #576]	@ (800b5bc <__ieee754_pow+0xa84>)
 800b37c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b380:	4108      	asrs	r0, r1
 800b382:	ea00 030a 	and.w	r3, r0, sl
 800b386:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b38a:	f1c1 0114 	rsb	r1, r1, #20
 800b38e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b392:	fa4a fa01 	asr.w	sl, sl, r1
 800b396:	f1bb 0f00 	cmp.w	fp, #0
 800b39a:	4640      	mov	r0, r8
 800b39c:	4649      	mov	r1, r9
 800b39e:	f04f 0200 	mov.w	r2, #0
 800b3a2:	bfb8      	it	lt
 800b3a4:	f1ca 0a00 	rsblt	sl, sl, #0
 800b3a8:	f7f4 ff16 	bl	80001d8 <__aeabi_dsub>
 800b3ac:	4680      	mov	r8, r0
 800b3ae:	4689      	mov	r9, r1
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	f7f4 ff10 	bl	80001dc <__adddf3>
 800b3bc:	2400      	movs	r4, #0
 800b3be:	a36a      	add	r3, pc, #424	@ (adr r3, 800b568 <__ieee754_pow+0xa30>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	f7f5 f8be 	bl	8000548 <__aeabi_dmul>
 800b3cc:	4642      	mov	r2, r8
 800b3ce:	e9cd 0100 	strd	r0, r1, [sp]
 800b3d2:	464b      	mov	r3, r9
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7f4 fefe 	bl	80001d8 <__aeabi_dsub>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	f7f4 fef8 	bl	80001d8 <__aeabi_dsub>
 800b3e8:	a361      	add	r3, pc, #388	@ (adr r3, 800b570 <__ieee754_pow+0xa38>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f5 f8ab 	bl	8000548 <__aeabi_dmul>
 800b3f2:	a361      	add	r3, pc, #388	@ (adr r3, 800b578 <__ieee754_pow+0xa40>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	4680      	mov	r8, r0
 800b3fa:	4689      	mov	r9, r1
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 f8a2 	bl	8000548 <__aeabi_dmul>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4640      	mov	r0, r8
 800b40a:	4649      	mov	r1, r9
 800b40c:	f7f4 fee6 	bl	80001dc <__adddf3>
 800b410:	4604      	mov	r4, r0
 800b412:	460d      	mov	r5, r1
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b41c:	f7f4 fede 	bl	80001dc <__adddf3>
 800b420:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b424:	4680      	mov	r8, r0
 800b426:	4689      	mov	r9, r1
 800b428:	f7f4 fed6 	bl	80001d8 <__aeabi_dsub>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f4 fed0 	bl	80001d8 <__aeabi_dsub>
 800b438:	4642      	mov	r2, r8
 800b43a:	4606      	mov	r6, r0
 800b43c:	460f      	mov	r7, r1
 800b43e:	464b      	mov	r3, r9
 800b440:	4640      	mov	r0, r8
 800b442:	4649      	mov	r1, r9
 800b444:	f7f5 f880 	bl	8000548 <__aeabi_dmul>
 800b448:	a34d      	add	r3, pc, #308	@ (adr r3, 800b580 <__ieee754_pow+0xa48>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	f7f5 f879 	bl	8000548 <__aeabi_dmul>
 800b456:	a34c      	add	r3, pc, #304	@ (adr r3, 800b588 <__ieee754_pow+0xa50>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f4 febc 	bl	80001d8 <__aeabi_dsub>
 800b460:	4622      	mov	r2, r4
 800b462:	462b      	mov	r3, r5
 800b464:	f7f5 f870 	bl	8000548 <__aeabi_dmul>
 800b468:	a349      	add	r3, pc, #292	@ (adr r3, 800b590 <__ieee754_pow+0xa58>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f7f4 feb5 	bl	80001dc <__adddf3>
 800b472:	4622      	mov	r2, r4
 800b474:	462b      	mov	r3, r5
 800b476:	f7f5 f867 	bl	8000548 <__aeabi_dmul>
 800b47a:	a347      	add	r3, pc, #284	@ (adr r3, 800b598 <__ieee754_pow+0xa60>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f7f4 feaa 	bl	80001d8 <__aeabi_dsub>
 800b484:	4622      	mov	r2, r4
 800b486:	462b      	mov	r3, r5
 800b488:	f7f5 f85e 	bl	8000548 <__aeabi_dmul>
 800b48c:	a344      	add	r3, pc, #272	@ (adr r3, 800b5a0 <__ieee754_pow+0xa68>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	f7f4 fea3 	bl	80001dc <__adddf3>
 800b496:	4622      	mov	r2, r4
 800b498:	462b      	mov	r3, r5
 800b49a:	f7f5 f855 	bl	8000548 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f4 fe97 	bl	80001d8 <__aeabi_dsub>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4640      	mov	r0, r8
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	f7f5 f847 	bl	8000548 <__aeabi_dmul>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	e9cd 0100 	strd	r0, r1, [sp]
 800b4c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f4 fe86 	bl	80001d8 <__aeabi_dsub>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d4:	f7f5 f962 	bl	800079c <__aeabi_ddiv>
 800b4d8:	4632      	mov	r2, r6
 800b4da:	4604      	mov	r4, r0
 800b4dc:	460d      	mov	r5, r1
 800b4de:	463b      	mov	r3, r7
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	f7f5 f830 	bl	8000548 <__aeabi_dmul>
 800b4e8:	4632      	mov	r2, r6
 800b4ea:	463b      	mov	r3, r7
 800b4ec:	f7f4 fe76 	bl	80001dc <__adddf3>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f4 fe6e 	bl	80001d8 <__aeabi_dsub>
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	464b      	mov	r3, r9
 800b500:	f7f4 fe6a 	bl	80001d8 <__aeabi_dsub>
 800b504:	460b      	mov	r3, r1
 800b506:	4602      	mov	r2, r0
 800b508:	492d      	ldr	r1, [pc, #180]	@ (800b5c0 <__ieee754_pow+0xa88>)
 800b50a:	2000      	movs	r0, #0
 800b50c:	f7f4 fe64 	bl	80001d8 <__aeabi_dsub>
 800b510:	ec41 0b10 	vmov	d0, r0, r1
 800b514:	ee10 3a90 	vmov	r3, s1
 800b518:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b51c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b520:	da0b      	bge.n	800b53a <__ieee754_pow+0xa02>
 800b522:	4650      	mov	r0, sl
 800b524:	f000 f898 	bl	800b658 <scalbn>
 800b528:	ec51 0b10 	vmov	r0, r1, d0
 800b52c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b530:	f7ff bb6d 	b.w	800ac0e <__ieee754_pow+0xd6>
 800b534:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b538:	e73a      	b.n	800b3b0 <__ieee754_pow+0x878>
 800b53a:	ec51 0b10 	vmov	r0, r1, d0
 800b53e:	4619      	mov	r1, r3
 800b540:	e7f4      	b.n	800b52c <__ieee754_pow+0x9f4>
 800b542:	491f      	ldr	r1, [pc, #124]	@ (800b5c0 <__ieee754_pow+0xa88>)
 800b544:	2000      	movs	r0, #0
 800b546:	f7ff bb14 	b.w	800ab72 <__ieee754_pow+0x3a>
 800b54a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b54e:	f7ff bb10 	b.w	800ab72 <__ieee754_pow+0x3a>
 800b552:	4630      	mov	r0, r6
 800b554:	4639      	mov	r1, r7
 800b556:	f7ff bb0c 	b.w	800ab72 <__ieee754_pow+0x3a>
 800b55a:	460c      	mov	r4, r1
 800b55c:	f7ff bb69 	b.w	800ac32 <__ieee754_pow+0xfa>
 800b560:	2400      	movs	r4, #0
 800b562:	f7ff bb4b 	b.w	800abfc <__ieee754_pow+0xc4>
 800b566:	bf00      	nop
 800b568:	00000000 	.word	0x00000000
 800b56c:	3fe62e43 	.word	0x3fe62e43
 800b570:	fefa39ef 	.word	0xfefa39ef
 800b574:	3fe62e42 	.word	0x3fe62e42
 800b578:	0ca86c39 	.word	0x0ca86c39
 800b57c:	be205c61 	.word	0xbe205c61
 800b580:	72bea4d0 	.word	0x72bea4d0
 800b584:	3e663769 	.word	0x3e663769
 800b588:	c5d26bf1 	.word	0xc5d26bf1
 800b58c:	3ebbbd41 	.word	0x3ebbbd41
 800b590:	af25de2c 	.word	0xaf25de2c
 800b594:	3f11566a 	.word	0x3f11566a
 800b598:	16bebd93 	.word	0x16bebd93
 800b59c:	3f66c16c 	.word	0x3f66c16c
 800b5a0:	5555553e 	.word	0x5555553e
 800b5a4:	3fc55555 	.word	0x3fc55555
 800b5a8:	40900000 	.word	0x40900000
 800b5ac:	4090cbff 	.word	0x4090cbff
 800b5b0:	3f6f3400 	.word	0x3f6f3400
 800b5b4:	4090cc00 	.word	0x4090cc00
 800b5b8:	3fe00000 	.word	0x3fe00000
 800b5bc:	fff00000 	.word	0xfff00000
 800b5c0:	3ff00000 	.word	0x3ff00000
 800b5c4:	652b82fe 	.word	0x652b82fe
 800b5c8:	3c971547 	.word	0x3c971547

0800b5cc <with_errno>:
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	ed2d 8b02 	vpush	{d8}
 800b5d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b5d6:	eef0 8a60 	vmov.f32	s17, s1
 800b5da:	4604      	mov	r4, r0
 800b5dc:	f7ff f902 	bl	800a7e4 <__errno>
 800b5e0:	eeb0 0a48 	vmov.f32	s0, s16
 800b5e4:	eef0 0a68 	vmov.f32	s1, s17
 800b5e8:	ecbd 8b02 	vpop	{d8}
 800b5ec:	6004      	str	r4, [r0, #0]
 800b5ee:	bd10      	pop	{r4, pc}

0800b5f0 <xflow>:
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	b507      	push	{r0, r1, r2, lr}
 800b5f4:	ec51 0b10 	vmov	r0, r1, d0
 800b5f8:	b183      	cbz	r3, 800b61c <xflow+0x2c>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b600:	e9cd 2300 	strd	r2, r3, [sp]
 800b604:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b608:	f7f4 ff9e 	bl	8000548 <__aeabi_dmul>
 800b60c:	ec41 0b10 	vmov	d0, r0, r1
 800b610:	2022      	movs	r0, #34	@ 0x22
 800b612:	b003      	add	sp, #12
 800b614:	f85d eb04 	ldr.w	lr, [sp], #4
 800b618:	f7ff bfd8 	b.w	800b5cc <with_errno>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	e7ee      	b.n	800b600 <xflow+0x10>
 800b622:	0000      	movs	r0, r0
 800b624:	0000      	movs	r0, r0
	...

0800b628 <__math_uflow>:
 800b628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b630 <__math_uflow+0x8>
 800b62c:	f7ff bfe0 	b.w	800b5f0 <xflow>
 800b630:	00000000 	.word	0x00000000
 800b634:	10000000 	.word	0x10000000

0800b638 <__math_oflow>:
 800b638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b640 <__math_oflow+0x8>
 800b63c:	f7ff bfd8 	b.w	800b5f0 <xflow>
 800b640:	00000000 	.word	0x00000000
 800b644:	70000000 	.word	0x70000000

0800b648 <fabs>:
 800b648:	ec51 0b10 	vmov	r0, r1, d0
 800b64c:	4602      	mov	r2, r0
 800b64e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b652:	ec43 2b10 	vmov	d0, r2, r3
 800b656:	4770      	bx	lr

0800b658 <scalbn>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	ec55 4b10 	vmov	r4, r5, d0
 800b65e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b662:	4606      	mov	r6, r0
 800b664:	462b      	mov	r3, r5
 800b666:	b991      	cbnz	r1, 800b68e <scalbn+0x36>
 800b668:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b66c:	4323      	orrs	r3, r4
 800b66e:	d03b      	beq.n	800b6e8 <scalbn+0x90>
 800b670:	4b33      	ldr	r3, [pc, #204]	@ (800b740 <scalbn+0xe8>)
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	2200      	movs	r2, #0
 800b678:	f7f4 ff66 	bl	8000548 <__aeabi_dmul>
 800b67c:	4b31      	ldr	r3, [pc, #196]	@ (800b744 <scalbn+0xec>)
 800b67e:	429e      	cmp	r6, r3
 800b680:	4604      	mov	r4, r0
 800b682:	460d      	mov	r5, r1
 800b684:	da0f      	bge.n	800b6a6 <scalbn+0x4e>
 800b686:	a326      	add	r3, pc, #152	@ (adr r3, 800b720 <scalbn+0xc8>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	e01e      	b.n	800b6cc <scalbn+0x74>
 800b68e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b692:	4291      	cmp	r1, r2
 800b694:	d10b      	bne.n	800b6ae <scalbn+0x56>
 800b696:	4622      	mov	r2, r4
 800b698:	4620      	mov	r0, r4
 800b69a:	4629      	mov	r1, r5
 800b69c:	f7f4 fd9e 	bl	80001dc <__adddf3>
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	e020      	b.n	800b6e8 <scalbn+0x90>
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b6ac:	3936      	subs	r1, #54	@ 0x36
 800b6ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b6b2:	4296      	cmp	r6, r2
 800b6b4:	dd0d      	ble.n	800b6d2 <scalbn+0x7a>
 800b6b6:	2d00      	cmp	r5, #0
 800b6b8:	a11b      	add	r1, pc, #108	@ (adr r1, 800b728 <scalbn+0xd0>)
 800b6ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6be:	da02      	bge.n	800b6c6 <scalbn+0x6e>
 800b6c0:	a11b      	add	r1, pc, #108	@ (adr r1, 800b730 <scalbn+0xd8>)
 800b6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c6:	a318      	add	r3, pc, #96	@ (adr r3, 800b728 <scalbn+0xd0>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 ff3c 	bl	8000548 <__aeabi_dmul>
 800b6d0:	e7e6      	b.n	800b6a0 <scalbn+0x48>
 800b6d2:	1872      	adds	r2, r6, r1
 800b6d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b6d8:	428a      	cmp	r2, r1
 800b6da:	dcec      	bgt.n	800b6b6 <scalbn+0x5e>
 800b6dc:	2a00      	cmp	r2, #0
 800b6de:	dd06      	ble.n	800b6ee <scalbn+0x96>
 800b6e0:	f36f 531e 	bfc	r3, #20, #11
 800b6e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b6e8:	ec45 4b10 	vmov	d0, r4, r5
 800b6ec:	bd70      	pop	{r4, r5, r6, pc}
 800b6ee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b6f2:	da08      	bge.n	800b706 <scalbn+0xae>
 800b6f4:	2d00      	cmp	r5, #0
 800b6f6:	a10a      	add	r1, pc, #40	@ (adr r1, 800b720 <scalbn+0xc8>)
 800b6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6fc:	dac3      	bge.n	800b686 <scalbn+0x2e>
 800b6fe:	a10e      	add	r1, pc, #56	@ (adr r1, 800b738 <scalbn+0xe0>)
 800b700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b704:	e7bf      	b.n	800b686 <scalbn+0x2e>
 800b706:	3236      	adds	r2, #54	@ 0x36
 800b708:	f36f 531e 	bfc	r3, #20, #11
 800b70c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b710:	4620      	mov	r0, r4
 800b712:	4b0d      	ldr	r3, [pc, #52]	@ (800b748 <scalbn+0xf0>)
 800b714:	4629      	mov	r1, r5
 800b716:	2200      	movs	r2, #0
 800b718:	e7d8      	b.n	800b6cc <scalbn+0x74>
 800b71a:	bf00      	nop
 800b71c:	f3af 8000 	nop.w
 800b720:	c2f8f359 	.word	0xc2f8f359
 800b724:	01a56e1f 	.word	0x01a56e1f
 800b728:	8800759c 	.word	0x8800759c
 800b72c:	7e37e43c 	.word	0x7e37e43c
 800b730:	8800759c 	.word	0x8800759c
 800b734:	fe37e43c 	.word	0xfe37e43c
 800b738:	c2f8f359 	.word	0xc2f8f359
 800b73c:	81a56e1f 	.word	0x81a56e1f
 800b740:	43500000 	.word	0x43500000
 800b744:	ffff3cb0 	.word	0xffff3cb0
 800b748:	3c900000 	.word	0x3c900000

0800b74c <_init>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	bf00      	nop
 800b750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b752:	bc08      	pop	{r3}
 800b754:	469e      	mov	lr, r3
 800b756:	4770      	bx	lr

0800b758 <_fini>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	bf00      	nop
 800b75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75e:	bc08      	pop	{r3}
 800b760:	469e      	mov	lr, r3
 800b762:	4770      	bx	lr
