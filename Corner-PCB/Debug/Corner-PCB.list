
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043a8  080043a8  000053a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e8  080043e8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080043e8  080043e8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e8  080043e8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043ec  080043ec  000053ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080043fc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080043fc  00006198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2f0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002206  00000000  00000000  0001532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00017538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  00018590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214a9  00000000  00000000  00019239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011493  00000000  00000000  0003a6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d38e8  00000000  00000000  0004bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f45d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  0011f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00123a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004390 	.word	0x08004390

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004390 	.word	0x08004390

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fba8 	bl	8000926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f867 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f9cd 	bl	8000578 <MX_GPIO_Init>
  MX_DMA_Init();
 80001de:	f000 f9ad 	bl	800053c <MX_DMA_Init>
  MX_ADC1_Init();
 80001e2:	f000 f8b3 	bl	800034c <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e6:	f000 f955 	bl	8000494 <MX_TIM1_Init>
  MX_SPI1_Init();
 80001ea:	f000 f915 	bl	8000418 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001ee:	4827      	ldr	r0, [pc, #156]	@ (800028c <main+0xc0>)
 80001f0:	f000 ff3c 	bl	800106c <HAL_ADC_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2110      	movs	r1, #16
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fc:	f002 f882 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000200:	200a      	movs	r0, #10
 8000202:	f000 fc05 	bl	8000a10 <HAL_Delay>

  // Possible config codes: 0x8F80, 0xAF80, 0x8E80, 0x8F90
  spi_config = 0x8F80;
 8000206:	4b22      	ldr	r3, [pc, #136]	@ (8000290 <main+0xc4>)
 8000208:	f648 7280 	movw	r2, #36736	@ 0x8f80
 800020c:	801a      	strh	r2, [r3, #0]
  spi_configs[0] = (spi_config >> 8) & 0xFF;  // Extract upper 8 bits
 800020e:	4b20      	ldr	r3, [pc, #128]	@ (8000290 <main+0xc4>)
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b29b      	uxth	r3, r3
 8000216:	b2da      	uxtb	r2, r3
 8000218:	4b1e      	ldr	r3, [pc, #120]	@ (8000294 <main+0xc8>)
 800021a:	701a      	strb	r2, [r3, #0]
  spi_configs[1] = spi_config & 0xFF;         // Extract lower 8 bits
 800021c:	4b1c      	ldr	r3, [pc, #112]	@ (8000290 <main+0xc4>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b1c      	ldr	r3, [pc, #112]	@ (8000294 <main+0xc8>)
 8000224:	705a      	strb	r2, [r3, #1]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // linear potentiometer
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000226:	2164      	movs	r1, #100	@ 0x64
 8000228:	4818      	ldr	r0, [pc, #96]	@ (800028c <main+0xc0>)
 800022a:	f000 ff82 	bl	8001132 <HAL_ADC_PollForConversion>
	  lin_pot_val = HAL_ADC_GetValue(&hadc1);
 800022e:	4817      	ldr	r0, [pc, #92]	@ (800028c <main+0xc0>)
 8000230:	f001 f80e 	bl	8001250 <HAL_ADC_GetValue>
 8000234:	4603      	mov	r3, r0
 8000236:	4a18      	ldr	r2, [pc, #96]	@ (8000298 <main+0xcc>)
 8000238:	6013      	str	r3, [r2, #0]


	  // strain gauge
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2110      	movs	r1, #16
 800023e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000242:	f002 f85f 	bl	8002304 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000246:	200a      	movs	r0, #10
 8000248:	f000 fbe2 	bl	8000a10 <HAL_Delay>
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);


	  // HAL_SPI_Receive(&hspi1, testval, 2, HAL_MAX_DELAY);

	  HAL_SPI_TransmitReceive(&hspi1, spi_configs, strain_gauge1, 2, HAL_MAX_DELAY);
 800024c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2302      	movs	r3, #2
 8000254:	4a11      	ldr	r2, [pc, #68]	@ (800029c <main+0xd0>)
 8000256:	490f      	ldr	r1, [pc, #60]	@ (8000294 <main+0xc8>)
 8000258:	4811      	ldr	r0, [pc, #68]	@ (80002a0 <main+0xd4>)
 800025a:	f003 fa5a 	bl	8003712 <HAL_SPI_TransmitReceive>

	  st_value = ((strain_gauge1[0] << 8) | strain_gauge1[1]);
 800025e:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <main+0xd0>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	021b      	lsls	r3, r3, #8
 8000264:	b21a      	sxth	r2, r3
 8000266:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <main+0xd0>)
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	b21b      	sxth	r3, r3
 800026c:	4313      	orrs	r3, r2
 800026e:	b21b      	sxth	r3, r3
 8000270:	b29a      	uxth	r2, r3
 8000272:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <main+0xd8>)
 8000274:	801a      	strh	r2, [r3, #0]
      // HAL_SPI_Receive(&hspi1, (uint8_t*)&strain_gauge, 4, 10);
	  // state = HAL_SPI_GetState(&hspi1);

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027e:	f002 f841 	bl	8002304 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000282:	200a      	movs	r0, #10
 8000284:	f000 fbc4 	bl	8000a10 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000288:	bf00      	nop
 800028a:	e7cc      	b.n	8000226 <main+0x5a>
 800028c:	20000028 	.word	0x20000028
 8000290:	20000188 	.word	0x20000188
 8000294:	20000190 	.word	0x20000190
 8000298:	20000184 	.word	0x20000184
 800029c:	2000018c 	.word	0x2000018c
 80002a0:	200000d4 	.word	0x200000d4
 80002a4:	2000018e 	.word	0x2000018e

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	@ 0x58
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	2244      	movs	r2, #68	@ 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f004 f83e 	bl	8004338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002ce:	f002 f83f 	bl	8002350 <HAL_PWREx_ControlVoltageScaling>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d8:	f000 f97e 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002dc:	2310      	movs	r3, #16
 80002de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e8:	2360      	movs	r3, #96	@ 0x60
 80002ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	2302      	movs	r3, #2
 80002ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f0:	2301      	movs	r3, #1
 80002f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80002f8:	2310      	movs	r3, #16
 80002fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002fc:	2307      	movs	r3, #7
 80002fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000300:	2302      	movs	r3, #2
 8000302:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000304:	2302      	movs	r3, #2
 8000306:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	4618      	mov	r0, r3
 800030e:	f002 f875 	bl	80023fc <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000318:	f000 f95e 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	2303      	movs	r3, #3
 8000322:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000330:	463b      	mov	r3, r7
 8000332:	2101      	movs	r1, #1
 8000334:	4618      	mov	r0, r3
 8000336:	f002 fc75 	bl	8002c24 <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000340:	f000 f94a 	bl	80005d8 <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3758      	adds	r7, #88	@ 0x58
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	463b      	mov	r3, r7
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
 8000360:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000362:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <MX_ADC1_Init+0xc0>)
 8000364:	4a2a      	ldr	r2, [pc, #168]	@ (8000410 <MX_ADC1_Init+0xc4>)
 8000366:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000368:	4b28      	ldr	r3, [pc, #160]	@ (800040c <MX_ADC1_Init+0xc0>)
 800036a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800036e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000370:	4b26      	ldr	r3, [pc, #152]	@ (800040c <MX_ADC1_Init+0xc0>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000376:	4b25      	ldr	r3, [pc, #148]	@ (800040c <MX_ADC1_Init+0xc0>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037c:	4b23      	ldr	r3, [pc, #140]	@ (800040c <MX_ADC1_Init+0xc0>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000382:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_ADC1_Init+0xc0>)
 8000384:	2204      	movs	r2, #4
 8000386:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000388:	4b20      	ldr	r3, [pc, #128]	@ (800040c <MX_ADC1_Init+0xc0>)
 800038a:	2200      	movs	r2, #0
 800038c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800038e:	4b1f      	ldr	r3, [pc, #124]	@ (800040c <MX_ADC1_Init+0xc0>)
 8000390:	2201      	movs	r2, #1
 8000392:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000394:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <MX_ADC1_Init+0xc0>)
 8000396:	2201      	movs	r2, #1
 8000398:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <MX_ADC1_Init+0xc0>)
 800039c:	2200      	movs	r2, #0
 800039e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_ADC1_Init+0xc0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <MX_ADC1_Init+0xc0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_ADC1_Init+0xc0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <MX_ADC1_Init+0xc0>)
 80003b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003be:	4b13      	ldr	r3, [pc, #76]	@ (800040c <MX_ADC1_Init+0xc0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c6:	4811      	ldr	r0, [pc, #68]	@ (800040c <MX_ADC1_Init+0xc0>)
 80003c8:	f000 fd0e 	bl	8000de8 <HAL_ADC_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003d2:	f000 f901 	bl	80005d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_ADC1_Init+0xc8>)
 80003d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003da:	2306      	movs	r3, #6
 80003dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80003de:	2302      	movs	r3, #2
 80003e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e2:	237f      	movs	r3, #127	@ 0x7f
 80003e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003e6:	2304      	movs	r3, #4
 80003e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ee:	463b      	mov	r3, r7
 80003f0:	4619      	mov	r1, r3
 80003f2:	4806      	ldr	r0, [pc, #24]	@ (800040c <MX_ADC1_Init+0xc0>)
 80003f4:	f000 ff3a 	bl	800126c <HAL_ADC_ConfigChannel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80003fe:	f000 f8eb 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	3718      	adds	r7, #24
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000028 	.word	0x20000028
 8000410:	50040000 	.word	0x50040000
 8000414:	14f00020 	.word	0x14f00020

08000418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800041c:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <MX_SPI1_Init+0x74>)
 800041e:	4a1c      	ldr	r2, [pc, #112]	@ (8000490 <MX_SPI1_Init+0x78>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b1a      	ldr	r3, [pc, #104]	@ (800048c <MX_SPI1_Init+0x74>)
 8000424:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <MX_SPI1_Init+0x74>)
 8000432:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000436:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <MX_SPI1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043e:	4b13      	ldr	r3, [pc, #76]	@ (800048c <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_SPI1_Init+0x74>)
 8000446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800044a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <MX_SPI1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_SPI1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_SPI1_Init+0x74>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_SPI1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_SPI1_Init+0x74>)
 8000478:	f003 f8a8 	bl	80035cc <HAL_SPI_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000482:	f000 f8a9 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200000d4 	.word	0x200000d4
 8000490:	40013000 	.word	0x40013000

08000494 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b2:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004b4:	4a20      	ldr	r2, [pc, #128]	@ (8000538 <MX_TIM1_Init+0xa4>)
 80004b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80004ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d2:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d8:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004de:	4815      	ldr	r0, [pc, #84]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004e0:	f003 fc9a 	bl	8003e18 <HAL_TIM_Base_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80004ea:	f000 f875 	bl	80005d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	480e      	ldr	r0, [pc, #56]	@ (8000534 <MX_TIM1_Init+0xa0>)
 80004fc:	f003 fce3 	bl	8003ec6 <HAL_TIM_ConfigClockSource>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000506:	f000 f867 	bl	80005d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000512:	2380      	movs	r3, #128	@ 0x80
 8000514:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	@ (8000534 <MX_TIM1_Init+0xa0>)
 800051c:	f003 fea6 	bl	800426c <HAL_TIMEx_MasterConfigSynchronization>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000526:	f000 f857 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000138 	.word	0x20000138
 8000538:	40012c00 	.word	0x40012c00

0800053c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_DMA_Init+0x38>)
 8000544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000546:	4a0b      	ldr	r2, [pc, #44]	@ (8000574 <MX_DMA_Init+0x38>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6493      	str	r3, [r2, #72]	@ 0x48
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_DMA_Init+0x38>)
 8000550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	200b      	movs	r0, #11
 8000560:	f001 fbc7 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000564:	200b      	movs	r0, #11
 8000566:	f001 fbe0 	bl	8001d2a <HAL_NVIC_EnableIRQ>

}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <MX_GPIO_Init+0x5c>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000590:	4a10      	ldr	r2, [pc, #64]	@ (80005d4 <MX_GPIO_Init+0x5c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <MX_GPIO_Init+0x5c>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f001 feaa 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005b0:	2310      	movs	r3, #16
 80005b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4619      	mov	r1, r3
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c8:	f001 fd32 	bl	8002030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <Error_Handler+0x8>

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_MspInit+0x44>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <HAL_MspInit+0x44>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <HAL_MspInit+0x44>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000606:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <HAL_MspInit+0x44>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060c:	6593      	str	r3, [r2, #88]	@ 0x58
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_MspInit+0x44>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09e      	sub	sp, #120	@ 0x78
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	2254      	movs	r2, #84	@ 0x54
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fe73 	bl	8004338 <memset>
  if(hadc->Instance==ADC1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a3b      	ldr	r2, [pc, #236]	@ (8000744 <HAL_ADC_MspInit+0x118>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d16e      	bne.n	800073a <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800065c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000660:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000662:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000666:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000668:	2301      	movs	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000670:	2310      	movs	r3, #16
 8000672:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000680:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fcb6 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000696:	f7ff ff9f 	bl	80005d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800069a:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <HAL_ADC_MspInit+0x11c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a2a      	ldr	r2, [pc, #168]	@ (8000748 <HAL_ADC_MspInit+0x11c>)
 80006a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <HAL_ADC_MspInit+0x11c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <HAL_ADC_MspInit+0x11c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a24      	ldr	r2, [pc, #144]	@ (8000748 <HAL_ADC_MspInit+0x11c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <HAL_ADC_MspInit+0x11c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ca:	2301      	movs	r3, #1
 80006cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006ce:	230b      	movs	r3, #11
 80006d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e0:	f001 fca6 	bl	8002030 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <HAL_ADC_MspInit+0x120>)
 80006e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000750 <HAL_ADC_MspInit+0x124>)
 80006e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <HAL_ADC_MspInit+0x120>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f0:	4b16      	ldr	r3, [pc, #88]	@ (800074c <HAL_ADC_MspInit+0x120>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <HAL_ADC_MspInit+0x120>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <HAL_ADC_MspInit+0x120>)
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_ADC_MspInit+0x120>)
 8000704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000708:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <HAL_ADC_MspInit+0x120>)
 800070c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000710:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <HAL_ADC_MspInit+0x120>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_ADC_MspInit+0x120>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800071e:	480b      	ldr	r0, [pc, #44]	@ (800074c <HAL_ADC_MspInit+0x120>)
 8000720:	f001 fb1e 	bl	8001d60 <HAL_DMA_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800072a:	f7ff ff55 	bl	80005d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a06      	ldr	r2, [pc, #24]	@ (800074c <HAL_ADC_MspInit+0x120>)
 8000732:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <HAL_ADC_MspInit+0x120>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800073a:	bf00      	nop
 800073c:	3778      	adds	r7, #120	@ 0x78
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	50040000 	.word	0x50040000
 8000748:	40021000 	.word	0x40021000
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40020008 	.word	0x40020008

08000754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <HAL_SPI_MspInit+0xa0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d139      	bne.n	80007ea <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <HAL_SPI_MspInit+0xa4>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077a:	4a1f      	ldr	r2, [pc, #124]	@ (80007f8 <HAL_SPI_MspInit+0xa4>)
 800077c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000780:	6613      	str	r3, [r2, #96]	@ 0x60
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <HAL_SPI_MspInit+0xa4>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <HAL_SPI_MspInit+0xa4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a19      	ldr	r2, [pc, #100]	@ (80007f8 <HAL_SPI_MspInit+0xa4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <HAL_SPI_MspInit+0xa4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a6:	23a0      	movs	r3, #160	@ 0xa0
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b2:	2302      	movs	r3, #2
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b6:	2305      	movs	r3, #5
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f001 fc34 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d8:	2305      	movs	r3, #5
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f001 fc23 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	@ 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40013000 	.word	0x40013000
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <HAL_TIM_Base_MspInit+0x38>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d10b      	bne.n	8000826 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_TIM_Base_MspInit+0x3c>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <HAL_TIM_Base_MspInit+0x3c>)
 8000814:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000818:	6613      	str	r3, [r2, #96]	@ 0x60
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <HAL_TIM_Base_MspInit+0x3c>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40012c00 	.word	0x40012c00
 8000838:	40021000 	.word	0x40021000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f89d 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <DMA1_Channel1_IRQHandler+0x10>)
 80008a2:	f001 fb15 	bl	8001ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000008c 	.word	0x2000008c

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800090c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d8:	f7ff ffea 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f003 fd21 	bl	8004348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000906:	f7ff fc61 	bl	80001cc <main>

0800090a <LoopForever>:

LoopForever:
    b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800090c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000918:	080043f0 	.word	0x080043f0
  ldr r2, =_sbss
 800091c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000920:	20000198 	.word	0x20000198

08000924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_IRQHandler>

08000926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f001 f9d3 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000936:	2000      	movs	r0, #0
 8000938:	f000 f80e 	bl	8000958 <HAL_InitTick>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e001      	b.n	800094c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000948:	f7ff fe4c 	bl	80005e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800094c:	79fb      	ldrb	r3, [r7, #7]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <HAL_InitTick+0x6c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d023      	beq.n	80009b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <HAL_InitTick+0x70>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f9df 	bl	8001d46 <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10f      	bne.n	80009ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d809      	bhi.n	80009a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	f001 f9a9 	bl	8001cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a0:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <HAL_InitTick+0x74>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e007      	b.n	80009b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e004      	b.n	80009b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e001      	b.n	80009b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000194 	.word	0x20000194

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000194 	.word	0x20000194

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff ffee 	bl	80009f8 <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_Delay+0x44>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a36:	bf00      	nop
 8000a38:	f7ff ffde 	bl	80009f8 <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008

08000a58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	609a      	str	r2, [r3, #8]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	609a      	str	r2, [r3, #8]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3360      	adds	r3, #96	@ 0x60
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <LL_ADC_SetOffset+0x44>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	4313      	orrs	r3, r2
 8000af0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000af8:	bf00      	nop
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	03fff000 	.word	0x03fff000

08000b08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3360      	adds	r3, #96	@ 0x60
 8000b16:	461a      	mov	r2, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3360      	adds	r3, #96	@ 0x60
 8000b44:	461a      	mov	r2, r3
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b5e:	bf00      	nop
 8000b60:	371c      	adds	r7, #28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3330      	adds	r3, #48	@ 0x30
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	4413      	add	r3, r2
 8000bae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	f003 031f 	and.w	r3, r3, #31
 8000bba:	211f      	movs	r1, #31
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0e9b      	lsrs	r3, r3, #26
 8000bc8:	f003 011f 	and.w	r1, r3, #31
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f003 031f 	and.w	r3, r3, #31
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3314      	adds	r3, #20
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	0e5b      	lsrs	r3, r3, #25
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	0d1b      	lsrs	r3, r3, #20
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	2107      	movs	r1, #7
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	0d1b      	lsrs	r3, r3, #20
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c32:	bf00      	nop
 8000c34:	371c      	adds	r7, #28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0318 	and.w	r3, r3, #24
 8000c62:	4908      	ldr	r1, [pc, #32]	@ (8000c84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c64:	40d9      	lsrs	r1, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	400b      	ands	r3, r1
 8000c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	0007ffff 	.word	0x0007ffff

08000c88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6093      	str	r3, [r2, #8]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cc0:	d101      	bne.n	8000cc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ce8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d10:	d101      	bne.n	8000d16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <LL_ADC_IsEnabled+0x18>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <LL_ADC_IsEnabled+0x1a>
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d86:	f043 0204 	orr.w	r2, r3, #4
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d101      	bne.n	8000db2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d101      	bne.n	8000dd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e126      	b.n	8001050 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d109      	bne.n	8000e24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fc0b 	bl	800062c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff3f 	bl	8000cac <LL_ADC_IsDeepPowerDownEnabled>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff25 	bl	8000c88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff5a 	bl	8000cfc <LL_ADC_IsInternalRegulatorEnabled>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff3e 	bl	8000cd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e58:	4b7f      	ldr	r3, [pc, #508]	@ (8001058 <HAL_ADC_Init+0x270>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	099b      	lsrs	r3, r3, #6
 8000e5e:	4a7f      	ldr	r2, [pc, #508]	@ (800105c <HAL_ADC_Init+0x274>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	099b      	lsrs	r3, r3, #6
 8000e66:	3301      	adds	r3, #1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e6c:	e002      	b.n	8000e74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f9      	bne.n	8000e6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff3c 	bl	8000cfc <LL_ADC_IsInternalRegulatorEnabled>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff75 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 8000eb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 80bf 	bne.w	800103e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 80bb 	bne.w	800103e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ecc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ed0:	f043 0202 	orr.w	r2, r3, #2
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff35 	bl	8000d4c <LL_ADC_IsEnabled>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10b      	bne.n	8000f00 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ee8:	485d      	ldr	r0, [pc, #372]	@ (8001060 <HAL_ADC_Init+0x278>)
 8000eea:	f7ff ff2f 	bl	8000d4c <LL_ADC_IsEnabled>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d105      	bne.n	8000f00 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	485a      	ldr	r0, [pc, #360]	@ (8001064 <HAL_ADC_Init+0x27c>)
 8000efc:	f7ff fdac 	bl	8000a58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7e5b      	ldrb	r3, [r3, #25]
 8000f04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000f10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000f16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d106      	bne.n	8000f3c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	3b01      	subs	r3, #1
 8000f34:	045b      	lsls	r3, r3, #17
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d009      	beq.n	8000f58 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f48:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <HAL_ADC_Init+0x280>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff25 	bl	8000dc0 <LL_ADC_INJ_IsConversionOngoing>
 8000f76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d13d      	bne.n	8000ffa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d13a      	bne.n	8000ffa <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fa0:	f023 0302 	bic.w	r3, r3, #2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	69b9      	ldr	r1, [r7, #24]
 8000faa:	430b      	orrs	r3, r1
 8000fac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d118      	bne.n	8000fea <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000fc2:	f023 0304 	bic.w	r3, r3, #4
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000fce:	4311      	orrs	r1, r2
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000fd4:	4311      	orrs	r1, r2
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	e007      	b.n	8000ffa <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0201 	bic.w	r2, r2, #1
 8000ff8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d10c      	bne.n	800101c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f023 010f 	bic.w	r1, r3, #15
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	631a      	str	r2, [r3, #48]	@ 0x30
 800101a:	e007      	b.n	800102c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 020f 	bic.w	r2, r2, #15
 800102a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001030:	f023 0303 	bic.w	r3, r3, #3
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
 800103c:	e007      	b.n	800104e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001042:	f043 0210 	orr.w	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800104e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	053e2d63 	.word	0x053e2d63
 8001060:	50040000 	.word	0x50040000
 8001064:	50040300 	.word	0x50040300
 8001068:	fff0c007 	.word	0xfff0c007

0800106c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe8e 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d14f      	bne.n	8001124 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Start+0x26>
 800108e:	2302      	movs	r3, #2
 8001090:	e04b      	b.n	800112a <HAL_ADC_Start+0xbe>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fcc8 	bl	8001a30 <ADC_Enable>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d137      	bne.n	800111a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010ca:	d106      	bne.n	80010da <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d0:	f023 0206 	bic.w	r2, r3, #6
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80010d8:	e002      	b.n	80010e0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	221c      	movs	r2, #28
 80010e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001102:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001106:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe2d 	bl	8000d72 <LL_ADC_REG_StartConversion>
 8001118:	e006      	b.n	8001128 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001122:	e001      	b.n	8001128 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001124:	2302      	movs	r3, #2
 8001126:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	2b08      	cmp	r3, #8
 8001142:	d102      	bne.n	800114a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001144:	2308      	movs	r3, #8
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e010      	b.n	800116c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800115c:	f043 0220 	orr.w	r2, r3, #32
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e06f      	b.n	8001248 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001168:	2304      	movs	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800116c:	f7ff fc44 	bl	80009f8 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001172:	e021      	b.n	80011b8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800117a:	d01d      	beq.n	80011b8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800117c:	f7ff fc3c 	bl	80009f8 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d302      	bcc.n	8001192 <HAL_ADC_PollForConversion+0x60>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d112      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a4:	f043 0204 	orr.w	r2, r3, #4
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e047      	b.n	8001248 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0d6      	beq.n	8001174 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fcc7 	bl	8000b6a <LL_ADC_REG_IsTriggerSourceSWStart>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d01c      	beq.n	800121c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7e5b      	ldrb	r3, [r3, #25]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d118      	bne.n	800121c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d111      	bne.n	800121c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001214:	f043 0201 	orr.w	r2, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d104      	bne.n	8001234 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2208      	movs	r2, #8
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e008      	b.n	8001246 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0b6      	sub	sp, #216	@ 0xd8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_ADC_ConfigChannel+0x22>
 800128a:	2302      	movs	r3, #2
 800128c:	e3bb      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x79a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd7d 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 83a0 	bne.w	80019e8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d824      	bhi.n	8001302 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	3b02      	subs	r3, #2
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d81b      	bhi.n	80012fa <HAL_ADC_ConfigChannel+0x8e>
 80012c2:	a201      	add	r2, pc, #4	@ (adr r2, 80012c8 <HAL_ADC_ConfigChannel+0x5c>)
 80012c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012e1 	.word	0x080012e1
 80012d0:	080012e9 	.word	0x080012e9
 80012d4:	080012f1 	.word	0x080012f1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80012d8:	230c      	movs	r3, #12
 80012da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012de:	e010      	b.n	8001302 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80012e0:	2312      	movs	r3, #18
 80012e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012e6:	e00c      	b.n	8001302 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80012e8:	2318      	movs	r3, #24
 80012ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012ee:	e008      	b.n	8001302 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80012f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80012f8:	e003      	b.n	8001302 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80012fa:	2306      	movs	r3, #6
 80012fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001300:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001310:	f7ff fc3e 	bl	8000b90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fd3e 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 800131e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd4a 	bl	8000dc0 <LL_ADC_INJ_IsConversionOngoing>
 800132c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 81a4 	bne.w	8001682 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800133a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 819f 	bne.w	8001682 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	461a      	mov	r2, r3
 8001352:	f7ff fc49 	bl	8000be8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d00a      	beq.n	800138e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6919      	ldr	r1, [r3, #16]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001388:	f7ff fb9a 	bl	8000ac0 <LL_ADC_SetOffset>
 800138c:	e179      	b.n	8001682 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fbb7 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10a      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x14e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbac 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	0e9b      	lsrs	r3, r3, #26
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	e01e      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x18c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fba1 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80013dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80013e8:	2320      	movs	r3, #32
 80013ea:	e004      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80013ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1a4>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0e9b      	lsrs	r3, r3, #26
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	e018      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1d6>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800142c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001434:	2320      	movs	r3, #32
 8001436:	e004      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001442:	429a      	cmp	r2, r3
 8001444:	d106      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb70 	bl	8000b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb54 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10a      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x214>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2101      	movs	r1, #1
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fb49 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	0e9b      	lsrs	r3, r3, #26
 800147a:	f003 021f 	and.w	r2, r3, #31
 800147e:	e01e      	b.n	80014be <HAL_ADC_ConfigChannel+0x252>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb3e 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800149e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80014a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80014ae:	2320      	movs	r3, #32
 80014b0:	e004      	b.n	80014bc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80014b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d105      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x26a>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0e9b      	lsrs	r3, r3, #26
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	e018      	b.n	8001508 <HAL_ADC_ConfigChannel+0x29c>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80014ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80014f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80014fa:	2320      	movs	r3, #32
 80014fc:	e004      	b.n	8001508 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80014fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001508:	429a      	cmp	r2, r3
 800150a:	d106      	bne.n	800151a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fb0d 	bl	8000b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2102      	movs	r1, #2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff faf1 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10a      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x2da>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fae6 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	0e9b      	lsrs	r3, r3, #26
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	e01e      	b.n	8001584 <HAL_ADC_ConfigChannel+0x318>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2102      	movs	r1, #2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fadb 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001568:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800156c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001574:	2320      	movs	r3, #32
 8001576:	e004      	b.n	8001582 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <HAL_ADC_ConfigChannel+0x330>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0e9b      	lsrs	r3, r3, #26
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	e014      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x35a>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80015aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80015b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80015b8:	2320      	movs	r3, #32
 80015ba:	e004      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80015bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d106      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	2102      	movs	r1, #2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff faae 	bl	8000b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2103      	movs	r1, #3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa92 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10a      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x398>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2103      	movs	r1, #3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fa87 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	0e9b      	lsrs	r3, r3, #26
 80015fe:	f003 021f 	and.w	r2, r3, #31
 8001602:	e017      	b.n	8001634 <HAL_ADC_ConfigChannel+0x3c8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2103      	movs	r1, #3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa7c 	bl	8000b08 <LL_ADC_GetOffsetChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800161c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800161e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001620:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001626:	2320      	movs	r3, #32
 8001628:	e003      	b.n	8001632 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800162a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_ADC_ConfigChannel+0x3e0>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0e9b      	lsrs	r3, r3, #26
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	e011      	b.n	8001670 <HAL_ADC_ConfigChannel+0x404>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800165a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800165c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800165e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001664:	2320      	movs	r3, #32
 8001666:	e003      	b.n	8001670 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001668:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001670:	429a      	cmp	r2, r3
 8001672:	d106      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	2103      	movs	r1, #3
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fa59 	bl	8000b34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb60 	bl	8000d4c <LL_ADC_IsEnabled>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 8140 	bne.w	8001914 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	461a      	mov	r2, r3
 80016a2:	f7ff facd 	bl	8000c40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	4a8f      	ldr	r2, [pc, #572]	@ (80018e8 <HAL_ADC_ConfigChannel+0x67c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f040 8131 	bne.w	8001914 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10b      	bne.n	80016da <HAL_ADC_ConfigChannel+0x46e>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0e9b      	lsrs	r3, r3, #26
 80016c8:	3301      	adds	r3, #1
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2b09      	cmp	r3, #9
 80016d0:	bf94      	ite	ls
 80016d2:	2301      	movls	r3, #1
 80016d4:	2300      	movhi	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	e019      	b.n	800170e <HAL_ADC_ConfigChannel+0x4a2>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80016e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80016ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80016f2:	2320      	movs	r3, #32
 80016f4:	e003      	b.n	80016fe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80016f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2b09      	cmp	r3, #9
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800170e:	2b00      	cmp	r3, #0
 8001710:	d079      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171a:	2b00      	cmp	r3, #0
 800171c:	d107      	bne.n	800172e <HAL_ADC_ConfigChannel+0x4c2>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	3301      	adds	r3, #1
 8001726:	069b      	lsls	r3, r3, #26
 8001728:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800172c:	e015      	b.n	800175a <HAL_ADC_ConfigChannel+0x4ee>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800173c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800173e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001746:	2320      	movs	r3, #32
 8001748:	e003      	b.n	8001752 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800174a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3301      	adds	r3, #1
 8001754:	069b      	lsls	r3, r3, #26
 8001756:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_ADC_ConfigChannel+0x50e>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0e9b      	lsrs	r3, r3, #26
 800176c:	3301      	adds	r3, #1
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	e017      	b.n	80017aa <HAL_ADC_ConfigChannel+0x53e>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800178c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001792:	2320      	movs	r3, #32
 8001794:	e003      	b.n	800179e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	ea42 0103 	orr.w	r1, r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10a      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x564>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0e9b      	lsrs	r3, r3, #26
 80017c0:	3301      	adds	r3, #1
 80017c2:	f003 021f 	and.w	r2, r3, #31
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	051b      	lsls	r3, r3, #20
 80017ce:	e018      	b.n	8001802 <HAL_ADC_ConfigChannel+0x596>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80017de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80017e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80017e8:	2320      	movs	r3, #32
 80017ea:	e003      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80017ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	f003 021f 	and.w	r2, r3, #31
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001802:	430b      	orrs	r3, r1
 8001804:	e081      	b.n	800190a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180e:	2b00      	cmp	r3, #0
 8001810:	d107      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x5b6>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	0e9b      	lsrs	r3, r3, #26
 8001818:	3301      	adds	r3, #1
 800181a:	069b      	lsls	r3, r3, #26
 800181c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001820:	e015      	b.n	800184e <HAL_ADC_ConfigChannel+0x5e2>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800183a:	2320      	movs	r3, #32
 800183c:	e003      	b.n	8001846 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3301      	adds	r3, #1
 8001848:	069b      	lsls	r3, r3, #26
 800184a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_ADC_ConfigChannel+0x602>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0e9b      	lsrs	r3, r3, #26
 8001860:	3301      	adds	r3, #1
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	e017      	b.n	800189e <HAL_ADC_ConfigChannel+0x632>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	61bb      	str	r3, [r7, #24]
  return result;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001886:	2320      	movs	r3, #32
 8001888:	e003      	b.n	8001892 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	ea42 0103 	orr.w	r1, r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10d      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x65e>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0e9b      	lsrs	r3, r3, #26
 80018b4:	3301      	adds	r3, #1
 80018b6:	f003 021f 	and.w	r2, r3, #31
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	3b1e      	subs	r3, #30
 80018c2:	051b      	lsls	r3, r3, #20
 80018c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	e01e      	b.n	8001908 <HAL_ADC_ConfigChannel+0x69c>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	60fb      	str	r3, [r7, #12]
  return result;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80018e2:	2320      	movs	r3, #32
 80018e4:	e006      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x688>
 80018e6:	bf00      	nop
 80018e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f003 021f 	and.w	r2, r3, #31
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	3b1e      	subs	r3, #30
 8001902:	051b      	lsls	r3, r3, #20
 8001904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001908:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f96a 	bl	8000be8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <HAL_ADC_ConfigChannel+0x7a4>)
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d06c      	beq.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001920:	483c      	ldr	r0, [pc, #240]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7a8>)
 8001922:	f7ff f8bf 	bl	8000aa4 <LL_ADC_GetCommonPathInternalCh>
 8001926:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a18 <HAL_ADC_ConfigChannel+0x7ac>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d127      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d121      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a35      	ldr	r2, [pc, #212]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7b0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d157      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800194a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800194e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001952:	4619      	mov	r1, r3
 8001954:	482f      	ldr	r0, [pc, #188]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7a8>)
 8001956:	f7ff f892 	bl	8000a7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800195a:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <HAL_ADC_ConfigChannel+0x7b4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	4a30      	ldr	r2, [pc, #192]	@ (8001a24 <HAL_ADC_ConfigChannel+0x7b8>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001974:	e002      	b.n	800197c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001982:	e03a      	b.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <HAL_ADC_ConfigChannel+0x7bc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d113      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800198e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001992:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7b0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d12a      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ac:	4619      	mov	r1, r3
 80019ae:	4819      	ldr	r0, [pc, #100]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7a8>)
 80019b0:	f7ff f865 	bl	8000a7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019b4:	e021      	b.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1c      	ldr	r2, [pc, #112]	@ (8001a2c <HAL_ADC_ConfigChannel+0x7c0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d11c      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d116      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <HAL_ADC_ConfigChannel+0x7b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d111      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019de:	4619      	mov	r1, r3
 80019e0:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <HAL_ADC_ConfigChannel+0x7a8>)
 80019e2:	f7ff f84c 	bl	8000a7e <LL_ADC_SetCommonPathInternalCh>
 80019e6:	e008      	b.n	80019fa <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a02:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	37d8      	adds	r7, #216	@ 0xd8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	80080000 	.word	0x80080000
 8001a14:	50040300 	.word	0x50040300
 8001a18:	c7520000 	.word	0xc7520000
 8001a1c:	50040000 	.word	0x50040000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	053e2d63 	.word	0x053e2d63
 8001a28:	cb840000 	.word	0xcb840000
 8001a2c:	80000001 	.word	0x80000001

08001a30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f983 	bl	8000d4c <LL_ADC_IsEnabled>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d169      	bne.n	8001b20 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <ADC_Enable+0xfc>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00d      	beq.n	8001a76 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5e:	f043 0210 	orr.w	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e055      	b.n	8001b22 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f952 	bl	8000d24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001a80:	482b      	ldr	r0, [pc, #172]	@ (8001b30 <ADC_Enable+0x100>)
 8001a82:	f7ff f80f 	bl	8000aa4 <LL_ADC_GetCommonPathInternalCh>
 8001a86:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001a88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a90:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <ADC_Enable+0x104>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	4a28      	ldr	r2, [pc, #160]	@ (8001b38 <ADC_Enable+0x108>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001aaa:	e002      	b.n	8001ab2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f9      	bne.n	8001aac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe ff9e 	bl	80009f8 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001abe:	e028      	b.n	8001b12 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f941 	bl	8000d4c <LL_ADC_IsEnabled>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f925 	bl	8000d24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ada:	f7fe ff8d 	bl	80009f8 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d914      	bls.n	8001b12 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d00d      	beq.n	8001b12 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	f043 0210 	orr.w	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e007      	b.n	8001b22 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d1cf      	bne.n	8001ac0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	8000003f 	.word	0x8000003f
 8001b30:	50040300 	.word	0x50040300
 8001b34:	20000000 	.word	0x20000000
 8001b38:	053e2d63 	.word	0x053e2d63

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	@ (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	@ (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff3e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff8e 	bl	8001c30 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5d 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff31 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e098      	b.n	8001ea4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb0 <HAL_DMA_Init+0x150>)
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d80f      	bhi.n	8001d9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb4 <HAL_DMA_Init+0x154>)
 8001d86:	4413      	add	r3, r2
 8001d88:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb8 <HAL_DMA_Init+0x158>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	009a      	lsls	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a48      	ldr	r2, [pc, #288]	@ (8001ebc <HAL_DMA_Init+0x15c>)
 8001d9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d9c:	e00e      	b.n	8001dbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b46      	ldr	r3, [pc, #280]	@ (8001ec0 <HAL_DMA_Init+0x160>)
 8001da6:	4413      	add	r3, r2
 8001da8:	4a43      	ldr	r2, [pc, #268]	@ (8001eb8 <HAL_DMA_Init+0x158>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	009a      	lsls	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a42      	ldr	r2, [pc, #264]	@ (8001ec4 <HAL_DMA_Init+0x164>)
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e16:	d039      	beq.n	8001e8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	4a27      	ldr	r2, [pc, #156]	@ (8001ebc <HAL_DMA_Init+0x15c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d11a      	bne.n	8001e58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e22:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <HAL_DMA_Init+0x168>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f003 031c 	and.w	r3, r3, #28
 8001e2e:	210f      	movs	r1, #15
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4924      	ldr	r1, [pc, #144]	@ (8001ec8 <HAL_DMA_Init+0x168>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <HAL_DMA_Init+0x168>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e48:	f003 031c 	and.w	r3, r3, #28
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	491d      	ldr	r1, [pc, #116]	@ (8001ec8 <HAL_DMA_Init+0x168>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
 8001e56:	e019      	b.n	8001e8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <HAL_DMA_Init+0x16c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e60:	f003 031c 	and.w	r3, r3, #28
 8001e64:	210f      	movs	r1, #15
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4917      	ldr	r1, [pc, #92]	@ (8001ecc <HAL_DMA_Init+0x16c>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_DMA_Init+0x16c>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f003 031c 	and.w	r3, r3, #28
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	4911      	ldr	r1, [pc, #68]	@ (8001ecc <HAL_DMA_Init+0x16c>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40020407 	.word	0x40020407
 8001eb4:	bffdfff8 	.word	0xbffdfff8
 8001eb8:	cccccccd 	.word	0xcccccccd
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	bffdfbf8 	.word	0xbffdfbf8
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	400200a8 	.word	0x400200a8
 8001ecc:	400204a8 	.word	0x400204a8

08001ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	f003 031c 	and.w	r3, r3, #28
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d026      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x7a>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d021      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f28:	f003 021c 	and.w	r2, r3, #28
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	2104      	movs	r1, #4
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d071      	beq.n	8002024 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f48:	e06c      	b.n	8002024 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f003 031c 	and.w	r3, r3, #28
 8001f52:	2202      	movs	r2, #2
 8001f54:	409a      	lsls	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d02e      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xec>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d029      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10b      	bne.n	8001f8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020a 	bic.w	r2, r2, #10
 8001f84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f003 021c 	and.w	r2, r3, #28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d038      	beq.n	8002024 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001fba:	e033      	b.n	8002024 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	f003 031c 	and.w	r3, r3, #28
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d02a      	beq.n	8002026 <HAL_DMA_IRQHandler+0x156>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d025      	beq.n	8002026 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 020e 	bic.w	r2, r2, #14
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f003 021c 	and.w	r2, r3, #28
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002024:	bf00      	nop
 8002026:	bf00      	nop
}
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	e148      	b.n	80022d2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 813a 	beq.w	80022cc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_Init+0x40>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d130      	bne.n	80020d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a6:	2201      	movs	r2, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 0201 	and.w	r2, r3, #1
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d017      	beq.n	800210e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d123      	bne.n	8002162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	6939      	ldr	r1, [r7, #16]
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0203 	and.w	r2, r3, #3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8094 	beq.w	80022cc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a4:	4b52      	ldr	r3, [pc, #328]	@ (80022f0 <HAL_GPIO_Init+0x2c0>)
 80021a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a8:	4a51      	ldr	r2, [pc, #324]	@ (80022f0 <HAL_GPIO_Init+0x2c0>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b0:	4b4f      	ldr	r3, [pc, #316]	@ (80022f0 <HAL_GPIO_Init+0x2c0>)
 80021b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021bc:	4a4d      	ldr	r2, [pc, #308]	@ (80022f4 <HAL_GPIO_Init+0x2c4>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1d4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a43      	ldr	r2, [pc, #268]	@ (80022f8 <HAL_GPIO_Init+0x2c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1d0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a42      	ldr	r2, [pc, #264]	@ (80022fc <HAL_GPIO_Init+0x2cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1cc>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e004      	b.n	8002206 <HAL_GPIO_Init+0x1d6>
 80021fc:	2307      	movs	r3, #7
 80021fe:	e002      	b.n	8002206 <HAL_GPIO_Init+0x1d6>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x1d6>
 8002204:	2300      	movs	r3, #0
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	f002 0203 	and.w	r2, r2, #3
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	4093      	lsls	r3, r2
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002216:	4937      	ldr	r1, [pc, #220]	@ (80022f4 <HAL_GPIO_Init+0x2c4>)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002248:	4a2d      	ldr	r2, [pc, #180]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800224e:	4b2c      	ldr	r3, [pc, #176]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002272:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002278:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022a2:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f aeaf 	bne.w	8002040 <HAL_GPIO_Init+0x10>
  }
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	48000400 	.word	0x48000400
 80022fc:	48000800 	.word	0x48000800
 8002300:	40010400 	.word	0x40010400

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002320:	e002      	b.n	8002328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <HAL_PWREx_GetVoltageRange+0x18>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000

08002350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235e:	d130      	bne.n	80023c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002360:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236c:	d038      	beq.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002376:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002378:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800237e:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2232      	movs	r2, #50	@ 0x32
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	4a1b      	ldr	r2, [pc, #108]	@ (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	3301      	adds	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002394:	e002      	b.n	800239c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3b01      	subs	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a8:	d102      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f2      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023bc:	d110      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e00f      	b.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d007      	beq.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d0:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d8:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40007000 	.word	0x40007000
 80023f4:	20000000 	.word	0x20000000
 80023f8:	431bde83 	.word	0x431bde83

080023fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f000 bc02 	b.w	8002c14 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002410:	4b96      	ldr	r3, [pc, #600]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241a:	4b94      	ldr	r3, [pc, #592]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80e4 	beq.w	80025fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <HAL_RCC_OscConfig+0x4c>
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	f040 808b 	bne.w	8002556 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b01      	cmp	r3, #1
 8002444:	f040 8087 	bne.w	8002556 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002448:	4b88      	ldr	r3, [pc, #544]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x64>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e3d9      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	4b81      	ldr	r3, [pc, #516]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <HAL_RCC_OscConfig+0x7e>
 8002470:	4b7e      	ldr	r3, [pc, #504]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002478:	e005      	b.n	8002486 <HAL_RCC_OscConfig+0x8a>
 800247a:	4b7c      	ldr	r3, [pc, #496]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002486:	4293      	cmp	r3, r2
 8002488:	d223      	bcs.n	80024d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fd54 	bl	8002f3c <RCC_SetFlashLatencyFromMSIRange>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e3ba      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249e:	4b73      	ldr	r3, [pc, #460]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a72      	ldr	r2, [pc, #456]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b70      	ldr	r3, [pc, #448]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	496d      	ldr	r1, [pc, #436]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024bc:	4b6b      	ldr	r3, [pc, #428]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	4968      	ldr	r1, [pc, #416]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e025      	b.n	800251e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d2:	4b66      	ldr	r3, [pc, #408]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a65      	ldr	r2, [pc, #404]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4960      	ldr	r1, [pc, #384]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f0:	4b5e      	ldr	r3, [pc, #376]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	495b      	ldr	r1, [pc, #364]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fd14 	bl	8002f3c <RCC_SetFlashLatencyFromMSIRange>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e37a      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251e:	f000 fc81 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b51      	ldr	r3, [pc, #324]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	4950      	ldr	r1, [pc, #320]	@ (8002670 <HAL_RCC_OscConfig+0x274>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a4e      	ldr	r2, [pc, #312]	@ (8002674 <HAL_RCC_OscConfig+0x278>)
 800253c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800253e:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <HAL_RCC_OscConfig+0x27c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fa08 	bl	8000958 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d052      	beq.n	80025f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	e35e      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d032      	beq.n	80025c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800255e:	4b43      	ldr	r3, [pc, #268]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a42      	ldr	r2, [pc, #264]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800256a:	f7fe fa45 	bl	80009f8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002572:	f7fe fa41 	bl	80009f8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e347      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002584:	4b39      	ldr	r3, [pc, #228]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002590:	4b36      	ldr	r3, [pc, #216]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a35      	ldr	r2, [pc, #212]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002596:	f043 0308 	orr.w	r3, r3, #8
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b33      	ldr	r3, [pc, #204]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4930      	ldr	r1, [pc, #192]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ae:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	492b      	ldr	r1, [pc, #172]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
 80025c2:	e01a      	b.n	80025fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025c4:	4b29      	ldr	r3, [pc, #164]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a28      	ldr	r2, [pc, #160]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fa12 	bl	80009f8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d8:	f7fe fa0e 	bl	80009f8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e314      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1dc>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d073      	beq.n	80026ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d005      	beq.n	8002618 <HAL_RCC_OscConfig+0x21c>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d10e      	bne.n	8002630 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d10b      	bne.n	8002630 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d063      	beq.n	80026ec <HAL_RCC_OscConfig+0x2f0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d15f      	bne.n	80026ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e2f1      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002638:	d106      	bne.n	8002648 <HAL_RCC_OscConfig+0x24c>
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e025      	b.n	8002694 <HAL_RCC_OscConfig+0x298>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002650:	d114      	bne.n	800267c <HAL_RCC_OscConfig+0x280>
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a05      	ldr	r2, [pc, #20]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b03      	ldr	r3, [pc, #12]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a02      	ldr	r2, [pc, #8]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e013      	b.n	8002694 <HAL_RCC_OscConfig+0x298>
 800266c:	40021000 	.word	0x40021000
 8002670:	080043a8 	.word	0x080043a8
 8002674:	20000000 	.word	0x20000000
 8002678:	20000004 	.word	0x20000004
 800267c:	4ba0      	ldr	r3, [pc, #640]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a9f      	ldr	r2, [pc, #636]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b9d      	ldr	r3, [pc, #628]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a9c      	ldr	r2, [pc, #624]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe f9ac 	bl	80009f8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe f9a8 	bl	80009f8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	@ 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2ae      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b6:	4b92      	ldr	r3, [pc, #584]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2a8>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe f998 	bl	80009f8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe f994 	bl	80009f8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	@ 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e29a      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026de:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d0>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d060      	beq.n	80027bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x310>
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d119      	bne.n	800273a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d116      	bne.n	800273a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270c:	4b7c      	ldr	r3, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x328>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e277      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b76      	ldr	r3, [pc, #472]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	4973      	ldr	r1, [pc, #460]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002738:	e040      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d023      	beq.n	800278a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002742:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6e      	ldr	r2, [pc, #440]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe f953 	bl	80009f8 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002756:	f7fe f94f 	bl	80009f8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e255      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002768:	4b65      	ldr	r3, [pc, #404]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b62      	ldr	r3, [pc, #392]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	495f      	ldr	r1, [pc, #380]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e018      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b5d      	ldr	r3, [pc, #372]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5c      	ldr	r2, [pc, #368]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe f92f 	bl	80009f8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe f92b 	bl	80009f8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e231      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b0:	4b53      	ldr	r3, [pc, #332]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03c      	beq.n	8002842 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01c      	beq.n	800280a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe f90a 	bl	80009f8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe f906 	bl	80009f8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e20c      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fa:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x3ec>
 8002808:	e01b      	b.n	8002842 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002810:	4a3b      	ldr	r2, [pc, #236]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe f8ed 	bl	80009f8 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe f8e9 	bl	80009f8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1ef      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002834:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a6 	beq.w	800299c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002854:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	4a26      	ldr	r2, [pc, #152]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	@ 0x58
 800286c:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287c:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d118      	bne.n	80028ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002888:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002892:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002894:	f7fe f8b0 	bl	80009f8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe f8ac 	bl	80009f8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1b2      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4d8>
 80028c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d2:	e029      	b.n	8002928 <HAL_RCC_OscConfig+0x52c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d115      	bne.n	8002908 <HAL_RCC_OscConfig+0x50c>
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	4a03      	ldr	r2, [pc, #12]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x52c>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	4b9a      	ldr	r3, [pc, #616]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	4a99      	ldr	r2, [pc, #612]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002918:	4b96      	ldr	r3, [pc, #600]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	4a95      	ldr	r2, [pc, #596]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe f862 	bl	80009f8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe f85e 	bl	80009f8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e162      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	4b89      	ldr	r3, [pc, #548]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ed      	beq.n	8002938 <HAL_RCC_OscConfig+0x53c>
 800295c:	e015      	b.n	800298a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe f84b 	bl	80009f8 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe f847 	bl	80009f8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e14b      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297c:	4b7d      	ldr	r3, [pc, #500]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ed      	bne.n	8002966 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298a:	7ffb      	ldrb	r3, [r7, #31]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b78      	ldr	r3, [pc, #480]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	4a77      	ldr	r2, [pc, #476]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01c      	beq.n	80029ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029b0:	4b70      	ldr	r3, [pc, #448]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 80029b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe f81a 	bl	80009f8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c8:	f7fe f816 	bl	80009f8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e11c      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029da:	4b66      	ldr	r3, [pc, #408]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 80029dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <HAL_RCC_OscConfig+0x5cc>
 80029e8:	e01b      	b.n	8002a22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ea:	4b62      	ldr	r3, [pc, #392]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 80029ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029f0:	4a60      	ldr	r2, [pc, #384]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fd fffd 	bl	80009f8 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a02:	f7fd fff9 	bl	80009f8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e0ff      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a14:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80f3 	beq.w	8002c12 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	f040 80c9 	bne.w	8002bc8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a36:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f003 0203 	and.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d12c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	3b01      	subs	r3, #1
 8002a56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d123      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d113      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d06b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d062      	beq.n	8002b70 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aaa:	4b32      	ldr	r3, [pc, #200]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0ac      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aba:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2d      	ldr	r2, [pc, #180]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002ac0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac6:	f7fd ff97 	bl	80009f8 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fd ff93 	bl	80009f8 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e099      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aec:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_RCC_OscConfig+0x77c>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002afc:	3a01      	subs	r2, #1
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	4311      	orrs	r1, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b06:	0212      	lsls	r2, r2, #8
 8002b08:	4311      	orrs	r1, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b0e:	0852      	lsrs	r2, r2, #1
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0552      	lsls	r2, r2, #21
 8002b14:	4311      	orrs	r1, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b1a:	0852      	lsrs	r2, r2, #1
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	0652      	lsls	r2, r2, #25
 8002b20:	4311      	orrs	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b26:	06d2      	lsls	r2, r2, #27
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	4912      	ldr	r1, [pc, #72]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b30:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0f      	ldr	r2, [pc, #60]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b48:	f7fd ff56 	bl	80009f8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fd ff52 	bl	80009f8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e058      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <HAL_RCC_OscConfig+0x778>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6e:	e050      	b.n	8002c12 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e04f      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7c:	4b27      	ldr	r3, [pc, #156]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d144      	bne.n	8002c12 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b94:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a20      	ldr	r2, [pc, #128]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba0:	f7fd ff2a 	bl	80009f8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fd ff26 	bl	80009f8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e02c      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x7ac>
 8002bc6:	e024      	b.n	8002c12 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d01f      	beq.n	8002c0e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a12      	ldr	r2, [pc, #72]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002bd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fd ff0d 	bl	80009f8 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7fd ff09 	bl	80009f8 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	4905      	ldr	r1, [pc, #20]	@ (8002c1c <HAL_RCC_OscConfig+0x820>)
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_RCC_OscConfig+0x824>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
 8002c0c:	e001      	b.n	8002c12 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	feeefffc 	.word	0xfeeefffc

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0e7      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b75      	ldr	r3, [pc, #468]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d910      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b72      	ldr	r3, [pc, #456]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 0207 	bic.w	r2, r3, #7
 8002c4e:	4970      	ldr	r1, [pc, #448]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b6e      	ldr	r3, [pc, #440]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cf      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b66      	ldr	r3, [pc, #408]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d908      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b63      	ldr	r3, [pc, #396]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4960      	ldr	r1, [pc, #384]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04c      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	4b5a      	ldr	r3, [pc, #360]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d121      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0a6      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc2:	4b54      	ldr	r3, [pc, #336]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d115      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e09a      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cda:	4b4e      	ldr	r3, [pc, #312]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e08e      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cea:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e086      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	4b46      	ldr	r3, [pc, #280]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 0203 	bic.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4943      	ldr	r1, [pc, #268]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d0c:	f7fd fe74 	bl	80009f8 <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fd fe70 	bl	80009f8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e06e      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 020c 	and.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d1eb      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d208      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b2e      	ldr	r3, [pc, #184]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	492b      	ldr	r1, [pc, #172]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6a:	4b29      	ldr	r3, [pc, #164]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d210      	bcs.n	8002d9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d78:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 0207 	bic.w	r2, r3, #7
 8002d80:	4923      	ldr	r1, [pc, #140]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d88:	4b21      	ldr	r3, [pc, #132]	@ (8002e10 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e036      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4918      	ldr	r1, [pc, #96]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc4:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4910      	ldr	r1, [pc, #64]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd8:	f000 f824 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b0d      	ldr	r3, [pc, #52]	@ (8002e14 <HAL_RCC_ClockConfig+0x1f0>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	490b      	ldr	r1, [pc, #44]	@ (8002e18 <HAL_RCC_ClockConfig+0x1f4>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	4a09      	ldr	r2, [pc, #36]	@ (8002e1c <HAL_RCC_ClockConfig+0x1f8>)
 8002df6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_RCC_ClockConfig+0x1fc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd fdab 	bl	8000958 <HAL_InitTick>
 8002e02:	4603      	mov	r3, r0
 8002e04:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e06:	7afb      	ldrb	r3, [r7, #11]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40021000 	.word	0x40021000
 8002e18:	080043a8 	.word	0x080043a8
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	@ 0x24
 8002e28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e32:	4b3e      	ldr	r3, [pc, #248]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d121      	bne.n	8002e96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d11e      	bne.n	8002e96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e58:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e64:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	e005      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e74:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e80:	4a2b      	ldr	r2, [pc, #172]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d102      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e9c:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e004      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d134      	bne.n	8002f1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0xa6>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d003      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ec8:	e005      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eca:	4b1a      	ldr	r3, [pc, #104]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ecc:	617b      	str	r3, [r7, #20]
      break;
 8002ece:	e005      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ed2:	617b      	str	r3, [r7, #20]
      break;
 8002ed4:	e002      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	617b      	str	r3, [r7, #20]
      break;
 8002eda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	fb03 f202 	mul.w	r2, r3, r2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	0e5b      	lsrs	r3, r3, #25
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	@ 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	080043b8 	.word	0x080043b8
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	007a1200 	.word	0x007a1200

08002f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f54:	f7ff f9ee 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8002f58:	6178      	str	r0, [r7, #20]
 8002f5a:	e014      	b.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	4a24      	ldr	r2, [pc, #144]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f68:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f74:	f7ff f9de 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8002f78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8c:	d10b      	bne.n	8002fa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	d919      	bls.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f98:	d902      	bls.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e013      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	e010      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b80      	cmp	r3, #128	@ 0x80
 8002faa:	d902      	bls.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fac:	2303      	movs	r3, #3
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e00a      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b80      	cmp	r3, #128	@ 0x80
 8002fb6:	d102      	bne.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb8:	2302      	movs	r3, #2
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e004      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b70      	cmp	r3, #112	@ 0x70
 8002fc2:	d101      	bne.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 0207 	bic.w	r2, r3, #7
 8002fd0:	4909      	ldr	r1, [pc, #36]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fd8:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40022000 	.word	0x40022000

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003004:	2300      	movs	r3, #0
 8003006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003008:	2300      	movs	r3, #0
 800300a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003014:	2b00      	cmp	r3, #0
 8003016:	d031      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003020:	d01a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003022:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003026:	d814      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800302c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003030:	d10f      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003032:	4b5d      	ldr	r3, [pc, #372]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4a5c      	ldr	r2, [pc, #368]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303e:	e00c      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f9ce 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003050:	e003      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	74fb      	strb	r3, [r7, #19]
      break;
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003060:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	494e      	ldr	r1, [pc, #312]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003076:	e001      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 809e 	beq.w	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800308e:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	4a3f      	ldr	r2, [pc, #252]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b0:	4b3d      	ldr	r3, [pc, #244]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030bc:	2301      	movs	r3, #1
 80030be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c0:	4b3a      	ldr	r3, [pc, #232]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a39      	ldr	r2, [pc, #228]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030cc:	f7fd fc94 	bl	80009f8 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d2:	e009      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d4:	f7fd fc90 	bl	80009f8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d902      	bls.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	74fb      	strb	r3, [r7, #19]
        break;
 80030e6:	e005      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030e8:	4b30      	ldr	r3, [pc, #192]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ef      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d15a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030fa:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003104:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01e      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	429a      	cmp	r2, r3
 8003114:	d019      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003116:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003120:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003122:	4b21      	ldr	r3, [pc, #132]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003128:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003142:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fd fc50 	bl	80009f8 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	e00b      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fd fc4c 	bl	80009f8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d902      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	74fb      	strb	r3, [r7, #19]
            break;
 8003172:	e006      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003174:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ec      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003188:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003196:	4904      	ldr	r1, [pc, #16]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800319e:	e009      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
 80031a4:	e006      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b4:	7c7b      	ldrb	r3, [r7, #17]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b8a      	ldr	r3, [pc, #552]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	4a89      	ldr	r2, [pc, #548]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d2:	4b84      	ldr	r3, [pc, #528]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f023 0203 	bic.w	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4980      	ldr	r1, [pc, #512]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f4:	4b7b      	ldr	r3, [pc, #492]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	f023 020c 	bic.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	4978      	ldr	r1, [pc, #480]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003216:	4b73      	ldr	r3, [pc, #460]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	496f      	ldr	r1, [pc, #444]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003238:	4b6a      	ldr	r3, [pc, #424]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003246:	4967      	ldr	r1, [pc, #412]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800325a:	4b62      	ldr	r3, [pc, #392]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	495e      	ldr	r1, [pc, #376]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327c:	4b59      	ldr	r3, [pc, #356]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	4956      	ldr	r1, [pc, #344]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800329e:	4b51      	ldr	r3, [pc, #324]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	494d      	ldr	r1, [pc, #308]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d028      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c0:	4b48      	ldr	r3, [pc, #288]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4945      	ldr	r1, [pc, #276]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032de:	d106      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e0:	4b40      	ldr	r3, [pc, #256]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a3f      	ldr	r2, [pc, #252]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ea:	60d3      	str	r3, [r2, #12]
 80032ec:	e011      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032f6:	d10c      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f872 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d028      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800331e:	4b31      	ldr	r3, [pc, #196]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003324:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	492d      	ldr	r1, [pc, #180]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800333c:	d106      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800333e:	4b29      	ldr	r3, [pc, #164]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a28      	ldr	r2, [pc, #160]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003344:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003348:	60d3      	str	r3, [r2, #12]
 800334a:	e011      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003350:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2101      	movs	r1, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f843 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003382:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	4916      	ldr	r1, [pc, #88]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800339a:	d10c      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	2102      	movs	r1, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f820 	bl	80033e8 <RCCEx_PLLSAI1_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033c2:	4b08      	ldr	r3, [pc, #32]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d0:	4904      	ldr	r1, [pc, #16]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000

080033e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033f6:	4b74      	ldr	r3, [pc, #464]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003402:	4b71      	ldr	r3, [pc, #452]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d10d      	bne.n	800342e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
       ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800341a:	4b6b      	ldr	r3, [pc, #428]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
       ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d047      	beq.n	80034be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e044      	b.n	80034be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d018      	beq.n	800346e <RCCEx_PLLSAI1_Config+0x86>
 800343c:	2b03      	cmp	r3, #3
 800343e:	d825      	bhi.n	800348c <RCCEx_PLLSAI1_Config+0xa4>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d002      	beq.n	800344a <RCCEx_PLLSAI1_Config+0x62>
 8003444:	2b02      	cmp	r3, #2
 8003446:	d009      	beq.n	800345c <RCCEx_PLLSAI1_Config+0x74>
 8003448:	e020      	b.n	800348c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344a:	4b5f      	ldr	r3, [pc, #380]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11d      	bne.n	8003492 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345a:	e01a      	b.n	8003492 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800345c:	4b5a      	ldr	r3, [pc, #360]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346c:	e013      	b.n	8003496 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800346e:	4b56      	ldr	r3, [pc, #344]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347a:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348a:	e006      	b.n	800349a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e004      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349a:	bf00      	nop
    }

    if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a2:	4b49      	ldr	r3, [pc, #292]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	430b      	orrs	r3, r1
 80034b8:	4943      	ldr	r1, [pc, #268]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d17c      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034c4:	4b40      	ldr	r3, [pc, #256]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a3f      	ldr	r2, [pc, #252]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d0:	f7fd fa92 	bl	80009f8 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d6:	e009      	b.n	80034ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d8:	f7fd fa8e 	bl	80009f8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d902      	bls.n	80034ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ea:	e005      	b.n	80034f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ec:	4b36      	ldr	r3, [pc, #216]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ef      	bne.n	80034d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d15f      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d110      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003504:	4b30      	ldr	r3, [pc, #192]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800350c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6892      	ldr	r2, [r2, #8]
 8003514:	0211      	lsls	r1, r2, #8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	06d2      	lsls	r2, r2, #27
 800351c:	430a      	orrs	r2, r1
 800351e:	492a      	ldr	r1, [pc, #168]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003520:	4313      	orrs	r3, r2
 8003522:	610b      	str	r3, [r1, #16]
 8003524:	e027      	b.n	8003576 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d112      	bne.n	8003552 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800352c:	4b26      	ldr	r3, [pc, #152]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6892      	ldr	r2, [r2, #8]
 800353c:	0211      	lsls	r1, r2, #8
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6912      	ldr	r2, [r2, #16]
 8003542:	0852      	lsrs	r2, r2, #1
 8003544:	3a01      	subs	r2, #1
 8003546:	0552      	lsls	r2, r2, #21
 8003548:	430a      	orrs	r2, r1
 800354a:	491f      	ldr	r1, [pc, #124]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	610b      	str	r3, [r1, #16]
 8003550:	e011      	b.n	8003576 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003552:	4b1d      	ldr	r3, [pc, #116]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800355a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6892      	ldr	r2, [r2, #8]
 8003562:	0211      	lsls	r1, r2, #8
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6952      	ldr	r2, [r2, #20]
 8003568:	0852      	lsrs	r2, r2, #1
 800356a:	3a01      	subs	r2, #1
 800356c:	0652      	lsls	r2, r2, #25
 800356e:	430a      	orrs	r2, r1
 8003570:	4915      	ldr	r1, [pc, #84]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003572:	4313      	orrs	r3, r2
 8003574:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a13      	ldr	r2, [pc, #76]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003580:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fd fa39 	bl	80009f8 <HAL_GetTick>
 8003586:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003588:	e009      	b.n	800359e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358a:	f7fd fa35 	bl	80009f8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d902      	bls.n	800359e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	73fb      	strb	r3, [r7, #15]
          break;
 800359c:	e005      	b.n	80035aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0ef      	beq.n	800358a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4903      	ldr	r1, [pc, #12]	@ (80035c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000

080035cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e095      	b.n	800370a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ee:	d009      	beq.n	8003604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	61da      	str	r2, [r3, #28]
 80035f6:	e005      	b.n	8003604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd f898 	bl	8000754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800363a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003644:	d902      	bls.n	800364c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e002      	b.n	8003652 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800364c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003650:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800365a:	d007      	beq.n	800366c <HAL_SPI_Init+0xa0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003664:	d002      	beq.n	800366c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ae:	ea42 0103 	orr.w	r1, r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	f003 0204 	and.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036e8:	ea42 0103 	orr.w	r1, r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b08a      	sub	sp, #40	@ 0x28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003720:	2301      	movs	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003724:	f7fd f968 	bl	80009f8 <HAL_GetTick>
 8003728:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003730:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003740:	7ffb      	ldrb	r3, [r7, #31]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d00c      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x4e>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800374c:	d106      	bne.n	800375c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_SPI_TransmitReceive+0x4a>
 8003756:	7ffb      	ldrb	r3, [r7, #31]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d001      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	e1f3      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x60>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x60>
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1e8      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x72>
 8003780:	2302      	movs	r3, #2
 8003782:	e1e1      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x436>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b04      	cmp	r3, #4
 8003796:	d003      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2205      	movs	r2, #5
 800379c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	887a      	ldrh	r2, [r7, #2]
 80037c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037e2:	d802      	bhi.n	80037ea <HAL_SPI_TransmitReceive+0xd8>
 80037e4:	8abb      	ldrh	r3, [r7, #20]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d908      	bls.n	80037fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	e007      	b.n	800380c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d007      	beq.n	800382a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003832:	f240 8083 	bls.w	800393c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x132>
 800383e:	8afb      	ldrh	r3, [r7, #22]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d16f      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003868:	e05c      	b.n	8003924 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	d11b      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x19e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_SPI_TransmitReceive+0x19e>
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	2b01      	cmp	r3, #1
 8003886:	d113      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d11c      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x1e6>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	b292      	uxth	r2, r2
 80038d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038f8:	f7fd f87e 	bl	80009f8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003904:	429a      	cmp	r2, r3
 8003906:	d80d      	bhi.n	8003924 <HAL_SPI_TransmitReceive+0x212>
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800390e:	d009      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e111      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d19d      	bne.n	800386a <HAL_SPI_TransmitReceive+0x158>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d197      	bne.n	800386a <HAL_SPI_TransmitReceive+0x158>
 800393a:	e0e5      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_SPI_TransmitReceive+0x23a>
 8003944:	8afb      	ldrh	r3, [r7, #22]
 8003946:	2b01      	cmp	r3, #1
 8003948:	f040 80d1 	bne.w	8003aee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d912      	bls.n	800397c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395a:	881a      	ldrh	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003966:	1c9a      	adds	r2, r3, #2
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b02      	subs	r3, #2
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800397a:	e0b8      	b.n	8003aee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a2:	e0a4      	b.n	8003aee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d134      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x30a>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02f      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x30a>
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d12c      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d912      	bls.n	80039f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b02      	subs	r3, #2
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039f0:	e012      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	7812      	ldrb	r2, [r2, #0]
 80039fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d148      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x3aa>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d042      	beq.n	8003abc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d923      	bls.n	8003a8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b02      	subs	r3, #2
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d81f      	bhi.n	8003ab8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	e016      	b.n	8003ab8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f103 020c 	add.w	r2, r3, #12
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003abc:	f7fc ff9c 	bl	80009f8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d803      	bhi.n	8003ad4 <HAL_SPI_TransmitReceive+0x3c2>
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x3c8>
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e02c      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f47f af55 	bne.w	80039a4 <HAL_SPI_TransmitReceive+0x292>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f47f af4e 	bne.w	80039a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b08:	6a3a      	ldr	r2, [r7, #32]
 8003b0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f93d 	bl	8003d8c <SPI_EndRxTxTransaction>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00e      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003b46:	2300      	movs	r3, #0
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3728      	adds	r7, #40	@ 0x28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b60:	f7fc ff4a 	bl	80009f8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b70:	f7fc ff42 	bl	80009f8 <HAL_GetTick>
 8003b74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b76:	4b39      	ldr	r3, [pc, #228]	@ (8003c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	015b      	lsls	r3, r3, #5
 8003b7c:	0d1b      	lsrs	r3, r3, #20
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b86:	e054      	b.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b8e:	d050      	beq.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b90:	f7fc ff32 	bl	80009f8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d902      	bls.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d13d      	bne.n	8003c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bbe:	d111      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc8:	d004      	beq.n	8003bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd2:	d107      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bec:	d10f      	bne.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e017      	b.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d19b      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000000 	.word	0x20000000

08003c60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c72:	f7fc fec1 	bl	80009f8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c82:	f7fc feb9 	bl	80009f8 <HAL_GetTick>
 8003c86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c90:	4b3d      	ldr	r3, [pc, #244]	@ (8003d88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00da      	lsls	r2, r3, #3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	0d1b      	lsrs	r3, r3, #20
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ca8:	e060      	b.n	8003d6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cb0:	d107      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc8:	d050      	beq.n	8003d6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cca:	f7fc fe95 	bl	80009f8 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d902      	bls.n	8003ce0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d13d      	bne.n	8003d5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cf8:	d111      	bne.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d02:	d004      	beq.n	8003d0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0c:	d107      	bne.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d26:	d10f      	bne.n	8003d48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e010      	b.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d196      	bne.n	8003caa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3728      	adds	r7, #40	@ 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000000 	.word	0x20000000

08003d8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ff5b 	bl	8003c60 <SPI_WaitFifoStateUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e027      	b.n	8003e10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2180      	movs	r1, #128	@ 0x80
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff fec0 	bl	8003b50 <SPI_WaitFlagStateUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e014      	b.n	8003e10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff34 	bl	8003c60 <SPI_WaitFifoStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e000      	b.n	8003e10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e049      	b.n	8003ebe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fc fcdc 	bl	80007fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f000 f8fe 	bl	8004058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_ConfigClockSource+0x1c>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0b6      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x18a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f00:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f0c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1e:	d03e      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xd8>
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f24:	f200 8087 	bhi.w	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2c:	f000 8086 	beq.w	800403c <HAL_TIM_ConfigClockSource+0x176>
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f34:	d87f      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f36:	2b70      	cmp	r3, #112	@ 0x70
 8003f38:	d01a      	beq.n	8003f70 <HAL_TIM_ConfigClockSource+0xaa>
 8003f3a:	2b70      	cmp	r3, #112	@ 0x70
 8003f3c:	d87b      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f3e:	2b60      	cmp	r3, #96	@ 0x60
 8003f40:	d050      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x11e>
 8003f42:	2b60      	cmp	r3, #96	@ 0x60
 8003f44:	d877      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f46:	2b50      	cmp	r3, #80	@ 0x50
 8003f48:	d03c      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0xfe>
 8003f4a:	2b50      	cmp	r3, #80	@ 0x50
 8003f4c:	d873      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d058      	beq.n	8004004 <HAL_TIM_ConfigClockSource+0x13e>
 8003f52:	2b40      	cmp	r3, #64	@ 0x40
 8003f54:	d86f      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f56:	2b30      	cmp	r3, #48	@ 0x30
 8003f58:	d064      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15e>
 8003f5a:	2b30      	cmp	r3, #48	@ 0x30
 8003f5c:	d86b      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d060      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15e>
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d867      	bhi.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d05c      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15e>
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d05a      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x15e>
 8003f6e:	e062      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f80:	f000 f954 	bl	800422c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e04f      	b.n	800403e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fae:	f000 f93d 	bl	800422c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fc0:	609a      	str	r2, [r3, #8]
      break;
 8003fc2:	e03c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f000 f8b1 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2150      	movs	r1, #80	@ 0x50
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f90a 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8003fe2:	e02c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f000 f8d0 	bl	8004196 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2160      	movs	r1, #96	@ 0x60
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f8fa 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8004002:	e01c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004010:	461a      	mov	r2, r3
 8004012:	f000 f891 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2140      	movs	r1, #64	@ 0x40
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f8ea 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8004022:	e00c      	b.n	800403e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f000 f8e1 	bl	80041f6 <TIM_ITRx_SetConfig>
      break;
 8004034:	e003      	b.n	800403e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
      break;
 800403a:	e000      	b.n	800403e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800403c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a30      	ldr	r2, [pc, #192]	@ (800412c <TIM_Base_SetConfig+0xd4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0x20>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004076:	d108      	bne.n	800408a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a27      	ldr	r2, [pc, #156]	@ (800412c <TIM_Base_SetConfig+0xd4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <TIM_Base_SetConfig+0x52>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d007      	beq.n	80040aa <TIM_Base_SetConfig+0x52>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a24      	ldr	r2, [pc, #144]	@ (8004130 <TIM_Base_SetConfig+0xd8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0x52>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a23      	ldr	r2, [pc, #140]	@ (8004134 <TIM_Base_SetConfig+0xdc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a12      	ldr	r2, [pc, #72]	@ (800412c <TIM_Base_SetConfig+0xd4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_Base_SetConfig+0xa0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a11      	ldr	r2, [pc, #68]	@ (8004130 <TIM_Base_SetConfig+0xd8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0xa0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a10      	ldr	r2, [pc, #64]	@ (8004134 <TIM_Base_SetConfig+0xdc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d105      	bne.n	800411e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	611a      	str	r2, [r3, #16]
  }
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40014000 	.word	0x40014000
 8004134:	40014400 	.word	0x40014400

08004138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 030a 	bic.w	r3, r3, #10
 8004174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004196:	b480      	push	{r7}
 8004198:	b087      	sub	sp, #28
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f023 0210 	bic.w	r2, r3, #16
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	031b      	lsls	r3, r3, #12
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	f043 0307 	orr.w	r3, r3, #7
 8004218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	431a      	orrs	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	609a      	str	r2, [r3, #8]
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	e04f      	b.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a21      	ldr	r2, [pc, #132]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d108      	bne.n	80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ec:	d004      	beq.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a10      	ldr	r2, [pc, #64]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10c      	bne.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40014000 	.word	0x40014000

08004338 <memset>:
 8004338:	4402      	add	r2, r0
 800433a:	4603      	mov	r3, r0
 800433c:	4293      	cmp	r3, r2
 800433e:	d100      	bne.n	8004342 <memset+0xa>
 8004340:	4770      	bx	lr
 8004342:	f803 1b01 	strb.w	r1, [r3], #1
 8004346:	e7f9      	b.n	800433c <memset+0x4>

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4d0d      	ldr	r5, [pc, #52]	@ (8004380 <__libc_init_array+0x38>)
 800434c:	4c0d      	ldr	r4, [pc, #52]	@ (8004384 <__libc_init_array+0x3c>)
 800434e:	1b64      	subs	r4, r4, r5
 8004350:	10a4      	asrs	r4, r4, #2
 8004352:	2600      	movs	r6, #0
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	4d0b      	ldr	r5, [pc, #44]	@ (8004388 <__libc_init_array+0x40>)
 800435a:	4c0c      	ldr	r4, [pc, #48]	@ (800438c <__libc_init_array+0x44>)
 800435c:	f000 f818 	bl	8004390 <_init>
 8004360:	1b64      	subs	r4, r4, r5
 8004362:	10a4      	asrs	r4, r4, #2
 8004364:	2600      	movs	r6, #0
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	f855 3b04 	ldr.w	r3, [r5], #4
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	080043e8 	.word	0x080043e8
 8004384:	080043e8 	.word	0x080043e8
 8004388:	080043e8 	.word	0x080043e8
 800438c:	080043ec 	.word	0x080043ec

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
