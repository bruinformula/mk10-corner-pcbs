
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc8  08005cc8  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd0  08005cd0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cd4  08005cd4  00006cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005cd8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000000c  08005ce4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08005ce4  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b53f  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bce  00000000  00000000  0002257b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00026150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ea  00000000  00000000  00027998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004565  00000000  00000000  00028c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea90  00000000  00000000  0002d1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2a03  00000000  00000000  0004bc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e67a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  0012e6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00134ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c68 	.word	0x08005c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08005c68 	.word	0x08005c68

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a20:	f000 b988 	b.w	8000d34 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	468e      	mov	lr, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	4688      	mov	r8, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d962      	bls.n	8000b18 <__udivmoddi4+0xdc>
 8000a52:	fab2 f682 	clz	r6, r2
 8000a56:	b14e      	cbz	r6, 8000a6c <__udivmoddi4+0x30>
 8000a58:	f1c6 0320 	rsb	r3, r6, #32
 8000a5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a60:	fa20 f303 	lsr.w	r3, r0, r3
 8000a64:	40b7      	lsls	r7, r6
 8000a66:	ea43 0808 	orr.w	r8, r3, r8
 8000a6a:	40b4      	lsls	r4, r6
 8000a6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a78:	0c23      	lsrs	r3, r4, #16
 8000a7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fb01 f20c 	mul.w	r2, r1, ip
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d909      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a90:	f080 80ea 	bcs.w	8000c68 <__udivmoddi4+0x22c>
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f240 80e7 	bls.w	8000c68 <__udivmoddi4+0x22c>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	443b      	add	r3, r7
 8000a9e:	1a9a      	subs	r2, r3, r2
 8000aa0:	b2a3      	uxth	r3, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab2:	459c      	cmp	ip, r3
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0x8e>
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000abc:	f080 80d6 	bcs.w	8000c6c <__udivmoddi4+0x230>
 8000ac0:	459c      	cmp	ip, r3
 8000ac2:	f240 80d3 	bls.w	8000c6c <__udivmoddi4+0x230>
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3802      	subs	r0, #2
 8000aca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ace:	eba3 030c 	sub.w	r3, r3, ip
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11d      	cbz	r5, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40f3      	lsrs	r3, r6
 8000ad8:	2200      	movs	r2, #0
 8000ada:	e9c5 3200 	strd	r3, r2, [r5]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d905      	bls.n	8000af2 <__udivmoddi4+0xb6>
 8000ae6:	b10d      	cbz	r5, 8000aec <__udivmoddi4+0xb0>
 8000ae8:	e9c5 0100 	strd	r0, r1, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4608      	mov	r0, r1
 8000af0:	e7f5      	b.n	8000ade <__udivmoddi4+0xa2>
 8000af2:	fab3 f183 	clz	r1, r3
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d146      	bne.n	8000b88 <__udivmoddi4+0x14c>
 8000afa:	4573      	cmp	r3, lr
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xc8>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 8105 	bhi.w	8000d0e <__udivmoddi4+0x2d2>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d0e5      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b12:	e9c5 4800 	strd	r4, r8, [r5]
 8000b16:	e7e2      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	f000 8090 	beq.w	8000c3e <__udivmoddi4+0x202>
 8000b1e:	fab2 f682 	clz	r6, r2
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	f040 80a4 	bne.w	8000c70 <__udivmoddi4+0x234>
 8000b28:	1a8a      	subs	r2, r1, r2
 8000b2a:	0c03      	lsrs	r3, r0, #16
 8000b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b30:	b280      	uxth	r0, r0
 8000b32:	b2bc      	uxth	r4, r7
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b42:	fb04 f20c 	mul.w	r2, r4, ip
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d907      	bls.n	8000b5a <__udivmoddi4+0x11e>
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b50:	d202      	bcs.n	8000b58 <__udivmoddi4+0x11c>
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f200 80e0 	bhi.w	8000d18 <__udivmoddi4+0x2dc>
 8000b58:	46c4      	mov	ip, r8
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b68:	fb02 f404 	mul.w	r4, r2, r4
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x144>
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x142>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f200 80ca 	bhi.w	8000d12 <__udivmoddi4+0x2d6>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	1b1b      	subs	r3, r3, r4
 8000b82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b88:	f1c1 0620 	rsb	r6, r1, #32
 8000b8c:	408b      	lsls	r3, r1
 8000b8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b92:	431f      	orrs	r7, r3
 8000b94:	fa0e f401 	lsl.w	r4, lr, r1
 8000b98:	fa20 f306 	lsr.w	r3, r0, r6
 8000b9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ba0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	fa1f fc87 	uxth.w	ip, r7
 8000bae:	fbbe f0f9 	udiv	r0, lr, r9
 8000bb2:	0c1c      	lsrs	r4, r3, #16
 8000bb4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x1a0>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000bce:	f080 809c 	bcs.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f240 8099 	bls.w	8000d0a <__udivmoddi4+0x2ce>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	fa1f fe83 	uxth.w	lr, r3
 8000be4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bf0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf4:	45a4      	cmp	ip, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x1ce>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000bfe:	f080 8082 	bcs.w	8000d06 <__udivmoddi4+0x2ca>
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d97f      	bls.n	8000d06 <__udivmoddi4+0x2ca>
 8000c06:	3b02      	subs	r3, #2
 8000c08:	443c      	add	r4, r7
 8000c0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c16:	4564      	cmp	r4, ip
 8000c18:	4673      	mov	r3, lr
 8000c1a:	46e1      	mov	r9, ip
 8000c1c:	d362      	bcc.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c1e:	d05f      	beq.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c20:	b15d      	cbz	r5, 8000c3a <__udivmoddi4+0x1fe>
 8000c22:	ebb8 0203 	subs.w	r2, r8, r3
 8000c26:	eb64 0409 	sbc.w	r4, r4, r9
 8000c2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c32:	431e      	orrs	r6, r3
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	e74f      	b.n	8000ade <__udivmoddi4+0xa2>
 8000c3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c42:	0c01      	lsrs	r1, r0, #16
 8000c44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4638      	mov	r0, r7
 8000c52:	463c      	mov	r4, r7
 8000c54:	46b8      	mov	r8, r7
 8000c56:	46be      	mov	lr, r7
 8000c58:	2620      	movs	r6, #32
 8000c5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c5e:	eba2 0208 	sub.w	r2, r2, r8
 8000c62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c66:	e766      	b.n	8000b36 <__udivmoddi4+0xfa>
 8000c68:	4601      	mov	r1, r0
 8000c6a:	e718      	b.n	8000a9e <__udivmoddi4+0x62>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	e72c      	b.n	8000aca <__udivmoddi4+0x8e>
 8000c70:	f1c6 0220 	rsb	r2, r6, #32
 8000c74:	fa2e f302 	lsr.w	r3, lr, r2
 8000c78:	40b7      	lsls	r7, r6
 8000c7a:	40b1      	lsls	r1, r6
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	430a      	orrs	r2, r1
 8000c86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb08 f904 	mul.w	r9, r8, r4
 8000c9a:	40b0      	lsls	r0, r6
 8000c9c:	4589      	cmp	r9, r1
 8000c9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ca2:	b280      	uxth	r0, r0
 8000ca4:	d93e      	bls.n	8000d24 <__udivmoddi4+0x2e8>
 8000ca6:	1879      	adds	r1, r7, r1
 8000ca8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cac:	d201      	bcs.n	8000cb2 <__udivmoddi4+0x276>
 8000cae:	4589      	cmp	r9, r1
 8000cb0:	d81f      	bhi.n	8000cf2 <__udivmoddi4+0x2b6>
 8000cb2:	eba1 0109 	sub.w	r1, r1, r9
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc2:	b292      	uxth	r2, r2
 8000cc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc8:	4542      	cmp	r2, r8
 8000cca:	d229      	bcs.n	8000d20 <__udivmoddi4+0x2e4>
 8000ccc:	18ba      	adds	r2, r7, r2
 8000cce:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000cd2:	d2c4      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd4:	4542      	cmp	r2, r8
 8000cd6:	d2c2      	bcs.n	8000c5e <__udivmoddi4+0x222>
 8000cd8:	f1a9 0102 	sub.w	r1, r9, #2
 8000cdc:	443a      	add	r2, r7
 8000cde:	e7be      	b.n	8000c5e <__udivmoddi4+0x222>
 8000ce0:	45f0      	cmp	r8, lr
 8000ce2:	d29d      	bcs.n	8000c20 <__udivmoddi4+0x1e4>
 8000ce4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cec:	3801      	subs	r0, #1
 8000cee:	46e1      	mov	r9, ip
 8000cf0:	e796      	b.n	8000c20 <__udivmoddi4+0x1e4>
 8000cf2:	eba7 0909 	sub.w	r9, r7, r9
 8000cf6:	4449      	add	r1, r9
 8000cf8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cfc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d00:	fb09 f804 	mul.w	r8, r9, r4
 8000d04:	e7db      	b.n	8000cbe <__udivmoddi4+0x282>
 8000d06:	4673      	mov	r3, lr
 8000d08:	e77f      	b.n	8000c0a <__udivmoddi4+0x1ce>
 8000d0a:	4650      	mov	r0, sl
 8000d0c:	e766      	b.n	8000bdc <__udivmoddi4+0x1a0>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e6fd      	b.n	8000b0e <__udivmoddi4+0xd2>
 8000d12:	443b      	add	r3, r7
 8000d14:	3a02      	subs	r2, #2
 8000d16:	e733      	b.n	8000b80 <__udivmoddi4+0x144>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	443b      	add	r3, r7
 8000d1e:	e71c      	b.n	8000b5a <__udivmoddi4+0x11e>
 8000d20:	4649      	mov	r1, r9
 8000d22:	e79c      	b.n	8000c5e <__udivmoddi4+0x222>
 8000d24:	eba1 0109 	sub.w	r1, r1, r9
 8000d28:	46c4      	mov	ip, r8
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fb09 f804 	mul.w	r8, r9, r4
 8000d32:	e7c4      	b.n	8000cbe <__udivmoddi4+0x282>

08000d34 <__aeabi_idiv0>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d50:	4a29      	ldr	r2, [pc, #164]	@ (8000df8 <MX_ADC1_Init+0xc0>)
 8000d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d54:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dae:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000db0:	f001 f846 	bl	8001e40 <HAL_ADC_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000dba:	f000 fae2 	bl	8001382 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_ADC1_Init+0xc4>)
 8000dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dca:	237f      	movs	r3, #127	@ 0x7f
 8000dcc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MX_ADC1_Init+0xbc>)
 8000ddc:	f001 fa14 	bl	8002208 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000de6:	f000 facc 	bl	8001382 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000028 	.word	0x20000028
 8000df8:	50040000 	.word	0x50040000
 8000dfc:	19200040 	.word	0x19200040

08000e00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09e      	sub	sp, #120	@ 0x78
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2254      	movs	r2, #84	@ 0x54
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fef4 	bl	8005c0e <memset>
  if(adcHandle->Instance==ADC1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f18 <HAL_ADC_MspInit+0x118>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d16e      	bne.n	8000f0e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e44:	2308      	movs	r3, #8
 8000e46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fc24 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e6a:	f000 fa8a 	bl	8001382 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a2a      	ldr	r2, [pc, #168]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <HAL_ADC_MspInit+0x11c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = LIN_POT_IN_Pin;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(LIN_POT_IN_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb4:	f002 faaa 	bl	800340c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000eba:	4a1a      	ldr	r2, [pc, #104]	@ (8000f24 <HAL_ADC_MspInit+0x124>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000edc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ee8:	2220      	movs	r2, #32
 8000eea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ef2:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000ef4:	f002 f892 	bl	800301c <HAL_DMA_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000efe:	f000 fa40 	bl	8001382 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000f06:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f08:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <HAL_ADC_MspInit+0x120>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3778      	adds	r7, #120	@ 0x78
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	50040000 	.word	0x50040000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	40020008 	.word	0x40020008

08000f28 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	@ (8000f90 <MX_CAN1_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f46:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000f4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f52:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <MX_CAN1_Init+0x64>)
 8000f7a:	f001 fe41 	bl	8002c00 <HAL_CAN_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f84:	f000 f9fd 	bl	8001382 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000d4 	.word	0x200000d4
 8000f90:	40006400 	.word	0x40006400

08000f94 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <HAL_CAN_MspInit+0xa4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d13b      	bne.n	800102e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	4a20      	ldr	r2, [pc, #128]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_CAN_MspInit+0xa8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fe6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff8:	2309      	movs	r3, #9
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f002 fa01 	bl	800340c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800101c:	2309      	movs	r3, #9
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102a:	f002 f9ef 	bl	800340c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40006400 	.word	0x40006400
 800103c:	40021000 	.word	0x40021000

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_DMA_Init+0x38>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <MX_DMA_Init+0x38>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_DMA_Init+0x38>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200b      	movs	r0, #11
 8001064:	f001 ffa3 	bl	8002fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001068:	200b      	movs	r0, #11
 800106a:	f001 ffbc 	bl	8002fe6 <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <MX_GPIO_Init+0xd0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <MX_GPIO_Init+0xd0>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109e:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a27      	ldr	r2, [pc, #156]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a21      	ldr	r2, [pc, #132]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_GPIO_Init+0xd0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_EN_GPIO_Port, ADS_EN_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2110      	movs	r1, #16
 80010de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e2:	f002 fafd 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4819      	ldr	r0, [pc, #100]	@ (8001150 <MX_GPIO_Init+0xd4>)
 80010ec:	f002 faf8 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADS_EN_Pin */
  GPIO_InitStruct.Pin = ADS_EN_Pin;
 80010f0:	2310      	movs	r3, #16
 80010f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADS_EN_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110a:	f002 f97f 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4619      	mov	r1, r3
 8001124:	480a      	ldr	r0, [pc, #40]	@ (8001150 <MX_GPIO_Init+0xd4>)
 8001126:	f002 f971 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 800112a:	2310      	movs	r3, #16
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <MX_GPIO_Init+0xd4>)
 800113e:	f002 f965 	bl	800340c <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800115a:	4a1c      	ldr	r2, [pc, #112]	@ (80011cc <MX_I2C1_Init+0x78>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001160:	4a1b      	ldr	r2, [pc, #108]	@ (80011d0 <MX_I2C1_Init+0x7c>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800116c:	2201      	movs	r2, #1
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118e:	480e      	ldr	r0, [pc, #56]	@ (80011c8 <MX_I2C1_Init+0x74>)
 8001190:	f002 fabe 	bl	8003710 <HAL_I2C_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800119a:	f000 f8f2 	bl	8001382 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <MX_I2C1_Init+0x74>)
 80011a2:	f002 fb50 	bl	8003846 <HAL_I2CEx_ConfigAnalogFilter>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 f8e9 	bl	8001382 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_I2C1_Init+0x74>)
 80011b4:	f002 fb92 	bl	80038dc <HAL_I2CEx_ConfigDigitalFilter>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 f8e0 	bl	8001382 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000fc 	.word	0x200000fc
 80011cc:	40005400 	.word	0x40005400
 80011d0:	00f12981 	.word	0x00f12981

080011d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b09e      	sub	sp, #120	@ 0x78
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2254      	movs	r2, #84	@ 0x54
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fd0a 	bl	8005c0e <memset>
  if(i2cHandle->Instance==I2C1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001278 <HAL_I2C_MspInit+0xa4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d135      	bne.n	8001270 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fa4b 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800121c:	f000 f8b1 	bl	8001382 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4a15      	ldr	r2, [pc, #84]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001238:	23c0      	movs	r3, #192	@ 0xc0
 800123a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123c:	2312      	movs	r3, #18
 800123e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001248:	2304      	movs	r3, #4
 800124a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001250:	4619      	mov	r1, r3
 8001252:	480b      	ldr	r0, [pc, #44]	@ (8001280 <HAL_I2C_MspInit+0xac>)
 8001254:	f002 f8da 	bl	800340c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125c:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 800125e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001262:	6593      	str	r3, [r2, #88]	@ 0x58
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_I2C_MspInit+0xa8>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3778      	adds	r7, #120	@ 0x78
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40005400 	.word	0x40005400
 800127c:	40021000 	.word	0x40021000
 8001280:	48000400 	.word	0x48000400

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f000 fb9d 	bl	80019c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 f828 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f7ff fef4 	bl	800107c <MX_GPIO_Init>
  MX_DMA_Init();
 8001294:	f7ff fed4 	bl	8001040 <MX_DMA_Init>
  MX_ADC1_Init();
 8001298:	f7ff fd4e 	bl	8000d38 <MX_ADC1_Init>
  MX_TIM1_Init();
 800129c:	f000 f9ec 	bl	8001678 <MX_TIM1_Init>
  MX_CAN1_Init();
 80012a0:	f7ff fe42 	bl	8000f28 <MX_CAN1_Init>
  MX_I2C1_Init();
 80012a4:	f7ff ff56 	bl	8001154 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012a8:	f000 f8f6 	bl	8001498 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80012ac:	f000 fa58 	bl	8001760 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012b0:	f000 fa86 	bl	80017c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  linpot_status = initializeLinPot(&hadc1);
 80012b4:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <main+0x4c>)
 80012b6:	f000 f86b 	bl	8001390 <initializeLinPot>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <main+0x50>)
 80012c0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <main+0x54>)
 80012c4:	4905      	ldr	r1, [pc, #20]	@ (80012dc <main+0x58>)
 80012c6:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <main+0x4c>)
 80012c8:	f000 f878 	bl	80013bc <readLinearPotentiometer>
 80012cc:	e7f9      	b.n	80012c2 <main+0x3e>
 80012ce:	bf00      	nop
 80012d0:	20000028 	.word	0x20000028
 80012d4:	2000018c 	.word	0x2000018c
 80012d8:	20000184 	.word	0x20000184
 80012dc:	20000190 	.word	0x20000190

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b096      	sub	sp, #88	@ 0x58
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2244      	movs	r2, #68	@ 0x44
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fc8d 	bl	8005c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001302:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001306:	f002 fb43 	bl	8003990 <HAL_PWREx_ControlVoltageScaling>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001310:	f000 f837 	bl	8001382 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800131c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131e:	2310      	movs	r3, #16
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001322:	2302      	movs	r3, #2
 8001324:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001326:	2302      	movs	r3, #2
 8001328:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800132e:	230a      	movs	r3, #10
 8001330:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001332:	2307      	movs	r3, #7
 8001334:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001336:	2302      	movs	r3, #2
 8001338:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fb7a 	bl	8003a3c <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800134e:	f000 f818 	bl	8001382 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2303      	movs	r3, #3
 8001358:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	2104      	movs	r1, #4
 800136a:	4618      	mov	r0, r3
 800136c:	f002 ff7a 	bl	8004264 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001376:	f000 f804 	bl	8001382 <Error_Handler>
  }
}
 800137a:	bf00      	nop
 800137c:	3758      	adds	r7, #88	@ 0x58
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001386:	b672      	cpsid	i
}
 8001388:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800138a:	bf00      	nop
 800138c:	e7fd      	b.n	800138a <Error_Handler+0x8>
	...

08001390 <initializeLinPot>:
uint8_t MLX_sample[32];

uint16_t adcBuffer[1];
float linpot_reading;

bool initializeLinPot(ADC_HandleTypeDef* adcInstance) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_Start_DMA(adcInstance, (uint32_t*) adcBuffer, 1) != HAL_OK) {
 8001398:	2201      	movs	r2, #1
 800139a:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <initializeLinPot+0x28>)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fe91 	bl	80020c4 <HAL_ADC_Start_DMA>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <initializeLinPot+0x1c>
		return 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e000      	b.n	80013ae <initializeLinPot+0x1e>
	}
	return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000194 	.word	0x20000194

080013bc <readLinearPotentiometer>:
	status_2 = enableFSR_2048(&StrainGaugeADS);
	return (status_1 & status_2);
}

// Read functions
void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS,  MISC_DATAFRAME *dataframe) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
	if( HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD) {
 80013c8:	f000 fb66 	bl	8001a98 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b15      	cmp	r3, #21
 80013d6:	d91e      	bls.n	8001416 <readLinearPotentiometer+0x5a>
		HAL_ADC_Start_DMA(hadc, (uint32_t*) adcBuffer, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	4911      	ldr	r1, [pc, #68]	@ (8001420 <readLinearPotentiometer+0x64>)
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f000 fe71 	bl	80020c4 <HAL_ADC_Start_DMA>
		linpot_reading = getLinPotTravel();
 80013e2:	f000 f825 	bl	8001430 <getLinPotTravel>
 80013e6:	eef0 7a40 	vmov.f32	s15, s0
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <readLinearPotentiometer+0x68>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]
		dataframe->data.shockTravel = (uint16_t)(linpot_reading*100);
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <readLinearPotentiometer+0x68>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001428 <readLinearPotentiometer+0x6c>
 80013fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	809a      	strh	r2, [r3, #4]
		*lastReadMS = HAL_GetTick();
 800140c:	f000 fb44 	bl	8001a98 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	601a      	str	r2, [r3, #0]
	}
	//todo: convert counts to travel
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000194 	.word	0x20000194
 8001424:	20000198 	.word	0x20000198
 8001428:	42c80000 	.word	0x42c80000
 800142c:	00000000 	.word	0x00000000

08001430 <getLinPotTravel>:
	float strain = (voltageReading/3.3*SG_GF);
	float stress = strain*YG_MODULUS;
	return (10*stress*crossSectionalArea);
}

float getLinPotTravel() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	float position_mm = ((float)adcBuffer[0] / 4095.0) * LINPOT_STROKE_LENGTH;
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <getLinPotTravel+0x60>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001442:	ee17 0a90 	vmov	r0, s15
 8001446:	f7ff f827 	bl	8000498 <__aeabi_f2d>
 800144a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001488 <getLinPotTravel+0x58>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f9a4 	bl	800079c <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <getLinPotTravel+0x64>)
 8001462:	f7ff f871 	bl	8000548 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fa7d 	bl	800096c <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	607b      	str	r3, [r7, #4]
	return position_mm;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	00000000 	.word	0x00000000
 800148c:	40affe00 	.word	0x40affe00
 8001490:	20000194 	.word	0x20000194
 8001494:	404e0000 	.word	0x404e0000

08001498 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <MX_SPI1_Init+0x74>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <MX_SPI1_Init+0x78>)
 80014a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_SPI1_Init+0x74>)
 80014a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_SPI1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_SPI1_Init+0x74>)
 80014b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_SPI1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <MX_SPI1_Init+0x74>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <MX_SPI1_Init+0x74>)
 80014c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <MX_SPI1_Init+0x74>)
 80014ce:	2220      	movs	r2, #32
 80014d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_SPI1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_SPI1_Init+0x74>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <MX_SPI1_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <MX_SPI1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_SPI1_Init+0x74>)
 80014f8:	f003 fbc0 	bl	8004c7c <HAL_SPI_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001502:	f7ff ff3e 	bl	8001382 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000019c 	.word	0x2000019c
 8001510:	40013000 	.word	0x40013000

08001514 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a17      	ldr	r2, [pc, #92]	@ (8001590 <HAL_SPI_MspInit+0x7c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d128      	bne.n	8001588 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153a:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 800153c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001540:	6613      	str	r3, [r2, #96]	@ 0x60
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	4a10      	ldr	r2, [pc, #64]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001566:	23e0      	movs	r3, #224	@ 0xe0
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001576:	2305      	movs	r3, #5
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001584:	f001 ff42 	bl	800340c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013000 	.word	0x40013000
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <HAL_MspInit+0x44>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <HAL_MspInit+0x44>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_MspInit+0x44>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_MspInit+0x44>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 fa1b 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <DMA1_Channel1_IRQHandler+0x10>)
 8001646:	f001 fe01 	bl	800324c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000008c 	.word	0x2000008c

08001654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <MX_TIM1_Init+0xa0>)
 8001698:	4a20      	ldr	r2, [pc, #128]	@ (800171c <MX_TIM1_Init+0xa4>)
 800169a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_TIM1_Init+0xa0>)
 800169e:	2204      	movs	r2, #4
 80016a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_TIM1_Init+0xa0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <MX_TIM1_Init+0xa0>)
 80016aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_TIM1_Init+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <MX_TIM1_Init+0xa0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_TIM1_Init+0xa0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016c2:	4815      	ldr	r0, [pc, #84]	@ (8001718 <MX_TIM1_Init+0xa0>)
 80016c4:	f003 fb7d 	bl	8004dc2 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016ce:	f7ff fe58 	bl	8001382 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	480e      	ldr	r0, [pc, #56]	@ (8001718 <MX_TIM1_Init+0xa0>)
 80016e0:	f003 fbc6 	bl	8004e70 <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016ea:	f7ff fe4a 	bl	8001382 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <MX_TIM1_Init+0xa0>)
 8001700:	f003 fd8a 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800170a:	f7ff fe3a 	bl	8001382 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000200 	.word	0x20000200
 800171c:	40012c00 	.word	0x40012c00

08001720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_TIM_Base_MspInit+0x38>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10b      	bne.n	800174a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001738:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800173c:	6613      	str	r3, [r2, #96]	@ 0x60
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <HAL_TIM_Base_MspInit+0x3c>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40021000 	.word	0x40021000

08001760 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 8001766:	4a15      	ldr	r2, [pc, #84]	@ (80017bc <MX_USART1_UART_Init+0x5c>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_USART1_UART_Init+0x58>)
 80017a4:	f003 fd9e 	bl	80052e4 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017ae:	f7ff fde8 	bl	8001382 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000024c 	.word	0x2000024c
 80017bc:	40013800 	.word	0x40013800

080017c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017c6:	4a15      	ldr	r2, [pc, #84]	@ (800181c <MX_USART2_UART_Init+0x5c>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_USART2_UART_Init+0x58>)
 8001804:	f003 fd6e 	bl	80052e4 <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800180e:	f7ff fdb8 	bl	8001382 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200002d4 	.word	0x200002d4
 800181c:	40004400 	.word	0x40004400

08001820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0a0      	sub	sp, #128	@ 0x80
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	2254      	movs	r2, #84	@ 0x54
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f004 f9e4 	bl	8005c0e <memset>
  if(uartHandle->Instance==USART1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a47      	ldr	r2, [pc, #284]	@ (8001968 <HAL_UART_MspInit+0x148>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d138      	bne.n	80018c2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	4618      	mov	r0, r3
 800185e:	f002 ff25 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001868:	f7ff fd8b 	bl	8001382 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800186c:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <HAL_UART_MspInit+0x14c>)
 800186e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001870:	4a3e      	ldr	r2, [pc, #248]	@ (800196c <HAL_UART_MspInit+0x14c>)
 8001872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001876:	6613      	str	r3, [r2, #96]	@ 0x60
 8001878:	4b3c      	ldr	r3, [pc, #240]	@ (800196c <HAL_UART_MspInit+0x14c>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b39      	ldr	r3, [pc, #228]	@ (800196c <HAL_UART_MspInit+0x14c>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001888:	4a38      	ldr	r2, [pc, #224]	@ (800196c <HAL_UART_MspInit+0x14c>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001890:	4b36      	ldr	r3, [pc, #216]	@ (800196c <HAL_UART_MspInit+0x14c>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800189c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ae:	2307      	movs	r3, #7
 80018b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018bc:	f001 fda6 	bl	800340c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018c0:	e04d      	b.n	800195e <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001970 <HAL_UART_MspInit+0x150>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d148      	bne.n	800195e <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 fee7 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80018e4:	f7ff fd4d 	bl	8001382 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e8:	4b20      	ldr	r3, [pc, #128]	@ (800196c <HAL_UART_MspInit+0x14c>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	4a1f      	ldr	r2, [pc, #124]	@ (800196c <HAL_UART_MspInit+0x14c>)
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f4:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <HAL_UART_MspInit+0x14c>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <HAL_UART_MspInit+0x14c>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_UART_MspInit+0x14c>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <HAL_UART_MspInit+0x14c>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001918:	2304      	movs	r3, #4
 800191a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001928:	2307      	movs	r3, #7
 800192a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f001 fd69 	bl	800340c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800193a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800193e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800194c:	2303      	movs	r3, #3
 800194e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195a:	f001 fd57 	bl	800340c <HAL_GPIO_Init>
}
 800195e:	bf00      	nop
 8001960:	3780      	adds	r7, #128	@ 0x80
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40013800 	.word	0x40013800
 800196c:	40021000 	.word	0x40021000
 8001970:	40004400 	.word	0x40004400

08001974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001978:	f7ff fe6c 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800197e:	490d      	ldr	r1, [pc, #52]	@ (80019b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <LoopForever+0xe>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001994:	4c0a      	ldr	r4, [pc, #40]	@ (80019c0 <LoopForever+0x16>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a2:	f004 f93d 	bl	8005c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a6:	f7ff fc6d 	bl	8001284 <main>

080019aa <LoopForever>:

LoopForever:
    b LoopForever
 80019aa:	e7fe      	b.n	80019aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019b8:	08005cd8 	.word	0x08005cd8
  ldr r2, =_sbss
 80019bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019c0:	20000360 	.word	0x20000360

080019c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC1_IRQHandler>

080019c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f001 fae1 	bl	8002f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f80e 	bl	80019f8 <HAL_InitTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e001      	b.n	80019ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e8:	f7ff fdd6 	bl	8001598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ec:	79fb      	ldrb	r3, [r7, #7]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_InitTick+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d023      	beq.n	8001a54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <HAL_InitTick+0x70>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_InitTick+0x6c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 faed 	bl	8003002 <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d809      	bhi.n	8001a48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a3c:	f001 fab7 	bl	8002fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_InitTick+0x74>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e007      	b.n	8001a58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e004      	b.n	8001a58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e001      	b.n	8001a58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	2000035c 	.word	0x2000035c

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000035c 	.word	0x2000035c

08001ab0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3360      	adds	r3, #96	@ 0x60
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <LL_ADC_SetOffset+0x44>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	03fff000 	.word	0x03fff000

08001b60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3360      	adds	r3, #96	@ 0x60
 8001b6e:	461a      	mov	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3360      	adds	r3, #96	@ 0x60
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3330      	adds	r3, #48	@ 0x30
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	211f      	movs	r1, #31
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0e9b      	lsrs	r3, r3, #26
 8001c20:	f003 011f 	and.w	r1, r3, #31
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3314      	adds	r3, #20
 8001c50:	461a      	mov	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	0e5b      	lsrs	r3, r3, #25
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	4413      	add	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	0d1b      	lsrs	r3, r3, #20
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2107      	movs	r1, #7
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	401a      	ands	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	0d1b      	lsrs	r3, r3, #20
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0318 	and.w	r3, r3, #24
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cbc:	40d9      	lsrs	r1, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	0007ffff 	.word	0x0007ffff

08001ce0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6093      	str	r3, [r2, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d18:	d101      	bne.n	8001d1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <LL_ADC_IsEnabled+0x18>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <LL_ADC_IsEnabled+0x1a>
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dde:	f043 0204 	orr.w	r2, r3, #4
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d101      	bne.n	8001e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d101      	bne.n	8001e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e126      	b.n	80020a8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe ffc9 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff3f 	bl	8001d04 <LL_ADC_IsDeepPowerDownEnabled>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff25 	bl	8001ce0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff5a 	bl	8001d54 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d115      	bne.n	8001ed2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff3e 	bl	8001d2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <HAL_ADC_Init+0x270>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	4a7f      	ldr	r2, [pc, #508]	@ (80020b4 <HAL_ADC_Init+0x274>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff3c 	bl	8001d54 <LL_ADC_IsInternalRegulatorEnabled>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff75 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 8001f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80bf 	bne.w	8002096 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 80bb 	bne.w	8002096 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff35 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f40:	485d      	ldr	r0, [pc, #372]	@ (80020b8 <HAL_ADC_Init+0x278>)
 8001f42:	f7ff ff2f 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	485a      	ldr	r0, [pc, #360]	@ (80020bc <HAL_ADC_Init+0x27c>)
 8001f54:	f7ff fdac 	bl	8001ab0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e5b      	ldrb	r3, [r3, #25]
 8001f5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d106      	bne.n	8001f94 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	045b      	lsls	r3, r3, #17
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	4b42      	ldr	r3, [pc, #264]	@ (80020c0 <HAL_ADC_Init+0x280>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff25 	bl	8001e18 <LL_ADC_INJ_IsConversionOngoing>
 8001fce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d13d      	bne.n	8002052 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13a      	bne.n	8002052 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fe8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ff8:	f023 0302 	bic.w	r3, r3, #2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	69b9      	ldr	r1, [r7, #24]
 8002002:	430b      	orrs	r3, r1
 8002004:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800200c:	2b01      	cmp	r3, #1
 800200e:	d118      	bne.n	8002042 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800201a:	f023 0304 	bic.w	r3, r3, #4
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002026:	4311      	orrs	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002032:	430a      	orrs	r2, r1
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	e007      	b.n	8002052 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10c      	bne.n	8002074 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f023 010f 	bic.w	r1, r3, #15
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	631a      	str	r2, [r3, #48]	@ 0x30
 8002072:	e007      	b.n	8002084 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 020f 	bic.w	r2, r2, #15
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	f023 0303 	bic.w	r3, r3, #3
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	655a      	str	r2, [r3, #84]	@ 0x54
 8002094:	e007      	b.n	80020a6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f043 0210 	orr.w	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000000 	.word	0x20000000
 80020b4:	053e2d63 	.word	0x053e2d63
 80020b8:	50040000 	.word	0x50040000
 80020bc:	50040300 	.word	0x50040300
 80020c0:	fff0c007 	.word	0xfff0c007

080020c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe8c 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d167      	bne.n	80021b0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_Start_DMA+0x2a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e063      	b.n	80021b6 <HAL_ADC_Start_DMA+0xf2>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fc68 	bl	80029cc <ADC_Enable>
 80020fc:	4603      	mov	r3, r0
 80020fe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d14f      	bne.n	80021a6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f023 0206 	bic.w	r2, r3, #6
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	659a      	str	r2, [r3, #88]	@ 0x58
 8002132:	e002      	b.n	800213a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	4a20      	ldr	r2, [pc, #128]	@ (80021c0 <HAL_ADC_Start_DMA+0xfc>)
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002146:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <HAL_ADC_Start_DMA+0x100>)
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214e:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <HAL_ADC_Start_DMA+0x104>)
 8002150:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	221c      	movs	r2, #28
 8002158:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0210 	orr.w	r2, r2, #16
 8002170:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3340      	adds	r3, #64	@ 0x40
 800218c:	4619      	mov	r1, r3
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f000 fffb 	bl	800318c <HAL_DMA_Start_IT>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe13 	bl	8001dca <LL_ADC_REG_StartConversion>
 80021a4:	e006      	b.n	80021b4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021ae:	e001      	b.n	80021b4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	08002ad9 	.word	0x08002ad9
 80021c4:	08002bb1 	.word	0x08002bb1
 80021c8:	08002bcd 	.word	0x08002bcd

080021cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0b6      	sub	sp, #216	@ 0xd8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x22>
 8002226:	2302      	movs	r3, #2
 8002228:	e3bb      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x79a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fddb 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 83a0 	bne.w	8002984 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d824      	bhi.n	800229e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	3b02      	subs	r3, #2
 800225a:	2b03      	cmp	r3, #3
 800225c:	d81b      	bhi.n	8002296 <HAL_ADC_ConfigChannel+0x8e>
 800225e:	a201      	add	r2, pc, #4	@ (adr r2, 8002264 <HAL_ADC_ConfigChannel+0x5c>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002275 	.word	0x08002275
 8002268:	0800227d 	.word	0x0800227d
 800226c:	08002285 	.word	0x08002285
 8002270:	0800228d 	.word	0x0800228d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002274:	230c      	movs	r3, #12
 8002276:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800227a:	e010      	b.n	800229e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800227c:	2312      	movs	r3, #18
 800227e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002282:	e00c      	b.n	800229e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002284:	2318      	movs	r3, #24
 8002286:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800228a:	e008      	b.n	800229e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800228c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002294:	e003      	b.n	800229e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002296:	2306      	movs	r3, #6
 8002298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800229c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80022ac:	f7ff fc9c 	bl	8001be8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fd9c 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 80022ba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fda8 	bl	8001e18 <LL_ADC_INJ_IsConversionOngoing>
 80022c8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 81a4 	bne.w	800261e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 819f 	bne.w	800261e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	461a      	mov	r2, r3
 80022ee:	f7ff fca7 	bl	8001c40 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	08db      	lsrs	r3, r3, #3
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d00a      	beq.n	800232a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002324:	f7ff fbf8 	bl	8001b18 <LL_ADC_SetOffset>
 8002328:	e179      	b.n	800261e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc15 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x14e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fc0a 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	e01e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x18c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fbff 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002374:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800237c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e004      	b.n	8002392 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002388:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x1a4>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	e018      	b.n	80023de <HAL_ADC_ConfigChannel+0x1d6>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e004      	b.n	80023de <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80023d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fbce 	bl	8001b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fbb2 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x214>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fba7 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x252>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fb9c 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800243a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800243e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800244e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x26a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x29c>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002486:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800248a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800248e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800249a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2101      	movs	r1, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fb6b 	bl	8001b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fb4f 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x2da>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2102      	movs	r1, #2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fb44 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x318>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2102      	movs	r1, #2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fb39 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002500:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x330>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e014      	b.n	8002562 <HAL_ADC_ConfigChannel+0x35a>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800254c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e004      	b.n	8002562 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002558:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002562:	429a      	cmp	r2, r3
 8002564:	d106      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	2102      	movs	r1, #2
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fb0c 	bl	8001b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2103      	movs	r1, #3
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff faf0 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x398>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2103      	movs	r1, #3
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fae5 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	f003 021f 	and.w	r2, r3, #31
 800259e:	e017      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x3c8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2103      	movs	r1, #3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fada 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80025c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x3e0>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0e9b      	lsrs	r3, r3, #26
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	e011      	b.n	800260c <HAL_ADC_ConfigChannel+0x404>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80025f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80025fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2200      	movs	r2, #0
 8002616:	2103      	movs	r1, #3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fab7 	bl	8001b8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fbbe 	bl	8001da4 <LL_ADC_IsEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 8140 	bne.w	80028b0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	f7ff fb2b 	bl	8001c98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4a8f      	ldr	r2, [pc, #572]	@ (8002884 <HAL_ADC_ConfigChannel+0x67c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	f040 8131 	bne.w	80028b0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x46e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	3301      	adds	r3, #1
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2b09      	cmp	r3, #9
 800266c:	bf94      	ite	ls
 800266e:	2301      	movls	r3, #1
 8002670:	2300      	movhi	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	e019      	b.n	80026aa <HAL_ADC_ConfigChannel+0x4a2>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2b09      	cmp	r3, #9
 80026a2:	bf94      	ite	ls
 80026a4:	2301      	movls	r3, #1
 80026a6:	2300      	movhi	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d079      	beq.n	80027a2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x4c2>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	3301      	adds	r3, #1
 80026c2:	069b      	lsls	r3, r3, #26
 80026c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026c8:	e015      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x4ee>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026da:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80026e2:	2320      	movs	r3, #32
 80026e4:	e003      	b.n	80026ee <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80026e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	069b      	lsls	r3, r3, #26
 80026f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x50e>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	3301      	adds	r3, #1
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	e017      	b.n	8002746 <HAL_ADC_ConfigChannel+0x53e>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002726:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e003      	b.n	800273a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	3301      	adds	r3, #1
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	ea42 0103 	orr.w	r1, r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <HAL_ADC_ConfigChannel+0x564>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	0e9b      	lsrs	r3, r3, #26
 800275c:	3301      	adds	r3, #1
 800275e:	f003 021f 	and.w	r2, r3, #31
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	e018      	b.n	800279e <HAL_ADC_ConfigChannel+0x596>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e003      	b.n	8002790 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279e:	430b      	orrs	r3, r1
 80027a0:	e081      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_ADC_ConfigChannel+0x5b6>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0e9b      	lsrs	r3, r3, #26
 80027b4:	3301      	adds	r3, #1
 80027b6:	069b      	lsls	r3, r3, #26
 80027b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027bc:	e015      	b.n	80027ea <HAL_ADC_ConfigChannel+0x5e2>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80027da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	069b      	lsls	r3, r3, #26
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_ADC_ConfigChannel+0x602>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	e017      	b.n	800283a <HAL_ADC_ConfigChannel+0x632>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	61bb      	str	r3, [r7, #24]
  return result;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e003      	b.n	800282e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	ea42 0103 	orr.w	r1, r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x65e>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	3301      	adds	r3, #1
 8002852:	f003 021f 	and.w	r2, r3, #31
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	3b1e      	subs	r3, #30
 800285e:	051b      	lsls	r3, r3, #20
 8002860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002864:	e01e      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x69c>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	60fb      	str	r3, [r7, #12]
  return result;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e006      	b.n	8002890 <HAL_ADC_ConfigChannel+0x688>
 8002882:	bf00      	nop
 8002884:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	f003 021f 	and.w	r2, r3, #31
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	3b1e      	subs	r3, #30
 800289e:	051b      	lsls	r3, r3, #20
 80028a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7ff f9c8 	bl	8001c40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b3d      	ldr	r3, [pc, #244]	@ (80029ac <HAL_ADC_ConfigChannel+0x7a4>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d06c      	beq.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028bc:	483c      	ldr	r0, [pc, #240]	@ (80029b0 <HAL_ADC_ConfigChannel+0x7a8>)
 80028be:	f7ff f91d 	bl	8001afc <LL_ADC_GetCommonPathInternalCh>
 80028c2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a3a      	ldr	r2, [pc, #232]	@ (80029b4 <HAL_ADC_ConfigChannel+0x7ac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d127      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d121      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a35      	ldr	r2, [pc, #212]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7b0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d157      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028ee:	4619      	mov	r1, r3
 80028f0:	482f      	ldr	r0, [pc, #188]	@ (80029b0 <HAL_ADC_ConfigChannel+0x7a8>)
 80028f2:	f7ff f8f0 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f6:	4b31      	ldr	r3, [pc, #196]	@ (80029bc <HAL_ADC_ConfigChannel+0x7b4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	099b      	lsrs	r3, r3, #6
 80028fc:	4a30      	ldr	r2, [pc, #192]	@ (80029c0 <HAL_ADC_ConfigChannel+0x7b8>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002910:	e002      	b.n	8002918 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3b01      	subs	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f9      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800291e:	e03a      	b.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d113      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800292a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800292e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7b0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d12a      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002944:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002948:	4619      	mov	r1, r3
 800294a:	4819      	ldr	r0, [pc, #100]	@ (80029b0 <HAL_ADC_ConfigChannel+0x7a8>)
 800294c:	f7ff f8c3 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002950:	e021      	b.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d11c      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800295c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7b0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d111      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002976:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800297a:	4619      	mov	r1, r3
 800297c:	480c      	ldr	r0, [pc, #48]	@ (80029b0 <HAL_ADC_ConfigChannel+0x7a8>)
 800297e:	f7ff f8aa 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
 8002982:	e008      	b.n	8002996 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800299e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	37d8      	adds	r7, #216	@ 0xd8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	80080000 	.word	0x80080000
 80029b0:	50040300 	.word	0x50040300
 80029b4:	c7520000 	.word	0xc7520000
 80029b8:	50040000 	.word	0x50040000
 80029bc:	20000000 	.word	0x20000000
 80029c0:	053e2d63 	.word	0x053e2d63
 80029c4:	cb840000 	.word	0xcb840000
 80029c8:	80000001 	.word	0x80000001

080029cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f9e1 	bl	8001da4 <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d169      	bne.n	8002abc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <ADC_Enable+0xfc>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e055      	b.n	8002abe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f9b0 	bl	8001d7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a1c:	482b      	ldr	r0, [pc, #172]	@ (8002acc <ADC_Enable+0x100>)
 8002a1e:	f7ff f86d 	bl	8001afc <LL_ADC_GetCommonPathInternalCh>
 8002a22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a2c:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <ADC_Enable+0x104>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	4a28      	ldr	r2, [pc, #160]	@ (8002ad4 <ADC_Enable+0x108>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a46:	e002      	b.n	8002a4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a54:	f7ff f820 	bl	8001a98 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a5a:	e028      	b.n	8002aae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f99f 	bl	8001da4 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f983 	bl	8001d7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a76:	f7ff f80f 	bl	8001a98 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d914      	bls.n	8002aae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d00d      	beq.n	8002aae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e007      	b.n	8002abe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d1cf      	bne.n	8002a5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	8000003f 	.word	0x8000003f
 8002acc:	50040300 	.word	0x50040300
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	053e2d63 	.word	0x053e2d63

08002ad8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d14b      	bne.n	8002b8a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f856 	bl	8001bc2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d032      	beq.n	8002b82 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d12b      	bne.n	8002b82 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11f      	bne.n	8002b82 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b4e:	e018      	b.n	8002b82 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d111      	bne.n	8002b82 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff fb22 	bl	80021cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b88:	e00e      	b.n	8002ba8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7ff fb2c 	bl	80021f4 <HAL_ADC_ErrorCallback>
}
 8002b9c:	e004      	b.n	8002ba8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff fb0e 	bl	80021e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f043 0204 	orr.w	r2, r3, #4
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff fafe 	bl	80021f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0ed      	b.n	8002dee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe f9b8 	bl	8000f94 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c34:	f7fe ff30 	bl	8001a98 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c3a:	e012      	b.n	8002c62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c3c:	f7fe ff2c 	bl	8001a98 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b0a      	cmp	r3, #10
 8002c48:	d90b      	bls.n	8002c62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2205      	movs	r2, #5
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0c5      	b.n	8002dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0e5      	beq.n	8002c3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0202 	bic.w	r2, r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7fe ff0a 	bl	8001a98 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c86:	e012      	b.n	8002cae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c88:	f7fe ff06 	bl	8001a98 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d90b      	bls.n	8002cae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e09f      	b.n	8002dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7e1b      	ldrb	r3, [r3, #24]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e007      	b.n	8002ce6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7e5b      	ldrb	r3, [r3, #25]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e007      	b.n	8002d10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e9b      	ldrb	r3, [r3, #26]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d108      	bne.n	8002d2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e007      	b.n	8002d3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0220 	bic.w	r2, r2, #32
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7edb      	ldrb	r3, [r3, #27]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d108      	bne.n	8002d54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0210 	bic.w	r2, r2, #16
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0210 	orr.w	r2, r2, #16
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7f1b      	ldrb	r3, [r3, #28]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d108      	bne.n	8002d7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0208 	orr.w	r2, r2, #8
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e007      	b.n	8002d8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0208 	bic.w	r2, r2, #8
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7f5b      	ldrb	r3, [r3, #29]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0204 	orr.w	r2, r2, #4
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e007      	b.n	8002db8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0204 	bic.w	r2, r2, #4
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	ea42 0103 	orr.w	r1, r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	1e5a      	subs	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e14:	4013      	ands	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	60d3      	str	r3, [r2, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e44:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <__NVIC_GetPriorityGrouping+0x18>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f003 0307 	and.w	r3, r3, #7
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db0b      	blt.n	8002e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f003 021f 	and.w	r2, r3, #31
 8002e74:	4907      	ldr	r1, [pc, #28]	@ (8002e94 <__NVIC_EnableIRQ+0x38>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e100 	.word	0xe000e100

08002e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	6039      	str	r1, [r7, #0]
 8002ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	db0a      	blt.n	8002ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	490c      	ldr	r1, [pc, #48]	@ (8002ee4 <__NVIC_SetPriority+0x4c>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	0112      	lsls	r2, r2, #4
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	440b      	add	r3, r1
 8002ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec0:	e00a      	b.n	8002ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4908      	ldr	r1, [pc, #32]	@ (8002ee8 <__NVIC_SetPriority+0x50>)
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	3b04      	subs	r3, #4
 8002ed0:	0112      	lsls	r2, r2, #4
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	761a      	strb	r2, [r3, #24]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000e100 	.word	0xe000e100
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	@ 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f1c3 0307 	rsb	r3, r3, #7
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	bf28      	it	cs
 8002f0a:	2304      	movcs	r3, #4
 8002f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3304      	adds	r3, #4
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d902      	bls.n	8002f1c <NVIC_EncodePriority+0x30>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3b03      	subs	r3, #3
 8002f1a:	e000      	b.n	8002f1e <NVIC_EncodePriority+0x32>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	401a      	ands	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	43d9      	mvns	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	4313      	orrs	r3, r2
         );
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3724      	adds	r7, #36	@ 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f64:	d301      	bcc.n	8002f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00f      	b.n	8002f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <SysTick_Config+0x40>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f72:	210f      	movs	r1, #15
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f78:	f7ff ff8e 	bl	8002e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <SysTick_Config+0x40>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f82:	4b04      	ldr	r3, [pc, #16]	@ (8002f94 <SysTick_Config+0x40>)
 8002f84:	2207      	movs	r2, #7
 8002f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	e000e010 	.word	0xe000e010

08002f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ff29 	bl	8002df8 <__NVIC_SetPriorityGrouping>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc0:	f7ff ff3e 	bl	8002e40 <__NVIC_GetPriorityGrouping>
 8002fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f7ff ff8e 	bl	8002eec <NVIC_EncodePriority>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff5d 	bl	8002e98 <__NVIC_SetPriority>
}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff31 	bl	8002e5c <__NVIC_EnableIRQ>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ffa2 	bl	8002f54 <SysTick_Config>
 8003010:	4603      	mov	r3, r0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e098      	b.n	8003160 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	4b4d      	ldr	r3, [pc, #308]	@ (800316c <HAL_DMA_Init+0x150>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d80f      	bhi.n	800305a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	4b4b      	ldr	r3, [pc, #300]	@ (8003170 <HAL_DMA_Init+0x154>)
 8003042:	4413      	add	r3, r2
 8003044:	4a4b      	ldr	r2, [pc, #300]	@ (8003174 <HAL_DMA_Init+0x158>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	009a      	lsls	r2, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a48      	ldr	r2, [pc, #288]	@ (8003178 <HAL_DMA_Init+0x15c>)
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40
 8003058:	e00e      	b.n	8003078 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	4b46      	ldr	r3, [pc, #280]	@ (800317c <HAL_DMA_Init+0x160>)
 8003062:	4413      	add	r3, r2
 8003064:	4a43      	ldr	r2, [pc, #268]	@ (8003174 <HAL_DMA_Init+0x158>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	009a      	lsls	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a42      	ldr	r2, [pc, #264]	@ (8003180 <HAL_DMA_Init+0x164>)
 8003076:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800308e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003092:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800309c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030d2:	d039      	beq.n	8003148 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	4a27      	ldr	r2, [pc, #156]	@ (8003178 <HAL_DMA_Init+0x15c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d11a      	bne.n	8003114 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030de:	4b29      	ldr	r3, [pc, #164]	@ (8003184 <HAL_DMA_Init+0x168>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	f003 031c 	and.w	r3, r3, #28
 80030ea:	210f      	movs	r1, #15
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	4924      	ldr	r1, [pc, #144]	@ (8003184 <HAL_DMA_Init+0x168>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030f8:	4b22      	ldr	r3, [pc, #136]	@ (8003184 <HAL_DMA_Init+0x168>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	f003 031c 	and.w	r3, r3, #28
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	491d      	ldr	r1, [pc, #116]	@ (8003184 <HAL_DMA_Init+0x168>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
 8003112:	e019      	b.n	8003148 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003114:	4b1c      	ldr	r3, [pc, #112]	@ (8003188 <HAL_DMA_Init+0x16c>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311c:	f003 031c 	and.w	r3, r3, #28
 8003120:	210f      	movs	r1, #15
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	4917      	ldr	r1, [pc, #92]	@ (8003188 <HAL_DMA_Init+0x16c>)
 800312a:	4013      	ands	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800312e:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <HAL_DMA_Init+0x16c>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	f003 031c 	and.w	r3, r3, #28
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	4911      	ldr	r1, [pc, #68]	@ (8003188 <HAL_DMA_Init+0x16c>)
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40020407 	.word	0x40020407
 8003170:	bffdfff8 	.word	0xbffdfff8
 8003174:	cccccccd 	.word	0xcccccccd
 8003178:	40020000 	.word	0x40020000
 800317c:	bffdfbf8 	.word	0xbffdfbf8
 8003180:	40020400 	.word	0x40020400
 8003184:	400200a8 	.word	0x400200a8
 8003188:	400204a8 	.word	0x400204a8

0800318c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Start_IT+0x20>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e04b      	b.n	8003244 <HAL_DMA_Start_IT+0xb8>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d13a      	bne.n	8003236 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f8e0 	bl	80033aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 020e 	orr.w	r2, r2, #14
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e00f      	b.n	8003224 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0204 	bic.w	r2, r2, #4
 8003212:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 020a 	orr.w	r2, r2, #10
 8003222:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e005      	b.n	8003242 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003268:	f003 031c 	and.w	r3, r3, #28
 800326c:	2204      	movs	r2, #4
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d026      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x7a>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d021      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	f003 021c 	and.w	r2, r3, #28
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	2104      	movs	r1, #4
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d071      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032c4:	e06c      	b.n	80033a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f003 031c 	and.w	r3, r3, #28
 80032ce:	2202      	movs	r2, #2
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d02e      	beq.n	8003338 <HAL_DMA_IRQHandler+0xec>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d029      	beq.n	8003338 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 020a 	bic.w	r2, r2, #10
 8003300:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f003 021c 	and.w	r2, r3, #28
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	2102      	movs	r1, #2
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d038      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003336:	e033      	b.n	80033a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333c:	f003 031c 	and.w	r3, r3, #28
 8003340:	2208      	movs	r2, #8
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02a      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x156>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d025      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 020e 	bic.w	r2, r2, #14
 8003364:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f003 021c 	and.w	r2, r3, #28
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
}
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	f003 021c 	and.w	r2, r3, #28
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d108      	bne.n	80033ee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033ec:	e007      	b.n	80033fe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	60da      	str	r2, [r3, #12]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341a:	e148      	b.n	80036ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 813a 	beq.w	80036a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d005      	beq.n	800344c <HAL_GPIO_Init+0x40>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d130      	bne.n	80034ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003482:	2201      	movs	r2, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0201 	and.w	r2, r3, #1
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d017      	beq.n	80034ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d123      	bne.n	800353e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	6939      	ldr	r1, [r7, #16]
 800353a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0203 	and.w	r2, r3, #3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8094 	beq.w	80036a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003580:	4b52      	ldr	r3, [pc, #328]	@ (80036cc <HAL_GPIO_Init+0x2c0>)
 8003582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003584:	4a51      	ldr	r2, [pc, #324]	@ (80036cc <HAL_GPIO_Init+0x2c0>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6613      	str	r3, [r2, #96]	@ 0x60
 800358c:	4b4f      	ldr	r3, [pc, #316]	@ (80036cc <HAL_GPIO_Init+0x2c0>)
 800358e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003598:	4a4d      	ldr	r2, [pc, #308]	@ (80036d0 <HAL_GPIO_Init+0x2c4>)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035c2:	d00d      	beq.n	80035e0 <HAL_GPIO_Init+0x1d4>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a43      	ldr	r2, [pc, #268]	@ (80036d4 <HAL_GPIO_Init+0x2c8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <HAL_GPIO_Init+0x1d0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a42      	ldr	r2, [pc, #264]	@ (80036d8 <HAL_GPIO_Init+0x2cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_GPIO_Init+0x1cc>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e004      	b.n	80035e2 <HAL_GPIO_Init+0x1d6>
 80035d8:	2307      	movs	r3, #7
 80035da:	e002      	b.n	80035e2 <HAL_GPIO_Init+0x1d6>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_GPIO_Init+0x1d6>
 80035e0:	2300      	movs	r3, #0
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	f002 0203 	and.w	r2, r2, #3
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	4093      	lsls	r3, r2
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035f2:	4937      	ldr	r1, [pc, #220]	@ (80036d0 <HAL_GPIO_Init+0x2c4>)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3302      	adds	r3, #2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003600:	4b36      	ldr	r3, [pc, #216]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003624:	4a2d      	ldr	r2, [pc, #180]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800362a:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800364e:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003654:	4b21      	ldr	r3, [pc, #132]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003678:	4a18      	ldr	r2, [pc, #96]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800367e:	4b17      	ldr	r3, [pc, #92]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036a2:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <HAL_GPIO_Init+0x2d0>)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3301      	adds	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f aeaf 	bne.w	800341c <HAL_GPIO_Init+0x10>
  }
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40010000 	.word	0x40010000
 80036d4:	48000400 	.word	0x48000400
 80036d8:	48000800 	.word	0x48000800
 80036dc:	40010400 	.word	0x40010400

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f0:	787b      	ldrb	r3, [r7, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e08d      	b.n	800383e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fd4c 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	@ 0x24
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003760:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003770:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d107      	bne.n	800378a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	e006      	b.n	8003798 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003796:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d108      	bne.n	80037b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	e007      	b.n	80037c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	d138      	bne.n	80038ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003866:	2302      	movs	r3, #2
 8003868:	e032      	b.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	@ 0x24
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003898:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d139      	bne.n	8003966 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e033      	b.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800392e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <HAL_PWREx_GetVoltageRange+0x18>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40007000 	.word	0x40007000

08003990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800399e:	d130      	bne.n	8003a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a0:	4b23      	ldr	r3, [pc, #140]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ac:	d038      	beq.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ae:	4b20      	ldr	r3, [pc, #128]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039be:	4b1d      	ldr	r3, [pc, #116]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2232      	movs	r2, #50	@ 0x32
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0c9b      	lsrs	r3, r3, #18
 80039d0:	3301      	adds	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039d4:	e002      	b.n	80039dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3b01      	subs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039dc:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e8:	d102      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f2      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039fc:	d110      	bne.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e00f      	b.n	8003a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a02:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0e:	d007      	beq.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a10:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a18:	4a05      	ldr	r2, [pc, #20]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40007000 	.word	0x40007000
 8003a34:	20000000 	.word	0x20000000
 8003a38:	431bde83 	.word	0x431bde83

08003a3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f000 bc02 	b.w	8004254 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a50:	4b96      	ldr	r3, [pc, #600]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a5a:	4b94      	ldr	r3, [pc, #592]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80e4 	beq.w	8003c3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4c>
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	f040 808b 	bne.w	8003b96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	f040 8087 	bne.w	8003b96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a88:	4b88      	ldr	r3, [pc, #544]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x64>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e3d9      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	4b81      	ldr	r3, [pc, #516]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_RCC_OscConfig+0x7e>
 8003ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ab8:	e005      	b.n	8003ac6 <HAL_RCC_OscConfig+0x8a>
 8003aba:	4b7c      	ldr	r3, [pc, #496]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d223      	bcs.n	8003b12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fd8c 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e3ba      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ade:	4b73      	ldr	r3, [pc, #460]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a72      	ldr	r2, [pc, #456]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003ae4:	f043 0308 	orr.w	r3, r3, #8
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b70      	ldr	r3, [pc, #448]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	496d      	ldr	r1, [pc, #436]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003afc:	4b6b      	ldr	r3, [pc, #428]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	4968      	ldr	r1, [pc, #416]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	e025      	b.n	8003b5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b12:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a65      	ldr	r2, [pc, #404]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b63      	ldr	r3, [pc, #396]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4960      	ldr	r1, [pc, #384]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b30:	4b5e      	ldr	r3, [pc, #376]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	495b      	ldr	r1, [pc, #364]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fd4c 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e37a      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b5e:	f000 fc81 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b51      	ldr	r3, [pc, #324]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	4950      	ldr	r1, [pc, #320]	@ (8003cb0 <HAL_RCC_OscConfig+0x274>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb4 <HAL_RCC_OscConfig+0x278>)
 8003b7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb8 <HAL_RCC_OscConfig+0x27c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd ff38 	bl	80019f8 <HAL_InitTick>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d052      	beq.n	8003c38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	e35e      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d032      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b9e:	4b43      	ldr	r3, [pc, #268]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a42      	ldr	r2, [pc, #264]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003baa:	f7fd ff75 	bl	8001a98 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bb2:	f7fd ff71 	bl	8001a98 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e347      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bc4:	4b39      	ldr	r3, [pc, #228]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd0:	4b36      	ldr	r3, [pc, #216]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a35      	ldr	r2, [pc, #212]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003bd6:	f043 0308 	orr.w	r3, r3, #8
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b33      	ldr	r3, [pc, #204]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4930      	ldr	r1, [pc, #192]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bee:	4b2f      	ldr	r3, [pc, #188]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	492b      	ldr	r1, [pc, #172]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
 8003c02:	e01a      	b.n	8003c3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c04:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a28      	ldr	r2, [pc, #160]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c10:	f7fd ff42 	bl	8001a98 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c18:	f7fd ff3e 	bl	8001a98 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e314      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x1dc>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d073      	beq.n	8003d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x21c>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d10e      	bne.n	8003c70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d063      	beq.n	8003d2c <HAL_RCC_OscConfig+0x2f0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d15f      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e2f1      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x24c>
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e025      	b.n	8003cd4 <HAL_RCC_OscConfig+0x298>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c90:	d114      	bne.n	8003cbc <HAL_RCC_OscConfig+0x280>
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a05      	ldr	r2, [pc, #20]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b03      	ldr	r3, [pc, #12]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a02      	ldr	r2, [pc, #8]	@ (8003cac <HAL_RCC_OscConfig+0x270>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e013      	b.n	8003cd4 <HAL_RCC_OscConfig+0x298>
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08005c80 	.word	0x08005c80
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	20000004 	.word	0x20000004
 8003cbc:	4ba0      	ldr	r3, [pc, #640]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a9f      	ldr	r2, [pc, #636]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b9d      	ldr	r3, [pc, #628]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a9c      	ldr	r2, [pc, #624]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fedc 	bl	8001a98 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fed8 	bl	8001a98 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e2ae      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf6:	4b92      	ldr	r3, [pc, #584]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2a8>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd fec8 	bl	8001a98 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fd fec4 	bl	8001a98 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e29a      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1e:	4b88      	ldr	r3, [pc, #544]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2d0>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d060      	beq.n	8003dfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_OscConfig+0x310>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d119      	bne.n	8003d7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d116      	bne.n	8003d7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_OscConfig+0x328>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e277      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	4973      	ldr	r1, [pc, #460]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d78:	e040      	b.n	8003dfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d023      	beq.n	8003dca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d82:	4b6f      	ldr	r3, [pc, #444]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fd fe83 	bl	8001a98 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fd fe7f 	bl	8001a98 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e255      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da8:	4b65      	ldr	r3, [pc, #404]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b62      	ldr	r3, [pc, #392]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	495f      	ldr	r1, [pc, #380]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
 8003dc8:	e018      	b.n	8003dfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b5d      	ldr	r3, [pc, #372]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5c      	ldr	r2, [pc, #368]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fe5f 	bl	8001a98 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dde:	f7fd fe5b 	bl	8001a98 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e231      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df0:	4b53      	ldr	r3, [pc, #332]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d03c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e10:	4b4b      	ldr	r3, [pc, #300]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e16:	4a4a      	ldr	r2, [pc, #296]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fd fe3a 	bl	8001a98 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fd fe36 	bl	8001a98 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e20c      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e3a:	4b41      	ldr	r3, [pc, #260]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ef      	beq.n	8003e28 <HAL_RCC_OscConfig+0x3ec>
 8003e48:	e01b      	b.n	8003e82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e50:	4a3b      	ldr	r2, [pc, #236]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fd fe1d 	bl	8001a98 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e62:	f7fd fe19 	bl	8001a98 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e1ef      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e74:	4b32      	ldr	r3, [pc, #200]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ef      	bne.n	8003e62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80a6 	beq.w	8003fdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e90:	2300      	movs	r3, #0
 8003e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e94:	4b2a      	ldr	r3, [pc, #168]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea0:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eac:	4b24      	ldr	r3, [pc, #144]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ebc:	4b21      	ldr	r3, [pc, #132]	@ (8003f44 <HAL_RCC_OscConfig+0x508>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d118      	bne.n	8003efa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <HAL_RCC_OscConfig+0x508>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_RCC_OscConfig+0x508>)
 8003ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed4:	f7fd fde0 	bl	8001a98 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003edc:	f7fd fddc 	bl	8001a98 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e1b2      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eee:	4b15      	ldr	r3, [pc, #84]	@ (8003f44 <HAL_RCC_OscConfig+0x508>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <HAL_RCC_OscConfig+0x4d8>
 8003f02:	4b0f      	ldr	r3, [pc, #60]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f08:	4a0d      	ldr	r2, [pc, #52]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f12:	e029      	b.n	8003f68 <HAL_RCC_OscConfig+0x52c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b05      	cmp	r3, #5
 8003f1a:	d115      	bne.n	8003f48 <HAL_RCC_OscConfig+0x50c>
 8003f1c:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f22:	4a07      	ldr	r2, [pc, #28]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	4a03      	ldr	r2, [pc, #12]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f3c:	e014      	b.n	8003f68 <HAL_RCC_OscConfig+0x52c>
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40007000 	.word	0x40007000
 8003f48:	4b9a      	ldr	r3, [pc, #616]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	4a99      	ldr	r2, [pc, #612]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f58:	4b96      	ldr	r3, [pc, #600]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	4a95      	ldr	r2, [pc, #596]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003f60:	f023 0304 	bic.w	r3, r3, #4
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d016      	beq.n	8003f9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fd fd92 	bl	8001a98 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fd fd8e 	bl	8001a98 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e162      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8e:	4b89      	ldr	r3, [pc, #548]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ed      	beq.n	8003f78 <HAL_RCC_OscConfig+0x53c>
 8003f9c:	e015      	b.n	8003fca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9e:	f7fd fd7b 	bl	8001a98 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fd fd77 	bl	8001a98 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e14b      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fbc:	4b7d      	ldr	r3, [pc, #500]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ed      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fca:	7ffb      	ldrb	r3, [r7, #31]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd0:	4b78      	ldr	r3, [pc, #480]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	4a77      	ldr	r2, [pc, #476]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d03c      	beq.n	8004062 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01c      	beq.n	800402a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ff0:	4b70      	ldr	r3, [pc, #448]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ff6:	4a6f      	ldr	r2, [pc, #444]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fd fd4a 	bl	8001a98 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004008:	f7fd fd46 	bl	8001a98 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e11c      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800401a:	4b66      	ldr	r3, [pc, #408]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 800401c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ef      	beq.n	8004008 <HAL_RCC_OscConfig+0x5cc>
 8004028:	e01b      	b.n	8004062 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800402a:	4b62      	ldr	r3, [pc, #392]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 800402c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004030:	4a60      	ldr	r2, [pc, #384]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fd fd2d 	bl	8001a98 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004042:	f7fd fd29 	bl	8001a98 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0ff      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004054:	4b57      	ldr	r3, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ef      	bne.n	8004042 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80f3 	beq.w	8004252 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	2b02      	cmp	r3, #2
 8004072:	f040 80c9 	bne.w	8004208 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004076:	4b4f      	ldr	r3, [pc, #316]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	429a      	cmp	r2, r3
 8004088:	d12c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	3b01      	subs	r3, #1
 8004096:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d123      	bne.n	80040e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d11b      	bne.n	80040e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d113      	bne.n	80040e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	3b01      	subs	r3, #1
 80040ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d109      	bne.n	80040e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	3b01      	subs	r3, #1
 80040de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d06b      	beq.n	80041bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d062      	beq.n	80041b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040ea:	4b32      	ldr	r3, [pc, #200]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0ac      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040fa:	4b2e      	ldr	r3, [pc, #184]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2d      	ldr	r2, [pc, #180]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004104:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004106:	f7fd fcc7 	bl	8001a98 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410e:	f7fd fcc3 	bl	8001a98 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e099      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f0      	bne.n	800410e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412c:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	4b21      	ldr	r3, [pc, #132]	@ (80041b8 <HAL_RCC_OscConfig+0x77c>)
 8004132:	4013      	ands	r3, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800413c:	3a01      	subs	r2, #1
 800413e:	0112      	lsls	r2, r2, #4
 8004140:	4311      	orrs	r1, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004146:	0212      	lsls	r2, r2, #8
 8004148:	4311      	orrs	r1, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800414e:	0852      	lsrs	r2, r2, #1
 8004150:	3a01      	subs	r2, #1
 8004152:	0552      	lsls	r2, r2, #21
 8004154:	4311      	orrs	r1, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800415a:	0852      	lsrs	r2, r2, #1
 800415c:	3a01      	subs	r2, #1
 800415e:	0652      	lsls	r2, r2, #25
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004166:	06d2      	lsls	r2, r2, #27
 8004168:	430a      	orrs	r2, r1
 800416a:	4912      	ldr	r1, [pc, #72]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 800416c:	4313      	orrs	r3, r2
 800416e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004170:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0f      	ldr	r2, [pc, #60]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800417c:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 8004182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004186:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004188:	f7fd fc86 	bl	8001a98 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004190:	f7fd fc82 	bl	8001a98 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e058      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a2:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <HAL_RCC_OscConfig+0x778>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ae:	e050      	b.n	8004252 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e04f      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041bc:	4b27      	ldr	r3, [pc, #156]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d144      	bne.n	8004252 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041c8:	4b24      	ldr	r3, [pc, #144]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a23      	ldr	r2, [pc, #140]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041d4:	4b21      	ldr	r3, [pc, #132]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a20      	ldr	r2, [pc, #128]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041e0:	f7fd fc5a 	bl	8001a98 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fd fc56 	bl	8001a98 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e02c      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fa:	4b18      	ldr	r3, [pc, #96]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x7ac>
 8004206:	e024      	b.n	8004252 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d01f      	beq.n	800424e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b13      	ldr	r3, [pc, #76]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a12      	ldr	r2, [pc, #72]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 8004214:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fd fc3d 	bl	8001a98 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004222:	f7fd fc39 	bl	8001a98 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e00f      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	4905      	ldr	r1, [pc, #20]	@ (800425c <HAL_RCC_OscConfig+0x820>)
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCC_OscConfig+0x824>)
 8004248:	4013      	ands	r3, r2
 800424a:	60cb      	str	r3, [r1, #12]
 800424c:	e001      	b.n	8004252 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	feeefffc 	.word	0xfeeefffc

08004264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0e7      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b75      	ldr	r3, [pc, #468]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d910      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b72      	ldr	r3, [pc, #456]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0207 	bic.w	r2, r3, #7
 800428e:	4970      	ldr	r1, [pc, #448]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b6e      	ldr	r3, [pc, #440]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0cf      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	4b66      	ldr	r3, [pc, #408]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d908      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b63      	ldr	r3, [pc, #396]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4960      	ldr	r1, [pc, #384]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d04c      	beq.n	800437c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d121      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0a6      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004302:	4b54      	ldr	r3, [pc, #336]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d115      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e09a      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800431a:	4b4e      	ldr	r3, [pc, #312]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e08e      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432a:	4b4a      	ldr	r3, [pc, #296]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e086      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800433a:	4b46      	ldr	r3, [pc, #280]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4943      	ldr	r1, [pc, #268]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434c:	f7fd fba4 	bl	8001a98 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	e00a      	b.n	800436a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f7fd fba0 	bl	8001a98 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e06e      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	4b3a      	ldr	r3, [pc, #232]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 020c 	and.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	429a      	cmp	r2, r3
 800437a:	d1eb      	bne.n	8004354 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	4b31      	ldr	r3, [pc, #196]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004394:	429a      	cmp	r2, r3
 8004396:	d208      	bcs.n	80043aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b2e      	ldr	r3, [pc, #184]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	492b      	ldr	r1, [pc, #172]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043aa:	4b29      	ldr	r3, [pc, #164]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d210      	bcs.n	80043da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b8:	4b25      	ldr	r3, [pc, #148]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 0207 	bic.w	r2, r3, #7
 80043c0:	4923      	ldr	r1, [pc, #140]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c8:	4b21      	ldr	r3, [pc, #132]	@ (8004450 <HAL_RCC_ClockConfig+0x1ec>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e036      	b.n	8004448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4918      	ldr	r1, [pc, #96]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004404:	4b13      	ldr	r3, [pc, #76]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4910      	ldr	r1, [pc, #64]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004418:	f000 f824 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	490b      	ldr	r1, [pc, #44]	@ (8004458 <HAL_RCC_ClockConfig+0x1f4>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	4a09      	ldr	r2, [pc, #36]	@ (800445c <HAL_RCC_ClockConfig+0x1f8>)
 8004436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_RCC_ClockConfig+0x1fc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd fadb 	bl	80019f8 <HAL_InitTick>
 8004442:	4603      	mov	r3, r0
 8004444:	72fb      	strb	r3, [r7, #11]

  return status;
 8004446:	7afb      	ldrb	r3, [r7, #11]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40022000 	.word	0x40022000
 8004454:	40021000 	.word	0x40021000
 8004458:	08005c80 	.word	0x08005c80
 800445c:	20000000 	.word	0x20000000
 8004460:	20000004 	.word	0x20000004

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004472:	4b3e      	ldr	r3, [pc, #248]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447c:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x34>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d11e      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004498:	4b34      	ldr	r3, [pc, #208]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044a4:	4b31      	ldr	r3, [pc, #196]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d102      	bne.n	80044e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044dc:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x110>)
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e004      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044e8:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d134      	bne.n	800455c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044f2:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d003      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0xa6>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d003      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0xac>
 8004508:	e005      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800450a:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x110>)
 800450c:	617b      	str	r3, [r7, #20]
      break;
 800450e:	e005      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x114>)
 8004512:	617b      	str	r3, [r7, #20]
      break;
 8004514:	e002      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	617b      	str	r3, [r7, #20]
      break;
 800451a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800451c:	4b13      	ldr	r3, [pc, #76]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	3301      	adds	r3, #1
 8004528:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800452a:	4b10      	ldr	r3, [pc, #64]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	fb03 f202 	mul.w	r2, r3, r2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	0e5b      	lsrs	r3, r3, #25
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	3301      	adds	r3, #1
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800455c:	69bb      	ldr	r3, [r7, #24]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3724      	adds	r7, #36	@ 0x24
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	08005c98 	.word	0x08005c98
 8004574:	00f42400 	.word	0x00f42400
 8004578:	007a1200 	.word	0x007a1200

0800457c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004580:	4b03      	ldr	r3, [pc, #12]	@ (8004590 <HAL_RCC_GetHCLKFreq+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000000 	.word	0x20000000

08004594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004598:	f7ff fff0 	bl	800457c <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4904      	ldr	r1, [pc, #16]	@ (80045bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	08005c90 	.word	0x08005c90

080045c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045c4:	f7ff ffda 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	0adb      	lsrs	r3, r3, #11
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4904      	ldr	r1, [pc, #16]	@ (80045e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	08005c90 	.word	0x08005c90

080045ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045f8:	4b2a      	ldr	r3, [pc, #168]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004604:	f7ff f9b6 	bl	8003974 <HAL_PWREx_GetVoltageRange>
 8004608:	6178      	str	r0, [r7, #20]
 800460a:	e014      	b.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800460c:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	4a24      	ldr	r2, [pc, #144]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6593      	str	r3, [r2, #88]	@ 0x58
 8004618:	4b22      	ldr	r3, [pc, #136]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004624:	f7ff f9a6 	bl	8003974 <HAL_PWREx_GetVoltageRange>
 8004628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4b1e      	ldr	r3, [pc, #120]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	4a1d      	ldr	r2, [pc, #116]	@ (80046a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004634:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463c:	d10b      	bne.n	8004656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b80      	cmp	r3, #128	@ 0x80
 8004642:	d919      	bls.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2ba0      	cmp	r3, #160	@ 0xa0
 8004648:	d902      	bls.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800464a:	2302      	movs	r3, #2
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e013      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004650:	2301      	movs	r3, #1
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	e010      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b80      	cmp	r3, #128	@ 0x80
 800465a:	d902      	bls.n	8004662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800465c:	2303      	movs	r3, #3
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e00a      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b80      	cmp	r3, #128	@ 0x80
 8004666:	d102      	bne.n	800466e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004668:	2302      	movs	r3, #2
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	e004      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b70      	cmp	r3, #112	@ 0x70
 8004672:	d101      	bne.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004674:	2301      	movs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 0207 	bic.w	r2, r3, #7
 8004680:	4909      	ldr	r1, [pc, #36]	@ (80046a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004688:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d001      	beq.n	800469a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40022000 	.word	0x40022000

080046ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046b4:	2300      	movs	r3, #0
 80046b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046b8:	2300      	movs	r3, #0
 80046ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d031      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046d0:	d01a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80046d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046d6:	d814      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046e0:	d10f      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80046e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ee:	e00c      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f9ce 	bl	8004a98 <RCCEx_PLLSAI1_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004700:	e003      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	74fb      	strb	r3, [r7, #19]
      break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004710:	4b51      	ldr	r3, [pc, #324]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	494e      	ldr	r1, [pc, #312]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 809e 	beq.w	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800473e:	4b46      	ldr	r3, [pc, #280]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004754:	4b40      	ldr	r3, [pc, #256]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004758:	4a3f      	ldr	r2, [pc, #252]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800475a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004760:	4b3d      	ldr	r3, [pc, #244]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476c:	2301      	movs	r3, #1
 800476e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004770:	4b3a      	ldr	r3, [pc, #232]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a39      	ldr	r2, [pc, #228]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800477c:	f7fd f98c 	bl	8001a98 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004782:	e009      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004784:	f7fd f988 	bl	8001a98 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	74fb      	strb	r3, [r7, #19]
        break;
 8004796:	e005      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004798:	4b30      	ldr	r3, [pc, #192]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d15a      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01e      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d019      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047c6:	4b24      	ldr	r3, [pc, #144]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047d2:	4b21      	ldr	r3, [pc, #132]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047f2:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d016      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd f948 	bl	8001a98 <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480a:	e00b      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fd f944 	bl	8001a98 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d902      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	74fb      	strb	r3, [r7, #19]
            break;
 8004822:	e006      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004824:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ec      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004838:	4b07      	ldr	r3, [pc, #28]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004846:	4904      	ldr	r1, [pc, #16]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800484e:	e009      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	74bb      	strb	r3, [r7, #18]
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004864:	7c7b      	ldrb	r3, [r7, #17]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d105      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486a:	4b8a      	ldr	r3, [pc, #552]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	4a89      	ldr	r2, [pc, #548]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004874:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004882:	4b84      	ldr	r3, [pc, #528]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004888:	f023 0203 	bic.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4980      	ldr	r1, [pc, #512]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	f023 020c 	bic.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	4978      	ldr	r1, [pc, #480]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048c6:	4b73      	ldr	r3, [pc, #460]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	496f      	ldr	r1, [pc, #444]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	4967      	ldr	r1, [pc, #412]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800490a:	4b62      	ldr	r3, [pc, #392]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	495e      	ldr	r1, [pc, #376]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492c:	4b59      	ldr	r3, [pc, #356]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004932:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	4956      	ldr	r1, [pc, #344]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800494e:	4b51      	ldr	r3, [pc, #324]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004954:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495c:	494d      	ldr	r1, [pc, #308]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d028      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004970:	4b48      	ldr	r3, [pc, #288]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	4945      	ldr	r1, [pc, #276]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800498e:	d106      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004990:	4b40      	ldr	r3, [pc, #256]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a3f      	ldr	r2, [pc, #252]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800499a:	60d3      	str	r3, [r2, #12]
 800499c:	e011      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a6:	d10c      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	2101      	movs	r1, #1
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f872 	bl	8004a98 <RCCEx_PLLSAI1_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d028      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ce:	4b31      	ldr	r3, [pc, #196]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049dc:	492d      	ldr	r1, [pc, #180]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ec:	d106      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ee:	4b29      	ldr	r3, [pc, #164]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4a28      	ldr	r2, [pc, #160]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049f8:	60d3      	str	r3, [r2, #12]
 80049fa:	e011      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f843 	bl	8004a98 <RCCEx_PLLSAI1_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01c      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	4916      	ldr	r1, [pc, #88]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	2102      	movs	r1, #2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f820 	bl	8004a98 <RCCEx_PLLSAI1_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a72:	4b08      	ldr	r3, [pc, #32]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a80:	4904      	ldr	r1, [pc, #16]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000

08004a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aa6:	4b74      	ldr	r3, [pc, #464]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d018      	beq.n	8004ae4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ab2:	4b71      	ldr	r3, [pc, #452]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0203 	and.w	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d10d      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004aca:	4b6b      	ldr	r3, [pc, #428]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
       ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d047      	beq.n	8004b6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
 8004ae2:	e044      	b.n	8004b6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d018      	beq.n	8004b1e <RCCEx_PLLSAI1_Config+0x86>
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d825      	bhi.n	8004b3c <RCCEx_PLLSAI1_Config+0xa4>
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d002      	beq.n	8004afa <RCCEx_PLLSAI1_Config+0x62>
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d009      	beq.n	8004b0c <RCCEx_PLLSAI1_Config+0x74>
 8004af8:	e020      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004afa:	4b5f      	ldr	r3, [pc, #380]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11d      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0a:	e01a      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d116      	bne.n	8004b46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1c:	e013      	b.n	8004b46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b1e:	4b56      	ldr	r3, [pc, #344]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b2a:	4b53      	ldr	r3, [pc, #332]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b3a:	e006      	b.n	8004b4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e004      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b42:	bf00      	nop
 8004b44:	e002      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10d      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b52:	4b49      	ldr	r3, [pc, #292]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	430b      	orrs	r3, r1
 8004b68:	4943      	ldr	r1, [pc, #268]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d17c      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b74:	4b40      	ldr	r3, [pc, #256]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3f      	ldr	r2, [pc, #252]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fc ff8a 	bl	8001a98 <HAL_GetTick>
 8004b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b86:	e009      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b88:	f7fc ff86 	bl	8001a98 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	73fb      	strb	r3, [r7, #15]
        break;
 8004b9a:	e005      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b9c:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ef      	bne.n	8004b88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d15f      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d110      	bne.n	8004bd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bb4:	4b30      	ldr	r3, [pc, #192]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004bbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6892      	ldr	r2, [r2, #8]
 8004bc4:	0211      	lsls	r1, r2, #8
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68d2      	ldr	r2, [r2, #12]
 8004bca:	06d2      	lsls	r2, r2, #27
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	492a      	ldr	r1, [pc, #168]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	610b      	str	r3, [r1, #16]
 8004bd4:	e027      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d112      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bdc:	4b26      	ldr	r3, [pc, #152]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004be4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6892      	ldr	r2, [r2, #8]
 8004bec:	0211      	lsls	r1, r2, #8
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6912      	ldr	r2, [r2, #16]
 8004bf2:	0852      	lsrs	r2, r2, #1
 8004bf4:	3a01      	subs	r2, #1
 8004bf6:	0552      	lsls	r2, r2, #21
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	491f      	ldr	r1, [pc, #124]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	610b      	str	r3, [r1, #16]
 8004c00:	e011      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c02:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	0211      	lsls	r1, r2, #8
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6952      	ldr	r2, [r2, #20]
 8004c18:	0852      	lsrs	r2, r2, #1
 8004c1a:	3a01      	subs	r2, #1
 8004c1c:	0652      	lsls	r2, r2, #25
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	4915      	ldr	r1, [pc, #84]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c26:	4b14      	ldr	r3, [pc, #80]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a13      	ldr	r2, [pc, #76]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c32:	f7fc ff31 	bl	8001a98 <HAL_GetTick>
 8004c36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c38:	e009      	b.n	8004c4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c3a:	f7fc ff2d 	bl	8001a98 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d902      	bls.n	8004c4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	73fb      	strb	r3, [r7, #15]
          break;
 8004c4c:	e005      	b.n	8004c5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ef      	beq.n	8004c3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	4903      	ldr	r1, [pc, #12]	@ (8004c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e095      	b.n	8004dba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9e:	d009      	beq.n	8004cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	61da      	str	r2, [r3, #28]
 8004ca6:	e005      	b.n	8004cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc fc20 	bl	8001514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cf4:	d902      	bls.n	8004cfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e002      	b.n	8004d02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d0a:	d007      	beq.n	8004d1c <HAL_SPI_Init+0xa0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5e:	ea42 0103 	orr.w	r1, r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	f003 0204 	and.w	r2, r3, #4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e049      	b.n	8004e68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fc fc99 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 f8ff 	bl	8005004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_ConfigClockSource+0x1c>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e0b6      	b.n	8004ffa <HAL_TIM_ConfigClockSource+0x18a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	d03e      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0xd8>
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ece:	f200 8087 	bhi.w	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed6:	f000 8086 	beq.w	8004fe6 <HAL_TIM_ConfigClockSource+0x176>
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	d87f      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004ee0:	2b70      	cmp	r3, #112	@ 0x70
 8004ee2:	d01a      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0xaa>
 8004ee4:	2b70      	cmp	r3, #112	@ 0x70
 8004ee6:	d87b      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004ee8:	2b60      	cmp	r3, #96	@ 0x60
 8004eea:	d050      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x11e>
 8004eec:	2b60      	cmp	r3, #96	@ 0x60
 8004eee:	d877      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004ef0:	2b50      	cmp	r3, #80	@ 0x50
 8004ef2:	d03c      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0xfe>
 8004ef4:	2b50      	cmp	r3, #80	@ 0x50
 8004ef6:	d873      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d058      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x13e>
 8004efc:	2b40      	cmp	r3, #64	@ 0x40
 8004efe:	d86f      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d064      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15e>
 8004f04:	2b30      	cmp	r3, #48	@ 0x30
 8004f06:	d86b      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d060      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15e>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d867      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d05c      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15e>
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d05a      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15e>
 8004f18:	e062      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f2a:	f000 f955 	bl	80051d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	609a      	str	r2, [r3, #8]
      break;
 8004f46:	e04f      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	f000 f93e 	bl	80051d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f6a:	609a      	str	r2, [r3, #8]
      break;
 8004f6c:	e03c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f000 f8b2 	bl	80050e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2150      	movs	r1, #80	@ 0x50
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f90b 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004f8c:	e02c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f000 f8d1 	bl	8005142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2160      	movs	r1, #96	@ 0x60
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f8fb 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004fac:	e01c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 f892 	bl	80050e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2140      	movs	r1, #64	@ 0x40
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f8eb 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e00c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f000 f8e2 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004fde:	e003      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe4:	e000      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a30      	ldr	r2, [pc, #192]	@ (80050d8 <TIM_Base_SetConfig+0xd4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x20>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a27      	ldr	r2, [pc, #156]	@ (80050d8 <TIM_Base_SetConfig+0xd4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0x52>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0x52>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a24      	ldr	r2, [pc, #144]	@ (80050dc <TIM_Base_SetConfig+0xd8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0x52>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <TIM_Base_SetConfig+0xdc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a12      	ldr	r2, [pc, #72]	@ (80050d8 <TIM_Base_SetConfig+0xd4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_Base_SetConfig+0xa0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a11      	ldr	r2, [pc, #68]	@ (80050dc <TIM_Base_SetConfig+0xd8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0xa0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a10      	ldr	r2, [pc, #64]	@ (80050e0 <TIM_Base_SetConfig+0xdc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d103      	bne.n	80050ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	611a      	str	r2, [r3, #16]
  }
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400

080050e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800510e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 030a 	bic.w	r3, r3, #10
 8005120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005142:	b480      	push	{r7}
 8005144:	b087      	sub	sp, #28
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f023 0210 	bic.w	r2, r3, #16
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800516c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	031b      	lsls	r3, r3, #12
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800517e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f043 0307 	orr.w	r3, r3, #7
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	021a      	lsls	r2, r3, #8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	609a      	str	r2, [r3, #8]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800522c:	2302      	movs	r3, #2
 800522e:	e04f      	b.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a21      	ldr	r2, [pc, #132]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d108      	bne.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005260:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a14      	ldr	r2, [pc, #80]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005298:	d004      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40014000 	.word	0x40014000

080052e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e040      	b.n	8005378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc fa8a 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	@ 0x24
 8005310:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa54 	bl	80057d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f825 	bl	8005380 <UART_SetConfig>
 8005336:	4603      	mov	r3, r0
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e01b      	b.n	8005378 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800534e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800535e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fad3 	bl	800591c <UART_CheckIdleState>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005384:	b08a      	sub	sp, #40	@ 0x28
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	431a      	orrs	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4bb4      	ldr	r3, [pc, #720]	@ (8005680 <UART_SetConfig+0x300>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4aa9      	ldr	r2, [pc, #676]	@ (8005684 <UART_SetConfig+0x304>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e8:	4313      	orrs	r3, r2
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4aa0      	ldr	r2, [pc, #640]	@ (8005688 <UART_SetConfig+0x308>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d126      	bne.n	8005458 <UART_SetConfig+0xd8>
 800540a:	4ba0      	ldr	r3, [pc, #640]	@ (800568c <UART_SetConfig+0x30c>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	2b03      	cmp	r3, #3
 8005416:	d81b      	bhi.n	8005450 <UART_SetConfig+0xd0>
 8005418:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <UART_SetConfig+0xa0>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005431 	.word	0x08005431
 8005424:	08005441 	.word	0x08005441
 8005428:	08005439 	.word	0x08005439
 800542c:	08005449 	.word	0x08005449
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005436:	e080      	b.n	800553a <UART_SetConfig+0x1ba>
 8005438:	2302      	movs	r3, #2
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543e:	e07c      	b.n	800553a <UART_SetConfig+0x1ba>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005446:	e078      	b.n	800553a <UART_SetConfig+0x1ba>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544e:	e074      	b.n	800553a <UART_SetConfig+0x1ba>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005456:	e070      	b.n	800553a <UART_SetConfig+0x1ba>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a8c      	ldr	r2, [pc, #560]	@ (8005690 <UART_SetConfig+0x310>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d138      	bne.n	80054d4 <UART_SetConfig+0x154>
 8005462:	4b8a      	ldr	r3, [pc, #552]	@ (800568c <UART_SetConfig+0x30c>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d82d      	bhi.n	80054cc <UART_SetConfig+0x14c>
 8005470:	a201      	add	r2, pc, #4	@ (adr r2, 8005478 <UART_SetConfig+0xf8>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054cd 	.word	0x080054cd
 8005480:	080054cd 	.word	0x080054cd
 8005484:	080054cd 	.word	0x080054cd
 8005488:	080054bd 	.word	0x080054bd
 800548c:	080054cd 	.word	0x080054cd
 8005490:	080054cd 	.word	0x080054cd
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054cd 	.word	0x080054cd
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054c5 	.word	0x080054c5
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b2:	e042      	b.n	800553a <UART_SetConfig+0x1ba>
 80054b4:	2302      	movs	r3, #2
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ba:	e03e      	b.n	800553a <UART_SetConfig+0x1ba>
 80054bc:	2304      	movs	r3, #4
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c2:	e03a      	b.n	800553a <UART_SetConfig+0x1ba>
 80054c4:	2308      	movs	r3, #8
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ca:	e036      	b.n	800553a <UART_SetConfig+0x1ba>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d2:	e032      	b.n	800553a <UART_SetConfig+0x1ba>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005684 <UART_SetConfig+0x304>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d12a      	bne.n	8005534 <UART_SetConfig+0x1b4>
 80054de:	4b6b      	ldr	r3, [pc, #428]	@ (800568c <UART_SetConfig+0x30c>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054ec:	d01a      	beq.n	8005524 <UART_SetConfig+0x1a4>
 80054ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054f2:	d81b      	bhi.n	800552c <UART_SetConfig+0x1ac>
 80054f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f8:	d00c      	beq.n	8005514 <UART_SetConfig+0x194>
 80054fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054fe:	d815      	bhi.n	800552c <UART_SetConfig+0x1ac>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <UART_SetConfig+0x18c>
 8005504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005508:	d008      	beq.n	800551c <UART_SetConfig+0x19c>
 800550a:	e00f      	b.n	800552c <UART_SetConfig+0x1ac>
 800550c:	2300      	movs	r3, #0
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005512:	e012      	b.n	800553a <UART_SetConfig+0x1ba>
 8005514:	2302      	movs	r3, #2
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551a:	e00e      	b.n	800553a <UART_SetConfig+0x1ba>
 800551c:	2304      	movs	r3, #4
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e00a      	b.n	800553a <UART_SetConfig+0x1ba>
 8005524:	2308      	movs	r3, #8
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552a:	e006      	b.n	800553a <UART_SetConfig+0x1ba>
 800552c:	2310      	movs	r3, #16
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005532:	e002      	b.n	800553a <UART_SetConfig+0x1ba>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a51      	ldr	r2, [pc, #324]	@ (8005684 <UART_SetConfig+0x304>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d17a      	bne.n	800563a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005544:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005548:	2b08      	cmp	r3, #8
 800554a:	d824      	bhi.n	8005596 <UART_SetConfig+0x216>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <UART_SetConfig+0x1d4>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005579 	.word	0x08005579
 8005558:	08005597 	.word	0x08005597
 800555c:	08005581 	.word	0x08005581
 8005560:	08005597 	.word	0x08005597
 8005564:	08005587 	.word	0x08005587
 8005568:	08005597 	.word	0x08005597
 800556c:	08005597 	.word	0x08005597
 8005570:	08005597 	.word	0x08005597
 8005574:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005578:	f7ff f80c 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 800557c:	61f8      	str	r0, [r7, #28]
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b44      	ldr	r3, [pc, #272]	@ (8005694 <UART_SetConfig+0x314>)
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fe ff6d 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 800558a:	61f8      	str	r0, [r7, #28]
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8107 	beq.w	80057b8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d305      	bcc.n	80055c6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d903      	bls.n	80055ce <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055cc:	e0f4      	b.n	80057b8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2200      	movs	r2, #0
 80055d2:	461c      	mov	r4, r3
 80055d4:	4615      	mov	r5, r2
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	022b      	lsls	r3, r5, #8
 80055e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055e4:	0222      	lsls	r2, r4, #8
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	6849      	ldr	r1, [r1, #4]
 80055ea:	0849      	lsrs	r1, r1, #1
 80055ec:	2000      	movs	r0, #0
 80055ee:	4688      	mov	r8, r1
 80055f0:	4681      	mov	r9, r0
 80055f2:	eb12 0a08 	adds.w	sl, r2, r8
 80055f6:	eb43 0b09 	adc.w	fp, r3, r9
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005608:	4650      	mov	r0, sl
 800560a:	4659      	mov	r1, fp
 800560c:	f7fb f9fe 	bl	8000a0c <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800561e:	d308      	bcc.n	8005632 <UART_SetConfig+0x2b2>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005626:	d204      	bcs.n	8005632 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e0c2      	b.n	80057b8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005638:	e0be      	b.n	80057b8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005642:	d16a      	bne.n	800571a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005644:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005648:	2b08      	cmp	r3, #8
 800564a:	d834      	bhi.n	80056b6 <UART_SetConfig+0x336>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0x2d4>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005679 	.word	0x08005679
 8005658:	08005699 	.word	0x08005699
 800565c:	080056a1 	.word	0x080056a1
 8005660:	080056b7 	.word	0x080056b7
 8005664:	080056a7 	.word	0x080056a7
 8005668:	080056b7 	.word	0x080056b7
 800566c:	080056b7 	.word	0x080056b7
 8005670:	080056b7 	.word	0x080056b7
 8005674:	080056af 	.word	0x080056af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe ff8c 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 800567c:	61f8      	str	r0, [r7, #28]
        break;
 800567e:	e020      	b.n	80056c2 <UART_SetConfig+0x342>
 8005680:	efff69f3 	.word	0xefff69f3
 8005684:	40008000 	.word	0x40008000
 8005688:	40013800 	.word	0x40013800
 800568c:	40021000 	.word	0x40021000
 8005690:	40004400 	.word	0x40004400
 8005694:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005698:	f7fe ff92 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 800569c:	61f8      	str	r0, [r7, #28]
        break;
 800569e:	e010      	b.n	80056c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a0:	4b4c      	ldr	r3, [pc, #304]	@ (80057d4 <UART_SetConfig+0x454>)
 80056a2:	61fb      	str	r3, [r7, #28]
        break;
 80056a4:	e00d      	b.n	80056c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a6:	f7fe fedd 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 80056aa:	61f8      	str	r0, [r7, #28]
        break;
 80056ac:	e009      	b.n	80056c2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b2:	61fb      	str	r3, [r7, #28]
        break;
 80056b4:	e005      	b.n	80056c2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d077      	beq.n	80057b8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005a      	lsls	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	441a      	add	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d916      	bls.n	8005712 <UART_SetConfig+0x392>
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ea:	d212      	bcs.n	8005712 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f023 030f 	bic.w	r3, r3, #15
 80056f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	b29a      	uxth	r2, r3
 8005702:	8afb      	ldrh	r3, [r7, #22]
 8005704:	4313      	orrs	r3, r2
 8005706:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	8afa      	ldrh	r2, [r7, #22]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	e052      	b.n	80057b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005718:	e04e      	b.n	80057b8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800571a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800571e:	2b08      	cmp	r3, #8
 8005720:	d827      	bhi.n	8005772 <UART_SetConfig+0x3f2>
 8005722:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <UART_SetConfig+0x3a8>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005755 	.word	0x08005755
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005773 	.word	0x08005773
 8005738:	08005763 	.word	0x08005763
 800573c:	08005773 	.word	0x08005773
 8005740:	08005773 	.word	0x08005773
 8005744:	08005773 	.word	0x08005773
 8005748:	0800576b 	.word	0x0800576b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7fe ff22 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8005750:	61f8      	str	r0, [r7, #28]
        break;
 8005752:	e014      	b.n	800577e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7fe ff34 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8005758:	61f8      	str	r0, [r7, #28]
        break;
 800575a:	e010      	b.n	800577e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <UART_SetConfig+0x454>)
 800575e:	61fb      	str	r3, [r7, #28]
        break;
 8005760:	e00d      	b.n	800577e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe fe7f 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8005766:	61f8      	str	r0, [r7, #28]
        break;
 8005768:	e009      	b.n	800577e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576e:	61fb      	str	r3, [r7, #28]
        break;
 8005770:	e005      	b.n	800577e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800577c:	bf00      	nop
    }

    if (pclk != 0U)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d019      	beq.n	80057b8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	085a      	lsrs	r2, r3, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	441a      	add	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b0f      	cmp	r3, #15
 800579c:	d909      	bls.n	80057b2 <UART_SetConfig+0x432>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a4:	d205      	bcs.n	80057b2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60da      	str	r2, [r3, #12]
 80057b0:	e002      	b.n	80057b8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3728      	adds	r7, #40	@ 0x28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d2:	bf00      	nop
 80057d4:	00f42400 	.word	0x00f42400

080057d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01a      	beq.n	80058ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d6:	d10a      	bne.n	80058ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	605a      	str	r2, [r3, #4]
  }
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b098      	sub	sp, #96	@ 0x60
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800592c:	f7fc f8b4 	bl	8001a98 <HAL_GetTick>
 8005930:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b08      	cmp	r3, #8
 800593e:	d12e      	bne.n	800599e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005948:	2200      	movs	r2, #0
 800594a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f88c 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d021      	beq.n	800599e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005978:	647b      	str	r3, [r7, #68]	@ 0x44
 800597a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800597e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e6      	bne.n	800595a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e062      	b.n	8005a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d149      	bne.n	8005a40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b4:	2200      	movs	r2, #0
 80059b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f856 	bl	8005a6c <UART_WaitOnFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d03c      	beq.n	8005a40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	623b      	str	r3, [r7, #32]
   return(result);
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e6      	bne.n	80059c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3308      	adds	r3, #8
 80059fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a18:	61fa      	str	r2, [r7, #28]
 8005a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	617b      	str	r3, [r7, #20]
   return(result);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e011      	b.n	8005a64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3758      	adds	r7, #88	@ 0x58
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7c:	e04f      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a84:	d04b      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fc f807 	bl	8001a98 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e04e      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d037      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b80      	cmp	r3, #128	@ 0x80
 8005ab2:	d034      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b40      	cmp	r3, #64	@ 0x40
 8005ab8:	d031      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d110      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2208      	movs	r2, #8
 8005ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f838 	bl	8005b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2208      	movs	r2, #8
 8005ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e029      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af8:	d111      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f81e 	bl	8005b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e00f      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d0a0      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b095      	sub	sp, #84	@ 0x54
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e6      	bne.n	8005b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d118      	bne.n	8005bee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f023 0310 	bic.w	r3, r3, #16
 8005bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	613b      	str	r3, [r7, #16]
   return(result);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e6      	bne.n	8005bbc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c02:	bf00      	nop
 8005c04:	3754      	adds	r7, #84	@ 0x54
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <memset>:
 8005c0e:	4402      	add	r2, r0
 8005c10:	4603      	mov	r3, r0
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d100      	bne.n	8005c18 <memset+0xa>
 8005c16:	4770      	bx	lr
 8005c18:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1c:	e7f9      	b.n	8005c12 <memset+0x4>
	...

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4d0d      	ldr	r5, [pc, #52]	@ (8005c58 <__libc_init_array+0x38>)
 8005c24:	4c0d      	ldr	r4, [pc, #52]	@ (8005c5c <__libc_init_array+0x3c>)
 8005c26:	1b64      	subs	r4, r4, r5
 8005c28:	10a4      	asrs	r4, r4, #2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	42a6      	cmp	r6, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	4d0b      	ldr	r5, [pc, #44]	@ (8005c60 <__libc_init_array+0x40>)
 8005c32:	4c0c      	ldr	r4, [pc, #48]	@ (8005c64 <__libc_init_array+0x44>)
 8005c34:	f000 f818 	bl	8005c68 <_init>
 8005c38:	1b64      	subs	r4, r4, r5
 8005c3a:	10a4      	asrs	r4, r4, #2
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c48:	4798      	blx	r3
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c52:	4798      	blx	r3
 8005c54:	3601      	adds	r6, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	08005cd0 	.word	0x08005cd0
 8005c5c:	08005cd0 	.word	0x08005cd0
 8005c60:	08005cd0 	.word	0x08005cd0
 8005c64:	08005cd4 	.word	0x08005cd4

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
