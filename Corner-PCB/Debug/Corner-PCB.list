
Corner-PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007148  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080072d8  080072d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007358  08007358  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007358  08007358  00008358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007360  08007360  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007360  08007360  00008360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007364  08007364  00008364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007368  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000068  080073d0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080073d0  000094e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac90  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003484  00000000  00000000  00023d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  000271b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134b  00000000  00000000  00028a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002523e  00000000  00000000  00029da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdc9  00000000  00000000  0004efe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ea7  00000000  00000000  0006bdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fc51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000728c  00000000  00000000  0014fc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00156f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072c0 	.word	0x080072c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080072c0 	.word	0x080072c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_uldivmod>:
 800083c:	b953      	cbnz	r3, 8000854 <__aeabi_uldivmod+0x18>
 800083e:	b94a      	cbnz	r2, 8000854 <__aeabi_uldivmod+0x18>
 8000840:	2900      	cmp	r1, #0
 8000842:	bf08      	it	eq
 8000844:	2800      	cmpeq	r0, #0
 8000846:	bf1c      	itt	ne
 8000848:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800084c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000850:	f000 b988 	b.w	8000b64 <__aeabi_idiv0>
 8000854:	f1ad 0c08 	sub.w	ip, sp, #8
 8000858:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800085c:	f000 f806 	bl	800086c <__udivmoddi4>
 8000860:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr

0800086c <__udivmoddi4>:
 800086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000870:	9d08      	ldr	r5, [sp, #32]
 8000872:	468e      	mov	lr, r1
 8000874:	4604      	mov	r4, r0
 8000876:	4688      	mov	r8, r1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d14a      	bne.n	8000912 <__udivmoddi4+0xa6>
 800087c:	428a      	cmp	r2, r1
 800087e:	4617      	mov	r7, r2
 8000880:	d962      	bls.n	8000948 <__udivmoddi4+0xdc>
 8000882:	fab2 f682 	clz	r6, r2
 8000886:	b14e      	cbz	r6, 800089c <__udivmoddi4+0x30>
 8000888:	f1c6 0320 	rsb	r3, r6, #32
 800088c:	fa01 f806 	lsl.w	r8, r1, r6
 8000890:	fa20 f303 	lsr.w	r3, r0, r3
 8000894:	40b7      	lsls	r7, r6
 8000896:	ea43 0808 	orr.w	r8, r3, r8
 800089a:	40b4      	lsls	r4, r6
 800089c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008a8:	0c23      	lsrs	r3, r4, #16
 80008aa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008b2:	fb01 f20c 	mul.w	r2, r1, ip
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d909      	bls.n	80008ce <__udivmoddi4+0x62>
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80008c0:	f080 80ea 	bcs.w	8000a98 <__udivmoddi4+0x22c>
 80008c4:	429a      	cmp	r2, r3
 80008c6:	f240 80e7 	bls.w	8000a98 <__udivmoddi4+0x22c>
 80008ca:	3902      	subs	r1, #2
 80008cc:	443b      	add	r3, r7
 80008ce:	1a9a      	subs	r2, r3, r2
 80008d0:	b2a3      	uxth	r3, r4
 80008d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb00 fc0c 	mul.w	ip, r0, ip
 80008e2:	459c      	cmp	ip, r3
 80008e4:	d909      	bls.n	80008fa <__udivmoddi4+0x8e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80008ec:	f080 80d6 	bcs.w	8000a9c <__udivmoddi4+0x230>
 80008f0:	459c      	cmp	ip, r3
 80008f2:	f240 80d3 	bls.w	8000a9c <__udivmoddi4+0x230>
 80008f6:	443b      	add	r3, r7
 80008f8:	3802      	subs	r0, #2
 80008fa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008fe:	eba3 030c 	sub.w	r3, r3, ip
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa2>
 8000906:	40f3      	lsrs	r3, r6
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xb6>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb0>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa2>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x14c>
 800092a:	4573      	cmp	r3, lr
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xc8>
 800092e:	4282      	cmp	r2, r0
 8000930:	f200 8105 	bhi.w	8000b3e <__udivmoddi4+0x2d2>
 8000934:	1a84      	subs	r4, r0, r2
 8000936:	eb6e 0203 	sbc.w	r2, lr, r3
 800093a:	2001      	movs	r0, #1
 800093c:	4690      	mov	r8, r2
 800093e:	2d00      	cmp	r5, #0
 8000940:	d0e5      	beq.n	800090e <__udivmoddi4+0xa2>
 8000942:	e9c5 4800 	strd	r4, r8, [r5]
 8000946:	e7e2      	b.n	800090e <__udivmoddi4+0xa2>
 8000948:	2a00      	cmp	r2, #0
 800094a:	f000 8090 	beq.w	8000a6e <__udivmoddi4+0x202>
 800094e:	fab2 f682 	clz	r6, r2
 8000952:	2e00      	cmp	r6, #0
 8000954:	f040 80a4 	bne.w	8000aa0 <__udivmoddi4+0x234>
 8000958:	1a8a      	subs	r2, r1, r2
 800095a:	0c03      	lsrs	r3, r0, #16
 800095c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000960:	b280      	uxth	r0, r0
 8000962:	b2bc      	uxth	r4, r7
 8000964:	2101      	movs	r1, #1
 8000966:	fbb2 fcfe 	udiv	ip, r2, lr
 800096a:	fb0e 221c 	mls	r2, lr, ip, r2
 800096e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000972:	fb04 f20c 	mul.w	r2, r4, ip
 8000976:	429a      	cmp	r2, r3
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x11e>
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000980:	d202      	bcs.n	8000988 <__udivmoddi4+0x11c>
 8000982:	429a      	cmp	r2, r3
 8000984:	f200 80e0 	bhi.w	8000b48 <__udivmoddi4+0x2dc>
 8000988:	46c4      	mov	ip, r8
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000990:	fb0e 3312 	mls	r3, lr, r2, r3
 8000994:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000998:	fb02 f404 	mul.w	r4, r2, r4
 800099c:	429c      	cmp	r4, r3
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0x144>
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x142>
 80009a8:	429c      	cmp	r4, r3
 80009aa:	f200 80ca 	bhi.w	8000b42 <__udivmoddi4+0x2d6>
 80009ae:	4602      	mov	r2, r0
 80009b0:	1b1b      	subs	r3, r3, r4
 80009b2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x98>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa0e f401 	lsl.w	r4, lr, r1
 80009c8:	fa20 f306 	lsr.w	r3, r0, r6
 80009cc:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009d4:	4323      	orrs	r3, r4
 80009d6:	fa00 f801 	lsl.w	r8, r0, r1
 80009da:	fa1f fc87 	uxth.w	ip, r7
 80009de:	fbbe f0f9 	udiv	r0, lr, r9
 80009e2:	0c1c      	lsrs	r4, r3, #16
 80009e4:	fb09 ee10 	mls	lr, r9, r0, lr
 80009e8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009ec:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d909      	bls.n	8000a0c <__udivmoddi4+0x1a0>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80009fe:	f080 809c 	bcs.w	8000b3a <__udivmoddi4+0x2ce>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f240 8099 	bls.w	8000b3a <__udivmoddi4+0x2ce>
 8000a08:	3802      	subs	r0, #2
 8000a0a:	443c      	add	r4, r7
 8000a0c:	eba4 040e 	sub.w	r4, r4, lr
 8000a10:	fa1f fe83 	uxth.w	lr, r3
 8000a14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a18:	fb09 4413 	mls	r4, r9, r3, r4
 8000a1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a24:	45a4      	cmp	ip, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x1ce>
 8000a28:	193c      	adds	r4, r7, r4
 8000a2a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a2e:	f080 8082 	bcs.w	8000b36 <__udivmoddi4+0x2ca>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d97f      	bls.n	8000b36 <__udivmoddi4+0x2ca>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a46:	4564      	cmp	r4, ip
 8000a48:	4673      	mov	r3, lr
 8000a4a:	46e1      	mov	r9, ip
 8000a4c:	d362      	bcc.n	8000b14 <__udivmoddi4+0x2a8>
 8000a4e:	d05f      	beq.n	8000b10 <__udivmoddi4+0x2a4>
 8000a50:	b15d      	cbz	r5, 8000a6a <__udivmoddi4+0x1fe>
 8000a52:	ebb8 0203 	subs.w	r2, r8, r3
 8000a56:	eb64 0409 	sbc.w	r4, r4, r9
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a62:	431e      	orrs	r6, r3
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	e9c5 6400 	strd	r6, r4, [r5]
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	e74f      	b.n	800090e <__udivmoddi4+0xa2>
 8000a6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a72:	0c01      	lsrs	r1, r0, #16
 8000a74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a78:	b280      	uxth	r0, r0
 8000a7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4638      	mov	r0, r7
 8000a82:	463c      	mov	r4, r7
 8000a84:	46b8      	mov	r8, r7
 8000a86:	46be      	mov	lr, r7
 8000a88:	2620      	movs	r6, #32
 8000a8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a8e:	eba2 0208 	sub.w	r2, r2, r8
 8000a92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a96:	e766      	b.n	8000966 <__udivmoddi4+0xfa>
 8000a98:	4601      	mov	r1, r0
 8000a9a:	e718      	b.n	80008ce <__udivmoddi4+0x62>
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	e72c      	b.n	80008fa <__udivmoddi4+0x8e>
 8000aa0:	f1c6 0220 	rsb	r2, r6, #32
 8000aa4:	fa2e f302 	lsr.w	r3, lr, r2
 8000aa8:	40b7      	lsls	r7, r6
 8000aaa:	40b1      	lsls	r1, r6
 8000aac:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000aba:	b2bc      	uxth	r4, r7
 8000abc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac0:	0c11      	lsrs	r1, r2, #16
 8000ac2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac6:	fb08 f904 	mul.w	r9, r8, r4
 8000aca:	40b0      	lsls	r0, r6
 8000acc:	4589      	cmp	r9, r1
 8000ace:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ad2:	b280      	uxth	r0, r0
 8000ad4:	d93e      	bls.n	8000b54 <__udivmoddi4+0x2e8>
 8000ad6:	1879      	adds	r1, r7, r1
 8000ad8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000adc:	d201      	bcs.n	8000ae2 <__udivmoddi4+0x276>
 8000ade:	4589      	cmp	r9, r1
 8000ae0:	d81f      	bhi.n	8000b22 <__udivmoddi4+0x2b6>
 8000ae2:	eba1 0109 	sub.w	r1, r1, r9
 8000ae6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aea:	fb09 f804 	mul.w	r8, r9, r4
 8000aee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af2:	b292      	uxth	r2, r2
 8000af4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000af8:	4542      	cmp	r2, r8
 8000afa:	d229      	bcs.n	8000b50 <__udivmoddi4+0x2e4>
 8000afc:	18ba      	adds	r2, r7, r2
 8000afe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b02:	d2c4      	bcs.n	8000a8e <__udivmoddi4+0x222>
 8000b04:	4542      	cmp	r2, r8
 8000b06:	d2c2      	bcs.n	8000a8e <__udivmoddi4+0x222>
 8000b08:	f1a9 0102 	sub.w	r1, r9, #2
 8000b0c:	443a      	add	r2, r7
 8000b0e:	e7be      	b.n	8000a8e <__udivmoddi4+0x222>
 8000b10:	45f0      	cmp	r8, lr
 8000b12:	d29d      	bcs.n	8000a50 <__udivmoddi4+0x1e4>
 8000b14:	ebbe 0302 	subs.w	r3, lr, r2
 8000b18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	46e1      	mov	r9, ip
 8000b20:	e796      	b.n	8000a50 <__udivmoddi4+0x1e4>
 8000b22:	eba7 0909 	sub.w	r9, r7, r9
 8000b26:	4449      	add	r1, r9
 8000b28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b30:	fb09 f804 	mul.w	r8, r9, r4
 8000b34:	e7db      	b.n	8000aee <__udivmoddi4+0x282>
 8000b36:	4673      	mov	r3, lr
 8000b38:	e77f      	b.n	8000a3a <__udivmoddi4+0x1ce>
 8000b3a:	4650      	mov	r0, sl
 8000b3c:	e766      	b.n	8000a0c <__udivmoddi4+0x1a0>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e6fd      	b.n	800093e <__udivmoddi4+0xd2>
 8000b42:	443b      	add	r3, r7
 8000b44:	3a02      	subs	r2, #2
 8000b46:	e733      	b.n	80009b0 <__udivmoddi4+0x144>
 8000b48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b4c:	443b      	add	r3, r7
 8000b4e:	e71c      	b.n	800098a <__udivmoddi4+0x11e>
 8000b50:	4649      	mov	r1, r9
 8000b52:	e79c      	b.n	8000a8e <__udivmoddi4+0x222>
 8000b54:	eba1 0109 	sub.w	r1, r1, r9
 8000b58:	46c4      	mov	ip, r8
 8000b5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5e:	fb09 f804 	mul.w	r8, r9, r4
 8000b62:	e7c4      	b.n	8000aee <__udivmoddi4+0x282>

08000b64 <__aeabi_idiv0>:
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <CANTransmitMinion>:
#include "can.h"
#include "dataframes.h"



HAL_StatusTypeDef CANTransmitMinion (CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef TXStatusOut = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	77fb      	strb	r3, [r7, #31]
	//	printf("sending ID ");
	//	printf((uint32_t)(header->StdId));
	int i = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
	uint32_t mailbox = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000b80:	e012      	b.n	8000ba8 <CANTransmitMinion+0x40>
		while(HAL_CAN_GetTxMailboxesFreeLevel(canport) < 1) {
 8000b82:	bf00      	nop
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f002 fdba 	bl	80036fe <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f9      	beq.n	8000b84 <CANTransmitMinion+0x1c>
					//wait until a new mailbox gets freed up
		//			printf("\n\rwaiting\n\r");
				}
		TXStatusOut = HAL_CAN_AddTxMessage(canport, header, dataArray, &mailbox);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f002 fce0 	bl	800355e <HAL_CAN_AddTxMessage>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	77fb      	strb	r3, [r7, #31]

		i++;
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
	while (i < CAN_RETRY_LIMIT && TXStatusOut != HAL_OK) {
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	dc02      	bgt.n	8000bb4 <CANTransmitMinion+0x4c>
 8000bae:	7ffb      	ldrb	r3, [r7, #31]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1e6      	bne.n	8000b82 <CANTransmitMinion+0x1a>
	}

	if (TXStatusOut != HAL_OK) {
 8000bb4:	7ffb      	ldrb	r3, [r7, #31]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <CANTransmitMinion+0x56>
		mailbox = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]

	}
	//	printf("\n\r");
	return TXStatusOut;
 8000bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <clearEflagsHelper>:

void clearEflagsHelper(CORNER_CAN_CONTEXT *CANCONTEXT) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	CANCONTEXT->misc_dataframe.data.eflags.ADCErrorBit = 0;
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000bd6:	f023 0301 	bic.w	r3, r3, #1
 8000bda:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.BrakeTempErrorBit = 0;
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000be4:	f023 0302 	bic.w	r3, r3, #2
 8000be8:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = 0;
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000bf2:	f023 0308 	bic.w	r3, r3, #8
 8000bf6:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = 0;
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000c00:	f023 0304 	bic.w	r3, r3, #4
 8000c04:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = 0;
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000c0e:	f023 0310 	bic.w	r3, r3, #16
 8000c12:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = 0;
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000c1c:	f023 0320 	bic.w	r3, r3, #32
 8000c20:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = 0;
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c2e:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = 0;
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c3c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b

}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <CANMailman>:

void CANMailman(CAN_HandleTypeDef *canport, CAN_TxHeaderTypeDef *header, CORNER_CAN_CONTEXT *CANCONTEXT) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	clearEflagsHelper(CANCONTEXT);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ffb5 	bl	8000bc8 <clearEflagsHelper>
	HAL_StatusTypeDef txstatus;
	/*** BEGIN SEND MISC MESSAGE (btemp, whs, board temp, error flags, shock travel) */

	if (HAL_GetTick() - CANCONTEXT->ms_since_miscmsg_broadcast > MISC_DATA_TRANSMISSION_PERIOD) {
 8000c5e:	f001 f923 	bl	8001ea8 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b15      	cmp	r3, #21
 8000c6c:	d91b      	bls.n	8000ca6 <CANMailman+0x5a>
		header->StdId = MISC_DATA_ID;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f240 7215 	movw	r2, #1813	@ 0x715
 8000c74:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion(canport, header, CANCONTEXT->misc_dataframe.array);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3334      	adds	r3, #52	@ 0x34
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff ff72 	bl	8000b68 <CANTransmitMinion>
 8000c84:	4603      	mov	r3, r0
 8000c86:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d006      	beq.n	8000c9c <CANMailman+0x50>
			CANCONTEXT->misc_dataframe.data.eflags.MiscMsgErrorBit = true;
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_miscmsg_broadcast = HAL_GetTick();
 8000c9c:	f001 f904 	bl	8001ea8 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	631a      	str	r2, [r3, #48]	@ 0x30




	/**** BEGIN SEND STRAIN GAUGE DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_strain_broadcast > STRAIN_GAUGE_TRANSMISSION_PERIOD) {
 8000ca6:	f001 f8ff 	bl	8001ea8 <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d91b      	bls.n	8000cee <CANMailman+0xa2>
		header->StdId = STRAIN_GAUGE_ID;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8000cbc:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->straingauge_dataframe.array);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff ff4e 	bl	8000b68 <CANTransmitMinion>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	75fb      	strb	r3, [r7, #23]

		//set error flag
		if (txstatus != HAL_OK) {
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <CANMailman+0x98>
			CANCONTEXT->misc_dataframe.data.eflags.SGMsgErrorBit = true;
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_strain_broadcast = HAL_GetTick();
 8000ce4:	f001 f8e0 	bl	8001ea8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	601a      	str	r2, [r3, #0]
	/**** END SEND STRAIN GAUGE DATA ****/



	/**** BEGIN SEND TIRE TEMP DATA ****/
	if (HAL_GetTick() - CANCONTEXT->ms_since_ttemp_broadcast > TIRE_TEMP_TRANSMISSION_PERIOD) {
 8000cee:	f001 f8db 	bl	8001ea8 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 8000cfe:	d360      	bcc.n	8000dc2 <CANMailman+0x176>
		//		CTXHeader.IDE = CAN_ID_STD;
		//		CTXHeader.RTR = CAN_RTR_DATA;
		//		CTXHeader.DLC = 8;
		//		ms_since_ttemp_broadcast = HAL_GetTick();

		header->StdId = TIRE_TEMP_MSG1_ID;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	f240 7211 	movw	r2, #1809	@ 0x711
 8000d06:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[0].array);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3310      	adds	r3, #16
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff ff29 	bl	8000b68 <CANTransmitMinion>
 8000d16:	4603      	mov	r3, r0
 8000d18:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <CANMailman+0xe2>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg1ErrorBit = true;
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG2_ID;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	f240 7212 	movw	r2, #1810	@ 0x712
 8000d34:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[1].array);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3318      	adds	r3, #24
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff ff12 	bl	8000b68 <CANTransmitMinion>
 8000d44:	4603      	mov	r3, r0
 8000d46:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <CANMailman+0x110>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg2ErrorBit = true;
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG3_ID;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	f240 7213 	movw	r2, #1811	@ 0x713
 8000d62:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[2].array);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3320      	adds	r3, #32
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff fefb 	bl	8000b68 <CANTransmitMinion>
 8000d72:	4603      	mov	r3, r0
 8000d74:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <CANMailman+0x13e>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg3ErrorBit = true;
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d86:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		header->StdId = TIRE_TEMP_MSG4_ID;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	f240 7214 	movw	r2, #1812	@ 0x714
 8000d90:	601a      	str	r2, [r3, #0]
		txstatus = CANTransmitMinion (canport, header, CANCONTEXT->ttemp_dataframes[3].array);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3328      	adds	r3, #40	@ 0x28
 8000d96:	461a      	mov	r2, r3
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff fee4 	bl	8000b68 <CANTransmitMinion>
 8000da0:	4603      	mov	r3, r0
 8000da2:	75fb      	strb	r3, [r7, #23]
		if (txstatus != HAL_OK) {
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <CANMailman+0x16c>
			CANCONTEXT->misc_dataframe.data.eflags.TTempMsg4ErrorBit = true;
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
		}

		CANCONTEXT->ms_since_ttemp_broadcast = HAL_GetTick();
 8000db8:	f001 f876 	bl	8001ea8 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60da      	str	r2, [r3, #12]
	}

	/**** END SEND TIRE TEMP DATA ****/
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f001 f801 	bl	8001dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f84e 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f000 fa9a 	bl	8001310 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ddc:	f000 f89c 	bl	8000f18 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000de0:	f000 f9dc 	bl	800119c <MX_TIM1_Init>
  MX_CAN1_Init();
 8000de4:	f000 f8fc 	bl	8000fe0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000de8:	f000 f95a 	bl	80010a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000dec:	f000 f998 	bl	8001120 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000df0:	f000 fa28 	bl	8001244 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000df4:	f000 fa58 	bl	80012a8 <MX_USART2_UART_Init>
		//		lin_pot_val = HAL_ADC_GetValue(&hadc1);

		//		spamCan();

		//read the sensors
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8000df8:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <main+0x70>)
 8000dfa:	4911      	ldr	r1, [pc, #68]	@ (8000e40 <main+0x74>)
 8000dfc:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <main+0x78>)
 8000dfe:	f000 fb03 	bl	8001408 <readLinearPotentiometer>
		readBrakeTemp(&ms_since_btemp_read, &(CANCONTEXT.misc_dataframe));
 8000e02:	490e      	ldr	r1, [pc, #56]	@ (8000e3c <main+0x70>)
 8000e04:	4810      	ldr	r0, [pc, #64]	@ (8000e48 <main+0x7c>)
 8000e06:	f000 fb30 	bl	800146a <readBrakeTemp>
		readTireTemp(&ms_since_ttemp_read, (CANCONTEXT.ttemp_dataframes));
 8000e0a:	4910      	ldr	r1, [pc, #64]	@ (8000e4c <main+0x80>)
 8000e0c:	4810      	ldr	r0, [pc, #64]	@ (8000e50 <main+0x84>)
 8000e0e:	f000 fb45 	bl	800149c <readTireTemp>
		readStrainGauges(&hspi1, &ms_since_strain_read, &(CANCONTEXT.straingauge_dataframe));
 8000e12:	4a10      	ldr	r2, [pc, #64]	@ (8000e54 <main+0x88>)
 8000e14:	4910      	ldr	r1, [pc, #64]	@ (8000e58 <main+0x8c>)
 8000e16:	4811      	ldr	r0, [pc, #68]	@ (8000e5c <main+0x90>)
 8000e18:	f000 fbb6 	bl	8001588 <readStrainGauges>
		readWheelSpeed(&ms_since_whs_read, &(CANCONTEXT.misc_dataframe));
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <main+0x70>)
 8000e1e:	4810      	ldr	r0, [pc, #64]	@ (8000e60 <main+0x94>)
 8000e20:	f000 fbd6 	bl	80015d0 <readWheelSpeed>
		readBoardTemp(&hspi1, &ms_since_boardtemp_read, &(CANCONTEXT.misc_dataframe));
 8000e24:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <main+0x70>)
 8000e26:	490f      	ldr	r1, [pc, #60]	@ (8000e64 <main+0x98>)
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <main+0x90>)
 8000e2a:	f000 fc45 	bl	80016b8 <readBoardTemp>


		//send out the sensors
		CANMailman(&hcan1, &CTXHeader, &CANCONTEXT);
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <main+0x9c>)
 8000e30:	490e      	ldr	r1, [pc, #56]	@ (8000e6c <main+0xa0>)
 8000e32:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <main+0xa4>)
 8000e34:	f7ff ff0a 	bl	8000c4c <CANMailman>
		readLinearPotentiometer(&hadc1, &ms_since_linpot_read, &(CANCONTEXT.misc_dataframe));
 8000e38:	bf00      	nop
 8000e3a:	e7dd      	b.n	8000df8 <main+0x2c>
 8000e3c:	20000358 	.word	0x20000358
 8000e40:	20000360 	.word	0x20000360
 8000e44:	20000084 	.word	0x20000084
 8000e48:	2000036c 	.word	0x2000036c
 8000e4c:	20000334 	.word	0x20000334
 8000e50:	20000368 	.word	0x20000368
 8000e54:	20000328 	.word	0x20000328
 8000e58:	20000364 	.word	0x20000364
 8000e5c:	20000164 	.word	0x20000164
 8000e60:	20000370 	.word	0x20000370
 8000e64:	20000374 	.word	0x20000374
 8000e68:	20000324 	.word	0x20000324
 8000e6c:	20000378 	.word	0x20000378
 8000e70:	200000e8 	.word	0x200000e8

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b096      	sub	sp, #88	@ 0x58
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2244      	movs	r2, #68	@ 0x44
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fbc4 	bl	8006610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e96:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e9a:	f003 f8b5 	bl	8004008 <HAL_PWREx_ControlVoltageScaling>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ea4:	f000 faaa 	bl	80013fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f8ec 	bl	80040b4 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ee2:	f000 fa8b 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2303      	movs	r3, #3
 8000eec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	2104      	movs	r1, #4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fcec 	bl	80048dc <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f0a:	f000 fa77 	bl	80013fc <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3758      	adds	r7, #88	@ 0x58
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f30:	4a29      	ldr	r2, [pc, #164]	@ (8000fd8 <MX_ADC1_Init+0xc0>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000f90:	f001 f95e 	bl	8002250 <HAL_ADC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f9a:	f000 fa2f 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_ADC1_Init+0xc4>)
 8000fa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000faa:	237f      	movs	r3, #127	@ 0x7f
 8000fac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_ADC1_Init+0xbc>)
 8000fbc:	f001 fbca 	bl	8002754 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fc6:	f000 fa19 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000084 	.word	0x20000084
 8000fd8:	50040000 	.word	0x50040000
 8000fdc:	19200040 	.word	0x19200040

08000fe0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8000fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8001098 <MX_CAN1_Init+0xb8>)
 8000fea:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000fec:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8000fee:	220a      	movs	r2, #10
 8000ff0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ff2:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ff8:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ffe:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001000:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001004:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001006:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001008:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800100c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001010:	2200      	movs	r2, #0
 8001012:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001016:	2200      	movs	r2, #0
 8001018:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800101a:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <MX_CAN1_Init+0xb4>)
 800101c:	2200      	movs	r2, #0
 800101e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001022:	2200      	movs	r2, #0
 8001024:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001026:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001028:	2200      	movs	r2, #0
 800102a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <MX_CAN1_Init+0xb4>)
 800102e:	2200      	movs	r2, #0
 8001030:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001032:	4818      	ldr	r0, [pc, #96]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001034:	f002 f88a 	bl	800314c <HAL_CAN_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800103e:	f000 f9dd 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* INITIALIZE CAN PARAMETERS */
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 1;                       // value between 0 to 13 for JUST Master Mode (CAN1)
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;   // for filtering Identifiers
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 800104a:	2301      	movs	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = (0x541) << 5;          // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 800104e:	f64a 0320 	movw	r3, #43040	@ 0xa820
 8001052:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x00;                   // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x00;              // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x00;               // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;  // specify FIFO0 or FIFO1
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = CAN_FILTER_DISABLE; // Enable filtering
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]

	CTXHeader.IDE = CAN_ID_STD;
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <MX_CAN1_Init+0xbc>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
	CTXHeader.RTR = CAN_RTR_DATA;
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <MX_CAN1_Init+0xbc>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
	CTXHeader.DLC = 8;
 8001074:	4b09      	ldr	r3, [pc, #36]	@ (800109c <MX_CAN1_Init+0xbc>)
 8001076:	2208      	movs	r2, #8
 8001078:	611a      	str	r2, [r3, #16]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001080:	f002 f95f 	bl	8003342 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001084:	4803      	ldr	r0, [pc, #12]	@ (8001094 <MX_CAN1_Init+0xb4>)
 8001086:	f002 fa26 	bl	80034d6 <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000e8 	.word	0x200000e8
 8001098:	40006400 	.word	0x40006400
 800109c:	20000378 	.word	0x20000378

080010a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <MX_I2C1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ac:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <MX_I2C1_Init+0x7c>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010dc:	f002 fe54 	bl	8003d88 <HAL_I2C_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f000 f989 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ee:	f002 fee6 	bl	8003ebe <HAL_I2CEx_ConfigAnalogFilter>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f000 f980 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_I2C1_Init+0x74>)
 8001100:	f002 ff28 	bl	8003f54 <HAL_I2CEx_ConfigDigitalFilter>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f977 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000110 	.word	0x20000110
 8001118:	40005400 	.word	0x40005400
 800111c:	10d19ce4 	.word	0x10d19ce4

08001120 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <MX_SPI1_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_SPI1_Init+0x74>)
 800112c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_SPI1_Init+0x74>)
 800113a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800113e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_SPI1_Init+0x74>)
 800114e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001152:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001156:	2228      	movs	r2, #40	@ 0x28
 8001158:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_SPI1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_SPI1_Init+0x74>)
 800116e:	2207      	movs	r2, #7
 8001170:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_SPI1_Init+0x74>)
 800117a:	2208      	movs	r2, #8
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001180:	f004 f8b8 	bl	80052f4 <HAL_SPI_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 f937 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000164 	.word	0x20000164
 8001198:	40013000 	.word	0x40013000

0800119c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011bc:	4a20      	ldr	r2, [pc, #128]	@ (8001240 <MX_TIM1_Init+0xa4>)
 80011be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <MX_TIM1_Init+0xa0>)
 80011e8:	f004 f927 	bl	800543a <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f000 f903 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	480e      	ldr	r0, [pc, #56]	@ (800123c <MX_TIM1_Init+0xa0>)
 8001204:	f004 f970 	bl	80054e8 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800120e:	f000 f8f5 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	@ (800123c <MX_TIM1_Init+0xa0>)
 8001224:	f004 fb34 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800122e:	f000 f8e5 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001c8 	.word	0x200001c8
 8001240:	40012c00 	.word	0x40012c00

08001244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 800124a:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <MX_USART1_UART_Init+0x60>)
 800124c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001286:	2300      	movs	r3, #0
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_USART1_UART_Init+0x5c>)
 800128e:	f005 f884 	bl	800639a <HAL_RS485Ex_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001298:	f000 f8b0 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000214 	.word	0x20000214
 80012a4:	40013800 	.word	0x40013800

080012a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_UART_MspInit(&huart2);
 80012ac:	4816      	ldr	r0, [pc, #88]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012ae:	f000 fbb5 	bl	8001a1c <HAL_UART_MspInit>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012b4:	4a15      	ldr	r2, [pc, #84]	@ (800130c <MX_USART2_UART_Init+0x64>)
 80012b6:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012ba:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012be:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_USART2_UART_Init+0x60>)
 80012f4:	f004 fb32 	bl	800595c <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80012fe:	f000 f87d 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000029c 	.word	0x2000029c
 800130c:	40004400 	.word	0x40004400

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a29      	ldr	r2, [pc, #164]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a1d      	ldr	r2, [pc, #116]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_FAULT_GPIO_Port, GEN_FAULT_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <MX_GPIO_Init+0xc4>)
 8001374:	f002 fcf0 	bl	8003d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001378:	2308      	movs	r3, #8
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f002 fb61 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_FAULT_Pin */
  GPIO_InitStruct.Pin = GEN_FAULT_Pin;
 8001392:	2301      	movs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEN_FAULT_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	480a      	ldr	r0, [pc, #40]	@ (80013d4 <MX_GPIO_Init+0xc4>)
 80013aa:	f002 fb53 	bl	8003a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHS_IN_Pin */
  GPIO_InitStruct.Pin = WHS_IN_Pin;
 80013ae:	2310      	movs	r3, #16
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WHS_IN_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_GPIO_Init+0xc4>)
 80013c2:	f002 fb47 	bl	8003a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000400 	.word	0x48000400

080013d8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the LPUART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80013e0:	1d39      	adds	r1, r7, #4
 80013e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013e6:	2201      	movs	r2, #1
 80013e8:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <__io_putchar+0x20>)
 80013ea:	f004 fb05 	bl	80059f8 <HAL_UART_Transmit>

	return ch;
 80013ee:	687b      	ldr	r3, [r7, #4]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000029c 	.word	0x2000029c

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <readLinearPotentiometer>:
 */

#include "sensor_read_helpers.h"
#include <stdio.h>

void readLinearPotentiometer(ADC_HandleTypeDef *hadc, uint32_t *lastReadMS,  MISC_DATAFRAME *dataframe) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	uint32_t ADC_Read[1];
	uint32_t ADC_BUFFER = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	617b      	str	r3, [r7, #20]

	HAL_ADC_PollForConversion(&hadc, 100);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2164      	movs	r1, #100	@ 0x64
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f858 	bl	80024d4 <HAL_ADC_PollForConversion>
	ADC_Read[0] = HAL_ADC_GetValue(&hadc);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4618      	mov	r0, r3
 800142a:	f001 f967 	bl	80026fc <HAL_ADC_GetValue>
 800142e:	4603      	mov	r3, r0
 8001430:	613b      	str	r3, [r7, #16]

	HAL_ADC_Start_DMA(hadc, ADC_Read, ADC_BUFFER);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f107 0110 	add.w	r1, r7, #16
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f8da 	bl	80025f4 <HAL_ADC_Start_DMA>
	if(HAL_GetTick() - *lastReadMS > SHOCK_TRAVEL_SAMPLE_PERIOD){
 8001440:	f000 fd32 	bl	8001ea8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b15      	cmp	r3, #21
 800144e:	d908      	bls.n	8001462 <readLinearPotentiometer+0x5a>
		dataframe->data.shockTravel = ADC_Read[0];
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	809a      	strh	r2, [r3, #4]

		*lastReadMS = HAL_GetTick();
 8001458:	f000 fd26 	bl	8001ea8 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	601a      	str	r2, [r3, #0]
	}

	//todo: convert counts to travel
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <readBrakeTemp>:

void readBrakeTemp(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > BRAKE_TEMP_SAMPLE_PERIOD){
 8001474:	f000 fd18 	bl	8001ea8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b65      	cmp	r3, #101	@ 0x65
 8001482:	d907      	bls.n	8001494 <readBrakeTemp+0x2a>
		dataframe->data.brakeTemp = 0;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	805a      	strh	r2, [r3, #2]
		//todo: actual brake temp sensor read code
		*lastReadMS = HAL_GetTick();
 800148a:	f000 fd0d 	bl	8001ea8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
	}

	//todo: convert to deg C
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <readTireTemp>:

void readTireTemp(uint32_t *lastReadMS, TTEMP_DATAFRAME *dataframes) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > TIRE_TEMP_SAMPLE_PERIOD){
 80014a6:	f000 fcff 	bl	8001ea8 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7ffb 	cmp.w	r3, #502	@ 0x1f6
 80014b6:	d363      	bcc.n	8001580 <readTireTemp+0xe4>
		for(int i = 0; i < 4; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e058      	b.n	8001570 <readTireTemp+0xd4>
			dataframes[i].data.pix0 = 1 + (4*i);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	440b      	add	r3, r1
 80014ce:	3201      	adds	r2, #1
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
			dataframes[i].data.pix1 = 2 + (4*i);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	440b      	add	r3, r1
 80014e4:	3202      	adds	r2, #2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	705a      	strb	r2, [r3, #1]
			dataframes[i].data.pix2 = 3 + (4*i);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	440b      	add	r3, r1
 80014fa:	3203      	adds	r2, #3
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	709a      	strb	r2, [r3, #2]
			dataframes[i].data.pix3 = 4 + (4*i);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3301      	adds	r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	440b      	add	r3, r1
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	70da      	strb	r2, [r3, #3]
			dataframes[i].data.pix4 = 5 + (4*i);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	6839      	ldr	r1, [r7, #0]
 8001522:	440b      	add	r3, r1
 8001524:	3205      	adds	r2, #5
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	711a      	strb	r2, [r3, #4]
			dataframes[i].data.pix5 = 6 + (4*i);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	b2da      	uxtb	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	6839      	ldr	r1, [r7, #0]
 8001538:	440b      	add	r3, r1
 800153a:	3206      	adds	r2, #6
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	715a      	strb	r2, [r3, #5]
			dataframes[i].data.pix6 = 7 + (4*i);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	b2da      	uxtb	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	440b      	add	r3, r1
 8001550:	3207      	adds	r2, #7
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	719a      	strb	r2, [r3, #6]
			dataframes[i].data.pix7 = 8 + (4*i);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3302      	adds	r3, #2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	6839      	ldr	r1, [r7, #0]
 8001562:	440b      	add	r3, r1
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	71da      	strb	r2, [r3, #7]
		for(int i = 0; i < 4; i++) {
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b03      	cmp	r3, #3
 8001574:	dda3      	ble.n	80014be <readTireTemp+0x22>
		}


		//todo: actual tire temp sensor read code
		*lastReadMS = HAL_GetTick();
 8001576:	f000 fc97 	bl	8001ea8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	601a      	str	r2, [r3, #0]
	}
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <readStrainGauges>:
void readStrainGauges(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, SG_DATAFRAME *dataframe) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]


	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 8001594:	f000 fc88 	bl	8001ea8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d910      	bls.n	80015c6 <readStrainGauges+0x3e>
		dataframe->data.SG0 = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	801a      	strh	r2, [r3, #0]
		dataframe->data.SG1 = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	805a      	strh	r2, [r3, #2]
		dataframe->data.SG2 = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	809a      	strh	r2, [r3, #4]
		dataframe->data.SG3 = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	80da      	strh	r2, [r3, #6]

		//todo: actual strain gauge sensor read code
		//todo: convert counts to newtons
		*lastReadMS = HAL_GetTick();
 80015bc:	f000 fc74 	bl	8001ea8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	601a      	str	r2, [r3, #0]
	}
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <readWheelSpeed>:

void readWheelSpeed(uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]

	if(HAL_GetTick() - *lastReadMS > WHEEL_SPEED_SAMPLE_PERIOD){
 80015da:	f000 fc65 	bl	8001ea8 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b0b      	cmp	r3, #11
 80015e8:	d95a      	bls.n	80016a0 <readWheelSpeed+0xd0>

		uint8_t prevWHSLogicLevel = GPIO_PIN_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]




		uint8_t edges = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75bb      	strb	r3, [r7, #22]
		uint8_t readBeginMS = HAL_GetTick(); //possilbly a good idea to lower tick period to like 10us or sth
 80015f2:	f000 fc59 	bl	8001ea8 <HAL_GetTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	e015      	b.n	800162c <readWheelSpeed+0x5c>

			/* if whs pin is logic high and prev_whs_logic_level is opposite, add one to edges */

			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) != prevWHSLogicLevel) {
 8001600:	2110      	movs	r1, #16
 8001602:	4829      	ldr	r0, [pc, #164]	@ (80016a8 <readWheelSpeed+0xd8>)
 8001604:	f002 fb90 	bl	8003d28 <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	4293      	cmp	r3, r2
 8001610:	d009      	beq.n	8001626 <readWheelSpeed+0x56>
				edges++;
 8001612:	7dbb      	ldrb	r3, [r7, #22]
 8001614:	3301      	adds	r3, #1
 8001616:	75bb      	strb	r3, [r7, #22]
				prevWHSLogicLevel = !prevWHSLogicLevel;
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	bf0c      	ite	eq
 800161e:	2301      	moveq	r3, #1
 8001620:	2300      	movne	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 1000; i++) {//burst read 100 values real quick, find how many times polarity switches
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001632:	dbe5      	blt.n	8001600 <readWheelSpeed+0x30>
			}
		}

		uint8_t readEndMS = HAL_GetTick();
 8001634:	f000 fc38 	bl	8001ea8 <HAL_GetTick>
 8001638:	4603      	mov	r3, r0
 800163a:	73bb      	strb	r3, [r7, #14]
		//convert to rpm
		/*
		 * edges/msec * 1/(edges/rotation) * msec/sec = rotations/msec
		 * 1/(edges/rotation) * msec/sec = 1/24 * 1/1000 =
		 */
		dataframe->data.wheelRPM = ( ((float)(edges)) / ((float)(readEndMS)-(float)(readBeginMS)) ) * (float)(1/24000);
 800163c:	7dbb      	ldrb	r3, [r7, #22]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80016ac <readWheelSpeed+0xdc>
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166e:	ee17 3a90 	vmov	r3, s15
 8001672:	b29a      	uxth	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	801a      	strh	r2, [r3, #0]
		printf("%d", (int) dataframe->data.wheelRPM*1000.0);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff f873 	bl	8000768 <__aeabi_i2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <readWheelSpeed+0xe0>)
 8001688:	f7fe fdf2 	bl	8000270 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <readWheelSpeed+0xe4>)
 8001692:	f004 ffab 	bl	80065ec <iprintf>


		*lastReadMS = HAL_GetTick();
 8001696:	f000 fc07 	bl	8001ea8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
	}
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	48000400 	.word	0x48000400
 80016ac:	00000000 	.word	0x00000000
 80016b0:	408f4000 	.word	0x408f4000
 80016b4:	080072d8 	.word	0x080072d8

080016b8 <readBoardTemp>:

void readBoardTemp(SPI_HandleTypeDef *hspi, uint32_t *lastReadMS, MISC_DATAFRAME *dataframe) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]

	if(HAL_GetTick() - *lastReadMS > STRAIN_GAUGE_SAMPLE_PERIOD){
 80016c4:	f000 fbf0 	bl	8001ea8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d907      	bls.n	80016e4 <readBoardTemp+0x2c>
		dataframe->data.boardTemp = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	719a      	strb	r2, [r3, #6]


		//todo: use ads1118, same chip as the shits, to read board temp
		//todo: convert counts to deg.C
		*lastReadMS = HAL_GetTick();
 80016da:	f000 fbe5 	bl	8001ea8 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	601a      	str	r2, [r3, #0]
	}
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_MspInit+0x44>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_MspInit+0x44>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	4a08      	ldr	r2, [pc, #32]	@ (8001730 <HAL_MspInit+0x44>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001714:	6593      	str	r3, [r2, #88]	@ 0x58
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_MspInit+0x44>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b09e      	sub	sp, #120	@ 0x78
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2254      	movs	r2, #84	@ 0x54
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f004 ff5b 	bl	8006610 <memset>
  if(hadc->Instance==ADC1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a25      	ldr	r2, [pc, #148]	@ (80017f4 <HAL_ADC_MspInit+0xc0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d143      	bne.n	80017ec <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001764:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001768:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800176a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800176e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001770:	2302      	movs	r3, #2
 8001772:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001778:	2308      	movs	r3, #8
 800177a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800177c:	2307      	movs	r3, #7
 800177e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001780:	2302      	movs	r3, #2
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001788:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fac6 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800179e:	f7ff fe2d 	bl	80013fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_ADC_MspInit+0xc4>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <HAL_ADC_MspInit+0xc4>)
 80017a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_ADC_MspInit+0xc4>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_ADC_MspInit+0xc4>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <HAL_ADC_MspInit+0xc4>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_ADC_MspInit+0xc4>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017d2:	2302      	movs	r3, #2
 80017d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017d6:	230b      	movs	r3, #11
 80017d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e8:	f002 f934 	bl	8003a54 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017ec:	bf00      	nop
 80017ee:	3778      	adds	r7, #120	@ 0x78
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	50040000 	.word	0x50040000
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <HAL_CAN_MspInit+0xa4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d13b      	bne.n	8001896 <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	4a20      	ldr	r2, [pc, #128]	@ (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001824:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001828:	6593      	str	r3, [r2, #88]	@ 0x58
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <HAL_CAN_MspInit+0xa8>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a1a      	ldr	r2, [pc, #104]	@ (80018a4 <HAL_CAN_MspInit+0xa8>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800184e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001858:	2301      	movs	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001860:	2309      	movs	r3, #9
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186e:	f002 f8f1 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001884:	2309      	movs	r3, #9
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001892:	f002 f8df 	bl	8003a54 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40006400 	.word	0x40006400
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b09e      	sub	sp, #120	@ 0x78
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2254      	movs	r2, #84	@ 0x54
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fea1 	bl	8006610 <memset>
  if(hi2c->Instance==I2C1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1e      	ldr	r2, [pc, #120]	@ (800194c <HAL_I2C_MspInit+0xa4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d135      	bne.n	8001944 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018d8:	2340      	movs	r3, #64	@ 0x40
 80018da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fa1d 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018f0:	f7ff fd84 	bl	80013fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_I2C_MspInit+0xa8>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f8:	4a15      	ldr	r2, [pc, #84]	@ (8001950 <HAL_I2C_MspInit+0xa8>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_I2C_MspInit+0xa8>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190c:	23c0      	movs	r3, #192	@ 0xc0
 800190e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001910:	2312      	movs	r3, #18
 8001912:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191c:	2304      	movs	r3, #4
 800191e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001924:	4619      	mov	r1, r3
 8001926:	480b      	ldr	r0, [pc, #44]	@ (8001954 <HAL_I2C_MspInit+0xac>)
 8001928:	f002 f894 	bl	8003a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_I2C_MspInit+0xa8>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_I2C_MspInit+0xa8>)
 8001932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001936:	6593      	str	r3, [r2, #88]	@ 0x58
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_I2C_MspInit+0xa8>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001944:	bf00      	nop
 8001946:	3778      	adds	r7, #120	@ 0x78
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <HAL_SPI_MspInit+0x7c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d128      	bne.n	80019cc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <HAL_SPI_MspInit+0x80>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	4a16      	ldr	r2, [pc, #88]	@ (80019d8 <HAL_SPI_MspInit+0x80>)
 8001980:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001984:	6613      	str	r3, [r2, #96]	@ 0x60
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_SPI_MspInit+0x80>)
 8001988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_SPI_MspInit+0x80>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <HAL_SPI_MspInit+0x80>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_SPI_MspInit+0x80>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019aa:	23f0      	movs	r3, #240	@ 0xf0
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ba:	2305      	movs	r3, #5
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c8:	f002 f844 	bl	8003a54 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	@ 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013000 	.word	0x40013000
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_TIM_Base_MspInit+0x38>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_TIM_Base_MspInit+0x3c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f2:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <HAL_TIM_Base_MspInit+0x3c>)
 80019f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <HAL_TIM_Base_MspInit+0x3c>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0a2      	sub	sp, #136	@ 0x88
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	2254      	movs	r2, #84	@ 0x54
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 fde7 	bl	8006610 <memset>
  if(huart->Instance==USART1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a59      	ldr	r2, [pc, #356]	@ (8001bac <HAL_UART_MspInit+0x190>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d158      	bne.n	8001afe <HAL_UART_MspInit+0xe2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a50:	2300      	movs	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 f963 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a64:	f7ff fcca 	bl	80013fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a68:	4b51      	ldr	r3, [pc, #324]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6c:	4a50      	ldr	r2, [pc, #320]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a72:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a74:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	4a4a      	ldr	r2, [pc, #296]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8c:	4b48      	ldr	r3, [pc, #288]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b45      	ldr	r3, [pc, #276]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a44      	ldr	r2, [pc, #272]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b42      	ldr	r3, [pc, #264]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PB3 (JTDO-TRACESWO)     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ab0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ab4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad4:	f001 ffbe 	bl	8003a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aea:	2307      	movs	r3, #7
 8001aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001af4:	4619      	mov	r1, r3
 8001af6:	482f      	ldr	r0, [pc, #188]	@ (8001bb4 <HAL_UART_MspInit+0x198>)
 8001af8:	f001 ffac 	bl	8003a54 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001afc:	e051      	b.n	8001ba2 <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb8 <HAL_UART_MspInit+0x19c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d14c      	bne.n	8001ba2 <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0320 	add.w	r3, r7, #32
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 f905 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8001b20:	f7ff fc6c 	bl	80013fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b28:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b30:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b40:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_UART_MspInit+0x194>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b54:	2304      	movs	r3, #4
 8001b56:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b66:	2307      	movs	r3, #7
 8001b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b76:	f001 ff6d 	bl	8003a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b7e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9e:	f001 ff59 	bl	8003a54 <HAL_GPIO_Init>
}
 8001ba2:	bf00      	nop
 8001ba4:	3788      	adds	r7, #136	@ 0x88
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	40004400 	.word	0x40004400

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c12:	f000 f935 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e00a      	b.n	8001c42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2c:	f3af 8000 	nop.w
 8001c30:	4601      	mov	r1, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	60ba      	str	r2, [r7, #8]
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dbf0      	blt.n	8001c2c <_read+0x12>
  }

  return len;
 8001c4a:	687b      	ldr	r3, [r7, #4]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	e009      	b.n	8001c7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	60ba      	str	r2, [r7, #8]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fbb2 	bl	80013d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dbf1      	blt.n	8001c66 <_write+0x12>
  }
  return len;
 8001c82:	687b      	ldr	r3, [r7, #4]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_close>:

int _close(int file)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_isatty>:

int _isatty(int file)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <_sbrk+0x5c>)
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <_sbrk+0x60>)
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <_sbrk+0x64>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <_sbrk+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d24:	f004 fc7c 	bl	8006620 <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d32:	e009      	b.n	8001d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d34:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a05      	ldr	r2, [pc, #20]	@ (8001d58 <_sbrk+0x64>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000c000 	.word	0x2000c000
 8001d54:	00000400 	.word	0x00000400
 8001d58:	20000390 	.word	0x20000390
 8001d5c:	200004e8 	.word	0x200004e8

08001d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <SystemInit+0x20>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6a:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <SystemInit+0x20>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d88:	f7ff ffea 	bl	8001d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d8e:	490d      	ldr	r1, [pc, #52]	@ (8001dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d90:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <LoopForever+0xe>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da4:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd0 <LoopForever+0x16>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db2:	f004 fc3b 	bl	800662c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db6:	f7ff f809 	bl	8000dcc <main>

08001dba <LoopForever>:

LoopForever:
    b LoopForever
 8001dba:	e7fe      	b.n	8001dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dbc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001dc8:	08007368 	.word	0x08007368
  ldr r2, =_sbss
 8001dcc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001dd0:	200004e4 	.word	0x200004e4

08001dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_IRQHandler>

08001dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f001 fd73 	bl	80038cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f80e 	bl	8001e08 <HAL_InitTick>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	e001      	b.n	8001dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df8:	f7ff fc78 	bl	80016ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e14:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <HAL_InitTick+0x6c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d023      	beq.n	8001e64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <HAL_InitTick+0x70>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <HAL_InitTick+0x6c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 fd71 	bl	800391a <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d809      	bhi.n	8001e58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e4c:	f001 fd49 	bl	80038e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_InitTick+0x74>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e004      	b.n	8001e68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e001      	b.n	8001e68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	20000394 	.word	0x20000394

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000394 	.word	0x20000394

08001ec0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3360      	adds	r3, #96	@ 0x60
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <LL_ADC_SetOffset+0x44>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	03fff000 	.word	0x03fff000

08001f70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3360      	adds	r3, #96	@ 0x60
 8001f7e:	461a      	mov	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3360      	adds	r3, #96	@ 0x60
 8001fac:	461a      	mov	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3330      	adds	r3, #48	@ 0x30
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	4413      	add	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	211f      	movs	r1, #31
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	0e9b      	lsrs	r3, r3, #26
 8002030:	f003 011f 	and.w	r1, r3, #31
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	431a      	orrs	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3314      	adds	r3, #20
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	0e5b      	lsrs	r3, r3, #25
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	0d1b      	lsrs	r3, r3, #20
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2107      	movs	r1, #7
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	401a      	ands	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	0d1b      	lsrs	r3, r3, #20
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0318 	and.w	r3, r3, #24
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80020cc:	40d9      	lsrs	r1, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	400b      	ands	r3, r1
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	0007ffff 	.word	0x0007ffff

080020f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6093      	str	r3, [r2, #8]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002128:	d101      	bne.n	800212e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800214c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002150:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002178:	d101      	bne.n	800217e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800219c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <LL_ADC_IsEnabled+0x18>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_ADC_IsEnabled+0x1a>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ee:	f043 0204 	orr.w	r2, r3, #4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b04      	cmp	r3, #4
 8002214:	d101      	bne.n	800221a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e126      	b.n	80024b8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fa5b 	bl	8001734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff3f 	bl	8002114 <LL_ADC_IsDeepPowerDownEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff25 	bl	80020f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff5a 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff3e 	bl	800213c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c0:	4b7f      	ldr	r3, [pc, #508]	@ (80024c0 <HAL_ADC_Init+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	4a7f      	ldr	r2, [pc, #508]	@ (80024c4 <HAL_ADC_Init+0x274>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022d4:	e002      	b.n	80022dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3b01      	subs	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f9      	bne.n	80022d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff3c 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	f043 0210 	orr.w	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff75 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002318:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80bf 	bne.w	80024a6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80bb 	bne.w	80024a6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002334:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002338:	f043 0202 	orr.w	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff35 	bl	80021b4 <LL_ADC_IsEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002350:	485d      	ldr	r0, [pc, #372]	@ (80024c8 <HAL_ADC_Init+0x278>)
 8002352:	f7ff ff2f 	bl	80021b4 <LL_ADC_IsEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4619      	mov	r1, r3
 8002362:	485a      	ldr	r0, [pc, #360]	@ (80024cc <HAL_ADC_Init+0x27c>)
 8002364:	f7ff fdac 	bl	8001ec0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7e5b      	ldrb	r3, [r3, #25]
 800236c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002372:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002378:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800237e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002386:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d106      	bne.n	80023a4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	3b01      	subs	r3, #1
 800239c:	045b      	lsls	r3, r3, #17
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b42      	ldr	r3, [pc, #264]	@ (80024d0 <HAL_ADC_Init+0x280>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff25 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 80023de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d13d      	bne.n	8002462 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13a      	bne.n	8002462 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023f0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023f8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002408:	f023 0302 	bic.w	r3, r3, #2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	69b9      	ldr	r1, [r7, #24]
 8002412:	430b      	orrs	r3, r1
 8002414:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800241c:	2b01      	cmp	r3, #1
 800241e:	d118      	bne.n	8002452 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800242a:	f023 0304 	bic.w	r3, r3, #4
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002442:	430a      	orrs	r2, r1
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	611a      	str	r2, [r3, #16]
 8002450:	e007      	b.n	8002462 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10c      	bne.n	8002484 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	f023 010f 	bic.w	r1, r3, #15
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30
 8002482:	e007      	b.n	8002494 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 020f 	bic.w	r2, r2, #15
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	f023 0303 	bic.w	r3, r3, #3
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80024a4:	e007      	b.n	80024b6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000000 	.word	0x20000000
 80024c4:	053e2d63 	.word	0x053e2d63
 80024c8:	50040000 	.word	0x50040000
 80024cc:	50040300 	.word	0x50040300
 80024d0:	fff0c007 	.word	0xfff0c007

080024d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d102      	bne.n	80024ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024e6:	2308      	movs	r3, #8
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e010      	b.n	800250e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06f      	b.n	80025ea <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800250a:	2304      	movs	r3, #4
 800250c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800250e:	f7ff fccb 	bl	8001ea8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002514:	e021      	b.n	800255a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800251c:	d01d      	beq.n	800255a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800251e:	f7ff fcc3 	bl	8001ea8 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <HAL_ADC_PollForConversion+0x60>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d112      	bne.n	800255a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10b      	bne.n	800255a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	f043 0204 	orr.w	r2, r3, #4
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e047      	b.n	80025ea <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0d6      	beq.n	8002516 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fd2a 	bl	8001fd2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01c      	beq.n	80025be <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7e5b      	ldrb	r3, [r3, #25]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d118      	bne.n	80025be <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b08      	cmp	r3, #8
 8002598:	d111      	bne.n	80025be <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d104      	bne.n	80025d6 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2208      	movs	r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e008      	b.n	80025e8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	220c      	movs	r2, #12
 80025e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fdfc 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d167      	bne.n	80026e0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_ADC_Start_DMA+0x2a>
 800261a:	2302      	movs	r3, #2
 800261c:	e063      	b.n	80026e6 <HAL_ADC_Start_DMA+0xf2>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fc76 	bl	8002f18 <ADC_Enable>
 800262c:	4603      	mov	r3, r0
 800262e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d14f      	bne.n	80026d6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	f023 0206 	bic.w	r2, r3, #6
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	659a      	str	r2, [r3, #88]	@ 0x58
 8002662:	e002      	b.n	800266a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	4a20      	ldr	r2, [pc, #128]	@ (80026f0 <HAL_ADC_Start_DMA+0xfc>)
 8002670:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	4a1f      	ldr	r2, [pc, #124]	@ (80026f4 <HAL_ADC_Start_DMA+0x100>)
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4a1e      	ldr	r2, [pc, #120]	@ (80026f8 <HAL_ADC_Start_DMA+0x104>)
 8002680:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	221c      	movs	r2, #28
 8002688:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0210 	orr.w	r2, r2, #16
 80026a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3340      	adds	r3, #64	@ 0x40
 80026bc:	4619      	mov	r1, r3
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f001 f936 	bl	8003932 <HAL_DMA_Start_IT>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fd83 	bl	80021da <LL_ADC_REG_StartConversion>
 80026d4:	e006      	b.n	80026e4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80026de:	e001      	b.n	80026e4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
 80026e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	08003025 	.word	0x08003025
 80026f4:	080030fd 	.word	0x080030fd
 80026f8:	08003119 	.word	0x08003119

080026fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0b6      	sub	sp, #216	@ 0xd8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x22>
 8002772:	2302      	movs	r3, #2
 8002774:	e3bb      	b.n	8002eee <HAL_ADC_ConfigChannel+0x79a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fd3d 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 83a0 	bne.w	8002ed0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d824      	bhi.n	80027ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	3b02      	subs	r3, #2
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d81b      	bhi.n	80027e2 <HAL_ADC_ConfigChannel+0x8e>
 80027aa:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <HAL_ADC_ConfigChannel+0x5c>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027c9 	.word	0x080027c9
 80027b8:	080027d1 	.word	0x080027d1
 80027bc:	080027d9 	.word	0x080027d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80027c0:	230c      	movs	r3, #12
 80027c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027c6:	e010      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027c8:	2312      	movs	r3, #18
 80027ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027ce:	e00c      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027d0:	2318      	movs	r3, #24
 80027d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027d6:	e008      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027e0:	e003      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027e2:	2306      	movs	r3, #6
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80027f8:	f7ff fbfe 	bl	8001ff8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fcfe 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002806:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fd0a 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 8002814:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 81a4 	bne.w	8002b6a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 819f 	bne.w	8002b6a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	461a      	mov	r2, r3
 800283a:	f7ff fc09 	bl	8002050 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00a      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6919      	ldr	r1, [r3, #16]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002870:	f7ff fb5a 	bl	8001f28 <LL_ADC_SetOffset>
 8002874:	e179      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fb77 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x14e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fb6c 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	e01e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x18c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fb61 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1a4>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	e018      	b.n	800292a <HAL_ADC_ConfigChannel+0x1d6>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800290c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002914:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fb30 	bl	8001f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fb14 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x214>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fb09 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 021f 	and.w	r2, r3, #31
 8002966:	e01e      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x252>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fafe 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002986:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800298a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800298e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e004      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800299a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_ConfigChannel+0x26a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	e018      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x29c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80029d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80029da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d106      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff facd 	bl	8001f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fab1 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x2da>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff faa6 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	e01e      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x318>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2102      	movs	r1, #2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fa9b 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e004      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x330>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	e014      	b.n	8002aae <HAL_ADC_ConfigChannel+0x35a>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e004      	b.n	8002aae <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d106      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2102      	movs	r1, #2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fa6e 	bl	8001f9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fa52 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x398>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2103      	movs	r1, #3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fa47 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	e017      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x3c8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2103      	movs	r1, #3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fa3c 	bl	8001f70 <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b06:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x3e0>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	e011      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x404>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b44:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d106      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2103      	movs	r1, #3
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fa19 	bl	8001f9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fb20 	bl	80021b4 <LL_ADC_IsEnabled>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8140 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f7ff fa8d 	bl	80020a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a8f      	ldr	r2, [pc, #572]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x67c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f040 8131 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x46e>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	bf94      	ite	ls
 8002bba:	2301      	movls	r3, #1
 8002bbc:	2300      	movhi	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e019      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x4a2>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2b09      	cmp	r3, #9
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d079      	beq.n	8002cee <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x4c2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c14:	e015      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4ee>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e003      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	069b      	lsls	r3, r3, #26
 8002c3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x50e>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	3301      	adds	r3, #1
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	e017      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x53e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	ea42 0103 	orr.w	r1, r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x564>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0e9b      	lsrs	r3, r3, #26
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	051b      	lsls	r3, r3, #20
 8002cb6:	e018      	b.n	8002cea <HAL_ADC_ConfigChannel+0x596>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e003      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 021f 	and.w	r2, r3, #31
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cea:	430b      	orrs	r3, r1
 8002cec:	e081      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d107      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x5b6>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	3301      	adds	r3, #1
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d08:	e015      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x5e2>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e003      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	069b      	lsls	r3, r3, #26
 8002d32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x602>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	e017      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x632>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	61bb      	str	r3, [r7, #24]
  return result;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	ea42 0103 	orr.w	r1, r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x65e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 021f 	and.w	r2, r3, #31
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	3b1e      	subs	r3, #30
 8002daa:	051b      	lsls	r3, r3, #20
 8002dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	e01e      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x69c>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	60fb      	str	r3, [r7, #12]
  return result;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e006      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x688>
 8002dce:	bf00      	nop
 8002dd0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 021f 	and.w	r2, r3, #31
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	051b      	lsls	r3, r3, #20
 8002dec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7ff f92a 	bl	8002050 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d06c      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e08:	483c      	ldr	r0, [pc, #240]	@ (8002efc <HAL_ADC_ConfigChannel+0x7a8>)
 8002e0a:	f7ff f87f 	bl	8001f0c <LL_ADC_GetCommonPathInternalCh>
 8002e0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3a      	ldr	r2, [pc, #232]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d127      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d121      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a35      	ldr	r2, [pc, #212]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d157      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	482f      	ldr	r0, [pc, #188]	@ (8002efc <HAL_ADC_ConfigChannel+0x7a8>)
 8002e3e:	f7ff f852 	bl	8001ee6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e42:	4b31      	ldr	r3, [pc, #196]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	4a30      	ldr	r2, [pc, #192]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7b8>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e5c:	e002      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f9      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a27      	ldr	r2, [pc, #156]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10d      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1f      	ldr	r2, [pc, #124]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d12a      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e94:	4619      	mov	r1, r3
 8002e96:	4819      	ldr	r0, [pc, #100]	@ (8002efc <HAL_ADC_ConfigChannel+0x7a8>)
 8002e98:	f7ff f825 	bl	8001ee6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e9c:	e021      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d11c      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7b0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d111      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ebe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ec2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480c      	ldr	r0, [pc, #48]	@ (8002efc <HAL_ADC_ConfigChannel+0x7a8>)
 8002eca:	f7ff f80c 	bl	8001ee6 <LL_ADC_SetCommonPathInternalCh>
 8002ece:	e008      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	37d8      	adds	r7, #216	@ 0xd8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	80080000 	.word	0x80080000
 8002efc:	50040300 	.word	0x50040300
 8002f00:	c7520000 	.word	0xc7520000
 8002f04:	50040000 	.word	0x50040000
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	053e2d63 	.word	0x053e2d63
 8002f10:	cb840000 	.word	0xcb840000
 8002f14:	80000001 	.word	0x80000001

08002f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff f943 	bl	80021b4 <LL_ADC_IsEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d169      	bne.n	8003008 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <ADC_Enable+0xfc>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	f043 0210 	orr.w	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e055      	b.n	800300a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f912 	bl	800218c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f68:	482b      	ldr	r0, [pc, #172]	@ (8003018 <ADC_Enable+0x100>)
 8002f6a:	f7fe ffcf 	bl	8001f0c <LL_ADC_GetCommonPathInternalCh>
 8002f6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f78:	4b28      	ldr	r3, [pc, #160]	@ (800301c <ADC_Enable+0x104>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	4a28      	ldr	r2, [pc, #160]	@ (8003020 <ADC_Enable+0x108>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f92:	e002      	b.n	8002f9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe ff82 	bl	8001ea8 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fa6:	e028      	b.n	8002ffa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f901 	bl	80021b4 <LL_ADC_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d104      	bne.n	8002fc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f8e5 	bl	800218c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fc2:	f7fe ff71 	bl	8001ea8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d914      	bls.n	8002ffa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d00d      	beq.n	8002ffa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e007      	b.n	800300a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d1cf      	bne.n	8002fa8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	8000003f 	.word	0x8000003f
 8003018:	50040300 	.word	0x50040300
 800301c:	20000000 	.word	0x20000000
 8003020:	053e2d63 	.word	0x053e2d63

08003024 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800303a:	2b00      	cmp	r3, #0
 800303c:	d14b      	bne.n	80030d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d021      	beq.n	800309c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe ffb8 	bl	8001fd2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d032      	beq.n	80030ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d12b      	bne.n	80030ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11f      	bne.n	80030ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	655a      	str	r2, [r3, #84]	@ 0x54
 800309a:	e018      	b.n	80030ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d111      	bne.n	80030ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fb21 	bl	8002716 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030d4:	e00e      	b.n	80030f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff fb2b 	bl	800273e <HAL_ADC_ErrorCallback>
}
 80030e8:	e004      	b.n	80030f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fb0d 	bl	800272a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	f043 0204 	orr.w	r2, r3, #4
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff fafd 	bl	800273e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0ed      	b.n	800333a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fb46 	bl	80017fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003180:	f7fe fe92 	bl	8001ea8 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003186:	e012      	b.n	80031ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003188:	f7fe fe8e 	bl	8001ea8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b0a      	cmp	r3, #10
 8003194:	d90b      	bls.n	80031ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2205      	movs	r2, #5
 80031a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0c5      	b.n	800333a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0e5      	beq.n	8003188 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0202 	bic.w	r2, r2, #2
 80031ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031cc:	f7fe fe6c 	bl	8001ea8 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031d2:	e012      	b.n	80031fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031d4:	f7fe fe68 	bl	8001ea8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b0a      	cmp	r3, #10
 80031e0:	d90b      	bls.n	80031fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2205      	movs	r2, #5
 80031f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e09f      	b.n	800333a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7e1b      	ldrb	r3, [r3, #24]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d108      	bne.n	8003222 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e007      	b.n	8003232 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7e5b      	ldrb	r3, [r3, #25]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e007      	b.n	800325c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7e9b      	ldrb	r3, [r3, #26]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d108      	bne.n	8003276 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0220 	orr.w	r2, r2, #32
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e007      	b.n	8003286 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0220 	bic.w	r2, r2, #32
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7edb      	ldrb	r3, [r3, #27]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d108      	bne.n	80032a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0210 	bic.w	r2, r2, #16
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e007      	b.n	80032b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0210 	orr.w	r2, r2, #16
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7f1b      	ldrb	r3, [r3, #28]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d108      	bne.n	80032ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0208 	orr.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e007      	b.n	80032da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7f5b      	ldrb	r3, [r3, #29]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0204 	orr.w	r2, r2, #4
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e007      	b.n	8003304 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	ea42 0103 	orr.w	r1, r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003358:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d003      	beq.n	8003368 <HAL_CAN_ConfigFilter+0x26>
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b02      	cmp	r3, #2
 8003364:	f040 80aa 	bne.w	80034bc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800336e:	f043 0201 	orr.w	r2, r3, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43db      	mvns	r3, r3
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d123      	bne.n	80033ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	401a      	ands	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3248      	adds	r2, #72	@ 0x48
 80033ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033e0:	6979      	ldr	r1, [r7, #20]
 80033e2:	3348      	adds	r3, #72	@ 0x48
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d122      	bne.n	8003438 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003412:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3248      	adds	r2, #72	@ 0x48
 8003418:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800342c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800342e:	6979      	ldr	r1, [r7, #20]
 8003430:	3348      	adds	r3, #72	@ 0x48
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003452:	e007      	b.n	8003464 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	431a      	orrs	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800347e:	e007      	b.n	8003490 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	431a      	orrs	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e006      	b.n	80034ca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d12e      	bne.n	8003548 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003502:	f7fe fcd1 	bl	8001ea8 <HAL_GetTick>
 8003506:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003508:	e012      	b.n	8003530 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800350a:	f7fe fccd 	bl	8001ea8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b0a      	cmp	r3, #10
 8003516:	d90b      	bls.n	8003530 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2205      	movs	r2, #5
 8003528:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e012      	b.n	8003556 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e5      	bne.n	800350a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e006      	b.n	8003556 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800355e:	b480      	push	{r7}
 8003560:	b089      	sub	sp, #36	@ 0x24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003572:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d003      	beq.n	800358a <HAL_CAN_AddTxMessage+0x2c>
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	2b02      	cmp	r3, #2
 8003586:	f040 80ad 	bne.w	80036e4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8095 	beq.w	80036d4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	0e1b      	lsrs	r3, r3, #24
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035b4:	2201      	movs	r2, #1
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	409a      	lsls	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10d      	bne.n	80035e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035d0:	68f9      	ldr	r1, [r7, #12]
 80035d2:	6809      	ldr	r1, [r1, #0]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3318      	adds	r3, #24
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	440b      	add	r3, r1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e00f      	b.n	8003602 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3318      	adds	r3, #24
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	440b      	add	r3, r1
 8003600:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3318      	adds	r3, #24
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	440b      	add	r3, r1
 8003612:	3304      	adds	r3, #4
 8003614:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	7d1b      	ldrb	r3, [r3, #20]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d111      	bne.n	8003642 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	3318      	adds	r3, #24
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	4413      	add	r3, r2
 800362a:	3304      	adds	r3, #4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	6811      	ldr	r1, [r2, #0]
 8003632:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3318      	adds	r3, #24
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	440b      	add	r3, r1
 800363e:	3304      	adds	r3, #4
 8003640:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3307      	adds	r3, #7
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	061a      	lsls	r2, r3, #24
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3306      	adds	r3, #6
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3305      	adds	r3, #5
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	4313      	orrs	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	3204      	adds	r2, #4
 8003662:	7812      	ldrb	r2, [r2, #0]
 8003664:	4610      	mov	r0, r2
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	6811      	ldr	r1, [r2, #0]
 800366a:	ea43 0200 	orr.w	r2, r3, r0
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	440b      	add	r3, r1
 8003674:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003678:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3303      	adds	r3, #3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	061a      	lsls	r2, r3, #24
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3302      	adds	r3, #2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3301      	adds	r3, #1
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	4313      	orrs	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	4610      	mov	r0, r2
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	6811      	ldr	r1, [r2, #0]
 80036a0:	ea43 0200 	orr.w	r2, r3, r0
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	440b      	add	r3, r1
 80036aa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80036ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3318      	adds	r3, #24
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	4413      	add	r3, r2
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3318      	adds	r3, #24
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	440b      	add	r3, r1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e00e      	b.n	80036f2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e006      	b.n	80036f2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	@ 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d002      	beq.n	800371e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d11d      	bne.n	800375a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3301      	adds	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <__NVIC_SetPriorityGrouping+0x44>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003784:	4013      	ands	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379a:	4a04      	ldr	r2, [pc, #16]	@ (80037ac <__NVIC_SetPriorityGrouping+0x44>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	60d3      	str	r3, [r2, #12]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <__NVIC_GetPriorityGrouping+0x18>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 0307 	and.w	r3, r3, #7
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db0a      	blt.n	80037f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	490c      	ldr	r1, [pc, #48]	@ (8003818 <__NVIC_SetPriority+0x4c>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	440b      	add	r3, r1
 80037f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f4:	e00a      	b.n	800380c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4908      	ldr	r1, [pc, #32]	@ (800381c <__NVIC_SetPriority+0x50>)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	3b04      	subs	r3, #4
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	440b      	add	r3, r1
 800380a:	761a      	strb	r2, [r3, #24]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000e100 	.word	0xe000e100
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	@ 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f1c3 0307 	rsb	r3, r3, #7
 800383a:	2b04      	cmp	r3, #4
 800383c:	bf28      	it	cs
 800383e:	2304      	movcs	r3, #4
 8003840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3304      	adds	r3, #4
 8003846:	2b06      	cmp	r3, #6
 8003848:	d902      	bls.n	8003850 <NVIC_EncodePriority+0x30>
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3b03      	subs	r3, #3
 800384e:	e000      	b.n	8003852 <NVIC_EncodePriority+0x32>
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	401a      	ands	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003868:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43d9      	mvns	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	4313      	orrs	r3, r2
         );
}
 800387a:	4618      	mov	r0, r3
 800387c:	3724      	adds	r7, #36	@ 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003898:	d301      	bcc.n	800389e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389a:	2301      	movs	r3, #1
 800389c:	e00f      	b.n	80038be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389e:	4a0a      	ldr	r2, [pc, #40]	@ (80038c8 <SysTick_Config+0x40>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a6:	210f      	movs	r1, #15
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038ac:	f7ff ff8e 	bl	80037cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <SysTick_Config+0x40>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b6:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <SysTick_Config+0x40>)
 80038b8:	2207      	movs	r2, #7
 80038ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	e000e010 	.word	0xe000e010

080038cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff47 	bl	8003768 <__NVIC_SetPriorityGrouping>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038f4:	f7ff ff5c 	bl	80037b0 <__NVIC_GetPriorityGrouping>
 80038f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff ff8e 	bl	8003820 <NVIC_EncodePriority>
 8003904:	4602      	mov	r2, r0
 8003906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff5d 	bl	80037cc <__NVIC_SetPriority>
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffb0 	bl	8003888 <SysTick_Config>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_DMA_Start_IT+0x20>
 800394e:	2302      	movs	r3, #2
 8003950:	e04b      	b.n	80039ea <HAL_DMA_Start_IT+0xb8>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d13a      	bne.n	80039dc <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f831 	bl	80039f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 020e 	orr.w	r2, r2, #14
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e00f      	b.n	80039ca <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0204 	bic.w	r2, r2, #4
 80039b8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 020a 	orr.w	r2, r2, #10
 80039c8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e005      	b.n	80039e8 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
 80039e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	f003 021c 	and.w	r2, r3, #28
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d108      	bne.n	8003a36 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a34:	e007      	b.n	8003a46 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	60da      	str	r2, [r3, #12]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a62:	e148      	b.n	8003cf6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	4013      	ands	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 813a 	beq.w	8003cf0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d005      	beq.n	8003a94 <HAL_GPIO_Init+0x40>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d130      	bne.n	8003af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aca:	2201      	movs	r2, #1
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0201 	and.w	r2, r3, #1
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d017      	beq.n	8003b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d123      	bne.n	8003b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	08da      	lsrs	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3208      	adds	r2, #8
 8003b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	220f      	movs	r2, #15
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	08da      	lsrs	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3208      	adds	r2, #8
 8003b80:	6939      	ldr	r1, [r7, #16]
 8003b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0203 	and.w	r2, r3, #3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8094 	beq.w	8003cf0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc8:	4b52      	ldr	r3, [pc, #328]	@ (8003d14 <HAL_GPIO_Init+0x2c0>)
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	4a51      	ldr	r2, [pc, #324]	@ (8003d14 <HAL_GPIO_Init+0x2c0>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8003d14 <HAL_GPIO_Init+0x2c0>)
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003be0:	4a4d      	ldr	r2, [pc, #308]	@ (8003d18 <HAL_GPIO_Init+0x2c4>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	3302      	adds	r3, #2
 8003be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c0a:	d00d      	beq.n	8003c28 <HAL_GPIO_Init+0x1d4>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a43      	ldr	r2, [pc, #268]	@ (8003d1c <HAL_GPIO_Init+0x2c8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <HAL_GPIO_Init+0x1d0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a42      	ldr	r2, [pc, #264]	@ (8003d20 <HAL_GPIO_Init+0x2cc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d101      	bne.n	8003c20 <HAL_GPIO_Init+0x1cc>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e004      	b.n	8003c2a <HAL_GPIO_Init+0x1d6>
 8003c20:	2307      	movs	r3, #7
 8003c22:	e002      	b.n	8003c2a <HAL_GPIO_Init+0x1d6>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_GPIO_Init+0x1d6>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	f002 0203 	and.w	r2, r2, #3
 8003c30:	0092      	lsls	r2, r2, #2
 8003c32:	4093      	lsls	r3, r2
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c3a:	4937      	ldr	r1, [pc, #220]	@ (8003d18 <HAL_GPIO_Init+0x2c4>)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3302      	adds	r3, #2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c72:	4b2c      	ldr	r3, [pc, #176]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c96:	4a23      	ldr	r2, [pc, #140]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c9c:	4b21      	ldr	r3, [pc, #132]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cc0:	4a18      	ldr	r2, [pc, #96]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cc6:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cea:	4a0e      	ldr	r2, [pc, #56]	@ (8003d24 <HAL_GPIO_Init+0x2d0>)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f aeaf 	bne.w	8003a64 <HAL_GPIO_Init+0x10>
  }
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	48000400 	.word	0x48000400
 8003d20:	48000800 	.word	0x48000800
 8003d24:	40010400 	.word	0x40010400

08003d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e001      	b.n	8003d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
 8003d64:	4613      	mov	r3, r2
 8003d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d68:	787b      	ldrb	r3, [r7, #1]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d6e:	887a      	ldrh	r2, [r7, #2]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d74:	e002      	b.n	8003d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e08d      	b.n	8003eb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fd7a 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	@ 0x24
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	e006      	b.n	8003e10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d108      	bne.n	8003e2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	e007      	b.n	8003e3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69d9      	ldr	r1, [r3, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d138      	bne.n	8003f46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e032      	b.n	8003f48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2224      	movs	r2, #36	@ 0x24
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6819      	ldr	r1, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d139      	bne.n	8003fde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e033      	b.n	8003fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	@ 0x24
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0201 	orr.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ff0:	4b04      	ldr	r3, [pc, #16]	@ (8004004 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40007000 	.word	0x40007000

08004008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004016:	d130      	bne.n	800407a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004018:	4b23      	ldr	r3, [pc, #140]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004024:	d038      	beq.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004026:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800402e:	4a1e      	ldr	r2, [pc, #120]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004030:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004034:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004036:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2232      	movs	r2, #50	@ 0x32
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	4a1b      	ldr	r2, [pc, #108]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0c9b      	lsrs	r3, r3, #18
 8004048:	3301      	adds	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404c:	e002      	b.n	8004054 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b01      	subs	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004054:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004060:	d102      	bne.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f2      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004068:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004074:	d110      	bne.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00f      	b.n	800409a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800407a:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004086:	d007      	beq.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004088:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004090:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004096:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40007000 	.word	0x40007000
 80040ac:	20000000 	.word	0x20000000
 80040b0:	431bde83 	.word	0x431bde83

080040b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f000 bc02 	b.w	80048cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c8:	4b96      	ldr	r3, [pc, #600]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d2:	4b94      	ldr	r3, [pc, #592]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80e4 	beq.w	80042b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_RCC_OscConfig+0x4c>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	f040 808b 	bne.w	800420e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	f040 8087 	bne.w	800420e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004100:	4b88      	ldr	r3, [pc, #544]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x64>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e3d9      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	4b81      	ldr	r3, [pc, #516]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_RCC_OscConfig+0x7e>
 8004128:	4b7e      	ldr	r3, [pc, #504]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004130:	e005      	b.n	800413e <HAL_RCC_OscConfig+0x8a>
 8004132:	4b7c      	ldr	r3, [pc, #496]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800413e:	4293      	cmp	r3, r2
 8004140:	d223      	bcs.n	800418a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fd8c 	bl	8004c64 <RCC_SetFlashLatencyFromMSIRange>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e3ba      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004156:	4b73      	ldr	r3, [pc, #460]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a72      	ldr	r2, [pc, #456]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800415c:	f043 0308 	orr.w	r3, r3, #8
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b70      	ldr	r3, [pc, #448]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	496d      	ldr	r1, [pc, #436]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004174:	4b6b      	ldr	r3, [pc, #428]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	4968      	ldr	r1, [pc, #416]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
 8004188:	e025      	b.n	80041d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800418a:	4b66      	ldr	r3, [pc, #408]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a65      	ldr	r2, [pc, #404]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004190:	f043 0308 	orr.w	r3, r3, #8
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4b63      	ldr	r3, [pc, #396]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4960      	ldr	r1, [pc, #384]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	495b      	ldr	r1, [pc, #364]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fd4c 	bl	8004c64 <RCC_SetFlashLatencyFromMSIRange>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e37a      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d6:	f000 fc81 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 80041da:	4602      	mov	r2, r0
 80041dc:	4b51      	ldr	r3, [pc, #324]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	4950      	ldr	r1, [pc, #320]	@ (8004328 <HAL_RCC_OscConfig+0x274>)
 80041e8:	5ccb      	ldrb	r3, [r1, r3]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	fa22 f303 	lsr.w	r3, r2, r3
 80041f2:	4a4e      	ldr	r2, [pc, #312]	@ (800432c <HAL_RCC_OscConfig+0x278>)
 80041f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004330 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fd fe04 	bl	8001e08 <HAL_InitTick>
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d052      	beq.n	80042b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	e35e      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d032      	beq.n	800427c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004216:	4b43      	ldr	r3, [pc, #268]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a42      	ldr	r2, [pc, #264]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004222:	f7fd fe41 	bl	8001ea8 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422a:	f7fd fe3d 	bl	8001ea8 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e347      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800423c:	4b39      	ldr	r3, [pc, #228]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a35      	ldr	r2, [pc, #212]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800424e:	f043 0308 	orr.w	r3, r3, #8
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b33      	ldr	r3, [pc, #204]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	4930      	ldr	r1, [pc, #192]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004266:	4b2f      	ldr	r3, [pc, #188]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	492b      	ldr	r1, [pc, #172]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
 800427a:	e01a      	b.n	80042b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800427c:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a28      	ldr	r2, [pc, #160]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004288:	f7fd fe0e 	bl	8001ea8 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004290:	f7fd fe0a 	bl	8001ea8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e314      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042a2:	4b20      	ldr	r3, [pc, #128]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1dc>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d073      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_OscConfig+0x21c>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d10e      	bne.n	80042e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d063      	beq.n	80043a4 <HAL_RCC_OscConfig+0x2f0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d15f      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e2f1      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f0:	d106      	bne.n	8004300 <HAL_RCC_OscConfig+0x24c>
 80042f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e025      	b.n	800434c <HAL_RCC_OscConfig+0x298>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004308:	d114      	bne.n	8004334 <HAL_RCC_OscConfig+0x280>
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a05      	ldr	r2, [pc, #20]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a02      	ldr	r2, [pc, #8]	@ (8004324 <HAL_RCC_OscConfig+0x270>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e013      	b.n	800434c <HAL_RCC_OscConfig+0x298>
 8004324:	40021000 	.word	0x40021000
 8004328:	080072dc 	.word	0x080072dc
 800432c:	20000000 	.word	0x20000000
 8004330:	20000004 	.word	0x20000004
 8004334:	4ba0      	ldr	r3, [pc, #640]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a9f      	ldr	r2, [pc, #636]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b9d      	ldr	r3, [pc, #628]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a9c      	ldr	r2, [pc, #624]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800434a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd fda8 	bl	8001ea8 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fd fda4 	bl	8001ea8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e2ae      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436e:	4b92      	ldr	r3, [pc, #584]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x2a8>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fd94 	bl	8001ea8 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fd fd90 	bl	8001ea8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	@ 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e29a      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004396:	4b88      	ldr	r3, [pc, #544]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x2d0>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d060      	beq.n	8004474 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_OscConfig+0x310>
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	d119      	bne.n	80043f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d116      	bne.n	80043f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c4:	4b7c      	ldr	r3, [pc, #496]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_OscConfig+0x328>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e277      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043dc:	4b76      	ldr	r3, [pc, #472]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	4973      	ldr	r1, [pc, #460]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f0:	e040      	b.n	8004474 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d023      	beq.n	8004442 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fa:	4b6f      	ldr	r3, [pc, #444]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6e      	ldr	r2, [pc, #440]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fd fd4f 	bl	8001ea8 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fd fd4b 	bl	8001ea8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e255      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004420:	4b65      	ldr	r3, [pc, #404]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b62      	ldr	r3, [pc, #392]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	495f      	ldr	r1, [pc, #380]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]
 8004440:	e018      	b.n	8004474 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004442:	4b5d      	ldr	r3, [pc, #372]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a5c      	ldr	r2, [pc, #368]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800444c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fd fd2b 	bl	8001ea8 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004456:	f7fd fd27 	bl	8001ea8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e231      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004468:	4b53      	ldr	r3, [pc, #332]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d03c      	beq.n	80044fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01c      	beq.n	80044c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004488:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448e:	4a4a      	ldr	r2, [pc, #296]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd fd06 	bl	8001ea8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fd fd02 	bl	8001ea8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e20c      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b2:	4b41      	ldr	r3, [pc, #260]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <HAL_RCC_OscConfig+0x3ec>
 80044c0:	e01b      	b.n	80044fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c2:	4b3d      	ldr	r3, [pc, #244]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80044c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c8:	4a3b      	ldr	r2, [pc, #236]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fd fce9 	bl	8001ea8 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044da:	f7fd fce5 	bl	8001ea8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1ef      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ec:	4b32      	ldr	r3, [pc, #200]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1ef      	bne.n	80044da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80a6 	beq.w	8004654 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004508:	2300      	movs	r3, #0
 800450a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800450c:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10d      	bne.n	8004534 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004518:	4b27      	ldr	r3, [pc, #156]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451c:	4a26      	ldr	r2, [pc, #152]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004522:	6593      	str	r3, [r2, #88]	@ 0x58
 8004524:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004530:	2301      	movs	r3, #1
 8004532:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004534:	4b21      	ldr	r3, [pc, #132]	@ (80045bc <HAL_RCC_OscConfig+0x508>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d118      	bne.n	8004572 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004540:	4b1e      	ldr	r3, [pc, #120]	@ (80045bc <HAL_RCC_OscConfig+0x508>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1d      	ldr	r2, [pc, #116]	@ (80045bc <HAL_RCC_OscConfig+0x508>)
 8004546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800454a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454c:	f7fd fcac 	bl	8001ea8 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7fd fca8 	bl	8001ea8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1b2      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004566:	4b15      	ldr	r3, [pc, #84]	@ (80045bc <HAL_RCC_OscConfig+0x508>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d108      	bne.n	800458c <HAL_RCC_OscConfig+0x4d8>
 800457a:	4b0f      	ldr	r3, [pc, #60]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004580:	4a0d      	ldr	r2, [pc, #52]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800458a:	e029      	b.n	80045e0 <HAL_RCC_OscConfig+0x52c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b05      	cmp	r3, #5
 8004592:	d115      	bne.n	80045c0 <HAL_RCC_OscConfig+0x50c>
 8004594:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	4a07      	ldr	r2, [pc, #28]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 800459c:	f043 0304 	orr.w	r3, r3, #4
 80045a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045a4:	4b04      	ldr	r3, [pc, #16]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	4a03      	ldr	r2, [pc, #12]	@ (80045b8 <HAL_RCC_OscConfig+0x504>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045b4:	e014      	b.n	80045e0 <HAL_RCC_OscConfig+0x52c>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40007000 	.word	0x40007000
 80045c0:	4b9a      	ldr	r3, [pc, #616]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	4a99      	ldr	r2, [pc, #612]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045d0:	4b96      	ldr	r3, [pc, #600]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	4a95      	ldr	r2, [pc, #596]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d016      	beq.n	8004616 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd fc5e 	bl	8001ea8 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fd fc5a 	bl	8001ea8 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e162      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004606:	4b89      	ldr	r3, [pc, #548]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ed      	beq.n	80045f0 <HAL_RCC_OscConfig+0x53c>
 8004614:	e015      	b.n	8004642 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fd fc47 	bl	8001ea8 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fd fc43 	bl	8001ea8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e14b      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004634:	4b7d      	ldr	r3, [pc, #500]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ed      	bne.n	800461e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004642:	7ffb      	ldrb	r3, [r7, #31]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b78      	ldr	r3, [pc, #480]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 800464a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464c:	4a77      	ldr	r2, [pc, #476]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d03c      	beq.n	80046da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01c      	beq.n	80046a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004668:	4b70      	ldr	r3, [pc, #448]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 800466a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800466e:	4a6f      	ldr	r2, [pc, #444]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd fc16 	bl	8001ea8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004680:	f7fd fc12 	bl	8001ea8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e11c      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004692:	4b66      	ldr	r3, [pc, #408]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 8004694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ef      	beq.n	8004680 <HAL_RCC_OscConfig+0x5cc>
 80046a0:	e01b      	b.n	80046da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046a2:	4b62      	ldr	r3, [pc, #392]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80046a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046a8:	4a60      	ldr	r2, [pc, #384]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fd fbf9 	bl	8001ea8 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ba:	f7fd fbf5 	bl	8001ea8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0ff      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046cc:	4b57      	ldr	r3, [pc, #348]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80046ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ef      	bne.n	80046ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80f3 	beq.w	80048ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	f040 80c9 	bne.w	8004880 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046ee:	4b4f      	ldr	r3, [pc, #316]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0203 	and.w	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	429a      	cmp	r2, r3
 8004700:	d12c      	bne.n	800475c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	3b01      	subs	r3, #1
 800470e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d123      	bne.n	800475c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d11b      	bne.n	800475c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d113      	bne.n	800475c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d109      	bne.n	800475c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d06b      	beq.n	8004834 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d062      	beq.n	8004828 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004762:	4b32      	ldr	r3, [pc, #200]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0ac      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004772:	4b2e      	ldr	r3, [pc, #184]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2d      	ldr	r2, [pc, #180]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 8004778:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800477c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800477e:	f7fd fb93 	bl	8001ea8 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fd fb8f 	bl	8001ea8 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e099      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004798:	4b24      	ldr	r3, [pc, #144]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a4:	4b21      	ldr	r3, [pc, #132]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	4b21      	ldr	r3, [pc, #132]	@ (8004830 <HAL_RCC_OscConfig+0x77c>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047b4:	3a01      	subs	r2, #1
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047be:	0212      	lsls	r2, r2, #8
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047c6:	0852      	lsrs	r2, r2, #1
 80047c8:	3a01      	subs	r2, #1
 80047ca:	0552      	lsls	r2, r2, #21
 80047cc:	4311      	orrs	r1, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047d2:	0852      	lsrs	r2, r2, #1
 80047d4:	3a01      	subs	r2, #1
 80047d6:	0652      	lsls	r2, r2, #25
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047de:	06d2      	lsls	r2, r2, #27
 80047e0:	430a      	orrs	r2, r1
 80047e2:	4912      	ldr	r1, [pc, #72]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047e8:	4b10      	ldr	r3, [pc, #64]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0f      	ldr	r2, [pc, #60]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f4:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a0c      	ldr	r2, [pc, #48]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004800:	f7fd fb52 	bl	8001ea8 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fd fb4e 	bl	8001ea8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e058      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481a:	4b04      	ldr	r3, [pc, #16]	@ (800482c <HAL_RCC_OscConfig+0x778>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004826:	e050      	b.n	80048ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e04f      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
 800482c:	40021000 	.word	0x40021000
 8004830:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b27      	ldr	r3, [pc, #156]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d144      	bne.n	80048ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004840:	4b24      	ldr	r3, [pc, #144]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a23      	ldr	r2, [pc, #140]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484c:	4b21      	ldr	r3, [pc, #132]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a20      	ldr	r2, [pc, #128]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004858:	f7fd fb26 	bl	8001ea8 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fd fb22 	bl	8001ea8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e02c      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x7ac>
 800487e:	e024      	b.n	80048ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d01f      	beq.n	80048c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a12      	ldr	r2, [pc, #72]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 800488c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fd fb09 	bl	8001ea8 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489a:	f7fd fb05 	bl	8001ea8 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e00f      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f0      	bne.n	800489a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	4905      	ldr	r1, [pc, #20]	@ (80048d4 <HAL_RCC_OscConfig+0x820>)
 80048be:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <HAL_RCC_OscConfig+0x824>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60cb      	str	r3, [r1, #12]
 80048c4:	e001      	b.n	80048ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	feeefffc 	.word	0xfeeefffc

080048dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0e7      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b75      	ldr	r3, [pc, #468]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d910      	bls.n	8004920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b72      	ldr	r3, [pc, #456]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0207 	bic.w	r2, r3, #7
 8004906:	4970      	ldr	r1, [pc, #448]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cf      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d010      	beq.n	800494e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	4b66      	ldr	r3, [pc, #408]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004938:	429a      	cmp	r2, r3
 800493a:	d908      	bls.n	800494e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b63      	ldr	r3, [pc, #396]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4960      	ldr	r1, [pc, #384]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d04c      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	4b5a      	ldr	r3, [pc, #360]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d121      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0a6      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497a:	4b54      	ldr	r3, [pc, #336]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d115      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e09a      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004992:	4b4e      	ldr	r3, [pc, #312]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e08e      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a2:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e086      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	4b46      	ldr	r3, [pc, #280]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4943      	ldr	r1, [pc, #268]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c4:	f7fd fa70 	bl	8001ea8 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7fd fa6c 	bl	8001ea8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e06e      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b3a      	ldr	r3, [pc, #232]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 020c 	and.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1eb      	bne.n	80049cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	4b31      	ldr	r3, [pc, #196]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d208      	bcs.n	8004a22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b2e      	ldr	r3, [pc, #184]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	492b      	ldr	r1, [pc, #172]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a22:	4b29      	ldr	r3, [pc, #164]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d210      	bcs.n	8004a52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a30:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f023 0207 	bic.w	r2, r3, #7
 8004a38:	4923      	ldr	r1, [pc, #140]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a40:	4b21      	ldr	r3, [pc, #132]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d001      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e036      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4918      	ldr	r1, [pc, #96]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7c:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4910      	ldr	r1, [pc, #64]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a90:	f000 f824 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	490b      	ldr	r1, [pc, #44]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aac:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8004aae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ab0:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1fc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fd f9a7 	bl	8001e08 <HAL_InitTick>
 8004aba:	4603      	mov	r3, r0
 8004abc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004abe:	7afb      	ldrb	r3, [r7, #11]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40022000 	.word	0x40022000
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	080072dc 	.word	0x080072dc
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	20000004 	.word	0x20000004

08004adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	@ 0x24
 8004ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	4b3e      	ldr	r3, [pc, #248]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af4:	4b3b      	ldr	r3, [pc, #236]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x34>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d121      	bne.n	8004b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d11e      	bne.n	8004b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b10:	4b34      	ldr	r3, [pc, #208]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b1c:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e005      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b38:	4a2b      	ldr	r2, [pc, #172]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10d      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d102      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b54:	4b25      	ldr	r3, [pc, #148]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x110>)
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	e004      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b60:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d134      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d003      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0xac>
 8004b80:	e005      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b82:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x110>)
 8004b84:	617b      	str	r3, [r7, #20]
      break;
 8004b86:	e005      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b88:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b8a:	617b      	str	r3, [r7, #20]
      break;
 8004b8c:	e002      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	617b      	str	r3, [r7, #20]
      break;
 8004b92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b94:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	fb03 f202 	mul.w	r2, r3, r2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	0e5b      	lsrs	r3, r3, #25
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3724      	adds	r7, #36	@ 0x24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	080072f4 	.word	0x080072f4
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200

08004bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000000 	.word	0x20000000

08004c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c10:	f7ff fff0 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4904      	ldr	r1, [pc, #16]	@ (8004c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	080072ec 	.word	0x080072ec

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c3c:	f7ff ffda 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0adb      	lsrs	r3, r3, #11
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4904      	ldr	r1, [pc, #16]	@ (8004c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	080072ec 	.word	0x080072ec

08004c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c70:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c7c:	f7ff f9b6 	bl	8003fec <HAL_PWREx_GetVoltageRange>
 8004c80:	6178      	str	r0, [r7, #20]
 8004c82:	e014      	b.n	8004cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	4a24      	ldr	r2, [pc, #144]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c90:	4b22      	ldr	r3, [pc, #136]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c9c:	f7ff f9a6 	bl	8003fec <HAL_PWREx_GetVoltageRange>
 8004ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb4:	d10b      	bne.n	8004cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b80      	cmp	r3, #128	@ 0x80
 8004cba:	d919      	bls.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004cc0:	d902      	bls.n	8004cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e013      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cc8:	2301      	movs	r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	e010      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b80      	cmp	r3, #128	@ 0x80
 8004cd2:	d902      	bls.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	e00a      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b80      	cmp	r3, #128	@ 0x80
 8004cde:	d102      	bne.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e004      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b70      	cmp	r3, #112	@ 0x70
 8004cea:	d101      	bne.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cec:	2301      	movs	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 0207 	bic.w	r2, r3, #7
 8004cf8:	4909      	ldr	r1, [pc, #36]	@ (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d00:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d001      	beq.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40022000 	.word	0x40022000

08004d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d30:	2300      	movs	r3, #0
 8004d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d031      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d48:	d01a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d4e:	d814      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f9ce 	bl	8005110 <RCCEx_PLLSAI1_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d88:	4b51      	ldr	r3, [pc, #324]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d96:	494e      	ldr	r1, [pc, #312]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d9e:	e001      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 809e 	beq.w	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004db6:	4b46      	ldr	r3, [pc, #280]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dcc:	4b40      	ldr	r3, [pc, #256]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de4:	2301      	movs	r3, #1
 8004de6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a39      	ldr	r2, [pc, #228]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df4:	f7fd f858 	bl	8001ea8 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dfa:	e009      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fd f854 	bl	8001ea8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e0e:	e005      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e10:	4b30      	ldr	r3, [pc, #192]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15a      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e22:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01e      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d019      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e4a:	4b21      	ldr	r3, [pc, #132]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e6a:	4a19      	ldr	r2, [pc, #100]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d016      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd f814 	bl	8001ea8 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e82:	e00b      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fd f810 	bl	8001ea8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d902      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	74fb      	strb	r3, [r7, #19]
            break;
 8004e9a:	e006      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0ec      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb0:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ebe:	4904      	ldr	r1, [pc, #16]	@ (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ec6:	e009      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ec8:	7cfb      	ldrb	r3, [r7, #19]
 8004eca:	74bb      	strb	r3, [r7, #18]
 8004ecc:	e006      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004edc:	7c7b      	ldrb	r3, [r7, #17]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b8a      	ldr	r3, [pc, #552]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee6:	4a89      	ldr	r2, [pc, #548]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efa:	4b84      	ldr	r3, [pc, #528]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f023 0203 	bic.w	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	4980      	ldr	r1, [pc, #512]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f023 020c 	bic.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	4978      	ldr	r1, [pc, #480]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f3e:	4b73      	ldr	r3, [pc, #460]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	496f      	ldr	r1, [pc, #444]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f60:	4b6a      	ldr	r3, [pc, #424]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f66:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6e:	4967      	ldr	r1, [pc, #412]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f82:	4b62      	ldr	r3, [pc, #392]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	495e      	ldr	r1, [pc, #376]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	4956      	ldr	r1, [pc, #344]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fc6:	4b51      	ldr	r3, [pc, #324]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd4:	494d      	ldr	r1, [pc, #308]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d028      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fe8:	4b48      	ldr	r3, [pc, #288]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	4945      	ldr	r1, [pc, #276]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005006:	d106      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005008:	4b40      	ldr	r3, [pc, #256]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a3f      	ldr	r2, [pc, #252]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005012:	60d3      	str	r3, [r2, #12]
 8005014:	e011      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800501e:	d10c      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	2101      	movs	r1, #1
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f872 	bl	8005110 <RCCEx_PLLSAI1_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005036:	7cfb      	ldrb	r3, [r7, #19]
 8005038:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d028      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005046:	4b31      	ldr	r3, [pc, #196]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005054:	492d      	ldr	r1, [pc, #180]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005064:	d106      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005066:	4b29      	ldr	r3, [pc, #164]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4a28      	ldr	r2, [pc, #160]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800506c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005070:	60d3      	str	r3, [r2, #12]
 8005072:	e011      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800507c:	d10c      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f843 	bl	8005110 <RCCEx_PLLSAI1_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01c      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a4:	4b19      	ldr	r3, [pc, #100]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b2:	4916      	ldr	r1, [pc, #88]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050c2:	d10c      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f820 	bl	8005110 <RCCEx_PLLSAI1_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050ea:	4b08      	ldr	r3, [pc, #32]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f8:	4904      	ldr	r1, [pc, #16]	@ (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005100:	7cbb      	ldrb	r3, [r7, #18]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000

08005110 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511e:	4b74      	ldr	r3, [pc, #464]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d018      	beq.n	800515c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800512a:	4b71      	ldr	r3, [pc, #452]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0203 	and.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d10d      	bne.n	8005156 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
       ||
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005142:	4b6b      	ldr	r3, [pc, #428]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
       ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d047      	beq.n	80051e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	e044      	b.n	80051e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d018      	beq.n	8005196 <RCCEx_PLLSAI1_Config+0x86>
 8005164:	2b03      	cmp	r3, #3
 8005166:	d825      	bhi.n	80051b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005168:	2b01      	cmp	r3, #1
 800516a:	d002      	beq.n	8005172 <RCCEx_PLLSAI1_Config+0x62>
 800516c:	2b02      	cmp	r3, #2
 800516e:	d009      	beq.n	8005184 <RCCEx_PLLSAI1_Config+0x74>
 8005170:	e020      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005172:	4b5f      	ldr	r3, [pc, #380]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d11d      	bne.n	80051ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005182:	e01a      	b.n	80051ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005184:	4b5a      	ldr	r3, [pc, #360]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d116      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005194:	e013      	b.n	80051be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005196:	4b56      	ldr	r3, [pc, #344]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051a2:	4b53      	ldr	r3, [pc, #332]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051b2:	e006      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      break;
 80051b8:	e004      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e002      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ca:	4b49      	ldr	r3, [pc, #292]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	3b01      	subs	r3, #1
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	430b      	orrs	r3, r1
 80051e0:	4943      	ldr	r1, [pc, #268]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d17c      	bne.n	80052e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051ec:	4b40      	ldr	r3, [pc, #256]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a3f      	ldr	r2, [pc, #252]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f8:	f7fc fe56 	bl	8001ea8 <HAL_GetTick>
 80051fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051fe:	e009      	b.n	8005214 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005200:	f7fc fe52 	bl	8001ea8 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d902      	bls.n	8005214 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	73fb      	strb	r3, [r7, #15]
        break;
 8005212:	e005      	b.n	8005220 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005214:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ef      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d15f      	bne.n	80052e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d110      	bne.n	800524e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800522c:	4b30      	ldr	r3, [pc, #192]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005234:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6892      	ldr	r2, [r2, #8]
 800523c:	0211      	lsls	r1, r2, #8
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68d2      	ldr	r2, [r2, #12]
 8005242:	06d2      	lsls	r2, r2, #27
 8005244:	430a      	orrs	r2, r1
 8005246:	492a      	ldr	r1, [pc, #168]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	610b      	str	r3, [r1, #16]
 800524c:	e027      	b.n	800529e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d112      	bne.n	800527a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005254:	4b26      	ldr	r3, [pc, #152]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800525c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6892      	ldr	r2, [r2, #8]
 8005264:	0211      	lsls	r1, r2, #8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6912      	ldr	r2, [r2, #16]
 800526a:	0852      	lsrs	r2, r2, #1
 800526c:	3a01      	subs	r2, #1
 800526e:	0552      	lsls	r2, r2, #21
 8005270:	430a      	orrs	r2, r1
 8005272:	491f      	ldr	r1, [pc, #124]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005274:	4313      	orrs	r3, r2
 8005276:	610b      	str	r3, [r1, #16]
 8005278:	e011      	b.n	800529e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800527a:	4b1d      	ldr	r3, [pc, #116]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005282:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6892      	ldr	r2, [r2, #8]
 800528a:	0211      	lsls	r1, r2, #8
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6952      	ldr	r2, [r2, #20]
 8005290:	0852      	lsrs	r2, r2, #1
 8005292:	3a01      	subs	r2, #1
 8005294:	0652      	lsls	r2, r2, #25
 8005296:	430a      	orrs	r2, r1
 8005298:	4915      	ldr	r1, [pc, #84]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529a:	4313      	orrs	r3, r2
 800529c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800529e:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a13      	ldr	r2, [pc, #76]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7fc fdfd 	bl	8001ea8 <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052b0:	e009      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052b2:	f7fc fdf9 	bl	8001ea8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d902      	bls.n	80052c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	73fb      	strb	r3, [r7, #15]
          break;
 80052c4:	e005      	b.n	80052d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052c6:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ef      	beq.n	80052b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	4903      	ldr	r1, [pc, #12]	@ (80052f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000

080052f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e095      	b.n	8005432 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d108      	bne.n	8005320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005316:	d009      	beq.n	800532c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	61da      	str	r2, [r3, #28]
 800531e:	e005      	b.n	800532c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fc fb06 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005362:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800536c:	d902      	bls.n	8005374 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e002      	b.n	800537a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005378:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005382:	d007      	beq.n	8005394 <HAL_SPI_Init+0xa0>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800538c:	d002      	beq.n	8005394 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d6:	ea42 0103 	orr.w	r1, r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	f003 0204 	and.w	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005410:	ea42 0103 	orr.w	r1, r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e049      	b.n	80054e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7fc fabb 	bl	80019dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2202      	movs	r2, #2
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f000 f8ff 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_ConfigClockSource+0x1c>
 8005500:	2302      	movs	r3, #2
 8005502:	e0b6      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x18a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005522:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800552e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005540:	d03e      	beq.n	80055c0 <HAL_TIM_ConfigClockSource+0xd8>
 8005542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005546:	f200 8087 	bhi.w	8005658 <HAL_TIM_ConfigClockSource+0x170>
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554e:	f000 8086 	beq.w	800565e <HAL_TIM_ConfigClockSource+0x176>
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005556:	d87f      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
 8005558:	2b70      	cmp	r3, #112	@ 0x70
 800555a:	d01a      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xaa>
 800555c:	2b70      	cmp	r3, #112	@ 0x70
 800555e:	d87b      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
 8005560:	2b60      	cmp	r3, #96	@ 0x60
 8005562:	d050      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x11e>
 8005564:	2b60      	cmp	r3, #96	@ 0x60
 8005566:	d877      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
 8005568:	2b50      	cmp	r3, #80	@ 0x50
 800556a:	d03c      	beq.n	80055e6 <HAL_TIM_ConfigClockSource+0xfe>
 800556c:	2b50      	cmp	r3, #80	@ 0x50
 800556e:	d873      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
 8005570:	2b40      	cmp	r3, #64	@ 0x40
 8005572:	d058      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x13e>
 8005574:	2b40      	cmp	r3, #64	@ 0x40
 8005576:	d86f      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
 8005578:	2b30      	cmp	r3, #48	@ 0x30
 800557a:	d064      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15e>
 800557c:	2b30      	cmp	r3, #48	@ 0x30
 800557e:	d86b      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
 8005580:	2b20      	cmp	r3, #32
 8005582:	d060      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15e>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d867      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05c      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15e>
 800558c:	2b10      	cmp	r3, #16
 800558e:	d05a      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15e>
 8005590:	e062      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055a2:	f000 f955 	bl	8005850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	609a      	str	r2, [r3, #8]
      break;
 80055be:	e04f      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055d0:	f000 f93e 	bl	8005850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055e2:	609a      	str	r2, [r3, #8]
      break;
 80055e4:	e03c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	461a      	mov	r2, r3
 80055f4:	f000 f8b2 	bl	800575c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2150      	movs	r1, #80	@ 0x50
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f90b 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 8005604:	e02c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005612:	461a      	mov	r2, r3
 8005614:	f000 f8d1 	bl	80057ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2160      	movs	r1, #96	@ 0x60
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f8fb 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 8005624:	e01c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	461a      	mov	r2, r3
 8005634:	f000 f892 	bl	800575c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2140      	movs	r1, #64	@ 0x40
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f8eb 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 8005644:	e00c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f000 f8e2 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 8005656:	e003      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      break;
 800565c:	e000      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800565e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a30      	ldr	r2, [pc, #192]	@ (8005750 <TIM_Base_SetConfig+0xd4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x20>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a27      	ldr	r2, [pc, #156]	@ (8005750 <TIM_Base_SetConfig+0xd4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00b      	beq.n	80056ce <TIM_Base_SetConfig+0x52>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056bc:	d007      	beq.n	80056ce <TIM_Base_SetConfig+0x52>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a24      	ldr	r2, [pc, #144]	@ (8005754 <TIM_Base_SetConfig+0xd8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d003      	beq.n	80056ce <TIM_Base_SetConfig+0x52>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a23      	ldr	r2, [pc, #140]	@ (8005758 <TIM_Base_SetConfig+0xdc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d108      	bne.n	80056e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <TIM_Base_SetConfig+0xd4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0xa0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a11      	ldr	r2, [pc, #68]	@ (8005754 <TIM_Base_SetConfig+0xd8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0xa0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a10      	ldr	r2, [pc, #64]	@ (8005758 <TIM_Base_SetConfig+0xdc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d103      	bne.n	8005724 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f023 0201 	bic.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]
  }
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400

0800575c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0201 	bic.w	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 030a 	bic.w	r3, r3, #10
 8005798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b087      	sub	sp, #28
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f023 0210 	bic.w	r2, r3, #16
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	031b      	lsls	r3, r3, #12
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	f043 0307 	orr.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800586a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	021a      	lsls	r2, r3, #8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	431a      	orrs	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4313      	orrs	r3, r2
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e04f      	b.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a21      	ldr	r2, [pc, #132]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a14      	ldr	r2, [pc, #80]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005910:	d004      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a10      	ldr	r2, [pc, #64]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40014000 	.word	0x40014000

0800595c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e040      	b.n	80059f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc f84c 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	@ 0x24
 8005988:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fade 	bl	8005f64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f8af 	bl	8005b0c <UART_SetConfig>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e01b      	b.n	80059f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb5d 	bl	80060a8 <UART_CheckIdleState>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	@ 0x28
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d177      	bne.n	8005b00 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_UART_Transmit+0x24>
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e070      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2221      	movs	r2, #33	@ 0x21
 8005a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2e:	f7fc fa3b 	bl	8001ea8 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4c:	d108      	bne.n	8005a60 <HAL_UART_Transmit+0x68>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e003      	b.n	8005a68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a68:	e02f      	b.n	8005aca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fbbf 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e03b      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a9c:	b292      	uxth	r2, r2
 8005a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e007      	b.n	8005ab8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1c9      	bne.n	8005a6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2140      	movs	r1, #64	@ 0x40
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fb89 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e005      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b10:	b08a      	sub	sp, #40	@ 0x28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4bb4      	ldr	r3, [pc, #720]	@ (8005e0c <UART_SetConfig+0x300>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4aa9      	ldr	r2, [pc, #676]	@ (8005e10 <UART_SetConfig+0x304>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b74:	4313      	orrs	r3, r2
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4aa0      	ldr	r2, [pc, #640]	@ (8005e14 <UART_SetConfig+0x308>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d126      	bne.n	8005be4 <UART_SetConfig+0xd8>
 8005b96:	4ba0      	ldr	r3, [pc, #640]	@ (8005e18 <UART_SetConfig+0x30c>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d81b      	bhi.n	8005bdc <UART_SetConfig+0xd0>
 8005ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <UART_SetConfig+0xa0>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bd5 	.word	0x08005bd5
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e080      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e07c      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd2:	e078      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bda:	e074      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005be2:	e070      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a8c      	ldr	r2, [pc, #560]	@ (8005e1c <UART_SetConfig+0x310>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d138      	bne.n	8005c60 <UART_SetConfig+0x154>
 8005bee:	4b8a      	ldr	r3, [pc, #552]	@ (8005e18 <UART_SetConfig+0x30c>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf4:	f003 030c 	and.w	r3, r3, #12
 8005bf8:	2b0c      	cmp	r3, #12
 8005bfa:	d82d      	bhi.n	8005c58 <UART_SetConfig+0x14c>
 8005bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <UART_SetConfig+0xf8>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c39 	.word	0x08005c39
 8005c08:	08005c59 	.word	0x08005c59
 8005c0c:	08005c59 	.word	0x08005c59
 8005c10:	08005c59 	.word	0x08005c59
 8005c14:	08005c49 	.word	0x08005c49
 8005c18:	08005c59 	.word	0x08005c59
 8005c1c:	08005c59 	.word	0x08005c59
 8005c20:	08005c59 	.word	0x08005c59
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	08005c59 	.word	0x08005c59
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3e:	e042      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005c40:	2302      	movs	r3, #2
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c46:	e03e      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4e:	e03a      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005c50:	2308      	movs	r3, #8
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c56:	e036      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c5e:	e032      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a6a      	ldr	r2, [pc, #424]	@ (8005e10 <UART_SetConfig+0x304>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d12a      	bne.n	8005cc0 <UART_SetConfig+0x1b4>
 8005c6a:	4b6b      	ldr	r3, [pc, #428]	@ (8005e18 <UART_SetConfig+0x30c>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c78:	d01a      	beq.n	8005cb0 <UART_SetConfig+0x1a4>
 8005c7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c7e:	d81b      	bhi.n	8005cb8 <UART_SetConfig+0x1ac>
 8005c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c84:	d00c      	beq.n	8005ca0 <UART_SetConfig+0x194>
 8005c86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c8a:	d815      	bhi.n	8005cb8 <UART_SetConfig+0x1ac>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <UART_SetConfig+0x18c>
 8005c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c94:	d008      	beq.n	8005ca8 <UART_SetConfig+0x19c>
 8005c96:	e00f      	b.n	8005cb8 <UART_SetConfig+0x1ac>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9e:	e012      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ca6:	e00e      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cae:	e00a      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cb6:	e006      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cbe:	e002      	b.n	8005cc6 <UART_SetConfig+0x1ba>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a51      	ldr	r2, [pc, #324]	@ (8005e10 <UART_SetConfig+0x304>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d17a      	bne.n	8005dc6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d824      	bhi.n	8005d22 <UART_SetConfig+0x216>
 8005cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce0 <UART_SetConfig+0x1d4>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d23 	.word	0x08005d23
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d23 	.word	0x08005d23
 8005cf0:	08005d13 	.word	0x08005d13
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	08005d23 	.word	0x08005d23
 8005cfc:	08005d23 	.word	0x08005d23
 8005d00:	08005d1b 	.word	0x08005d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fe ff82 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8005d08:	61f8      	str	r0, [r7, #28]
        break;
 8005d0a:	e010      	b.n	8005d2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d0c:	4b44      	ldr	r3, [pc, #272]	@ (8005e20 <UART_SetConfig+0x314>)
 8005d0e:	61fb      	str	r3, [r7, #28]
        break;
 8005d10:	e00d      	b.n	8005d2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fe fee3 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8005d16:	61f8      	str	r0, [r7, #28]
        break;
 8005d18:	e009      	b.n	8005d2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d1e:	61fb      	str	r3, [r7, #28]
        break;
 8005d20:	e005      	b.n	8005d2e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8107 	beq.w	8005f44 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d305      	bcc.n	8005d52 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d903      	bls.n	8005d5a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d58:	e0f4      	b.n	8005f44 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	461c      	mov	r4, r3
 8005d60:	4615      	mov	r5, r2
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	022b      	lsls	r3, r5, #8
 8005d6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d70:	0222      	lsls	r2, r4, #8
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	6849      	ldr	r1, [r1, #4]
 8005d76:	0849      	lsrs	r1, r1, #1
 8005d78:	2000      	movs	r0, #0
 8005d7a:	4688      	mov	r8, r1
 8005d7c:	4681      	mov	r9, r0
 8005d7e:	eb12 0a08 	adds.w	sl, r2, r8
 8005d82:	eb43 0b09 	adc.w	fp, r3, r9
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d94:	4650      	mov	r0, sl
 8005d96:	4659      	mov	r1, fp
 8005d98:	f7fa fd50 	bl	800083c <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4613      	mov	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005daa:	d308      	bcc.n	8005dbe <UART_SetConfig+0x2b2>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db2:	d204      	bcs.n	8005dbe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e0c2      	b.n	8005f44 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005dc4:	e0be      	b.n	8005f44 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dce:	d16a      	bne.n	8005ea6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d834      	bhi.n	8005e42 <UART_SetConfig+0x336>
 8005dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0x2d4>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e25 	.word	0x08005e25
 8005de8:	08005e2d 	.word	0x08005e2d
 8005dec:	08005e43 	.word	0x08005e43
 8005df0:	08005e33 	.word	0x08005e33
 8005df4:	08005e43 	.word	0x08005e43
 8005df8:	08005e43 	.word	0x08005e43
 8005dfc:	08005e43 	.word	0x08005e43
 8005e00:	08005e3b 	.word	0x08005e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e04:	f7fe ff02 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8005e08:	61f8      	str	r0, [r7, #28]
        break;
 8005e0a:	e020      	b.n	8005e4e <UART_SetConfig+0x342>
 8005e0c:	efff69f3 	.word	0xefff69f3
 8005e10:	40008000 	.word	0x40008000
 8005e14:	40013800 	.word	0x40013800
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40004400 	.word	0x40004400
 8005e20:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e24:	f7fe ff08 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 8005e28:	61f8      	str	r0, [r7, #28]
        break;
 8005e2a:	e010      	b.n	8005e4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e2c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f60 <UART_SetConfig+0x454>)
 8005e2e:	61fb      	str	r3, [r7, #28]
        break;
 8005e30:	e00d      	b.n	8005e4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e32:	f7fe fe53 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8005e36:	61f8      	str	r0, [r7, #28]
        break;
 8005e38:	e009      	b.n	8005e4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e3e:	61fb      	str	r3, [r7, #28]
        break;
 8005e40:	e005      	b.n	8005e4e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d077      	beq.n	8005f44 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005a      	lsls	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b0f      	cmp	r3, #15
 8005e6e:	d916      	bls.n	8005e9e <UART_SetConfig+0x392>
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e76:	d212      	bcs.n	8005e9e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f023 030f 	bic.w	r3, r3, #15
 8005e80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	8afb      	ldrh	r3, [r7, #22]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	8afa      	ldrh	r2, [r7, #22]
 8005e9a:	60da      	str	r2, [r3, #12]
 8005e9c:	e052      	b.n	8005f44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ea4:	e04e      	b.n	8005f44 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d827      	bhi.n	8005efe <UART_SetConfig+0x3f2>
 8005eae:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <UART_SetConfig+0x3a8>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	08005eff 	.word	0x08005eff
 8005ec4:	08005eef 	.word	0x08005eef
 8005ec8:	08005eff 	.word	0x08005eff
 8005ecc:	08005eff 	.word	0x08005eff
 8005ed0:	08005eff 	.word	0x08005eff
 8005ed4:	08005ef7 	.word	0x08005ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed8:	f7fe fe98 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8005edc:	61f8      	str	r0, [r7, #28]
        break;
 8005ede:	e014      	b.n	8005f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee0:	f7fe feaa 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 8005ee4:	61f8      	str	r0, [r7, #28]
        break;
 8005ee6:	e010      	b.n	8005f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f60 <UART_SetConfig+0x454>)
 8005eea:	61fb      	str	r3, [r7, #28]
        break;
 8005eec:	e00d      	b.n	8005f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fe fdf5 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8005ef2:	61f8      	str	r0, [r7, #28]
        break;
 8005ef4:	e009      	b.n	8005f0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005efa:	61fb      	str	r3, [r7, #28]
        break;
 8005efc:	e005      	b.n	8005f0a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f08:	bf00      	nop
    }

    if (pclk != 0U)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d019      	beq.n	8005f44 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	085a      	lsrs	r2, r3, #1
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	d909      	bls.n	8005f3e <UART_SetConfig+0x432>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f30:	d205      	bcs.n	8005f3e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	e002      	b.n	8005f44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3728      	adds	r7, #40	@ 0x28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f5e:	bf00      	nop
 8005f60:	00f42400 	.word	0x00f42400

08005f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	f003 0304 	and.w	r3, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01a      	beq.n	800607a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006062:	d10a      	bne.n	800607a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b098      	sub	sp, #96	@ 0x60
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060b8:	f7fb fef6 	bl	8001ea8 <HAL_GetTick>
 80060bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d12e      	bne.n	800612a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d4:	2200      	movs	r2, #0
 80060d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f88c 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d021      	beq.n	800612a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006104:	647b      	str	r3, [r7, #68]	@ 0x44
 8006106:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800610a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e6      	bne.n	80060e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e062      	b.n	80061f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b04      	cmp	r3, #4
 8006136:	d149      	bne.n	80061cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006138:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f856 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d03c      	beq.n	80061cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	623b      	str	r3, [r7, #32]
   return(result);
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30
 8006172:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e6      	bne.n	8006152 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3308      	adds	r3, #8
 800618a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	60fb      	str	r3, [r7, #12]
   return(result);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3308      	adds	r3, #8
 80061a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061a4:	61fa      	str	r2, [r7, #28]
 80061a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	69b9      	ldr	r1, [r7, #24]
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	617b      	str	r3, [r7, #20]
   return(result);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e5      	bne.n	8006184 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e011      	b.n	80061f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3758      	adds	r7, #88	@ 0x58
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006208:	e04f      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006210:	d04b      	beq.n	80062aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006212:	f7fb fe49 	bl	8001ea8 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	429a      	cmp	r2, r3
 8006220:	d302      	bcc.n	8006228 <UART_WaitOnFlagUntilTimeout+0x30>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e04e      	b.n	80062ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d037      	beq.n	80062aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b80      	cmp	r3, #128	@ 0x80
 800623e:	d034      	beq.n	80062aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b40      	cmp	r3, #64	@ 0x40
 8006244:	d031      	beq.n	80062aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b08      	cmp	r3, #8
 8006252:	d110      	bne.n	8006276 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2208      	movs	r2, #8
 800625a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f838 	bl	80062d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2208      	movs	r2, #8
 8006266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e029      	b.n	80062ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006284:	d111      	bne.n	80062aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800628e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f81e 	bl	80062d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e00f      	b.n	80062ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4013      	ands	r3, r2
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	bf0c      	ite	eq
 80062ba:	2301      	moveq	r3, #1
 80062bc:	2300      	movne	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	79fb      	ldrb	r3, [r7, #7]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d0a0      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b095      	sub	sp, #84	@ 0x54
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80062fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e6      	bne.n	80062da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	61fb      	str	r3, [r7, #28]
   return(result);
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800632c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800632e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006344:	2b01      	cmp	r3, #1
 8006346:	d118      	bne.n	800637a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	60bb      	str	r3, [r7, #8]
   return(result);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0310 	bic.w	r3, r3, #16
 800635c:	647b      	str	r3, [r7, #68]	@ 0x44
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	613b      	str	r3, [r7, #16]
   return(result);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e6      	bne.n	8006348 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800638e:	bf00      	nop
 8006390:	3754      	adds	r7, #84	@ 0x54
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e056      	b.n	8006460 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7fb fb2a 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2224      	movs	r2, #36	@ 0x24
 80063cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff fdbc 	bl	8005f64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff fb8d 	bl	8005b0c <UART_SetConfig>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e031      	b.n	8006460 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800640a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	430a      	orrs	r2, r1
 800641e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	055b      	lsls	r3, r3, #21
 8006424:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	041b      	lsls	r3, r3, #16
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800643a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	430b      	orrs	r3, r1
 8006446:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff fe25 	bl	80060a8 <UART_CheckIdleState>
 800645e:	4603      	mov	r3, r0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <std>:
 8006468:	2300      	movs	r3, #0
 800646a:	b510      	push	{r4, lr}
 800646c:	4604      	mov	r4, r0
 800646e:	e9c0 3300 	strd	r3, r3, [r0]
 8006472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006476:	6083      	str	r3, [r0, #8]
 8006478:	8181      	strh	r1, [r0, #12]
 800647a:	6643      	str	r3, [r0, #100]	@ 0x64
 800647c:	81c2      	strh	r2, [r0, #14]
 800647e:	6183      	str	r3, [r0, #24]
 8006480:	4619      	mov	r1, r3
 8006482:	2208      	movs	r2, #8
 8006484:	305c      	adds	r0, #92	@ 0x5c
 8006486:	f000 f8c3 	bl	8006610 <memset>
 800648a:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <std+0x58>)
 800648c:	6263      	str	r3, [r4, #36]	@ 0x24
 800648e:	4b0d      	ldr	r3, [pc, #52]	@ (80064c4 <std+0x5c>)
 8006490:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006492:	4b0d      	ldr	r3, [pc, #52]	@ (80064c8 <std+0x60>)
 8006494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006496:	4b0d      	ldr	r3, [pc, #52]	@ (80064cc <std+0x64>)
 8006498:	6323      	str	r3, [r4, #48]	@ 0x30
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <std+0x68>)
 800649c:	6224      	str	r4, [r4, #32]
 800649e:	429c      	cmp	r4, r3
 80064a0:	d006      	beq.n	80064b0 <std+0x48>
 80064a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064a6:	4294      	cmp	r4, r2
 80064a8:	d002      	beq.n	80064b0 <std+0x48>
 80064aa:	33d0      	adds	r3, #208	@ 0xd0
 80064ac:	429c      	cmp	r4, r3
 80064ae:	d105      	bne.n	80064bc <std+0x54>
 80064b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b8:	f000 b8dc 	b.w	8006674 <__retarget_lock_init_recursive>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	bf00      	nop
 80064c0:	08006ec9 	.word	0x08006ec9
 80064c4:	08006eeb 	.word	0x08006eeb
 80064c8:	08006f23 	.word	0x08006f23
 80064cc:	08006f47 	.word	0x08006f47
 80064d0:	20000398 	.word	0x20000398

080064d4 <stdio_exit_handler>:
 80064d4:	4a02      	ldr	r2, [pc, #8]	@ (80064e0 <stdio_exit_handler+0xc>)
 80064d6:	4903      	ldr	r1, [pc, #12]	@ (80064e4 <stdio_exit_handler+0x10>)
 80064d8:	4803      	ldr	r0, [pc, #12]	@ (80064e8 <stdio_exit_handler+0x14>)
 80064da:	f000 b869 	b.w	80065b0 <_fwalk_sglue>
 80064de:	bf00      	nop
 80064e0:	2000000c 	.word	0x2000000c
 80064e4:	08006e61 	.word	0x08006e61
 80064e8:	2000001c 	.word	0x2000001c

080064ec <cleanup_stdio>:
 80064ec:	6841      	ldr	r1, [r0, #4]
 80064ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006520 <cleanup_stdio+0x34>)
 80064f0:	4299      	cmp	r1, r3
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	d001      	beq.n	80064fc <cleanup_stdio+0x10>
 80064f8:	f000 fcb2 	bl	8006e60 <_fflush_r>
 80064fc:	68a1      	ldr	r1, [r4, #8]
 80064fe:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <cleanup_stdio+0x38>)
 8006500:	4299      	cmp	r1, r3
 8006502:	d002      	beq.n	800650a <cleanup_stdio+0x1e>
 8006504:	4620      	mov	r0, r4
 8006506:	f000 fcab 	bl	8006e60 <_fflush_r>
 800650a:	68e1      	ldr	r1, [r4, #12]
 800650c:	4b06      	ldr	r3, [pc, #24]	@ (8006528 <cleanup_stdio+0x3c>)
 800650e:	4299      	cmp	r1, r3
 8006510:	d004      	beq.n	800651c <cleanup_stdio+0x30>
 8006512:	4620      	mov	r0, r4
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006518:	f000 bca2 	b.w	8006e60 <_fflush_r>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	bf00      	nop
 8006520:	20000398 	.word	0x20000398
 8006524:	20000400 	.word	0x20000400
 8006528:	20000468 	.word	0x20000468

0800652c <global_stdio_init.part.0>:
 800652c:	b510      	push	{r4, lr}
 800652e:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <global_stdio_init.part.0+0x30>)
 8006530:	4c0b      	ldr	r4, [pc, #44]	@ (8006560 <global_stdio_init.part.0+0x34>)
 8006532:	4a0c      	ldr	r2, [pc, #48]	@ (8006564 <global_stdio_init.part.0+0x38>)
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	4620      	mov	r0, r4
 8006538:	2200      	movs	r2, #0
 800653a:	2104      	movs	r1, #4
 800653c:	f7ff ff94 	bl	8006468 <std>
 8006540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006544:	2201      	movs	r2, #1
 8006546:	2109      	movs	r1, #9
 8006548:	f7ff ff8e 	bl	8006468 <std>
 800654c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006550:	2202      	movs	r2, #2
 8006552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006556:	2112      	movs	r1, #18
 8006558:	f7ff bf86 	b.w	8006468 <std>
 800655c:	200004d0 	.word	0x200004d0
 8006560:	20000398 	.word	0x20000398
 8006564:	080064d5 	.word	0x080064d5

08006568 <__sfp_lock_acquire>:
 8006568:	4801      	ldr	r0, [pc, #4]	@ (8006570 <__sfp_lock_acquire+0x8>)
 800656a:	f000 b884 	b.w	8006676 <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	200004d5 	.word	0x200004d5

08006574 <__sfp_lock_release>:
 8006574:	4801      	ldr	r0, [pc, #4]	@ (800657c <__sfp_lock_release+0x8>)
 8006576:	f000 b87f 	b.w	8006678 <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	200004d5 	.word	0x200004d5

08006580 <__sinit>:
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
 8006584:	f7ff fff0 	bl	8006568 <__sfp_lock_acquire>
 8006588:	6a23      	ldr	r3, [r4, #32]
 800658a:	b11b      	cbz	r3, 8006594 <__sinit+0x14>
 800658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006590:	f7ff bff0 	b.w	8006574 <__sfp_lock_release>
 8006594:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <__sinit+0x28>)
 8006596:	6223      	str	r3, [r4, #32]
 8006598:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <__sinit+0x2c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f5      	bne.n	800658c <__sinit+0xc>
 80065a0:	f7ff ffc4 	bl	800652c <global_stdio_init.part.0>
 80065a4:	e7f2      	b.n	800658c <__sinit+0xc>
 80065a6:	bf00      	nop
 80065a8:	080064ed 	.word	0x080064ed
 80065ac:	200004d0 	.word	0x200004d0

080065b0 <_fwalk_sglue>:
 80065b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b4:	4607      	mov	r7, r0
 80065b6:	4688      	mov	r8, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	2600      	movs	r6, #0
 80065bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065c0:	f1b9 0901 	subs.w	r9, r9, #1
 80065c4:	d505      	bpl.n	80065d2 <_fwalk_sglue+0x22>
 80065c6:	6824      	ldr	r4, [r4, #0]
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	d1f7      	bne.n	80065bc <_fwalk_sglue+0xc>
 80065cc:	4630      	mov	r0, r6
 80065ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d907      	bls.n	80065e8 <_fwalk_sglue+0x38>
 80065d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065dc:	3301      	adds	r3, #1
 80065de:	d003      	beq.n	80065e8 <_fwalk_sglue+0x38>
 80065e0:	4629      	mov	r1, r5
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	4306      	orrs	r6, r0
 80065e8:	3568      	adds	r5, #104	@ 0x68
 80065ea:	e7e9      	b.n	80065c0 <_fwalk_sglue+0x10>

080065ec <iprintf>:
 80065ec:	b40f      	push	{r0, r1, r2, r3}
 80065ee:	b507      	push	{r0, r1, r2, lr}
 80065f0:	4906      	ldr	r1, [pc, #24]	@ (800660c <iprintf+0x20>)
 80065f2:	ab04      	add	r3, sp, #16
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fa:	6881      	ldr	r1, [r0, #8]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	f000 f865 	bl	80066cc <_vfiprintf_r>
 8006602:	b003      	add	sp, #12
 8006604:	f85d eb04 	ldr.w	lr, [sp], #4
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr
 800660c:	20000018 	.word	0x20000018

08006610 <memset>:
 8006610:	4402      	add	r2, r0
 8006612:	4603      	mov	r3, r0
 8006614:	4293      	cmp	r3, r2
 8006616:	d100      	bne.n	800661a <memset+0xa>
 8006618:	4770      	bx	lr
 800661a:	f803 1b01 	strb.w	r1, [r3], #1
 800661e:	e7f9      	b.n	8006614 <memset+0x4>

08006620 <__errno>:
 8006620:	4b01      	ldr	r3, [pc, #4]	@ (8006628 <__errno+0x8>)
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000018 	.word	0x20000018

0800662c <__libc_init_array>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	4d0d      	ldr	r5, [pc, #52]	@ (8006664 <__libc_init_array+0x38>)
 8006630:	4c0d      	ldr	r4, [pc, #52]	@ (8006668 <__libc_init_array+0x3c>)
 8006632:	1b64      	subs	r4, r4, r5
 8006634:	10a4      	asrs	r4, r4, #2
 8006636:	2600      	movs	r6, #0
 8006638:	42a6      	cmp	r6, r4
 800663a:	d109      	bne.n	8006650 <__libc_init_array+0x24>
 800663c:	4d0b      	ldr	r5, [pc, #44]	@ (800666c <__libc_init_array+0x40>)
 800663e:	4c0c      	ldr	r4, [pc, #48]	@ (8006670 <__libc_init_array+0x44>)
 8006640:	f000 fe3e 	bl	80072c0 <_init>
 8006644:	1b64      	subs	r4, r4, r5
 8006646:	10a4      	asrs	r4, r4, #2
 8006648:	2600      	movs	r6, #0
 800664a:	42a6      	cmp	r6, r4
 800664c:	d105      	bne.n	800665a <__libc_init_array+0x2e>
 800664e:	bd70      	pop	{r4, r5, r6, pc}
 8006650:	f855 3b04 	ldr.w	r3, [r5], #4
 8006654:	4798      	blx	r3
 8006656:	3601      	adds	r6, #1
 8006658:	e7ee      	b.n	8006638 <__libc_init_array+0xc>
 800665a:	f855 3b04 	ldr.w	r3, [r5], #4
 800665e:	4798      	blx	r3
 8006660:	3601      	adds	r6, #1
 8006662:	e7f2      	b.n	800664a <__libc_init_array+0x1e>
 8006664:	08007360 	.word	0x08007360
 8006668:	08007360 	.word	0x08007360
 800666c:	08007360 	.word	0x08007360
 8006670:	08007364 	.word	0x08007364

08006674 <__retarget_lock_init_recursive>:
 8006674:	4770      	bx	lr

08006676 <__retarget_lock_acquire_recursive>:
 8006676:	4770      	bx	lr

08006678 <__retarget_lock_release_recursive>:
 8006678:	4770      	bx	lr

0800667a <__sfputc_r>:
 800667a:	6893      	ldr	r3, [r2, #8]
 800667c:	3b01      	subs	r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	b410      	push	{r4}
 8006682:	6093      	str	r3, [r2, #8]
 8006684:	da08      	bge.n	8006698 <__sfputc_r+0x1e>
 8006686:	6994      	ldr	r4, [r2, #24]
 8006688:	42a3      	cmp	r3, r4
 800668a:	db01      	blt.n	8006690 <__sfputc_r+0x16>
 800668c:	290a      	cmp	r1, #10
 800668e:	d103      	bne.n	8006698 <__sfputc_r+0x1e>
 8006690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006694:	f000 bc5b 	b.w	8006f4e <__swbuf_r>
 8006698:	6813      	ldr	r3, [r2, #0]
 800669a:	1c58      	adds	r0, r3, #1
 800669c:	6010      	str	r0, [r2, #0]
 800669e:	7019      	strb	r1, [r3, #0]
 80066a0:	4608      	mov	r0, r1
 80066a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <__sfputs_r>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	4606      	mov	r6, r0
 80066ac:	460f      	mov	r7, r1
 80066ae:	4614      	mov	r4, r2
 80066b0:	18d5      	adds	r5, r2, r3
 80066b2:	42ac      	cmp	r4, r5
 80066b4:	d101      	bne.n	80066ba <__sfputs_r+0x12>
 80066b6:	2000      	movs	r0, #0
 80066b8:	e007      	b.n	80066ca <__sfputs_r+0x22>
 80066ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066be:	463a      	mov	r2, r7
 80066c0:	4630      	mov	r0, r6
 80066c2:	f7ff ffda 	bl	800667a <__sfputc_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d1f3      	bne.n	80066b2 <__sfputs_r+0xa>
 80066ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066cc <_vfiprintf_r>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	460d      	mov	r5, r1
 80066d2:	b09d      	sub	sp, #116	@ 0x74
 80066d4:	4614      	mov	r4, r2
 80066d6:	4698      	mov	r8, r3
 80066d8:	4606      	mov	r6, r0
 80066da:	b118      	cbz	r0, 80066e4 <_vfiprintf_r+0x18>
 80066dc:	6a03      	ldr	r3, [r0, #32]
 80066de:	b90b      	cbnz	r3, 80066e4 <_vfiprintf_r+0x18>
 80066e0:	f7ff ff4e 	bl	8006580 <__sinit>
 80066e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066e6:	07d9      	lsls	r1, r3, #31
 80066e8:	d405      	bmi.n	80066f6 <_vfiprintf_r+0x2a>
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	059a      	lsls	r2, r3, #22
 80066ee:	d402      	bmi.n	80066f6 <_vfiprintf_r+0x2a>
 80066f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066f2:	f7ff ffc0 	bl	8006676 <__retarget_lock_acquire_recursive>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	071b      	lsls	r3, r3, #28
 80066fa:	d501      	bpl.n	8006700 <_vfiprintf_r+0x34>
 80066fc:	692b      	ldr	r3, [r5, #16]
 80066fe:	b99b      	cbnz	r3, 8006728 <_vfiprintf_r+0x5c>
 8006700:	4629      	mov	r1, r5
 8006702:	4630      	mov	r0, r6
 8006704:	f000 fc62 	bl	8006fcc <__swsetup_r>
 8006708:	b170      	cbz	r0, 8006728 <_vfiprintf_r+0x5c>
 800670a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800670c:	07dc      	lsls	r4, r3, #31
 800670e:	d504      	bpl.n	800671a <_vfiprintf_r+0x4e>
 8006710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006714:	b01d      	add	sp, #116	@ 0x74
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	0598      	lsls	r0, r3, #22
 800671e:	d4f7      	bmi.n	8006710 <_vfiprintf_r+0x44>
 8006720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006722:	f7ff ffa9 	bl	8006678 <__retarget_lock_release_recursive>
 8006726:	e7f3      	b.n	8006710 <_vfiprintf_r+0x44>
 8006728:	2300      	movs	r3, #0
 800672a:	9309      	str	r3, [sp, #36]	@ 0x24
 800672c:	2320      	movs	r3, #32
 800672e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006732:	f8cd 800c 	str.w	r8, [sp, #12]
 8006736:	2330      	movs	r3, #48	@ 0x30
 8006738:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80068e8 <_vfiprintf_r+0x21c>
 800673c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006740:	f04f 0901 	mov.w	r9, #1
 8006744:	4623      	mov	r3, r4
 8006746:	469a      	mov	sl, r3
 8006748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800674c:	b10a      	cbz	r2, 8006752 <_vfiprintf_r+0x86>
 800674e:	2a25      	cmp	r2, #37	@ 0x25
 8006750:	d1f9      	bne.n	8006746 <_vfiprintf_r+0x7a>
 8006752:	ebba 0b04 	subs.w	fp, sl, r4
 8006756:	d00b      	beq.n	8006770 <_vfiprintf_r+0xa4>
 8006758:	465b      	mov	r3, fp
 800675a:	4622      	mov	r2, r4
 800675c:	4629      	mov	r1, r5
 800675e:	4630      	mov	r0, r6
 8006760:	f7ff ffa2 	bl	80066a8 <__sfputs_r>
 8006764:	3001      	adds	r0, #1
 8006766:	f000 80a7 	beq.w	80068b8 <_vfiprintf_r+0x1ec>
 800676a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800676c:	445a      	add	r2, fp
 800676e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006770:	f89a 3000 	ldrb.w	r3, [sl]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 809f 	beq.w	80068b8 <_vfiprintf_r+0x1ec>
 800677a:	2300      	movs	r3, #0
 800677c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006784:	f10a 0a01 	add.w	sl, sl, #1
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	9307      	str	r3, [sp, #28]
 800678c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006790:	931a      	str	r3, [sp, #104]	@ 0x68
 8006792:	4654      	mov	r4, sl
 8006794:	2205      	movs	r2, #5
 8006796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679a:	4853      	ldr	r0, [pc, #332]	@ (80068e8 <_vfiprintf_r+0x21c>)
 800679c:	f7f9 fd18 	bl	80001d0 <memchr>
 80067a0:	9a04      	ldr	r2, [sp, #16]
 80067a2:	b9d8      	cbnz	r0, 80067dc <_vfiprintf_r+0x110>
 80067a4:	06d1      	lsls	r1, r2, #27
 80067a6:	bf44      	itt	mi
 80067a8:	2320      	movmi	r3, #32
 80067aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067ae:	0713      	lsls	r3, r2, #28
 80067b0:	bf44      	itt	mi
 80067b2:	232b      	movmi	r3, #43	@ 0x2b
 80067b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067b8:	f89a 3000 	ldrb.w	r3, [sl]
 80067bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80067be:	d015      	beq.n	80067ec <_vfiprintf_r+0x120>
 80067c0:	9a07      	ldr	r2, [sp, #28]
 80067c2:	4654      	mov	r4, sl
 80067c4:	2000      	movs	r0, #0
 80067c6:	f04f 0c0a 	mov.w	ip, #10
 80067ca:	4621      	mov	r1, r4
 80067cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067d0:	3b30      	subs	r3, #48	@ 0x30
 80067d2:	2b09      	cmp	r3, #9
 80067d4:	d94b      	bls.n	800686e <_vfiprintf_r+0x1a2>
 80067d6:	b1b0      	cbz	r0, 8006806 <_vfiprintf_r+0x13a>
 80067d8:	9207      	str	r2, [sp, #28]
 80067da:	e014      	b.n	8006806 <_vfiprintf_r+0x13a>
 80067dc:	eba0 0308 	sub.w	r3, r0, r8
 80067e0:	fa09 f303 	lsl.w	r3, r9, r3
 80067e4:	4313      	orrs	r3, r2
 80067e6:	9304      	str	r3, [sp, #16]
 80067e8:	46a2      	mov	sl, r4
 80067ea:	e7d2      	b.n	8006792 <_vfiprintf_r+0xc6>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	1d19      	adds	r1, r3, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	9103      	str	r1, [sp, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bfbb      	ittet	lt
 80067f8:	425b      	neglt	r3, r3
 80067fa:	f042 0202 	orrlt.w	r2, r2, #2
 80067fe:	9307      	strge	r3, [sp, #28]
 8006800:	9307      	strlt	r3, [sp, #28]
 8006802:	bfb8      	it	lt
 8006804:	9204      	strlt	r2, [sp, #16]
 8006806:	7823      	ldrb	r3, [r4, #0]
 8006808:	2b2e      	cmp	r3, #46	@ 0x2e
 800680a:	d10a      	bne.n	8006822 <_vfiprintf_r+0x156>
 800680c:	7863      	ldrb	r3, [r4, #1]
 800680e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006810:	d132      	bne.n	8006878 <_vfiprintf_r+0x1ac>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	1d1a      	adds	r2, r3, #4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	9203      	str	r2, [sp, #12]
 800681a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800681e:	3402      	adds	r4, #2
 8006820:	9305      	str	r3, [sp, #20]
 8006822:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80068f8 <_vfiprintf_r+0x22c>
 8006826:	7821      	ldrb	r1, [r4, #0]
 8006828:	2203      	movs	r2, #3
 800682a:	4650      	mov	r0, sl
 800682c:	f7f9 fcd0 	bl	80001d0 <memchr>
 8006830:	b138      	cbz	r0, 8006842 <_vfiprintf_r+0x176>
 8006832:	9b04      	ldr	r3, [sp, #16]
 8006834:	eba0 000a 	sub.w	r0, r0, sl
 8006838:	2240      	movs	r2, #64	@ 0x40
 800683a:	4082      	lsls	r2, r0
 800683c:	4313      	orrs	r3, r2
 800683e:	3401      	adds	r4, #1
 8006840:	9304      	str	r3, [sp, #16]
 8006842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006846:	4829      	ldr	r0, [pc, #164]	@ (80068ec <_vfiprintf_r+0x220>)
 8006848:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800684c:	2206      	movs	r2, #6
 800684e:	f7f9 fcbf 	bl	80001d0 <memchr>
 8006852:	2800      	cmp	r0, #0
 8006854:	d03f      	beq.n	80068d6 <_vfiprintf_r+0x20a>
 8006856:	4b26      	ldr	r3, [pc, #152]	@ (80068f0 <_vfiprintf_r+0x224>)
 8006858:	bb1b      	cbnz	r3, 80068a2 <_vfiprintf_r+0x1d6>
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	3307      	adds	r3, #7
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	3308      	adds	r3, #8
 8006864:	9303      	str	r3, [sp, #12]
 8006866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006868:	443b      	add	r3, r7
 800686a:	9309      	str	r3, [sp, #36]	@ 0x24
 800686c:	e76a      	b.n	8006744 <_vfiprintf_r+0x78>
 800686e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006872:	460c      	mov	r4, r1
 8006874:	2001      	movs	r0, #1
 8006876:	e7a8      	b.n	80067ca <_vfiprintf_r+0xfe>
 8006878:	2300      	movs	r3, #0
 800687a:	3401      	adds	r4, #1
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	4619      	mov	r1, r3
 8006880:	f04f 0c0a 	mov.w	ip, #10
 8006884:	4620      	mov	r0, r4
 8006886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800688a:	3a30      	subs	r2, #48	@ 0x30
 800688c:	2a09      	cmp	r2, #9
 800688e:	d903      	bls.n	8006898 <_vfiprintf_r+0x1cc>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0c6      	beq.n	8006822 <_vfiprintf_r+0x156>
 8006894:	9105      	str	r1, [sp, #20]
 8006896:	e7c4      	b.n	8006822 <_vfiprintf_r+0x156>
 8006898:	fb0c 2101 	mla	r1, ip, r1, r2
 800689c:	4604      	mov	r4, r0
 800689e:	2301      	movs	r3, #1
 80068a0:	e7f0      	b.n	8006884 <_vfiprintf_r+0x1b8>
 80068a2:	ab03      	add	r3, sp, #12
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	462a      	mov	r2, r5
 80068a8:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <_vfiprintf_r+0x228>)
 80068aa:	a904      	add	r1, sp, #16
 80068ac:	4630      	mov	r0, r6
 80068ae:	f3af 8000 	nop.w
 80068b2:	4607      	mov	r7, r0
 80068b4:	1c78      	adds	r0, r7, #1
 80068b6:	d1d6      	bne.n	8006866 <_vfiprintf_r+0x19a>
 80068b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	d405      	bmi.n	80068ca <_vfiprintf_r+0x1fe>
 80068be:	89ab      	ldrh	r3, [r5, #12]
 80068c0:	059a      	lsls	r2, r3, #22
 80068c2:	d402      	bmi.n	80068ca <_vfiprintf_r+0x1fe>
 80068c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068c6:	f7ff fed7 	bl	8006678 <__retarget_lock_release_recursive>
 80068ca:	89ab      	ldrh	r3, [r5, #12]
 80068cc:	065b      	lsls	r3, r3, #25
 80068ce:	f53f af1f 	bmi.w	8006710 <_vfiprintf_r+0x44>
 80068d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068d4:	e71e      	b.n	8006714 <_vfiprintf_r+0x48>
 80068d6:	ab03      	add	r3, sp, #12
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	462a      	mov	r2, r5
 80068dc:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <_vfiprintf_r+0x228>)
 80068de:	a904      	add	r1, sp, #16
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 f91b 	bl	8006b1c <_printf_i>
 80068e6:	e7e4      	b.n	80068b2 <_vfiprintf_r+0x1e6>
 80068e8:	08007324 	.word	0x08007324
 80068ec:	0800732e 	.word	0x0800732e
 80068f0:	00000000 	.word	0x00000000
 80068f4:	080066a9 	.word	0x080066a9
 80068f8:	0800732a 	.word	0x0800732a

080068fc <sbrk_aligned>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	4e0f      	ldr	r6, [pc, #60]	@ (800693c <sbrk_aligned+0x40>)
 8006900:	460c      	mov	r4, r1
 8006902:	6831      	ldr	r1, [r6, #0]
 8006904:	4605      	mov	r5, r0
 8006906:	b911      	cbnz	r1, 800690e <sbrk_aligned+0x12>
 8006908:	f000 fc4c 	bl	80071a4 <_sbrk_r>
 800690c:	6030      	str	r0, [r6, #0]
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f000 fc47 	bl	80071a4 <_sbrk_r>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d103      	bne.n	8006922 <sbrk_aligned+0x26>
 800691a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800691e:	4620      	mov	r0, r4
 8006920:	bd70      	pop	{r4, r5, r6, pc}
 8006922:	1cc4      	adds	r4, r0, #3
 8006924:	f024 0403 	bic.w	r4, r4, #3
 8006928:	42a0      	cmp	r0, r4
 800692a:	d0f8      	beq.n	800691e <sbrk_aligned+0x22>
 800692c:	1a21      	subs	r1, r4, r0
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fc38 	bl	80071a4 <_sbrk_r>
 8006934:	3001      	adds	r0, #1
 8006936:	d1f2      	bne.n	800691e <sbrk_aligned+0x22>
 8006938:	e7ef      	b.n	800691a <sbrk_aligned+0x1e>
 800693a:	bf00      	nop
 800693c:	200004d8 	.word	0x200004d8

08006940 <_malloc_r>:
 8006940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006944:	1ccd      	adds	r5, r1, #3
 8006946:	f025 0503 	bic.w	r5, r5, #3
 800694a:	3508      	adds	r5, #8
 800694c:	2d0c      	cmp	r5, #12
 800694e:	bf38      	it	cc
 8006950:	250c      	movcc	r5, #12
 8006952:	2d00      	cmp	r5, #0
 8006954:	4606      	mov	r6, r0
 8006956:	db01      	blt.n	800695c <_malloc_r+0x1c>
 8006958:	42a9      	cmp	r1, r5
 800695a:	d904      	bls.n	8006966 <_malloc_r+0x26>
 800695c:	230c      	movs	r3, #12
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	2000      	movs	r0, #0
 8006962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a3c <_malloc_r+0xfc>
 800696a:	f000 faa1 	bl	8006eb0 <__malloc_lock>
 800696e:	f8d8 3000 	ldr.w	r3, [r8]
 8006972:	461c      	mov	r4, r3
 8006974:	bb44      	cbnz	r4, 80069c8 <_malloc_r+0x88>
 8006976:	4629      	mov	r1, r5
 8006978:	4630      	mov	r0, r6
 800697a:	f7ff ffbf 	bl	80068fc <sbrk_aligned>
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	4604      	mov	r4, r0
 8006982:	d158      	bne.n	8006a36 <_malloc_r+0xf6>
 8006984:	f8d8 4000 	ldr.w	r4, [r8]
 8006988:	4627      	mov	r7, r4
 800698a:	2f00      	cmp	r7, #0
 800698c:	d143      	bne.n	8006a16 <_malloc_r+0xd6>
 800698e:	2c00      	cmp	r4, #0
 8006990:	d04b      	beq.n	8006a2a <_malloc_r+0xea>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	4639      	mov	r1, r7
 8006996:	4630      	mov	r0, r6
 8006998:	eb04 0903 	add.w	r9, r4, r3
 800699c:	f000 fc02 	bl	80071a4 <_sbrk_r>
 80069a0:	4581      	cmp	r9, r0
 80069a2:	d142      	bne.n	8006a2a <_malloc_r+0xea>
 80069a4:	6821      	ldr	r1, [r4, #0]
 80069a6:	1a6d      	subs	r5, r5, r1
 80069a8:	4629      	mov	r1, r5
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7ff ffa6 	bl	80068fc <sbrk_aligned>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d03a      	beq.n	8006a2a <_malloc_r+0xea>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	442b      	add	r3, r5
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	f8d8 3000 	ldr.w	r3, [r8]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	bb62      	cbnz	r2, 8006a1c <_malloc_r+0xdc>
 80069c2:	f8c8 7000 	str.w	r7, [r8]
 80069c6:	e00f      	b.n	80069e8 <_malloc_r+0xa8>
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	1b52      	subs	r2, r2, r5
 80069cc:	d420      	bmi.n	8006a10 <_malloc_r+0xd0>
 80069ce:	2a0b      	cmp	r2, #11
 80069d0:	d917      	bls.n	8006a02 <_malloc_r+0xc2>
 80069d2:	1961      	adds	r1, r4, r5
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	6025      	str	r5, [r4, #0]
 80069d8:	bf18      	it	ne
 80069da:	6059      	strne	r1, [r3, #4]
 80069dc:	6863      	ldr	r3, [r4, #4]
 80069de:	bf08      	it	eq
 80069e0:	f8c8 1000 	streq.w	r1, [r8]
 80069e4:	5162      	str	r2, [r4, r5]
 80069e6:	604b      	str	r3, [r1, #4]
 80069e8:	4630      	mov	r0, r6
 80069ea:	f000 fa67 	bl	8006ebc <__malloc_unlock>
 80069ee:	f104 000b 	add.w	r0, r4, #11
 80069f2:	1d23      	adds	r3, r4, #4
 80069f4:	f020 0007 	bic.w	r0, r0, #7
 80069f8:	1ac2      	subs	r2, r0, r3
 80069fa:	bf1c      	itt	ne
 80069fc:	1a1b      	subne	r3, r3, r0
 80069fe:	50a3      	strne	r3, [r4, r2]
 8006a00:	e7af      	b.n	8006962 <_malloc_r+0x22>
 8006a02:	6862      	ldr	r2, [r4, #4]
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	bf0c      	ite	eq
 8006a08:	f8c8 2000 	streq.w	r2, [r8]
 8006a0c:	605a      	strne	r2, [r3, #4]
 8006a0e:	e7eb      	b.n	80069e8 <_malloc_r+0xa8>
 8006a10:	4623      	mov	r3, r4
 8006a12:	6864      	ldr	r4, [r4, #4]
 8006a14:	e7ae      	b.n	8006974 <_malloc_r+0x34>
 8006a16:	463c      	mov	r4, r7
 8006a18:	687f      	ldr	r7, [r7, #4]
 8006a1a:	e7b6      	b.n	800698a <_malloc_r+0x4a>
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	d1fb      	bne.n	8006a1c <_malloc_r+0xdc>
 8006a24:	2300      	movs	r3, #0
 8006a26:	6053      	str	r3, [r2, #4]
 8006a28:	e7de      	b.n	80069e8 <_malloc_r+0xa8>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f000 fa44 	bl	8006ebc <__malloc_unlock>
 8006a34:	e794      	b.n	8006960 <_malloc_r+0x20>
 8006a36:	6005      	str	r5, [r0, #0]
 8006a38:	e7d6      	b.n	80069e8 <_malloc_r+0xa8>
 8006a3a:	bf00      	nop
 8006a3c:	200004dc 	.word	0x200004dc

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4698      	mov	r8, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfb8      	it	lt
 8006a54:	4613      	movlt	r3, r2
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc26      	bgt.n	8006ad6 <_printf_common+0x96>
 8006a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	3b00      	subs	r3, #0
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d42b      	bmi.n	8006af0 <_printf_common+0xb0>
 8006a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c8      	blx	r9
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d01e      	beq.n	8006ae4 <_printf_common+0xa4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	f003 0306 	and.w	r3, r3, #6
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	bf02      	ittt	eq
 8006ab2:	68e5      	ldreq	r5, [r4, #12]
 8006ab4:	6833      	ldreq	r3, [r6, #0]
 8006ab6:	1aed      	subeq	r5, r5, r3
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	bf0c      	ite	eq
 8006abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac0:	2500      	movne	r5, #0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bfc4      	itt	gt
 8006ac6:	1a9b      	subgt	r3, r3, r2
 8006ac8:	18ed      	addgt	r5, r5, r3
 8006aca:	2600      	movs	r6, #0
 8006acc:	341a      	adds	r4, #26
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	d11a      	bne.n	8006b08 <_printf_common+0xc8>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e008      	b.n	8006ae8 <_printf_common+0xa8>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4641      	mov	r1, r8
 8006adc:	4638      	mov	r0, r7
 8006ade:	47c8      	blx	r9
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d103      	bne.n	8006aec <_printf_common+0xac>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7c6      	b.n	8006a7e <_printf_common+0x3e>
 8006af0:	18e1      	adds	r1, r4, r3
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	2030      	movs	r0, #48	@ 0x30
 8006af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006afa:	4422      	add	r2, r4
 8006afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b04:	3302      	adds	r3, #2
 8006b06:	e7c7      	b.n	8006a98 <_printf_common+0x58>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c8      	blx	r9
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa4>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d9      	b.n	8006ace <_printf_common+0x8e>
	...

08006b1c <_printf_i>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	7e0f      	ldrb	r7, [r1, #24]
 8006b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b24:	2f78      	cmp	r7, #120	@ 0x78
 8006b26:	4691      	mov	r9, r2
 8006b28:	4680      	mov	r8, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b32:	d807      	bhi.n	8006b44 <_printf_i+0x28>
 8006b34:	2f62      	cmp	r7, #98	@ 0x62
 8006b36:	d80a      	bhi.n	8006b4e <_printf_i+0x32>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	f000 80d1 	beq.w	8006ce0 <_printf_i+0x1c4>
 8006b3e:	2f58      	cmp	r7, #88	@ 0x58
 8006b40:	f000 80b8 	beq.w	8006cb4 <_printf_i+0x198>
 8006b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b4c:	e03a      	b.n	8006bc4 <_printf_i+0xa8>
 8006b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b52:	2b15      	cmp	r3, #21
 8006b54:	d8f6      	bhi.n	8006b44 <_printf_i+0x28>
 8006b56:	a101      	add	r1, pc, #4	@ (adr r1, 8006b5c <_printf_i+0x40>)
 8006b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006b45 	.word	0x08006b45
 8006b68:	08006b45 	.word	0x08006b45
 8006b6c:	08006b45 	.word	0x08006b45
 8006b70:	08006b45 	.word	0x08006b45
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b45 	.word	0x08006b45
 8006b7c:	08006b45 	.word	0x08006b45
 8006b80:	08006b45 	.word	0x08006b45
 8006b84:	08006b45 	.word	0x08006b45
 8006b88:	08006cc7 	.word	0x08006cc7
 8006b8c:	08006bf3 	.word	0x08006bf3
 8006b90:	08006c81 	.word	0x08006c81
 8006b94:	08006b45 	.word	0x08006b45
 8006b98:	08006b45 	.word	0x08006b45
 8006b9c:	08006ce9 	.word	0x08006ce9
 8006ba0:	08006b45 	.word	0x08006b45
 8006ba4:	08006bf3 	.word	0x08006bf3
 8006ba8:	08006b45 	.word	0x08006b45
 8006bac:	08006b45 	.word	0x08006b45
 8006bb0:	08006c89 	.word	0x08006c89
 8006bb4:	6833      	ldr	r3, [r6, #0]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6032      	str	r2, [r6, #0]
 8006bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e09c      	b.n	8006d02 <_printf_i+0x1e6>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	1d19      	adds	r1, r3, #4
 8006bce:	6031      	str	r1, [r6, #0]
 8006bd0:	0606      	lsls	r6, r0, #24
 8006bd2:	d501      	bpl.n	8006bd8 <_printf_i+0xbc>
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	e003      	b.n	8006be0 <_printf_i+0xc4>
 8006bd8:	0645      	lsls	r5, r0, #25
 8006bda:	d5fb      	bpl.n	8006bd4 <_printf_i+0xb8>
 8006bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	da03      	bge.n	8006bec <_printf_i+0xd0>
 8006be4:	232d      	movs	r3, #45	@ 0x2d
 8006be6:	426d      	negs	r5, r5
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bec:	4858      	ldr	r0, [pc, #352]	@ (8006d50 <_printf_i+0x234>)
 8006bee:	230a      	movs	r3, #10
 8006bf0:	e011      	b.n	8006c16 <_printf_i+0xfa>
 8006bf2:	6821      	ldr	r1, [r4, #0]
 8006bf4:	6833      	ldr	r3, [r6, #0]
 8006bf6:	0608      	lsls	r0, r1, #24
 8006bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bfc:	d402      	bmi.n	8006c04 <_printf_i+0xe8>
 8006bfe:	0649      	lsls	r1, r1, #25
 8006c00:	bf48      	it	mi
 8006c02:	b2ad      	uxthmi	r5, r5
 8006c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c06:	4852      	ldr	r0, [pc, #328]	@ (8006d50 <_printf_i+0x234>)
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	bf14      	ite	ne
 8006c0c:	230a      	movne	r3, #10
 8006c0e:	2308      	moveq	r3, #8
 8006c10:	2100      	movs	r1, #0
 8006c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c16:	6866      	ldr	r6, [r4, #4]
 8006c18:	60a6      	str	r6, [r4, #8]
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	db05      	blt.n	8006c2a <_printf_i+0x10e>
 8006c1e:	6821      	ldr	r1, [r4, #0]
 8006c20:	432e      	orrs	r6, r5
 8006c22:	f021 0104 	bic.w	r1, r1, #4
 8006c26:	6021      	str	r1, [r4, #0]
 8006c28:	d04b      	beq.n	8006cc2 <_printf_i+0x1a6>
 8006c2a:	4616      	mov	r6, r2
 8006c2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c30:	fb03 5711 	mls	r7, r3, r1, r5
 8006c34:	5dc7      	ldrb	r7, [r0, r7]
 8006c36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c3a:	462f      	mov	r7, r5
 8006c3c:	42bb      	cmp	r3, r7
 8006c3e:	460d      	mov	r5, r1
 8006c40:	d9f4      	bls.n	8006c2c <_printf_i+0x110>
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d10b      	bne.n	8006c5e <_printf_i+0x142>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	07df      	lsls	r7, r3, #31
 8006c4a:	d508      	bpl.n	8006c5e <_printf_i+0x142>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	6861      	ldr	r1, [r4, #4]
 8006c50:	4299      	cmp	r1, r3
 8006c52:	bfde      	ittt	le
 8006c54:	2330      	movle	r3, #48	@ 0x30
 8006c56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c5a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006c5e:	1b92      	subs	r2, r2, r6
 8006c60:	6122      	str	r2, [r4, #16]
 8006c62:	f8cd a000 	str.w	sl, [sp]
 8006c66:	464b      	mov	r3, r9
 8006c68:	aa03      	add	r2, sp, #12
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	f7ff fee7 	bl	8006a40 <_printf_common>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d14a      	bne.n	8006d0c <_printf_i+0x1f0>
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c7a:	b004      	add	sp, #16
 8006c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	f043 0320 	orr.w	r3, r3, #32
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	4832      	ldr	r0, [pc, #200]	@ (8006d54 <_printf_i+0x238>)
 8006c8a:	2778      	movs	r7, #120	@ 0x78
 8006c8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	6831      	ldr	r1, [r6, #0]
 8006c94:	061f      	lsls	r7, r3, #24
 8006c96:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c9a:	d402      	bmi.n	8006ca2 <_printf_i+0x186>
 8006c9c:	065f      	lsls	r7, r3, #25
 8006c9e:	bf48      	it	mi
 8006ca0:	b2ad      	uxthmi	r5, r5
 8006ca2:	6031      	str	r1, [r6, #0]
 8006ca4:	07d9      	lsls	r1, r3, #31
 8006ca6:	bf44      	itt	mi
 8006ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cac:	6023      	strmi	r3, [r4, #0]
 8006cae:	b11d      	cbz	r5, 8006cb8 <_printf_i+0x19c>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	e7ad      	b.n	8006c10 <_printf_i+0xf4>
 8006cb4:	4826      	ldr	r0, [pc, #152]	@ (8006d50 <_printf_i+0x234>)
 8006cb6:	e7e9      	b.n	8006c8c <_printf_i+0x170>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	f023 0320 	bic.w	r3, r3, #32
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	e7f6      	b.n	8006cb0 <_printf_i+0x194>
 8006cc2:	4616      	mov	r6, r2
 8006cc4:	e7bd      	b.n	8006c42 <_printf_i+0x126>
 8006cc6:	6833      	ldr	r3, [r6, #0]
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	6961      	ldr	r1, [r4, #20]
 8006ccc:	1d18      	adds	r0, r3, #4
 8006cce:	6030      	str	r0, [r6, #0]
 8006cd0:	062e      	lsls	r6, r5, #24
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	d501      	bpl.n	8006cda <_printf_i+0x1be>
 8006cd6:	6019      	str	r1, [r3, #0]
 8006cd8:	e002      	b.n	8006ce0 <_printf_i+0x1c4>
 8006cda:	0668      	lsls	r0, r5, #25
 8006cdc:	d5fb      	bpl.n	8006cd6 <_printf_i+0x1ba>
 8006cde:	8019      	strh	r1, [r3, #0]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6123      	str	r3, [r4, #16]
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	e7bc      	b.n	8006c62 <_printf_i+0x146>
 8006ce8:	6833      	ldr	r3, [r6, #0]
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	6032      	str	r2, [r6, #0]
 8006cee:	681e      	ldr	r6, [r3, #0]
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7f9 fa6b 	bl	80001d0 <memchr>
 8006cfa:	b108      	cbz	r0, 8006d00 <_printf_i+0x1e4>
 8006cfc:	1b80      	subs	r0, r0, r6
 8006cfe:	6060      	str	r0, [r4, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2300      	movs	r3, #0
 8006d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d0a:	e7aa      	b.n	8006c62 <_printf_i+0x146>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	4632      	mov	r2, r6
 8006d10:	4649      	mov	r1, r9
 8006d12:	4640      	mov	r0, r8
 8006d14:	47d0      	blx	sl
 8006d16:	3001      	adds	r0, #1
 8006d18:	d0ad      	beq.n	8006c76 <_printf_i+0x15a>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	079b      	lsls	r3, r3, #30
 8006d1e:	d413      	bmi.n	8006d48 <_printf_i+0x22c>
 8006d20:	68e0      	ldr	r0, [r4, #12]
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	4298      	cmp	r0, r3
 8006d26:	bfb8      	it	lt
 8006d28:	4618      	movlt	r0, r3
 8006d2a:	e7a6      	b.n	8006c7a <_printf_i+0x15e>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4632      	mov	r2, r6
 8006d30:	4649      	mov	r1, r9
 8006d32:	4640      	mov	r0, r8
 8006d34:	47d0      	blx	sl
 8006d36:	3001      	adds	r0, #1
 8006d38:	d09d      	beq.n	8006c76 <_printf_i+0x15a>
 8006d3a:	3501      	adds	r5, #1
 8006d3c:	68e3      	ldr	r3, [r4, #12]
 8006d3e:	9903      	ldr	r1, [sp, #12]
 8006d40:	1a5b      	subs	r3, r3, r1
 8006d42:	42ab      	cmp	r3, r5
 8006d44:	dcf2      	bgt.n	8006d2c <_printf_i+0x210>
 8006d46:	e7eb      	b.n	8006d20 <_printf_i+0x204>
 8006d48:	2500      	movs	r5, #0
 8006d4a:	f104 0619 	add.w	r6, r4, #25
 8006d4e:	e7f5      	b.n	8006d3c <_printf_i+0x220>
 8006d50:	08007335 	.word	0x08007335
 8006d54:	08007346 	.word	0x08007346

08006d58 <__sflush_r>:
 8006d58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d60:	0716      	lsls	r6, r2, #28
 8006d62:	4605      	mov	r5, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	d454      	bmi.n	8006e12 <__sflush_r+0xba>
 8006d68:	684b      	ldr	r3, [r1, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dc02      	bgt.n	8006d74 <__sflush_r+0x1c>
 8006d6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dd48      	ble.n	8006e06 <__sflush_r+0xae>
 8006d74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d045      	beq.n	8006e06 <__sflush_r+0xae>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d80:	682f      	ldr	r7, [r5, #0]
 8006d82:	6a21      	ldr	r1, [r4, #32]
 8006d84:	602b      	str	r3, [r5, #0]
 8006d86:	d030      	beq.n	8006dea <__sflush_r+0x92>
 8006d88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	0759      	lsls	r1, r3, #29
 8006d8e:	d505      	bpl.n	8006d9c <__sflush_r+0x44>
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d96:	b10b      	cbz	r3, 8006d9c <__sflush_r+0x44>
 8006d98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006da0:	6a21      	ldr	r1, [r4, #32]
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b0      	blx	r6
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	d106      	bne.n	8006dba <__sflush_r+0x62>
 8006dac:	6829      	ldr	r1, [r5, #0]
 8006dae:	291d      	cmp	r1, #29
 8006db0:	d82b      	bhi.n	8006e0a <__sflush_r+0xb2>
 8006db2:	4a2a      	ldr	r2, [pc, #168]	@ (8006e5c <__sflush_r+0x104>)
 8006db4:	40ca      	lsrs	r2, r1
 8006db6:	07d6      	lsls	r6, r2, #31
 8006db8:	d527      	bpl.n	8006e0a <__sflush_r+0xb2>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	6062      	str	r2, [r4, #4]
 8006dbe:	04d9      	lsls	r1, r3, #19
 8006dc0:	6922      	ldr	r2, [r4, #16]
 8006dc2:	6022      	str	r2, [r4, #0]
 8006dc4:	d504      	bpl.n	8006dd0 <__sflush_r+0x78>
 8006dc6:	1c42      	adds	r2, r0, #1
 8006dc8:	d101      	bne.n	8006dce <__sflush_r+0x76>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	b903      	cbnz	r3, 8006dd0 <__sflush_r+0x78>
 8006dce:	6560      	str	r0, [r4, #84]	@ 0x54
 8006dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dd2:	602f      	str	r7, [r5, #0]
 8006dd4:	b1b9      	cbz	r1, 8006e06 <__sflush_r+0xae>
 8006dd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	d002      	beq.n	8006de4 <__sflush_r+0x8c>
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 fa24 	bl	800722c <_free_r>
 8006de4:	2300      	movs	r3, #0
 8006de6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006de8:	e00d      	b.n	8006e06 <__sflush_r+0xae>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b0      	blx	r6
 8006df0:	4602      	mov	r2, r0
 8006df2:	1c50      	adds	r0, r2, #1
 8006df4:	d1c9      	bne.n	8006d8a <__sflush_r+0x32>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0c6      	beq.n	8006d8a <__sflush_r+0x32>
 8006dfc:	2b1d      	cmp	r3, #29
 8006dfe:	d001      	beq.n	8006e04 <__sflush_r+0xac>
 8006e00:	2b16      	cmp	r3, #22
 8006e02:	d11e      	bne.n	8006e42 <__sflush_r+0xea>
 8006e04:	602f      	str	r7, [r5, #0]
 8006e06:	2000      	movs	r0, #0
 8006e08:	e022      	b.n	8006e50 <__sflush_r+0xf8>
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e0e:	b21b      	sxth	r3, r3
 8006e10:	e01b      	b.n	8006e4a <__sflush_r+0xf2>
 8006e12:	690f      	ldr	r7, [r1, #16]
 8006e14:	2f00      	cmp	r7, #0
 8006e16:	d0f6      	beq.n	8006e06 <__sflush_r+0xae>
 8006e18:	0793      	lsls	r3, r2, #30
 8006e1a:	680e      	ldr	r6, [r1, #0]
 8006e1c:	bf08      	it	eq
 8006e1e:	694b      	ldreq	r3, [r1, #20]
 8006e20:	600f      	str	r7, [r1, #0]
 8006e22:	bf18      	it	ne
 8006e24:	2300      	movne	r3, #0
 8006e26:	eba6 0807 	sub.w	r8, r6, r7
 8006e2a:	608b      	str	r3, [r1, #8]
 8006e2c:	f1b8 0f00 	cmp.w	r8, #0
 8006e30:	dde9      	ble.n	8006e06 <__sflush_r+0xae>
 8006e32:	6a21      	ldr	r1, [r4, #32]
 8006e34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e36:	4643      	mov	r3, r8
 8006e38:	463a      	mov	r2, r7
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b0      	blx	r6
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	dc08      	bgt.n	8006e54 <__sflush_r+0xfc>
 8006e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e54:	4407      	add	r7, r0
 8006e56:	eba8 0800 	sub.w	r8, r8, r0
 8006e5a:	e7e7      	b.n	8006e2c <__sflush_r+0xd4>
 8006e5c:	20400001 	.word	0x20400001

08006e60 <_fflush_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	690b      	ldr	r3, [r1, #16]
 8006e64:	4605      	mov	r5, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	b913      	cbnz	r3, 8006e70 <_fflush_r+0x10>
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	b118      	cbz	r0, 8006e7a <_fflush_r+0x1a>
 8006e72:	6a03      	ldr	r3, [r0, #32]
 8006e74:	b90b      	cbnz	r3, 8006e7a <_fflush_r+0x1a>
 8006e76:	f7ff fb83 	bl	8006580 <__sinit>
 8006e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f3      	beq.n	8006e6a <_fflush_r+0xa>
 8006e82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e84:	07d0      	lsls	r0, r2, #31
 8006e86:	d404      	bmi.n	8006e92 <_fflush_r+0x32>
 8006e88:	0599      	lsls	r1, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <_fflush_r+0x32>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e8e:	f7ff fbf2 	bl	8006676 <__retarget_lock_acquire_recursive>
 8006e92:	4628      	mov	r0, r5
 8006e94:	4621      	mov	r1, r4
 8006e96:	f7ff ff5f 	bl	8006d58 <__sflush_r>
 8006e9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e9c:	07da      	lsls	r2, r3, #31
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	d4e4      	bmi.n	8006e6c <_fflush_r+0xc>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	059b      	lsls	r3, r3, #22
 8006ea6:	d4e1      	bmi.n	8006e6c <_fflush_r+0xc>
 8006ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eaa:	f7ff fbe5 	bl	8006678 <__retarget_lock_release_recursive>
 8006eae:	e7dd      	b.n	8006e6c <_fflush_r+0xc>

08006eb0 <__malloc_lock>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	@ (8006eb8 <__malloc_lock+0x8>)
 8006eb2:	f7ff bbe0 	b.w	8006676 <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	200004d4 	.word	0x200004d4

08006ebc <__malloc_unlock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	@ (8006ec4 <__malloc_unlock+0x8>)
 8006ebe:	f7ff bbdb 	b.w	8006678 <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	200004d4 	.word	0x200004d4

08006ec8 <__sread>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	460c      	mov	r4, r1
 8006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed0:	f000 f956 	bl	8007180 <_read_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	bfab      	itete	ge
 8006ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eda:	89a3      	ldrhlt	r3, [r4, #12]
 8006edc:	181b      	addge	r3, r3, r0
 8006ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ee2:	bfac      	ite	ge
 8006ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ee6:	81a3      	strhlt	r3, [r4, #12]
 8006ee8:	bd10      	pop	{r4, pc}

08006eea <__swrite>:
 8006eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eee:	461f      	mov	r7, r3
 8006ef0:	898b      	ldrh	r3, [r1, #12]
 8006ef2:	05db      	lsls	r3, r3, #23
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	4616      	mov	r6, r2
 8006efa:	d505      	bpl.n	8006f08 <__swrite+0x1e>
 8006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f00:	2302      	movs	r3, #2
 8006f02:	2200      	movs	r2, #0
 8006f04:	f000 f92a 	bl	800715c <_lseek_r>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	4628      	mov	r0, r5
 8006f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	f000 b951 	b.w	80071c4 <_write_r>

08006f22 <__sseek>:
 8006f22:	b510      	push	{r4, lr}
 8006f24:	460c      	mov	r4, r1
 8006f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2a:	f000 f917 	bl	800715c <_lseek_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	bf15      	itete	ne
 8006f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f3e:	81a3      	strheq	r3, [r4, #12]
 8006f40:	bf18      	it	ne
 8006f42:	81a3      	strhne	r3, [r4, #12]
 8006f44:	bd10      	pop	{r4, pc}

08006f46 <__sclose>:
 8006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4a:	f000 b94d 	b.w	80071e8 <_close_r>

08006f4e <__swbuf_r>:
 8006f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f50:	460e      	mov	r6, r1
 8006f52:	4614      	mov	r4, r2
 8006f54:	4605      	mov	r5, r0
 8006f56:	b118      	cbz	r0, 8006f60 <__swbuf_r+0x12>
 8006f58:	6a03      	ldr	r3, [r0, #32]
 8006f5a:	b90b      	cbnz	r3, 8006f60 <__swbuf_r+0x12>
 8006f5c:	f7ff fb10 	bl	8006580 <__sinit>
 8006f60:	69a3      	ldr	r3, [r4, #24]
 8006f62:	60a3      	str	r3, [r4, #8]
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	071a      	lsls	r2, r3, #28
 8006f68:	d501      	bpl.n	8006f6e <__swbuf_r+0x20>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	b943      	cbnz	r3, 8006f80 <__swbuf_r+0x32>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 f82b 	bl	8006fcc <__swsetup_r>
 8006f76:	b118      	cbz	r0, 8006f80 <__swbuf_r+0x32>
 8006f78:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	6922      	ldr	r2, [r4, #16]
 8006f84:	1a98      	subs	r0, r3, r2
 8006f86:	6963      	ldr	r3, [r4, #20]
 8006f88:	b2f6      	uxtb	r6, r6
 8006f8a:	4283      	cmp	r3, r0
 8006f8c:	4637      	mov	r7, r6
 8006f8e:	dc05      	bgt.n	8006f9c <__swbuf_r+0x4e>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7ff ff64 	bl	8006e60 <_fflush_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d1ed      	bne.n	8006f78 <__swbuf_r+0x2a>
 8006f9c:	68a3      	ldr	r3, [r4, #8]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	60a3      	str	r3, [r4, #8]
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	6022      	str	r2, [r4, #0]
 8006fa8:	701e      	strb	r6, [r3, #0]
 8006faa:	6962      	ldr	r2, [r4, #20]
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d004      	beq.n	8006fbc <__swbuf_r+0x6e>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	07db      	lsls	r3, r3, #31
 8006fb6:	d5e1      	bpl.n	8006f7c <__swbuf_r+0x2e>
 8006fb8:	2e0a      	cmp	r6, #10
 8006fba:	d1df      	bne.n	8006f7c <__swbuf_r+0x2e>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f7ff ff4e 	bl	8006e60 <_fflush_r>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d0d9      	beq.n	8006f7c <__swbuf_r+0x2e>
 8006fc8:	e7d6      	b.n	8006f78 <__swbuf_r+0x2a>
	...

08006fcc <__swsetup_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4b29      	ldr	r3, [pc, #164]	@ (8007074 <__swsetup_r+0xa8>)
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	b118      	cbz	r0, 8006fe0 <__swsetup_r+0x14>
 8006fd8:	6a03      	ldr	r3, [r0, #32]
 8006fda:	b90b      	cbnz	r3, 8006fe0 <__swsetup_r+0x14>
 8006fdc:	f7ff fad0 	bl	8006580 <__sinit>
 8006fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe4:	0719      	lsls	r1, r3, #28
 8006fe6:	d422      	bmi.n	800702e <__swsetup_r+0x62>
 8006fe8:	06da      	lsls	r2, r3, #27
 8006fea:	d407      	bmi.n	8006ffc <__swsetup_r+0x30>
 8006fec:	2209      	movs	r2, #9
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ffa:	e033      	b.n	8007064 <__swsetup_r+0x98>
 8006ffc:	0758      	lsls	r0, r3, #29
 8006ffe:	d512      	bpl.n	8007026 <__swsetup_r+0x5a>
 8007000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007002:	b141      	cbz	r1, 8007016 <__swsetup_r+0x4a>
 8007004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007008:	4299      	cmp	r1, r3
 800700a:	d002      	beq.n	8007012 <__swsetup_r+0x46>
 800700c:	4628      	mov	r0, r5
 800700e:	f000 f90d 	bl	800722c <_free_r>
 8007012:	2300      	movs	r3, #0
 8007014:	6363      	str	r3, [r4, #52]	@ 0x34
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	2300      	movs	r3, #0
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f043 0308 	orr.w	r3, r3, #8
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	b94b      	cbnz	r3, 8007046 <__swsetup_r+0x7a>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800703c:	d003      	beq.n	8007046 <__swsetup_r+0x7a>
 800703e:	4621      	mov	r1, r4
 8007040:	4628      	mov	r0, r5
 8007042:	f000 f83f 	bl	80070c4 <__smakebuf_r>
 8007046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704a:	f013 0201 	ands.w	r2, r3, #1
 800704e:	d00a      	beq.n	8007066 <__swsetup_r+0x9a>
 8007050:	2200      	movs	r2, #0
 8007052:	60a2      	str	r2, [r4, #8]
 8007054:	6962      	ldr	r2, [r4, #20]
 8007056:	4252      	negs	r2, r2
 8007058:	61a2      	str	r2, [r4, #24]
 800705a:	6922      	ldr	r2, [r4, #16]
 800705c:	b942      	cbnz	r2, 8007070 <__swsetup_r+0xa4>
 800705e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007062:	d1c5      	bne.n	8006ff0 <__swsetup_r+0x24>
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	0799      	lsls	r1, r3, #30
 8007068:	bf58      	it	pl
 800706a:	6962      	ldrpl	r2, [r4, #20]
 800706c:	60a2      	str	r2, [r4, #8]
 800706e:	e7f4      	b.n	800705a <__swsetup_r+0x8e>
 8007070:	2000      	movs	r0, #0
 8007072:	e7f7      	b.n	8007064 <__swsetup_r+0x98>
 8007074:	20000018 	.word	0x20000018

08007078 <__swhatbuf_r>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	460c      	mov	r4, r1
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	2900      	cmp	r1, #0
 8007082:	b096      	sub	sp, #88	@ 0x58
 8007084:	4615      	mov	r5, r2
 8007086:	461e      	mov	r6, r3
 8007088:	da0d      	bge.n	80070a6 <__swhatbuf_r+0x2e>
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007090:	f04f 0100 	mov.w	r1, #0
 8007094:	bf14      	ite	ne
 8007096:	2340      	movne	r3, #64	@ 0x40
 8007098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800709c:	2000      	movs	r0, #0
 800709e:	6031      	str	r1, [r6, #0]
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	b016      	add	sp, #88	@ 0x58
 80070a4:	bd70      	pop	{r4, r5, r6, pc}
 80070a6:	466a      	mov	r2, sp
 80070a8:	f000 f8ae 	bl	8007208 <_fstat_r>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	dbec      	blt.n	800708a <__swhatbuf_r+0x12>
 80070b0:	9901      	ldr	r1, [sp, #4]
 80070b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070ba:	4259      	negs	r1, r3
 80070bc:	4159      	adcs	r1, r3
 80070be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070c2:	e7eb      	b.n	800709c <__swhatbuf_r+0x24>

080070c4 <__smakebuf_r>:
 80070c4:	898b      	ldrh	r3, [r1, #12]
 80070c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c8:	079d      	lsls	r5, r3, #30
 80070ca:	4606      	mov	r6, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	d507      	bpl.n	80070e0 <__smakebuf_r+0x1c>
 80070d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	6123      	str	r3, [r4, #16]
 80070d8:	2301      	movs	r3, #1
 80070da:	6163      	str	r3, [r4, #20]
 80070dc:	b003      	add	sp, #12
 80070de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e0:	ab01      	add	r3, sp, #4
 80070e2:	466a      	mov	r2, sp
 80070e4:	f7ff ffc8 	bl	8007078 <__swhatbuf_r>
 80070e8:	9f00      	ldr	r7, [sp, #0]
 80070ea:	4605      	mov	r5, r0
 80070ec:	4639      	mov	r1, r7
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff fc26 	bl	8006940 <_malloc_r>
 80070f4:	b948      	cbnz	r0, 800710a <__smakebuf_r+0x46>
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	059a      	lsls	r2, r3, #22
 80070fc:	d4ee      	bmi.n	80070dc <__smakebuf_r+0x18>
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	f043 0302 	orr.w	r3, r3, #2
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	e7e2      	b.n	80070d0 <__smakebuf_r+0xc>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	6020      	str	r0, [r4, #0]
 800710e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800711a:	b15b      	cbz	r3, 8007134 <__smakebuf_r+0x70>
 800711c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007120:	4630      	mov	r0, r6
 8007122:	f000 f80b 	bl	800713c <_isatty_r>
 8007126:	b128      	cbz	r0, 8007134 <__smakebuf_r+0x70>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	431d      	orrs	r5, r3
 8007138:	81a5      	strh	r5, [r4, #12]
 800713a:	e7cf      	b.n	80070dc <__smakebuf_r+0x18>

0800713c <_isatty_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d06      	ldr	r5, [pc, #24]	@ (8007158 <_isatty_r+0x1c>)
 8007140:	2300      	movs	r3, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	602b      	str	r3, [r5, #0]
 8007148:	f7fa fdbc 	bl	8001cc4 <_isatty>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_isatty_r+0x1a>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_isatty_r+0x1a>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	200004e0 	.word	0x200004e0

0800715c <_lseek_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	@ (800717c <_lseek_r+0x20>)
 8007160:	4604      	mov	r4, r0
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa fdb5 	bl	8001cda <_lseek>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_lseek_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_lseek_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	200004e0 	.word	0x200004e0

08007180 <_read_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d07      	ldr	r5, [pc, #28]	@ (80071a0 <_read_r+0x20>)
 8007184:	4604      	mov	r4, r0
 8007186:	4608      	mov	r0, r1
 8007188:	4611      	mov	r1, r2
 800718a:	2200      	movs	r2, #0
 800718c:	602a      	str	r2, [r5, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	f7fa fd43 	bl	8001c1a <_read>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_read_r+0x1e>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b103      	cbz	r3, 800719e <_read_r+0x1e>
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	200004e0 	.word	0x200004e0

080071a4 <_sbrk_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d06      	ldr	r5, [pc, #24]	@ (80071c0 <_sbrk_r+0x1c>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	f7fa fda0 	bl	8001cf4 <_sbrk>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_sbrk_r+0x1a>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_sbrk_r+0x1a>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	200004e0 	.word	0x200004e0

080071c4 <_write_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d07      	ldr	r5, [pc, #28]	@ (80071e4 <_write_r+0x20>)
 80071c8:	4604      	mov	r4, r0
 80071ca:	4608      	mov	r0, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f7fa fd3e 	bl	8001c54 <_write>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_write_r+0x1e>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_write_r+0x1e>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	200004e0 	.word	0x200004e0

080071e8 <_close_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d06      	ldr	r5, [pc, #24]	@ (8007204 <_close_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	f7fa fd4a 	bl	8001c8c <_close>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_close_r+0x1a>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_close_r+0x1a>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200004e0 	.word	0x200004e0

08007208 <_fstat_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	@ (8007228 <_fstat_r+0x20>)
 800720c:	2300      	movs	r3, #0
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	4611      	mov	r1, r2
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	f7fa fd45 	bl	8001ca4 <_fstat>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d102      	bne.n	8007224 <_fstat_r+0x1c>
 800721e:	682b      	ldr	r3, [r5, #0]
 8007220:	b103      	cbz	r3, 8007224 <_fstat_r+0x1c>
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	bf00      	nop
 8007228:	200004e0 	.word	0x200004e0

0800722c <_free_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4605      	mov	r5, r0
 8007230:	2900      	cmp	r1, #0
 8007232:	d041      	beq.n	80072b8 <_free_r+0x8c>
 8007234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007238:	1f0c      	subs	r4, r1, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfb8      	it	lt
 800723e:	18e4      	addlt	r4, r4, r3
 8007240:	f7ff fe36 	bl	8006eb0 <__malloc_lock>
 8007244:	4a1d      	ldr	r2, [pc, #116]	@ (80072bc <_free_r+0x90>)
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	b933      	cbnz	r3, 8007258 <_free_r+0x2c>
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	6014      	str	r4, [r2, #0]
 800724e:	4628      	mov	r0, r5
 8007250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007254:	f7ff be32 	b.w	8006ebc <__malloc_unlock>
 8007258:	42a3      	cmp	r3, r4
 800725a:	d908      	bls.n	800726e <_free_r+0x42>
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	1821      	adds	r1, r4, r0
 8007260:	428b      	cmp	r3, r1
 8007262:	bf01      	itttt	eq
 8007264:	6819      	ldreq	r1, [r3, #0]
 8007266:	685b      	ldreq	r3, [r3, #4]
 8007268:	1809      	addeq	r1, r1, r0
 800726a:	6021      	streq	r1, [r4, #0]
 800726c:	e7ed      	b.n	800724a <_free_r+0x1e>
 800726e:	461a      	mov	r2, r3
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	b10b      	cbz	r3, 8007278 <_free_r+0x4c>
 8007274:	42a3      	cmp	r3, r4
 8007276:	d9fa      	bls.n	800726e <_free_r+0x42>
 8007278:	6811      	ldr	r1, [r2, #0]
 800727a:	1850      	adds	r0, r2, r1
 800727c:	42a0      	cmp	r0, r4
 800727e:	d10b      	bne.n	8007298 <_free_r+0x6c>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	4401      	add	r1, r0
 8007284:	1850      	adds	r0, r2, r1
 8007286:	4283      	cmp	r3, r0
 8007288:	6011      	str	r1, [r2, #0]
 800728a:	d1e0      	bne.n	800724e <_free_r+0x22>
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	6053      	str	r3, [r2, #4]
 8007292:	4408      	add	r0, r1
 8007294:	6010      	str	r0, [r2, #0]
 8007296:	e7da      	b.n	800724e <_free_r+0x22>
 8007298:	d902      	bls.n	80072a0 <_free_r+0x74>
 800729a:	230c      	movs	r3, #12
 800729c:	602b      	str	r3, [r5, #0]
 800729e:	e7d6      	b.n	800724e <_free_r+0x22>
 80072a0:	6820      	ldr	r0, [r4, #0]
 80072a2:	1821      	adds	r1, r4, r0
 80072a4:	428b      	cmp	r3, r1
 80072a6:	bf04      	itt	eq
 80072a8:	6819      	ldreq	r1, [r3, #0]
 80072aa:	685b      	ldreq	r3, [r3, #4]
 80072ac:	6063      	str	r3, [r4, #4]
 80072ae:	bf04      	itt	eq
 80072b0:	1809      	addeq	r1, r1, r0
 80072b2:	6021      	streq	r1, [r4, #0]
 80072b4:	6054      	str	r4, [r2, #4]
 80072b6:	e7ca      	b.n	800724e <_free_r+0x22>
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
 80072ba:	bf00      	nop
 80072bc:	200004dc 	.word	0x200004dc

080072c0 <_init>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr

080072cc <_fini>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	bf00      	nop
 80072d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d2:	bc08      	pop	{r3}
 80072d4:	469e      	mov	lr, r3
 80072d6:	4770      	bx	lr
